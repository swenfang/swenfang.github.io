<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShenWenFang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swenfang.github.io/"/>
  <updated>2019-03-25T14:22:16.776Z</updated>
  <id>http://swenfang.github.io/</id>
  
  <author>
    <name>ShenWenFang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序原理和实现</title>
    <link href="http://swenfang.github.io/2019/03/23/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://swenfang.github.io/2019/03/23/软件技术/快速排序原理和实现/</id>
    <published>2019-03-23T15:41:29.337Z</published>
    <updated>2019-03-25T14:22:16.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序原理和实现"><a href="#快速排序原理和实现" class="headerlink" title="快速排序原理和实现"></a>快速排序原理和实现</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>高快省的排序算法，既不浪费空间也可以快一点的排序算法。<br>假设我们现在对“6  1  2 7  9  3  4  5 10  8”这个10个数进行排序。首先在这个序列中随便找一个数作为基准数。为了方便，就让第一个数6作为基准数吧。接下来，需要将这个序列中所有比基准数大的数放在6的右边，比基准数小的数放在6的左边，类似下面这种排列：3  1  2 5  4  6  9 7  10  8</p><p>在初始状态下，数字6在序列的第1位。我们的目标是将6挪到序列中间的某个位置，假设这个位置是k。现在就需要寻找这个k，并且以第k位为分界点，左边的数都小于等于6，右边的数都大于等于6。</p><p>方法其实很简单：分别从初始序列“6  1  2 7  9  3  4  5 10  8”两端开始“探测”。先从右往左找一个小于6的数，再从左往右找一个大于6的数，然后交换他们。这里可以用两个变量i和j，分别指向序列最左边和最右边。我们为这两个变量起个好听的名字“哨兵i”和“哨兵j”。刚开始的时候让哨兵i指向序列的最左边（即i=1），指向数字6。让哨兵j指向序列的最右边（即=10），指向数字。</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104101-714647.jpg" alt=""></p><p>首先哨兵j开始出动。因为此处设置的基准数是最左边的数，所以需要让哨兵j先出动，这一点非常重要（请自己想一想为什么）。哨兵j一步一步地向左挪动（即j–），直到找到一个小于6的数停下来。接下来哨兵i再一步一步向右挪动（即i++），直到找到一个数大于6的数停下来。最后哨兵j停在了数字5面前，哨兵i停在了数字7面前。</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104119-335436.jpg" alt=""></p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104136-475270.jpg" alt=""></p><p>现在交换哨兵i和哨兵j所指向的元素的值。交换之后的序列如下：<br>6  1  2  5  9 3  4  7  10  8</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104036-743762.jpg" alt=""></p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104209-151834.jpg" alt=""></p><p>到此，第一次交换结束。接下来开始哨兵j继续向左挪动（再友情提醒，每次必须是哨兵j先出发）。他发现了4（比基准数6要小，满足要求）之后停了下来。哨兵i也继续向右挪动的，他发现了9（比基准数6要大，满足要求）之后停了下来。此时再次进行交换，交换之后的序列如下：<br>6  1  2 5  4  3  9  7 10  8</p><p>第二次交换结束，“探测”继续。哨兵j继续向左挪动，他发现了3（比基准数6要小，满足要求）之后又停了下来。哨兵i继续向右移动，糟啦！此时哨兵i和哨兵j相遇了，哨兵i和哨兵j都走到3面前。说明此时“探测”结束。我们将基准数6和3进行交换。交换之后的序列如下：<br>3  1 2  5  4  6  9 7  10  8</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104242-347520.jpg" alt=""></p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104303-766599.jpg" alt=""></p><p>到此第一轮“探测”真正结束。此时以基准数6为分界点，6左边的数都小于等于6，6右边的数都大于等于6。回顾一下刚才的过程，其实哨兵j的使命就是要找小于基准数的数，而哨兵i的使命就是要找大于基准数的数，直到i和j碰头为止。<br>OK，解释完毕。现在基准数6已经归位，它正好处在序列的第6位。此时我们已经将原来的序列，以6为分界点拆分成了两个序列，左边的序列是“3  1 2  5  4”，右边的序列是“9  7  10  8”。接下来还需要分别处理这两个序列。因为6左边和右边的序列目前都还是很混乱的。不过不要紧，我们已经掌握了方法，接下来只要模拟刚才的方法分别处理6左边和右边的序列即可。现在先来处理6左边的序列现吧。</p><p> 左边的序列是“3  1  2 5  4”。请将这个序列以3为基准数进行调整，使得3左边的数都小于等于3，3右边的数都大于等于3。好了开始动笔吧  如果你模拟的没有错，调整完毕之后的序列的顺序应该是：</p><p>2  1  3  5  4  OK，现在3已经归位。接下来需要处理3左边的序列“2 1”和右边的序列“5 4”。对序列“2 1”以2为基准数进行调整，处理完毕之后的序列为“1 2”，到此2已经归位。序列“1”只有一个数，也不需要进行任何处理。至此我们对序列“2 1”已全部处理完毕，得到序列是“1 2”。序列“5 4”的处理也仿照此方法，最后得到的序列如下：  1  2  3 4  5  6 9  7  10  8  对于序列“9  7  10  8”也模拟刚才的过程，直到不可拆分出新的子序列为止。最终将会得到这样的序列，如下  1  2  3 4  5  6  7  8 9  10  到此，排序完全结束。细心的同学可能已经发现，快速排序的每一轮处理其实就是将这一轮的基准数归位，直到所有的数都归位为止，排序就结束了。下面上个霸气的图来描述下整个算法的处理过程。</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190322104349-934078.jpg" alt=""></p><p>这是为什么呢？快速排序之所比较快，因为相比冒泡排序，每次交换是跳跃式的。每次排序的时候设置一个基准点，将小于等于基准点的数全部放到基准点的左边，将大于等于基准点的数全部放到基准点的右边。这样在每次交换的时候就不会像冒泡排序一样每次只能在相邻的数之间进行交换，交换的距离就大的多了。因此总的比较和交换次数就少了，速度自然就提高了。当然在最坏的情况下，仍可能是相邻的两个数进行了交换。因此快速排序的最差时间复杂度和冒泡排序是一样的都是O(N2)，它的平均时间复杂度为O(NlogN)。其实快速排序是基于一种叫做“二分”的思想。我们后面还会遇到“二分”思想，到时候再聊。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">8</span>&#125;;</div><div class="line">        quickSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</div><div class="line">        System.out.println(Arrays.toString(arr));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 划分</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">        <span class="comment">// 用 arr[low] 作为枢纽轴元素 pivot 进行划分</span></div><div class="line">        <span class="comment">// 使得 arr[low,...,i-1] 均不大于 pivot，data[i+1,...,high]均小于 pivot</span></div><div class="line">        <span class="keyword">int</span> i,j; <span class="keyword">int</span> pivot;</div><div class="line">        pivot = arr[low]; i = low;j = high;</div><div class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</div><div class="line">            <span class="comment">/*从数组的两端交替地向中间扫描*/</span></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j] &gt;= pivot)j--;</div><div class="line">            arr[i] = arr[j];<span class="comment">/*比枢轴元素小者往前移动*/</span></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= pivot)i++;</div><div class="line">            arr[j] = arr[i];<span class="comment">/*比枢轴元素大者往后移动*/</span></div><div class="line">        &#125;</div><div class="line">        arr[i] = pivot;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对整型数组进行非递减排序</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)&#123;</div><div class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</div><div class="line">            <span class="keyword">int</span> loc = partition(arr,low,high);<span class="comment">/*进行划分*/</span></div><div class="line">            quickSort(arr,low,loc-<span class="number">1</span>);<span class="comment">/*对前半区进行快速排序*/</span></div><div class="line">            quickSort(arr,loc+<span class="number">1</span>,high);<span class="comment">/*对后半区进行快速排序*/</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速排序原理和实现&quot;&gt;&lt;a href=&quot;#快速排序原理和实现&quot; class=&quot;headerlink&quot; title=&quot;快速排序原理和实现&quot;&gt;&lt;/a&gt;快速排序原理和实现&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="软件技术" scheme="http://swenfang.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="软件技术" scheme="http://swenfang.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Future 任务机制和 FutureTask</title>
    <link href="http://swenfang.github.io/2019/03/23/Future%20%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%20FutureTask/"/>
    <id>http://swenfang.github.io/2019/03/23/Future 任务机制和 FutureTask/</id>
    <published>2019-03-23T15:31:37.276Z</published>
    <updated>2019-03-23T15:33:12.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Future-任务机制和-FutureTask"><a href="#Future-任务机制和-FutureTask" class="headerlink" title="Future 任务机制和 FutureTask"></a>Future 任务机制和 FutureTask</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在完成功能的时候，使用到 Future 在这里记录一下，自己所了解的到知识，希望可以帮到需要的朋友。<br><a id="more"></a></p><h2 id="Future-类"><a href="#Future-类" class="headerlink" title="Future 类"></a>Future 类</h2><p>Future 类就是对于具体的 Runnable 或者 Callable 任务的执行结果进行取消、查询是否已经完成、获取结果。必要时可以通过 get 方法获取执行结果，该方法会阻塞直到任务返回结果。Future 位于 java.util.concurren 包下，它也是一个接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 用来取消任务,如果取消任务成功，则返回 true，失败则返回 false 。参数 mayInterrypIfRunning      </div><div class="line">     * 表示是否允许取消正在执行却没有执行完毕的任务，如果设置 true ，则表示可以取消正在执行中的任务 。</div><div class="line">     * 如果任务已经完成，则无论 mayInterruptIfRunning 为 ture 还是 false ，都返回 false，即如果</div><div class="line">     * 取消已经完成的任务会返回 false ；如果任务正在执行，若 mayInterrupIfRunning 设置为 true 则</div><div class="line">     * 返回 true ，设置为 false 则返回 false；如果任务还没有执行，都返回false。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 表示任务是否已经完成，若任务完成则返回 true</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回。</div><div class="line">     */</div><div class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException,ExecutionException</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 用来获取执行结果，如果在指定时间内，还没有获取到返回结果，就直接返回 null</div><div class="line">     */</div><div class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout,TimeUnit unit)</span> </span></div><div class="line">        <span class="keyword">throws</span> InterruptedException,ExecutionException,TimeoutException;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也就是说 Future 提供了三种功能：</p><ul><li>判断任务是否完成。</li><li>能够中断任务。</li><li>能够获取任务执行结果。</li></ul><h2 id="FutureTask-类"><a href="#FutureTask-类" class="headerlink" title="FutureTask 类"></a>FutureTask 类</h2><p>因为 Future 只是一个接口，所以无法直接用来创建对象使用的，因此就有了 FutureTask 。</p><p>FutureTask 目前是 Future 接口的一个唯一实现类：</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190128111337-690350.jpg" alt=""></p><p> FutureTask 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>RunableFuture 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看出 RunnableFuture 继承了 Runnable 和 Future 接口，而 FutureTask  实现了 RunnableFuture 接口。所以 FutureTask 既可以作为 Runnable 被线程执行，又可以作为 Future 得到 Callable 的返回值。</p><p>FutureTask 提供了2个构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个 FutureTask ，一旦运行就执行给定的 Callable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">this</span>.callable = callable;</div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 创建一个 FutureTask ，一旦运行就执行给定的 Runnable ，并安排成功时 get 返回给定的结果。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在实际工作中，可能需要统计各种类型的报表呈现结果，可能一个大的报表需要依赖很多很小的模块的运算结果，一个线程做可能比较慢，就可拆分成 N 多个小线程，然后将结果合并起来作为大的报表呈现结果。Fork/Join 就是基于 Future 实现的</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Future-任务机制和-FutureTask&quot;&gt;&lt;a href=&quot;#Future-任务机制和-FutureTask&quot; class=&quot;headerlink&quot; title=&quot;Future 任务机制和 FutureTask&quot;&gt;&lt;/a&gt;Future 任务机制和 FutureTask&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天在完成功能的时候，使用到 Future 在这里记录一下，自己所了解的到知识，希望可以帮到需要的朋友。&lt;br&gt;
    
    </summary>
    
      <category term="多线程" scheme="http://swenfang.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://swenfang.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>lucene搜索之拼写检查和相似度查询提示（spellcheck）</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/9%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5%E5%92%8C%E7%9B%B8%E4%BC%BC%E5%BA%A6%E6%9F%A5%E8%AF%A2%E6%8F%90%E7%A4%BA%EF%BC%88spellcheck%EF%BC%89/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/9、lucene搜索之拼写检查和相似度查询提示（spellcheck）/</id>
    <published>2019-03-16T01:53:14.279Z</published>
    <updated>2019-03-16T03:33:21.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）"><a href="#lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）" class="headerlink" title="lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）"></a>lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）</h1><h2 id="suggest应用场景"><a href="#suggest应用场景" class="headerlink" title="suggest应用场景"></a>suggest应用场景</h2><p>用户的输入行为是不确定的，而我们在写程序的时候总是想让用户按照指定的内容或指定格式的内容进行搜索，这里就要进行人工干预用户输入的搜索条件了；我们在用百度谷歌等搜索引擎的时候经常会看到按键放下的时候直接会提示用户是否想搜索某些相关的内容，恰好lucene在开发的时候想到了这一点，lucene提供的suggest包正是用来解决上述问题的。</p><a id="more"></a><p>suggest包联想词相关介绍<br>suggest包提供了lucene的自动补全或者拼写检查的支持；</p><p>拼写检查相关的类在org.apache.lucene.search.spell包下；</p><p>联想相关的在org.apache.lucene.search.suggest包下；</p><p>基于联想词分词相关的类在org.apache.lucene.search.suggest.analyzing包下；</p><h2 id="拼写检查原理"><a href="#拼写检查原理" class="headerlink" title="拼写检查原理"></a>拼写检查原理</h2><p>Lucene的拼写检查由org.apache.lucene.search.spell.SpellChecker类提供支持；<br>SpellChecker设置了默认精度0.5，如果我们需要细粒度的支持可以通过调用setAccuracy(float accuracy)来设定；<br>spellChecker会将外部来源的词进行索引；<br>这些来源包括：</p><pre><code>DocumentDictionary查询document中的field对应的值；FileDictionary基于一个文本文件的Directionary,每行一项，词组之间以&quot;\t&quot; TAB分隔符进行，每项中不能含有两个以上的分隔符；HighFrequencyDictionary从原有的索引文件中读取某个term的值，并按照出现次数检查；LuceneDictionary也是从原有索引文件中读取某个term的值，但是不检查出现次数；PlainTextDictionary从文本中读取内容，按行读取，没有分隔符；</code></pre><p> 其索引的原理如下：</p><p>对索引过程加syschronized同步；<br>检查Spellchecker是否已经关闭，如果关闭，抛出异常，提示内容为：Spellchecker has been closed；<br>对外部来源的索引进行遍历，统计被遍历的词的长度，如果长度小于三，忽略该词，反之构建document对象并索引到本地文件，创建索引的时候会对每个单词进行详细拆分（对应addGram方法），其执行过程如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">- Indexes the data from the given &#123;<span class="doctag">@link</span> Dictionary&#125;.</div><div class="line">- <span class="doctag">@param</span> dict Dictionary to index</div><div class="line">- <span class="doctag">@param</span> config &#123;<span class="doctag">@link</span> IndexWriterConfig&#125; to use</div><div class="line">- <span class="doctag">@param</span> fullMerge whether or not the spellcheck index should be fully merged</div><div class="line">- <span class="doctag">@throws</span> AlreadyClosedException if the Spellchecker is already closed</div><div class="line">- <span class="doctag">@throws</span> IOException If there is a low-level I/O error.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">indexDictionary</span><span class="params">(Dictionary dict, IndexWriterConfig config, <span class="keyword">boolean</span> fullMerge)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="keyword">synchronized</span> (modifyCurrentIndexLock) &#123;</div><div class="line">  ensureOpen();</div><div class="line">  <span class="keyword">final</span> Directory dir = <span class="keyword">this</span>.spellIndex;</div><div class="line">  <span class="keyword">final</span> IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, config);</div><div class="line">  IndexSearcher indexSearcher = obtainSearcher();</div><div class="line">  <span class="keyword">final</span> List&lt;TermsEnum&gt; termsEnums = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> </div><div class="line">  <span class="keyword">final</span> IndexReader reader = searcher.getIndexReader();</div><div class="line">  <span class="keyword">if</span> (reader.maxDoc() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> LeafReaderContext ctx : reader.leaves()) &#123;</div><div class="line">      Terms terms = ctx.reader().terms(F_WORD);</div><div class="line">      <span class="keyword">if</span> (terms != <span class="keyword">null</span>)</div><div class="line">        termsEnums.add(terms.iterator(<span class="keyword">null</span>));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">boolean</span> isEmpty = termsEnums.isEmpty();</div><div class="line"> </div><div class="line">  <span class="keyword">try</span> &#123; </div><div class="line">    BytesRefIterator iter = dict.getEntryIterator();</div><div class="line">    BytesRef currentTerm;</div><div class="line">    </div><div class="line">    terms: <span class="keyword">while</span> ((currentTerm = iter.next()) != <span class="keyword">null</span>) &#123;</div><div class="line">  </div><div class="line">      String word = currentTerm.utf8ToString();</div><div class="line">      <span class="keyword">int</span> len = word.length();</div><div class="line">      <span class="keyword">if</span> (len &lt; <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>; <span class="comment">// too short we bail but "too long" is fine...</span></div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span> (!isEmpty) &#123;</div><div class="line">        <span class="keyword">for</span> (TermsEnum te : termsEnums) &#123;</div><div class="line">          <span class="keyword">if</span> (te.seekExact(currentTerm)) &#123;</div><div class="line">            <span class="keyword">continue</span> terms;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="comment">// ok index the word</span></div><div class="line">      Document doc = createDocument(word, getMin(len), getMax(len));</div><div class="line">      writer.addDocument(doc);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    releaseSearcher(indexSearcher);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (fullMerge) &#123;</div><div class="line">    writer.forceMerge(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// close writer</span></div><div class="line">  writer.close();</div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> this isn't that great, maybe in the future SpellChecker should take</span></div><div class="line">  <span class="comment">// IWC in its ctor / keep its writer open?</span></div><div class="line">  </div><div class="line">  <span class="comment">// also re-open the spell index to see our own changes when the next suggestion</span></div><div class="line">  <span class="comment">// is fetched:</span></div><div class="line">  swapSearcher(dir);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  对词语进行遍历拆分的方法为addGram,其实现为：</p><p> <img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316104850-311058.jpg" alt=""></p><p>查看代码可知，联想词的索引不仅关注每个词的起始位置，也关注其倒数的位置；</p><p>联想词查询的时候，先判断grams里边是否包含有待查询的词拆分后的内容，如果有放到结果SuggestWordQueue中，最终结果为遍历SuggestWordQueue得来的String[],其代码实现如下：<br>​     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String[] suggestSimilar(String word, <span class="keyword">int</span> numSug, IndexReader ir,String field, SuggestMode suggestMode, <span class="keyword">float</span> accuracy) <span class="keyword">throws</span> IOException &#123;</div><div class="line">  <span class="comment">// obtainSearcher calls ensureOpen</span></div><div class="line">  <span class="keyword">final</span> IndexSearcher indexSearcher = obtainSearcher();</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">   <span class="keyword">if</span> (ir == <span class="keyword">null</span> || field == <span class="keyword">null</span>) &#123;</div><div class="line">   suggestMode = SuggestMode.SUGGEST_ALWAYS;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (suggestMode == SuggestMode.SUGGEST_ALWAYS) &#123;</div><div class="line">     ir = <span class="keyword">null</span>;</div><div class="line">     field = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> lengthWord = word.length();</div><div class="line"> <span class="keyword">final</span> <span class="keyword">int</span> freq = (ir != <span class="keyword">null</span> &amp;&amp; field != <span class="keyword">null</span>) ? ir.docFreq(<span class="keyword">new</span> Term(field, word)) : <span class="number">0</span>;</div><div class="line"> <span class="keyword">final</span> <span class="keyword">int</span> goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : <span class="number">0</span>;</div><div class="line"> <span class="comment">// if the word exists in the real index and we don't care for word frequency, return the word itself</span></div><div class="line"> <span class="keyword">if</span> (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX &amp;&amp; freq &gt; <span class="number">0</span>) &#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; word &#125;;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"> String[] grams;</div><div class="line"> String key;</div><div class="line"></div><div class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> ng = getMin(lengthWord); ng &lt;= getMax(lengthWord); ng++) &#123;</div><div class="line"></div><div class="line">   key = <span class="string">"gram"</span> + ng; <span class="comment">// form key</span></div><div class="line"></div><div class="line">   grams = formGrams(word, ng); <span class="comment">// form word into ngrams (allow dups too)</span></div><div class="line"></div><div class="line">   <span class="keyword">if</span> (grams.length == <span class="number">0</span>) &#123;</div><div class="line">     <span class="keyword">continue</span>; <span class="comment">// hmm</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (bStart &gt; <span class="number">0</span>) &#123; <span class="comment">// should we boost prefixes?</span></div><div class="line">     add(query, <span class="string">"start"</span> + ng, grams[<span class="number">0</span>], bStart); <span class="comment">// matches start of word</span></div><div class="line"></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (bEnd &gt; <span class="number">0</span>) &#123; <span class="comment">// should we boost suffixes</span></div><div class="line">     add(query, <span class="string">"end"</span> + ng, grams[grams.length - <span class="number">1</span>], bEnd); <span class="comment">// matches end of word</span></div><div class="line"></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grams.length; i++) &#123;</div><div class="line">     add(query, key, grams[i]);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">int</span> maxHits = <span class="number">10</span> * numSug;</div><div class="line"> <span class="comment">//    System.out.println("Q: " + query);</span></div><div class="line"> ScoreDoc[] hits = indexSearcher.search(query, maxHits).scoreDocs;</div><div class="line"> <span class="comment">//    System.out.println("HITS: " + hits.length());</span></div><div class="line"> SuggestWordQueue sugQueue = <span class="keyword">new</span> SuggestWordQueue(numSug, comparator);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// go thru more than 'maxr' matches in case the distance filter triggers</span></div><div class="line">  <span class="keyword">int</span> stop = Math.min(hits.length, maxHits);</div><div class="line">  SuggestWord sugWord = <span class="keyword">new</span> SuggestWord();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stop; i++) &#123;</div><div class="line"> </div><div class="line">    sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); <span class="comment">// get orig word</span></div><div class="line"> </div><div class="line">    <span class="comment">// don't suggest a word for itself, that would be silly</span></div><div class="line">    <span class="keyword">if</span> (sugWord.string.equals(word)) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// edit distance</span></div><div class="line">    sugWord.score = sd.getDistance(word,sugWord.string);</div><div class="line">    <span class="keyword">if</span> (sugWord.score &lt; accuracy) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (ir != <span class="keyword">null</span> &amp;&amp; field != <span class="keyword">null</span>) &#123; <span class="comment">// use the user index</span></div><div class="line">      sugWord.freq = ir.docFreq(<span class="keyword">new</span> Term(field, sugWord.string)); <span class="comment">// freq in the index</span></div><div class="line">      <span class="comment">// don't suggest a word that is not present in the field</span></div><div class="line">      <span class="keyword">if</span> ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR &amp;&amp; goalFreq &gt; sugWord.freq) || sugWord.freq &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    sugQueue.insertWithOverflow(sugWord);</div><div class="line">    <span class="keyword">if</span> (sugQueue.size() == numSug) &#123;</div><div class="line">      <span class="comment">// if queue full, maintain the minScore score</span></div><div class="line">      accuracy = sugQueue.top().score;</div><div class="line">    &#125;</div><div class="line">    sugWord = <span class="keyword">new</span> SuggestWord();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// convert to array string</span></div><div class="line">  String[] list = <span class="keyword">new</span> String[sugQueue.size()];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = sugQueue.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    list[i] = sugQueue.pop().string;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> list;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  releaseSearcher(indexSearcher);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><p>以下是我根据FileDirectory相关描述编写的一个测试程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.spell.SpellChecker;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.suggest.FileDictionary;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuggestUtil</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Directory spellIndexDirectory;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">spellIndexDirectory = FSDirectory.open(Paths.get(<span class="string">"suggest"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line"></div><div class="line">SpellChecker spellchecker = <span class="keyword">new</span> SpellChecker(spellIndexDirectory );</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer(<span class="keyword">true</span>);</div><div class="line">IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">config.setOpenMode(OpenMode.CREATE_OR_APPEND);</div><div class="line">spellchecker.setAccuracy(<span class="number">0f</span>);</div><div class="line"><span class="comment">//HighFrequencyDictionary dire = new HighFrequencyDictionary(reader, field, thresh)</span></div><div class="line">spellchecker.indexDictionary(<span class="keyword">new</span> FileDictionary(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"D:\\hadoop\\lucene_suggest\\src\\suggest.txt"</span>))),config,<span class="keyword">false</span>);</div><div class="line">String[] similars = spellchecker.suggestSimilar(<span class="string">"中国"</span>, <span class="number">10</span>);</div><div class="line"><span class="keyword">for</span> (String similar : similars) &#123;</div><div class="line">System.out.println(similar);</div><div class="line">&#125;</div><div class="line">spellIndexDirectory.close();</div><div class="line">spellchecker.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中，我用的suggest.txt内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">中国人民100</div><div class="line">奔驰3101</div><div class="line">奔驰中国102</div><div class="line">奔驰S级103</div><div class="line">奔驰A级104</div><div class="line">奔驰C级105</div></pre></td></tr></table></figure><p>测试结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">中国人民</div><div class="line">奔驰中国</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）&quot;&gt;&lt;a href=&quot;#lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）&quot; class=&quot;headerlink&quot; title=&quot;lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）&quot;&gt;&lt;/a&gt;lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）&lt;/h1&gt;&lt;h2 id=&quot;suggest应用场景&quot;&gt;&lt;a href=&quot;#suggest应用场景&quot; class=&quot;headerlink&quot; title=&quot;suggest应用场景&quot;&gt;&lt;/a&gt;suggest应用场景&lt;/h2&gt;&lt;p&gt;用户的输入行为是不确定的，而我们在写程序的时候总是想让用户按照指定的内容或指定格式的内容进行搜索，这里就要进行人工干预用户输入的搜索条件了；我们在用百度谷歌等搜索引擎的时候经常会看到按键放下的时候直接会提示用户是否想搜索某些相关的内容，恰好lucene在开发的时候想到了这一点，lucene提供的suggest包正是用来解决上述问题的。&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene搜索之索引的查询原理和查询工具类（支持分页）示例</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/8%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88%E6%94%AF%E6%8C%81%E5%88%86%E9%A1%B5%EF%BC%89%E7%A4%BA%E4%BE%8B/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/8、lucene搜索之索引的查询原理和查询工具类（支持分页）示例/</id>
    <published>2019-03-16T01:53:14.279Z</published>
    <updated>2019-03-16T03:33:14.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例"><a href="#lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例" class="headerlink" title="lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例"></a>lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例</h1><h2 id="IndexSearcher常用方法"><a href="#IndexSearcher常用方法" class="headerlink" title="IndexSearcher常用方法"></a>IndexSearcher常用方法</h2><p>IndexSearcher提供了几个常用的方法：</p><a id="more"></a><ul><li>IndexSearcher.doc(int docID)   获取索引文件中的第n个索引存储的相关字段，返回为Document类型，可以据此读取document中的Field.STORE.YES的字段；</li><li>IndexSearcher.doc(int docID, StoredFieldVisitor fieldVisitor)  获取StoredFieldVisitor指定的字段的document，StoredFieldVisitor定义如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">StoredFieldVisitor visitor = <span class="keyword">new</span> DocumentStoredFieldVisitor(String... fields);</div></pre></td></tr></table></figure><ul><li>IndexSearcher.doc(int docID, Set<string> fieldsToLoad) 此方法同上边的IndexSearcher.doc(int docID, StoredFieldVisitor fieldVisitor) ，其实现如下图</string></li></ul><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316102208-992593.jpg" alt=""></p><ul><li><p>IndexSearcher.count(Query query) 统计符合query条件的document个数</p></li><li><p>IndexSearcher.searchAfter(final ScoreDoc after, Query query, int numHits) 此方法会返回符合query查询条件的且在after之后的numHits条记录；</p><p>其实现原理为：</p><p>先读取当前索引文件的最大数据条数limit，然后判断after是否为空和after对应的document的下标是否超出limit的限制，如果超出的话抛出非法的参数异常；</p><p>设置读取的条数为numHits和limit中最小的（因为有超出最大条数的可能，避免超出限制而造成的异常）</p><p>接下来创建一个CollectorManager类型的对象，该对象定义了要返回的TopDocs的个数，上一页的document的结尾（after）,并且对查询结果进行分析合并</p><p>最后调用search(query,manager)来查询结果</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316104446-227930.jpg" alt=""></p></li><li><p>IndexSearcher.search(Query query, int n) 查询符合query条件的前n个记录</p></li><li>IndexSearcher.search(Query query, Collector results) 查询符合collector的记录，collector定义了分页等信息</li><li>IndexSearcher.search(Query query, int n,Sort sort, boolean doDocScores, boolean doMaxScore) 实现任意排序的查询，同时控制是否计算hit score和max score是否被计算在内，查询前n条符合query条件的document;</li><li><p>IndexSearcher.search(Query query, CollectorManager&lt;C, T&gt; collectorManager) 利用给定的collectorManager获取符合query条件的结果，其执行流程如下：</p><p>先判断是否有ExecutorService执行查询的任务，如果没有executor，IndexSearcher会在单个任务下进行查询操作；</p><p>如果IndexSearcher有executor，则会由每个线程控制一部分索引的读取，而且查询的过程中采用的是future机制，此种方式是边读边往结果集里边追加数据，这种异</p><p>步的处理机制也提升了效率，其执行过程如下：</p></li></ul><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316104636-782439.jpg" alt=""></p><h2 id="编码实践"><a href="#编码实践" class="headerlink" title="编码实践"></a>编码实践</h2><p>我中午的时候写了一个SearchUtil的工具类，里边添加了多目录查询和分页查询的功能，经测试可用，工具类和测试的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search.util;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"> </div><div class="line"><span class="comment">/**lucene索引查询工具类</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line"><span class="comment">/**获取IndexSearcher对象</span></div><div class="line"> * <span class="doctag">@param</span> indexPath</div><div class="line"> * <span class="doctag">@param</span> service</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByParentPath</span><span class="params">(String parentPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">MultiReader reader = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//设置</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">File[] files = <span class="keyword">new</span> File(parentPath).listFiles();</div><div class="line">IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">&#125;</div><div class="line">reader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">/**根据索引路径获取IndexReader</span></div><div class="line"> * <span class="doctag">@param</span> indexPath</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DirectoryReader <span class="title">getIndexReader</span><span class="params">(String indexPath)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line"><span class="keyword">return</span> DirectoryReader.open(FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">&#125;</div><div class="line"><span class="comment">/**根据索引路径获取IndexSearcher</span></div><div class="line"> * <span class="doctag">@param</span> indexPath</div><div class="line"> * <span class="doctag">@param</span> service</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByIndexPath</span><span class="params">(String indexPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">IndexReader reader = getIndexReader(indexPath);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**如果索引目录会有变更用此方法获取新的IndexSearcher这种方式会占用较少的资源</span></div><div class="line"> * <span class="doctag">@param</span> oldSearcher</div><div class="line"> * <span class="doctag">@param</span> service</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherOpenIfChanged</span><span class="params">(IndexSearcher oldSearcher,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">DirectoryReader reader = (DirectoryReader) oldSearcher.getIndexReader();</div><div class="line">DirectoryReader newReader = DirectoryReader.openIfChanged(reader);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(newReader, service);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**多条件查询类似于sql in</span></div><div class="line"> * <span class="doctag">@param</span> querys</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"><span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">query.add(subQuery,Occur.SHOULD);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**多条件查询类似于sql and</span></div><div class="line"> * <span class="doctag">@param</span> querys</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"><span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">query.add(subQuery,Occur.MUST);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**根据IndexSearcher和docID获取默认的document</span></div><div class="line"> * <span class="doctag">@param</span> searcher</div><div class="line"> * <span class="doctag">@param</span> docID</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDefaultFullDocument</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line"><span class="keyword">return</span> searcher.doc(docID);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**根据IndexSearcher和docID</span></div><div class="line"> * <span class="doctag">@param</span> searcher</div><div class="line"> * <span class="doctag">@param</span> docID</div><div class="line"> * <span class="doctag">@param</span> listField</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocumentByListField</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID,Set&lt;String&gt; listField)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line"><span class="keyword">return</span> searcher.doc(docID, listField);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**分页查询</span></div><div class="line"> * <span class="doctag">@param</span> page 当前页数</div><div class="line"> * <span class="doctag">@param</span> perPage 每页显示条数</div><div class="line"> * <span class="doctag">@param</span> searcher searcher查询器</div><div class="line"> * <span class="doctag">@param</span> query 查询条件</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPage</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> perPage,IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">TopDocs result = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">ScoreDoc before = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(page != <span class="number">1</span>)&#123;</div><div class="line">TopDocs docsBefore = searcher.search(query, (page-<span class="number">1</span>)*perPage);</div><div class="line">ScoreDoc[] scoreDocs = docsBefore.scoreDocs;</div><div class="line"><span class="keyword">if</span>(scoreDocs.length &gt; <span class="number">0</span>)&#123;</div><div class="line">before = scoreDocs[scoreDocs.length - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">result = searcher.searchAfter(before, query, perPage);</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocs</span><span class="params">(IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">TopDocs docs = searcher.search(query, getMaxDocId(searcher));</div><div class="line"><span class="keyword">return</span> docs;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**统计document的数量,此方法等同于matchAllDocsQuery查询</span></div><div class="line"> * <span class="doctag">@param</span> searcher</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxDocId</span><span class="params">(IndexSearcher searcher)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> searcher.getIndexReader().maxDoc();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相关测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> com.lucene.search.util.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">ExecutorService service = Executors.newCachedThreadPool();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">IndexSearcher searcher = SearchUtil.getIndexSearcherByParentPath(<span class="string">"index"</span>,service);</div><div class="line">System.out.println(SearchUtil.getMaxDocId(searcher));</div><div class="line">Term term = <span class="keyword">new</span> Term(<span class="string">"content"</span>, <span class="string">"lucene"</span>);</div><div class="line">Query query = <span class="keyword">new</span> TermQuery(term);</div><div class="line">TopDocs docs = SearchUtil.getScoreDocsByPerPage(<span class="number">2</span>, <span class="number">20</span>, searcher, query);</div><div class="line">ScoreDoc[] scoreDocs = docs.scoreDocs;</div><div class="line">System.out.println(<span class="string">"所有的数据总数为："</span>+docs.totalHits);</div><div class="line">System.out.println(<span class="string">"本页查询到的总数为："</span>+scoreDocs.length);</div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</div><div class="line">Document doc = SearchUtil.getDefaultFullDocument(searcher, scoreDoc.doc);</div><div class="line"><span class="comment">//System.out.println(doc);</span></div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"\n\n"</span>);</div><div class="line">TopDocs docsAll = SearchUtil.getScoreDocs(searcher, query);</div><div class="line">Set&lt;String&gt; fieldSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">fieldSet.add(<span class="string">"path"</span>);</div><div class="line">fieldSet.add(<span class="string">"modified"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">20</span> ; i ++) &#123;</div><div class="line">Document doc = SearchUtil.getDocumentByListField(searcher, docsAll.scoreDocs[i].doc,fieldSet);</div><div class="line">System.out.println(doc);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">service.shutdownNow();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p>代码下载请点击<a href="http://download.csdn.net/detail/wuyinggui10000/8703067" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8703165</a>，运行时请先运行IndexTest类进行索引的创建~！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例&quot;&gt;&lt;a href=&quot;#lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例&quot; class=&quot;headerlink&quot; title=&quot;lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例&quot;&gt;&lt;/a&gt;lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例&lt;/h1&gt;&lt;h2 id=&quot;IndexSearcher常用方法&quot;&gt;&lt;a href=&quot;#IndexSearcher常用方法&quot; class=&quot;headerlink&quot; title=&quot;IndexSearcher常用方法&quot;&gt;&lt;/a&gt;IndexSearcher常用方法&lt;/h2&gt;&lt;p&gt;IndexSearcher提供了几个常用的方法：&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene搜索之IndexSearcher构建过程</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/7%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8BIndexSearcher%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/7、lucene搜索之IndexSearcher构建过程/</id>
    <published>2019-03-16T01:53:14.269Z</published>
    <updated>2019-03-16T03:33:05.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（7）—lucene搜索之IndexSearcher构建过程"><a href="#lucene（7）—lucene搜索之IndexSearcher构建过程" class="headerlink" title="lucene（7）—lucene搜索之IndexSearcher构建过程"></a>lucene（7）—lucene搜索之IndexSearcher构建过程</h1><h2 id="IndexSearcher"><a href="#IndexSearcher" class="headerlink" title="IndexSearcher"></a>IndexSearcher</h2><p>搜索引擎的构建分为索引内容和查询索引两个大方面，这里要介绍的是lucene索引查询器即IndexSearcher的构建过程；</p><a id="more"></a><p>首先了解下IndexSearcher：</p><ul><li>IndexSearcher提供了对单个IndexReader的查询实现；</li><li>我们对索引的查询，可以通过调用search(Query,n)或者search(Query,Filter,n)方法；</li><li>在索引内容变动不大的情况下，我们可以对索引的搜索采用单个IndexSearcher共享的方式来提升性能；</li><li>如果索引有变动，我们就需要使用DirectoryReader.openIfChanged(DirectoryReader)来获取新的reader，然后创建新的IndexSearcher对象；</li><li>为了使查询延迟率低，我们最好使用近实时搜索的方法（此时我们的DirectoryReader的构建就要采用<code>DirectoryReader.open(IndexWriter, boolean)</code>）</li><li>IndexSearcher实例是完全线程安全的,这意味着多个线程可以并发调用任何方法。如果需要外部同步,无需添加IndexSearcher的同步；</li></ul><h2 id="IndexSearcher的创建过程"><a href="#IndexSearcher的创建过程" class="headerlink" title="IndexSearcher的创建过程"></a>IndexSearcher的创建过程</h2><ul><li><p>根据索引文件路径创建FSDirectory的实例，返回的FSDirectory实例跟系统或运行环境有关，对于Linux, MacOSX, Solaris, and Windows 64-bit JREs返回的是一个MMapDirectory实例，对于其他非windows JREs环境返回的是NIOFSDirectory，而对于其他Windows的JRE环境返回的是SimpleFSDirectory，其执行效率依次降低</p></li><li><p>接着DirectoryReader根据获取到的FSDirectory实例读取索引文件并得到DirectoryReader对象；DirectoryReader的open方法返回实例的原理：读取索引目录中的Segments文件内容，倒序遍历SegmentInfos并填充到SegmentReader（IndexReader的一种实现）数组，并构建StandardDirectoryReader的实例</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316101614-894853.jpg" alt=""></p></li><li><p>有了IndexReader，IndexSearcher对象实例化就手到拈来了，new IndexSearcher(DirectoryReader)就可以得到其实例；如果我们想提高IndexSearcher的执行效率可以new IndexSearcher(DirecotoryReader,ExcuterService)来创建IndexSearcher对象，这样做的好处为对每块segment采用了分工查询，但是要注意IndexSearcher并不维护ExcuterService的生命周期，我们还需要自行调用ExcuterService的close/awaitTermination</p></li></ul><h2 id="相关实践"><a href="#相关实践" class="headerlink" title="相关实践"></a>相关实践</h2><p>以下是根据IndexSearcher相关的构建过程及其特性编写的一个搜索的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.NumericRangeQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField.Type;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line"><span class="comment">/**获取IndexSearcher对象（适合单索引目录查询使用）</span></div><div class="line"> * <span class="doctag">@param</span> indexPath 索引目录</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcher</span><span class="params">(String indexPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">DirectoryReader reader = DirectoryReader.open(IndexUtil.getIndexWriter(indexPath, <span class="keyword">true</span>), realtime);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line"><span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">service.shutdown();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> searcher;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**多目录多线程查询</span></div><div class="line"> * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line"> * <span class="doctag">@param</span> service 多线程查询</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">MultiReader multiReader;</div><div class="line">File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">File[] files = file.listFiles();</div><div class="line">IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line"><span class="keyword">if</span>(!realtime)&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">readers[i] = DirectoryReader.open(IndexUtil.getIndexWriter(files[i].getPath(), <span class="keyword">true</span>), <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line"><span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">service.shutdown();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> searcher;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**从指定配置项中查询</span></div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@param</span> analyzer 分词器</div><div class="line"> * <span class="doctag">@param</span> field 字段</div><div class="line"> * <span class="doctag">@param</span> fieldType字段类型</div><div class="line"> * <span class="doctag">@param</span> queryStr 查询条件</div><div class="line"> * <span class="doctag">@param</span> range 是否区间查询</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String field,String fieldType,String queryStr,<span class="keyword">boolean</span> range)</span></span>&#123;</div><div class="line">Query q = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(queryStr != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(queryStr))&#123;</div><div class="line"><span class="keyword">if</span>(range)&#123;</div><div class="line">String[] strs = queryStr.split(<span class="string">"\\|"</span>);</div><div class="line"><span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line"><span class="keyword">int</span> min = <span class="keyword">new</span> Integer(strs[<span class="number">0</span>]);</div><div class="line"><span class="keyword">int</span> max = <span class="keyword">new</span> Integer(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newIntRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">Double min = <span class="keyword">new</span> Double(strs[<span class="number">0</span>]);</div><div class="line">Double max = <span class="keyword">new</span> Double(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newDoubleRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">Float min = <span class="keyword">new</span> Float(strs[<span class="number">0</span>]);</div><div class="line">Float max = <span class="keyword">new</span> Float(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newFloatRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"long"</span>.equals(fieldType))&#123;</div><div class="line">Long min = <span class="keyword">new</span> Long(strs[<span class="number">0</span>]);</div><div class="line">Long max = <span class="keyword">new</span> Long(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newLongRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">q = NumericRangeQuery.newIntRange(field, <span class="keyword">new</span> Integer(queryStr), <span class="keyword">new</span> Integer(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">q = NumericRangeQuery.newDoubleRange(field, <span class="keyword">new</span> Double(queryStr), <span class="keyword">new</span> Double(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">q = NumericRangeQuery.newFloatRange(field, <span class="keyword">new</span> Float(queryStr), <span class="keyword">new</span> Float(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">Term term = <span class="keyword">new</span> Term(field, queryStr);</div><div class="line">q = <span class="keyword">new</span> TermQuery(term);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">q= <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(q);</div><div class="line"><span class="keyword">return</span> q;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**多条件查询类似于sql in</span></div><div class="line"> * <span class="doctag">@param</span> querys</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"><span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">query.add(subQuery,Occur.SHOULD);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**多条件查询类似于sql and</span></div><div class="line"> * <span class="doctag">@param</span> querys</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"><span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">query.add(subQuery,Occur.MUST);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**对多个条件进行排序构建排序条件</span></div><div class="line"> * <span class="doctag">@param</span> fields</div><div class="line"> * <span class="doctag">@param</span> type</div><div class="line"> * <span class="doctag">@param</span> reverses</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sort <span class="title">getSortInfo</span><span class="params">(String[] fields,Type[] types,<span class="keyword">boolean</span>[] reverses)</span></span>&#123;</div><div class="line">SortField[] sortFields = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">int</span> fieldLength = fields.length;</div><div class="line"><span class="keyword">int</span> typeLength = types.length;</div><div class="line"><span class="keyword">int</span> reverLength = reverses.length;</div><div class="line"><span class="keyword">if</span>(!(fieldLength == typeLength) || !(fieldLength == reverLength))&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sortFields = <span class="keyword">new</span> SortField[fields.length];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</div><div class="line">sortFields[i] = <span class="keyword">new</span> SortField(fields[i], types[i], reverses[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Sort(sortFields);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**根据查询器、查询条件、每页数、排序条件进行查询</span></div><div class="line"> * <span class="doctag">@param</span> query 查询条件</div><div class="line"> * <span class="doctag">@param</span> first 起始值</div><div class="line"> * <span class="doctag">@param</span> max 最大值</div><div class="line"> * <span class="doctag">@param</span> sort 排序条件</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPageAndSortField</span><span class="params">(IndexSearcher searcher,Query query, <span class="keyword">int</span> first,<span class="keyword">int</span> max, Sort sort)</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">TopFieldCollector collector = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(sort != <span class="keyword">null</span>)&#123;</div><div class="line">collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;<span class="keyword">new</span> SortField(<span class="string">"modified"</span>, SortField.Type.LONG)&#125;);</div><div class="line">collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line">searcher.search(query, collector);</div><div class="line"><span class="keyword">return</span> collector.topDocs(first, max);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**获取上次索引的id,增量更新使用</span></div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getLastIndexBeanID</span><span class="params">(IndexReader multiReader)</span></span>&#123;</div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line">searcher = <span class="keyword">new</span> IndexSearcher(multiReader);</div><div class="line">SortField sortField = <span class="keyword">new</span> SortField(<span class="string">"id"</span>, SortField.Type.INT,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;sortField&#125;);</div><div class="line">TopDocs docs = getScoreDocsByPerPageAndSortField(searcher,query, <span class="number">0</span>, <span class="number">1</span>, sort);</div><div class="line">ScoreDoc[] scoreDocs = docs.scoreDocs;</div><div class="line"><span class="keyword">int</span> total = scoreDocs.length;</div><div class="line"><span class="keyword">if</span>(total &gt; <span class="number">0</span>)&#123;</div><div class="line">ScoreDoc scoreDoc = scoreDocs[<span class="number">0</span>];</div><div class="line">Document doc = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">doc = searcher.doc(scoreDoc.doc);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Integer(doc.get(<span class="string">"id"</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="相关代码下载"><a href="#相关代码下载" class="headerlink" title="相关代码下载"></a>相关代码下载</h2><p><a href="http://download.csdn.net/detail/wuyinggui10000/8697451" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8697451</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（7）—lucene搜索之IndexSearcher构建过程&quot;&gt;&lt;a href=&quot;#lucene（7）—lucene搜索之IndexSearcher构建过程&quot; class=&quot;headerlink&quot; title=&quot;lucene（7）—lucene搜索之IndexSearcher构建过程&quot;&gt;&lt;/a&gt;lucene（7）—lucene搜索之IndexSearcher构建过程&lt;/h1&gt;&lt;h2 id=&quot;IndexSearcher&quot;&gt;&lt;a href=&quot;#IndexSearcher&quot; class=&quot;headerlink&quot; title=&quot;IndexSearcher&quot;&gt;&lt;/a&gt;IndexSearcher&lt;/h2&gt;&lt;p&gt;搜索引擎的构建分为索引内容和查询索引两个大方面，这里要介绍的是lucene索引查询器即IndexSearcher的构建过程；&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene索引优化之多线程创建索引</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/6%E3%80%81lucene%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/6、lucene索引优化之多线程创建索引/</id>
    <published>2019-03-16T01:53:14.259Z</published>
    <updated>2019-03-16T03:15:32.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（6）—lucene索引优化之多线程创建索引"><a href="#lucene（6）—lucene索引优化之多线程创建索引" class="headerlink" title="lucene（6）—lucene索引优化之多线程创建索引"></a>lucene（6）—lucene索引优化之多线程创建索引</h1><p>前面了解到lucene在索引创建的时候一个IndexWriter获取到一个读写锁，这样势在lucene创建大数据量的索引的时候，执行效率低下的问题；</p><a id="more"></a><p>查看前面文档 lucene（5）—lucene的索引构建原理 可以看出，lucene索引的建立，跟以下几点关联很大；</p><ol><li>磁盘空间大小，这个直接影响索引的建立，甚至会造成索引写入提示完成，但是没有同步的问题；</li><li>索引合并策略的选择，这个类似于sql里边的批量操作，批量操作的数量过多直接影响执行效率，对于lucene来讲，索引合并前是将document放在内存中，因此选择合适的合并策略也可以提升索引的效率；</li><li>唯一索引对应的term的选择，lucene索引的创建过程中是先从索引中删除包含相同term的document然后重新添加document到索引中，这里如果term对应的document过多，会占用磁盘IO，同时造成IndexWriter的写锁占用时间延长，相应的执行效率低下；</li></ol><p>综上所述，索引优化要保证磁盘空间，同时在term选择上可以以ID等标识来确保唯一性，这样第一条和第三条的风险就规避了；</p><p>本文旨在对合并策略和采用多线程创建的方式提高索引的效率；</p><p>多线程创建索引，我这边还设计了多目录索引创建，这样避免了同一目录数据量过大索引块合并和索引块重新申请；</p><p>废话不多说，这里附上代码，代码示例是读取lucene官网下载并解压的文件夹并给文件信息索引起来</p><p>首先定义FileBean来存储文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.bean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBean</span> </span>&#123;</div><div class="line"><span class="comment">//路径</span></div><div class="line"><span class="keyword">private</span> String path;</div><div class="line"><span class="comment">//修改时间</span></div><div class="line"><span class="keyword">private</span> Long modified;</div><div class="line"><span class="comment">//内容</span></div><div class="line"><span class="keyword">private</span> String content;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> path;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.path = path;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getModified</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> modified;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModified</span><span class="params">(Long modified)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.modified = modified;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> content;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.content = content;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来是一个工具类，用以将文件夹的信息遍历读取并转换成FileBean的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.util;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**读取文件信息和下属文件夹</span></div><div class="line"> * <span class="doctag">@param</span> folder</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;FileBean&gt; <span class="title">getFolderFiles</span><span class="params">(String folder)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">List&lt;FileBean&gt; fileBeans = <span class="keyword">new</span> LinkedList&lt;FileBean&gt;();</div><div class="line">File file = <span class="keyword">new</span> File(folder);</div><div class="line"><span class="keyword">if</span>(file.isDirectory())&#123;</div><div class="line">File[] files = file.listFiles();</div><div class="line"><span class="keyword">if</span>(files != <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">for</span> (File file2 : files) &#123;</div><div class="line">fileBeans.addAll(getFolderFiles(file2.getAbsolutePath()));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">FileBean bean = <span class="keyword">new</span> FileBean();</div><div class="line">bean.setPath(file.getAbsolutePath());</div><div class="line">bean.setModified(file.lastModified());</div><div class="line">bean.setContent(<span class="keyword">new</span> String(Files.readAllBytes(Paths.get(folder))));</div><div class="line">fileBeans.add(bean);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> fileBeans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义一个公共的用于处理索引的类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseIndex</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 父级索引路径</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> String parentIndexPath;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 索引编写器</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> IndexWriter writer;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> subIndex;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 主线程</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch1;  </div><div class="line"><span class="comment">/**</span></div><div class="line"> *工作线程 </div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch2; </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对象列表</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> List&lt;T&gt; list;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(IndexWriter writer,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">List&lt;T&gt; list)&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.writer = writer;</div><div class="line"><span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line"><span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line"><span class="keyword">this</span>.list = list;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String parentIndexPath, <span class="keyword">int</span> subIndex,</span></span></div><div class="line">CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</div><div class="line">List&lt;T&gt; list) &#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.parentIndexPath = parentIndexPath;</div><div class="line"><span class="keyword">this</span>.subIndex = subIndex;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//多目录索引创建</span></div><div class="line">File file = <span class="keyword">new</span> File(parentIndexPath+<span class="string">"/index"</span>+subIndex);</div><div class="line"><span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">file.mkdir();</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(parentIndexPath+<span class="string">"/index"</span>+subIndex, <span class="keyword">true</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;;</div><div class="line"><span class="keyword">this</span>.subIndex = subIndex;</div><div class="line"><span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line"><span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line"><span class="keyword">this</span>.list = list;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String path,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">List&lt;T&gt; list) &#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//单目录索引创建</span></div><div class="line">File file = <span class="keyword">new</span> File(path);</div><div class="line"><span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">file.mkdir();</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(path,<span class="keyword">true</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;;</div><div class="line"><span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line"><span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line"><span class="keyword">this</span>.list = list;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**创建索引</span></div><div class="line"> * <span class="doctag">@param</span> writer</div><div class="line"> * <span class="doctag">@param</span> carSource</div><div class="line"> * <span class="doctag">@param</span> create</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> * <span class="doctag">@throws</span> ParseException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer,T t)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"><span class="comment">/**批量索引创建</span></div><div class="line"> * <span class="doctag">@param</span> writer</div><div class="line"> * <span class="doctag">@param</span> t</div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDocs</span><span class="params">(IndexWriter writer,List&lt;T&gt; t)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"><span class="keyword">for</span> (T t2 : t) &#123;</div><div class="line">indexDoc(writer,t2);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">countDownLatch1.await();</div><div class="line">System.out.println(writer);</div><div class="line">indexDocs(writer,list);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">countDownLatch2.countDown();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>FileBeanIndex类用于处理FileBean的索引创建 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBeanIndex</span> <span class="keyword">extends</span> <span class="title">BaseIndex</span>&lt;<span class="title">FileBean</span>&gt;</span>&#123;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileBeanIndex</span><span class="params">(IndexWriter writer, CountDownLatch countDownLatch1,</span></span></div><div class="line">CountDownLatch countDownLatch2, List&lt;FileBean&gt; list) &#123;</div><div class="line"><span class="keyword">super</span>(writer, countDownLatch1, countDownLatch2, list);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileBeanIndex</span><span class="params">(String parentIndexPath, <span class="keyword">int</span> subIndex, CountDownLatch countDownLatch1,</span></span></div><div class="line">CountDownLatch countDownLatch2, List&lt;FileBean&gt; list) &#123;</div><div class="line"><span class="keyword">super</span>(parentIndexPath, subIndex, countDownLatch1, countDownLatch2, list);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer, FileBean t)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Document doc = <span class="keyword">new</span> Document();</div><div class="line">System.out.println(t.getPath());</div><div class="line">doc.add(<span class="keyword">new</span> StringField(<span class="string">"path"</span>, t.getPath(), Field.Store.YES));</div><div class="line">doc.add(<span class="keyword">new</span> LongField(<span class="string">"modified"</span>, t.getModified(), Field.Store.YES));</div><div class="line">doc.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, t.getContent(), Field.Store.YES));</div><div class="line"><span class="keyword">if</span> (writer.getConfig().getOpenMode() == IndexWriterConfig.OpenMode.CREATE)&#123;</div><div class="line">        writer.addDocument(doc);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    writer.updateDocument(<span class="keyword">new</span> Term(<span class="string">"path"</span>, t.getPath()), doc);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>IndexUtil工具类里边设置索引合并的策略 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.LogByteSizeMergePolicy;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.LogMergePolicy;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexUtil</span> </span>&#123;</div><div class="line"><span class="comment">/**创建索引写入器</span></div><div class="line"> * <span class="doctag">@param</span> indexPath</div><div class="line"> * <span class="doctag">@param</span> create</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexWriter <span class="title">getIndexWriter</span><span class="params">(String indexPath,<span class="keyword">boolean</span> create)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">Directory dir = FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">    IndexWriterConfig iwc = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">    LogMergePolicy mergePolicy = <span class="keyword">new</span> LogByteSizeMergePolicy();</div><div class="line">    <span class="comment">//设置segment添加文档(Document)时的合并频率          //值较小,建立索引的速度就较慢          //值较大,建立索引的速度就较快,&gt;10适合批量建立索引        </span></div><div class="line">    mergePolicy.setMergeFactor(<span class="number">50</span>);                     </div><div class="line">    <span class="comment">//设置segment最大合并文档(Document)数         </span></div><div class="line">    <span class="comment">//值较小有利于追加索引的速度         </span></div><div class="line">    <span class="comment">//值较大,适合批量建立索引和更快的搜索         </span></div><div class="line">    mergePolicy.setMaxMergeDocs(<span class="number">5000</span>);                     </div><div class="line">    <span class="keyword">if</span> (create)&#123;</div><div class="line">        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</div><div class="line">    &#125;</div><div class="line">    IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">    <span class="keyword">return</span> writer;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>TestIndex类执行测试程序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"><span class="keyword">import</span> com.lucene.index.FileBeanIndex;</div><div class="line"><span class="keyword">import</span> com.lucene.index.util.FileUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIndex</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">List&lt;FileBean&gt; fileBeans = FileUtil.getFolderFiles(<span class="string">"C:\\Users\\lenovo\\Desktop\\lucene\\lucene-5.1.0"</span>);</div><div class="line"><span class="keyword">int</span> totalCount = fileBeans.size();</div><div class="line"><span class="keyword">int</span> perThreadCount = <span class="number">3000</span>;</div><div class="line">System.out.println(<span class="string">"查询到的数据总数是"</span>+fileBeans.size());</div><div class="line"><span class="keyword">int</span> threadCount = totalCount/perThreadCount + (totalCount%perThreadCount == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);  </div><div class="line">ExecutorService pool = Executors.newFixedThreadPool(threadCount);  </div><div class="line">CountDownLatch countDownLatch1 = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);  </div><div class="line">CountDownLatch countDownLatch2 = <span class="keyword">new</span> CountDownLatch(threadCount);  </div><div class="line">System.out.println(fileBeans.size());</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123; </div><div class="line"><span class="keyword">int</span> start = i*perThreadCount;</div><div class="line"><span class="keyword">int</span> end = (i+<span class="number">1</span>) * perThreadCount &lt; totalCount ? (i+<span class="number">1</span>) * perThreadCount : totalCount;</div><div class="line">List&lt;FileBean&gt; subList = fileBeans.subList(start, end);</div><div class="line">Runnable runnable = <span class="keyword">new</span> FileBeanIndex(<span class="string">"index"</span>,i, countDownLatch1, countDownLatch2, subList);</div><div class="line"><span class="comment">//子线程交给线程池管理  </span></div><div class="line">pool.execute(runnable);  </div><div class="line">&#125;  </div><div class="line">countDownLatch1.countDown();  </div><div class="line">System.out.println(<span class="string">"开始创建索引"</span>);  </div><div class="line"><span class="comment">//等待所有线程都完成  </span></div><div class="line">countDownLatch2.await();  </div><div class="line"> <span class="comment">//线程全部完成工作  </span></div><div class="line">System.out.println(<span class="string">"所有线程都创建索引完毕"</span>);  </div><div class="line"><span class="comment">//释放线程池资源  </span></div><div class="line">pool.shutdown();  </div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上即是多线程多目录索引，大家有什么疑问的欢迎交流； </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（6）—lucene索引优化之多线程创建索引&quot;&gt;&lt;a href=&quot;#lucene（6）—lucene索引优化之多线程创建索引&quot; class=&quot;headerlink&quot; title=&quot;lucene（6）—lucene索引优化之多线程创建索引&quot;&gt;&lt;/a&gt;lucene（6）—lucene索引优化之多线程创建索引&lt;/h1&gt;&lt;p&gt;前面了解到lucene在索引创建的时候一个IndexWriter获取到一个读写锁，这样势在lucene创建大数据量的索引的时候，执行效率低下的问题；&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene的索引构建原理</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/5%E3%80%81lucene%E7%B4%A2%E5%BC%95%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/5、lucene索引构建原理/</id>
    <published>2019-03-16T01:53:14.249Z</published>
    <updated>2019-03-16T03:15:16.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（5）—lucene的索引构建原理"><a href="#lucene（5）—lucene的索引构建原理" class="headerlink" title="lucene（5）—lucene的索引构建原理"></a>lucene（5）—lucene的索引构建原理</h1><h2 id="lucene创建索引的原理"><a href="#lucene创建索引的原理" class="headerlink" title="lucene创建索引的原理"></a>lucene创建索引的原理</h2><h3 id="IndexWriter的addDocument方法详解"><a href="#IndexWriter的addDocument方法详解" class="headerlink" title="IndexWriter的addDocument方法详解"></a>IndexWriter的addDocument方法详解</h3><p>今天看了IndexWriter类的addDocument方法，IndexWriter对此方法的说明如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Adds a document to this index. </div><div class="line">Note that if an Exception is hit (for example disk full) then the index will be consistent, but this document may not have been added. Furthermore, it&apos;s possible the index will have one segment in non-compound format even when using compound files (when a merge has partially succeeded).</div><div class="line">This method periodically flushes pending documents to the Directory (see above), and also periodically triggers segment merges in the index according to the MergePolicy in use.</div><div class="line">Merges temporarily consume space in the directory. The amount of space required is up to 1X the size of all segments being merged, when no readers/searchers are open against the index, and up to 2X the size of all segments being merged when readers/searchers are open against the index (see forceMerge(int) for details). The sequence of primitive merge operations performed is governed by the merge policy. </div><div class="line">Note that each term in the document can be no longer than MAX_TERM_LENGTH in bytes, otherwise an IllegalArgumentException will be thrown.</div></pre></td></tr></table></figure><p>大意如下：</p><p>此方法向索引中添加一个document；</p><p>需要注意的是如果执行过程中发生异常（比如磁盘空间不足）的时候索引会保持一致性，但是这个document也许并没有被添加，此外，即使使用符合文件也有可能索引包含一个非复合格式的segment（当合并索引有部分成功的时候）</p><p>此方法会定期的flush索引文件目录，并且会根据合并策略定期去触发索引文件中segment的合并操作；</p><p>刚方法会对合并临时的索引空间，当没有reader或者searcher读取或写入索引文件的时候所需要占用的磁盘空间至少要超过需要合并的segments文件的一倍，反之将会占用两倍以上的空间；序列的合并操作的优化取决于合并策略‘</p><p>要确保document中的每一个term占用的字节长度都不能超过MAX_TERM_LENGTH，否则会抛出IllegalArgumentException异常；</p><p>其实际的执行方法为：</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316100523-767792.jpg" alt=""></p><p>继续跟进updateDocument方法，其实现如下</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316100618-658422.jpg" alt=""></p><p>可以看见updateDocument是先从索引中删除包含相同term的document然后重新添加document到索引中；</p><p>此操作需要确保IndexWriter没有被关闭，其实现是先有<a href="https://blog.csdn.net/wuyinggui10000/article/details/45625351" target="_blank" rel="external">DocumentsWriter</a>类的updateDocument方法判断，这里先判断将根据term找到对应的document，并先放到待删除的document队列中，然后从队列中读取document，再将要flush的documents写入磁盘，同时更新flush队列中的索引状态；</p><p>相关源码如下</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316101101-308029.jpg" alt=""></p><p>在此期间有一个ThreadState类型的<a href="https://www.baidu.com/s?wd=%E8%AF%BB%E5%86%99%E9%94%81&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">读写锁</a>，lucene判断ThreadState的状态，如果此锁被激活，从内存中获取document并更新到索引文件且重置内存中索引的数量和状态，最后释放相关的资源。</p><p>此即为IndexWriter的索引构建过程，看代码<a href="https://www.baidu.com/s?wd=%E6%99%95%E5%A4%B4%E8%BD%AC%E5%90%91&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">晕头转向</a>的，以后为大家带来一点干货，明天带来lucene索引优化之多线程创建索引。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（5）—lucene的索引构建原理&quot;&gt;&lt;a href=&quot;#lucene（5）—lucene的索引构建原理&quot; class=&quot;headerlink&quot; title=&quot;lucene（5）—lucene的索引构建原理&quot;&gt;&lt;/a&gt;lucene（5）—lucene的索引构建原理&lt;/h1&gt;&lt;h2 id=&quot;lucene创建索引的原理&quot;&gt;&lt;a href=&quot;#lucene创建索引的原理&quot; class=&quot;headerlink&quot; title=&quot;lucene创建索引的原理&quot;&gt;&lt;/a&gt;lucene创建索引的原理&lt;/h2&gt;&lt;h3 id=&quot;IndexWriter的addDocument方法详解&quot;&gt;&lt;a href=&quot;#IndexWriter的addDocument方法详解&quot; class=&quot;headerlink&quot; title=&quot;IndexWriter的addDocument方法详解&quot;&gt;&lt;/a&gt;IndexWriter的addDocument方法详解&lt;/h3&gt;&lt;p&gt;今天看了IndexWriter类的addDocument方法，IndexWriter对此方法的说明如下：&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene的中文分词器jcseg和IKAnalyzer分词器及其使用说明</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/4%E3%80%81lucene%E7%9A%84%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8jcseg%E5%92%8CIK%20Analyzer%E5%88%86%E8%AF%8D%E5%99%A8%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/4、lucene的中文分词器jcseg和IK Analyzer分词器及其使用说明/</id>
    <published>2019-03-16T01:53:14.239Z</published>
    <updated>2019-03-16T03:14:59.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（4）—lucene的中文分词器jcseg和IK-Analyzer分词器及其使用说明"><a href="#lucene（4）—lucene的中文分词器jcseg和IK-Analyzer分词器及其使用说明" class="headerlink" title="lucene（4）—lucene的中文分词器jcseg和IK Analyzer分词器及其使用说明"></a>lucene（4）—lucene的中文分词器jcseg和IK Analyzer分词器及其使用说明</h1><h2 id="为什么要使用lucene中文分词器"><a href="#为什么要使用lucene中文分词器" class="headerlink" title="为什么要使用lucene中文分词器"></a>为什么要使用lucene中文分词器</h2><p>在lucene的开发过程中，我们常会遇到分词时中文识别的问题，lucene提供了</p><p>lucene-analyzers-common-5.0.0.jar包来支持分词，但多的是对英国，法国，意大利等过语言的支持，</p><p>因此我们需要引入中文分词的概念。</p><a id="more"></a><h2 id="各种中文分词器及其对比"><a href="#各种中文分词器及其对比" class="headerlink" title="各种中文分词器及其对比"></a>各种中文分词器及其对比</h2><h3 id="jcseg中文分词器"><a href="#jcseg中文分词器" class="headerlink" title="jcseg中文分词器"></a>jcseg中文分词器</h3><p>jcseg是使用Java开发的一款开源的中文分词器, 使用mmseg算法. 分词准确率高达<br>98.4%, 支持中文人名识别, 同义词匹配, 停止词过滤…</p><p>jcseg支持三种切分模式：<br>(1).简易模式：FMM算法，适合速度要求场合。<br>(2).复杂模式-MMSEG四种过滤算法，具有较高的岐义去除，分词准确率达到了98.41%。<br>(3).检测模式：只返回词库中已有的词条，很适合某些应用场合。(1.9.4开始)</p><p>就分词效率而言，简易模式速度最快</p><p>jcseg词库配置丰富，自我感觉功能最强大，详见jcseg开发文档；</p><p>jcseg现版本不兼容lucene5，我修改了其analyzer包，相关示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analyzer;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.lionsoul.jcseg.analyzer.JcsegAnalyzer5X;</div><div class="line"><span class="keyword">import</span> org.lionsoul.jcseg.core.JcsegTaskConfig;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JcsegAnalyzerTest</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tokenTest</span><span class="params">()</span> </span>&#123;</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> JcsegAnalyzer5X(JcsegTaskConfig.SIMPLE_MODE);</div><div class="line"><span class="comment">//非必须(用于修改默认配置): 获取分词任务配置实例</span></div><div class="line">JcsegAnalyzer5X jcseg = (JcsegAnalyzer5X) analyzer;</div><div class="line">JcsegTaskConfig config = jcseg.getTaskConfig();</div><div class="line"><span class="comment">//追加同义词到分词结果中, 需要在jcseg.properties中配置jcseg.loadsyn=1</span></div><div class="line">config.setAppendCJKSyn(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//追加拼音到分词结果中, 需要在jcseg.properties中配置jcseg.loadpinyin=1</span></div><div class="line">config.setAppendCJKPinyin(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//更多配置, 请查看com.webssky.jcseg.core.JcsegTaskConfig类</span></div><div class="line">String words = <span class="string">"中华人民共和国"</span>;</div><div class="line">TokenStream stream = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">stream.reset(); </div><div class="line">CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line"><span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">System.out.println(offsetAtt.toString());</div><div class="line">&#125;</div><div class="line">stream.end();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">if</span>(stream != <span class="keyword">null</span>)</div><div class="line">stream.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">中华</div><div class="line">人民共和国</div></pre></td></tr></table></figure><h3 id="IKAnalyzer"><a href="#IKAnalyzer" class="headerlink" title="IKAnalyzer"></a>IKAnalyzer</h3><p>IK Analyzer是一个开源的，基亍java语言开发的轻量级的中文分词工具包。</p><p>采用了特有的“正向迭代最细粒度切分算法“，支持细粒度和智能分词两种切分模式；<br>在系统环境：Core2 i7 3.4G双核，4G内存，window 7 64位， Sun JDK 1.6_29 64位 普通pc环境测试，IK2012具有160万字/秒（3000KB/S）的高速处理能力。<br>2012版本的智能分词模式支持简单的分词排歧义处理和数量词合并输出。<br>采用了多子处理器分析模式，支持：英文字母、数字、中文词汇等分词处理，兼容韩文、日文字符<br>优化的词典存储，更小的内存占用。支持用户词典扩展定义。特别的，在2012版本，词典支持中文，英文，数字混合词语。</p><p>IK Analyzer支持细粒度切分和智能切分两种分词模式;</p><p>在细粒度切分下，词语分解到很细的力度，比如“一个苹果”，会被切分成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">一个</div><div class="line">一</div><div class="line">个</div><div class="line">苹果</div></pre></td></tr></table></figure><p>在智能切分模式下，则会分词如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一个</div><div class="line">苹果</div></pre></td></tr></table></figure><p>和jcseg相同，现版本的IK Analyzer只兼容至lucene4版本，我修改了相关源码，使其提供了对lucene5的支持。</p><p>IK Analyzer示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analyzer;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IKAnalyzerTest</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tokenTest</span><span class="params">()</span> </span>&#123;</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</div><div class="line">String words = <span class="string">"中华人民共和国"</span>;</div><div class="line">TokenStream stream = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">stream.reset(); </div><div class="line">CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line"><span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">System.out.println(offsetAtt.toString());</div><div class="line">&#125;</div><div class="line">stream.end();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">stream.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">中华人民共和国</div><div class="line">中华人民</div><div class="line">中华</div><div class="line">华人</div><div class="line">人民共和国</div><div class="line">人民</div><div class="line">共和国</div><div class="line">共和</div><div class="line">国</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（4）—lucene的中文分词器jcseg和IK-Analyzer分词器及其使用说明&quot;&gt;&lt;a href=&quot;#lucene（4）—lucene的中文分词器jcseg和IK-Analyzer分词器及其使用说明&quot; class=&quot;headerlink&quot; title=&quot;lucene（4）—lucene的中文分词器jcseg和IK Analyzer分词器及其使用说明&quot;&gt;&lt;/a&gt;lucene（4）—lucene的中文分词器jcseg和IK Analyzer分词器及其使用说明&lt;/h1&gt;&lt;h2 id=&quot;为什么要使用lucene中文分词器&quot;&gt;&lt;a href=&quot;#为什么要使用lucene中文分词器&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用lucene中文分词器&quot;&gt;&lt;/a&gt;为什么要使用lucene中文分词器&lt;/h2&gt;&lt;p&gt;在lucene的开发过程中，我们常会遇到分词时中文识别的问题，lucene提供了&lt;/p&gt;
&lt;p&gt;lucene-analyzers-common-5.0.0.jar包来支持分词，但多的是对英国，法国，意大利等过语言的支持，&lt;/p&gt;
&lt;p&gt;因此我们需要引入中文分词的概念。&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene的analysis相关和自定义分词器</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/3%E3%80%81lucene%E7%9A%84analysis%E7%9B%B8%E5%85%B3%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/3、lucene的analysis相关和自定义分词器/</id>
    <published>2019-03-16T01:53:14.239Z</published>
    <updated>2019-03-16T03:14:38.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（3）—lucene的analysis相关和自定义分词器"><a href="#lucene（3）—lucene的analysis相关和自定义分词器" class="headerlink" title="lucene（3）—lucene的analysis相关和自定义分词器"></a>lucene（3）—lucene的analysis相关和自定义分词器</h1><h2 id="analysis说明"><a href="#analysis说明" class="headerlink" title="analysis说明"></a>analysis说明</h2><h3 id="lucene-ananlysis应用场景"><a href="#lucene-ananlysis应用场景" class="headerlink" title="lucene ananlysis应用场景"></a>lucene ananlysis应用场景</h3><p>lucene提供了analysis用来将文本转换到索引文件或提供给IndexSearcher查询索引；</p><p>对于lucene而言，不管是索引还是检索，都是针对于纯文本输入来讲的；</p><p>通过lucene的强大类库我们可以访问各种格式的文档，如HTML、XML、PDF、<a href="https://www.baidu.com/s?wd=Word&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">Word</a>、TXT等，</p><p>我们需要传递给lucene的只是文件中的纯文本内容；</p><a id="more"></a><h3 id="lucene的词语切分"><a href="#lucene的词语切分" class="headerlink" title="lucene的词语切分"></a>lucene的词语切分</h3><p>lucene的索引和检索前提是其对文本内容的分析和词组的切分；比如，文档中有一句话叫“Hello World,Welcome to China”</p><p>我们想找到包含这段话的文档，而用户输入的查询条件又不尽详细（可能只是hello）</p><p>这里我们就需要用到lucene索引该文档的时候预先对文档内容进行切分，将词源和文本对应起来。</p><p>有时候对词语进行简单切分还远远不够，我们还需要对字符串进行深度切分，lucene不仅能够对索引内容预处理还可以对请求参数进行切分；</p><h3 id="使用analyzer"><a href="#使用analyzer" class="headerlink" title="使用analyzer"></a>使用analyzer</h3><p>lucene的索引使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analysis;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.StringReader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.OffsetAttribute;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnalysisTest</span> </span>&#123;</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tokenTest</span><span class="params">()</span> </span>&#123;</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(); <span class="comment">// or any other analyzer</span></div><div class="line">TokenStream ts = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ts = analyzer.tokenStream(<span class="string">"myfield"</span>, <span class="keyword">new</span> StringReader(</div><div class="line"><span class="string">"some text goes here"</span>));</div><div class="line">OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);</div><div class="line">ts.reset(); <span class="comment">// Resets this stream to the beginning. (Required)</span></div><div class="line"><span class="keyword">while</span> (ts.incrementToken()) &#123;</div><div class="line"><span class="comment">// Use AttributeSource.reflectAsString(boolean)</span></div><div class="line"><span class="comment">// for token stream debugging.</span></div><div class="line">System.out.println(<span class="string">"token: "</span> + ts.reflectAsString(<span class="keyword">true</span>));</div><div class="line"> </div><div class="line">System.out.println(<span class="string">"token start offset: "</span></div><div class="line">+ offsetAtt.startOffset());</div><div class="line">System.out.println(<span class="string">"token end offset: "</span></div><div class="line">+ offsetAtt.endOffset());</div><div class="line">&#125;</div><div class="line">ts.end(); </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ts.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="自定义Analyzer和实现自己的analysis模块"><a href="#自定义Analyzer和实现自己的analysis模块" class="headerlink" title="自定义Analyzer和实现自己的analysis模块"></a>自定义Analyzer和实现自己的analysis模块</h2><p>1.要实现自己的analyzer，我们需要继承Analyzer并重写其中的分词模块。</p><p>2.维护停止词词典</p><p>3.重写TokenStreamComponents方法，选择合适的分词方法，对词语进行过滤</p><p>示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analysis.self;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Tokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.LowerCaseTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.util.CharArraySet;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnalyzer</span> <span class="keyword">extends</span> <span class="title">Analyzer</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> CharArraySet stopWordSet;<span class="comment">//停止词词典</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> CharArraySet <span class="title">getStopWordSet</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> stopWordSet;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopWordSet</span><span class="params">(CharArraySet stopWordSet)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.stopWordSet = stopWordSet;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyAnalyzer</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.stopWordSet = StopAnalyzer.ENGLISH_STOP_WORDS_SET;<span class="comment">//可在此基础上拓展停止词</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**扩展停止词</span></div><div class="line"> * <span class="doctag">@param</span> stops</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyAnalyzer</span><span class="params">(String[] stops)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>();</div><div class="line">stopWordSet.addAll(StopFilter.makeStopSet(stops));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> TokenStreamComponents <span class="title">createComponents</span><span class="params">(String fieldName)</span> </span>&#123;</div><div class="line"><span class="comment">//正则匹配分词</span></div><div class="line">Tokenizer source = <span class="keyword">new</span> LowerCaseTokenizer();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenStreamComponents(source, <span class="keyword">new</span> StopFilter(source, stopWordSet));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> MyAnalyzer();</div><div class="line">String words = <span class="string">"A AN yuyu"</span>;</div><div class="line">TokenStream stream = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">stream.reset(); </div><div class="line">CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line"><span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">System.out.println(offsetAtt.toString());</div><div class="line">&#125;</div><div class="line">stream.end();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">stream.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yuyu</div></pre></td></tr></table></figure><p>说明该分词器对a an 进行了过滤，这些过滤的词在stopWordSet中</p><h3 id="添加字长过滤器"><a href="#添加字长过滤器" class="headerlink" title="添加字长过滤器"></a>添加字长过滤器</h3><p>有时候我们需要对字符串中的短字符进行过滤，比如welcome to BeiJIng中过滤掉长度小于2的字符串，我们期望的结果就变成了Welcome BeiJing,我们仅需要重新实现createComponents方法，相关代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analysis.self;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Tokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.LowerCaseTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.WhitespaceTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.miscellaneous.LengthFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.util.CharArraySet;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LengFilterAanlyzer</span> <span class="keyword">extends</span> <span class="title">Analyzer</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLen</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.len = len;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LengFilterAanlyzer</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LengFilterAanlyzer</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.len = len;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> TokenStreamComponents <span class="title">createComponents</span><span class="params">(String fieldName)</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> Tokenizer source = <span class="keyword">new</span> WhitespaceTokenizer();</div><div class="line">    TokenStream result = <span class="keyword">new</span> LengthFilter(source, len, Integer.MAX_VALUE);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenStreamComponents(source,result);</div><div class="line"> </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> LengFilterAanlyzer(<span class="number">2</span>);</div><div class="line">String words = <span class="string">"I am a java coder"</span>;</div><div class="line">TokenStream stream = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">stream.reset(); </div><div class="line">CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line"><span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">System.out.println(offsetAtt.toString());</div><div class="line">&#125;</div><div class="line">stream.end();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">stream.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>程序的执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">am</div><div class="line">java</div><div class="line">coder</div></pre></td></tr></table></figure><p>说明小于2个字符的文本被过滤了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（3）—lucene的analysis相关和自定义分词器&quot;&gt;&lt;a href=&quot;#lucene（3）—lucene的analysis相关和自定义分词器&quot; class=&quot;headerlink&quot; title=&quot;lucene（3）—lucene的analysis相关和自定义分词器&quot;&gt;&lt;/a&gt;lucene（3）—lucene的analysis相关和自定义分词器&lt;/h1&gt;&lt;h2 id=&quot;analysis说明&quot;&gt;&lt;a href=&quot;#analysis说明&quot; class=&quot;headerlink&quot; title=&quot;analysis说明&quot;&gt;&lt;/a&gt;analysis说明&lt;/h2&gt;&lt;h3 id=&quot;lucene-ananlysis应用场景&quot;&gt;&lt;a href=&quot;#lucene-ananlysis应用场景&quot; class=&quot;headerlink&quot; title=&quot;lucene ananlysis应用场景&quot;&gt;&lt;/a&gt;lucene ananlysis应用场景&lt;/h3&gt;&lt;p&gt;lucene提供了analysis用来将文本转换到索引文件或提供给IndexSearcher查询索引；&lt;/p&gt;
&lt;p&gt;对于lucene而言，不管是索引还是检索，都是针对于纯文本输入来讲的；&lt;/p&gt;
&lt;p&gt;通过lucene的强大类库我们可以访问各种格式的文档，如HTML、XML、PDF、&lt;a href=&quot;https://www.baidu.com/s?wd=Word&amp;amp;tn=24004469_oem_dg&amp;amp;rsv_dl=gh_pl_sl_csd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Word&lt;/a&gt;、TXT等，&lt;/p&gt;
&lt;p&gt;我们需要传递给lucene的只是文件中的纯文本内容；&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene的各种Field及其排序</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/2%E3%80%81lucene%E7%9A%84%E5%90%84%E7%A7%8DField%E5%8F%8A%E5%85%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/2、lucene的各种Field及其排序/</id>
    <published>2019-03-16T01:53:14.229Z</published>
    <updated>2019-03-16T03:14:16.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（2）—lucene的各种Field及其排序"><a href="#lucene（2）—lucene的各种Field及其排序" class="headerlink" title="lucene（2）—lucene的各种Field及其排序"></a>lucene（2）—lucene的各种Field及其排序</h1><h2 id="Lucene的Field说明"><a href="#Lucene的Field说明" class="headerlink" title="Lucene的Field说明"></a>Lucene的Field说明</h2><p>Lucene存储对象是以document为存储单元，对象中相关的属性值则存放到Field中；</p><p>lucene中所有Field都是IndexableField接口的实现</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">org.apache.lucene.index.IndexableField</div><div class="line"> </div><div class="line">Represents a single field <span class="keyword">for</span> indexing. IndexWriter consumes Iterable&lt;IndexableField&gt; as a document.</div></pre></td></tr></table></figure><p>IndexableField接口提供了一些方法，主要是对field相关属性的获取，包括</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 获取field的名称 */</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 获取field的类型fieldType */</span></div><div class="line"><span class="function"><span class="keyword">public</span> IndexableFieldType <span class="title">fieldType</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> *获取当前field的权重（评分值） 只有Field有评分的概念，如果我们想对document进行评分值的设定 必须预先对document中对应的field值进行评分设设定*/  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">boost</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 如果此Filed为二进制类型的，返回相应的值*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> BytesRef <span class="title">binaryValue</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建一个用户索引此Field的TokenStream</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> TokenStream <span class="title">tokenStream</span><span class="params">(Analyzer analyzer, TokenStream reuse)</span> <span class="keyword">throws</span> IOException</span>;</div></pre></td></tr></table></figure><p>所有的Field均是org.apache.lucene.document.Field的子类；</p><p>项目中我们常用的Field类型主要有IntField, LongField, FloatField, DoubleField, BinaryDocValuesField, NumericDocValuesField, SortedDocValuesField, StringField, TextField, StoredField.</p><h2 id="lucene常见Field"><a href="#lucene常见Field" class="headerlink" title="lucene常见Field"></a>lucene常见Field</h2><p>IntField 主要对int类型的字段进行存储，需要注意的是如果需要对InfField进行排序使用SortField.Type.INT来比较，如果进范围查询或过滤，需要采用NumericRangeQuery.newIntRange() LongField 主要处理Long类型的字段的存储，排序使用SortField.Type.Long,如果进行范围查询或过滤利用NumericRangeQuery.newLongRange()，LongField常用来进行时间戳的排序，保存System.currentTimeMillions() FloatField 对Float类型的字段进行存储，排序采用SortField.Type.Float,范围查询采用NumericRangeQuery.newFloatRange() BinaryDocVluesField 只存储不共享值，如果需要共享值可以用SortedDocValuesField NumericDocValuesField 用于数值类型的Field的排序(预排序)，需要在要排序的field后添加一个同名的NumericDocValuesField SortedDocValuesField 用于String类型的Field的排序，需要在StringField后添加同名的SortedDocValuesField StringField 用户String类型的字段的存储，StringField是只索引不分词 TextField 对String类型的字段进行存储，TextField和StringField的不同是TextField既索引又分词 StoredField 存储Field的值，可以用IndexSearcher.doc和IndexReader.document来获取此Field和存储的值</p><h2 id="IntField使用"><a href="#IntField使用" class="headerlink" title="IntField使用"></a>IntField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntFieldTest</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 保存一个intField</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexIntFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">Document document = <span class="keyword">new</span> Document();</div><div class="line">document.add(<span class="keyword">new</span> IntField(<span class="string">"intValue"</span>, <span class="number">30</span>, Field.Store.YES));</div><div class="line"><span class="comment">//要排序必须加同名的field，且类型为NumericDocValuesField</span></div><div class="line">document.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"intValue"</span>, <span class="number">30</span>));</div><div class="line">Document document1 = <span class="keyword">new</span> Document();</div><div class="line">document1.add(<span class="keyword">new</span> IntField(<span class="string">"intValue"</span>, <span class="number">40</span>, Field.Store.YES));</div><div class="line">document1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"intValue"</span>, <span class="number">40</span>));</div><div class="line">IndexWriter writer = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer = IndexUtil.getIndexWriter(<span class="string">"intFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">writer.addDocument(document);</div><div class="line">writer.addDocument(document1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试intField排序</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIntFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"intFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="comment">//构建排序字段</span></div><div class="line">SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"intValue"</span>,SortField.Type.INT,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line"><span class="comment">//查询所有结果</span></div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">ScoreDoc[] scores = docs.scoreDocs;</div><div class="line"><span class="comment">//遍历结果</span></div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line">System.out.println(searcher.doc(scoreDoc.doc));;</div><div class="line">&#125;</div><div class="line"><span class="comment">//searcher.search(query, results);</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试排序结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;intValue:40&gt;&gt;</div><div class="line">Document&lt;stored&lt;intValue:30&gt;&gt;</div></pre></td></tr></table></figure><p>如果修改NumericDocValuesField对应的值，结果会随着其值的大小而改变</p><h2 id="LongField使用"><a href="#LongField使用" class="headerlink" title="LongField使用"></a>LongField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 保存一个longField</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">Document document = <span class="keyword">new</span> Document();</div><div class="line">document.add(<span class="keyword">new</span> LongField(<span class="string">"longValue"</span>, <span class="number">50L</span>, Field.Store.YES));</div><div class="line">document.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longValue"</span>, <span class="number">50L</span>));</div><div class="line">Document document1 = <span class="keyword">new</span> Document();</div><div class="line">document1.add(<span class="keyword">new</span> LongField(<span class="string">"longValue"</span>, <span class="number">80L</span>, Field.Store.YES));</div><div class="line">document1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longValue"</span>, <span class="number">80L</span>));</div><div class="line">IndexWriter writer = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer = IndexUtil.getIndexWriter(<span class="string">"longFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">writer.addDocument(document);</div><div class="line">writer.addDocument(document1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试longField排序</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLongFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"longFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="comment">//构建排序字段</span></div><div class="line">SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"longValue"</span>,SortField.Type.LONG,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line"><span class="comment">//查询所有结果</span></div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">ScoreDoc[] scores = docs.scoreDocs;</div><div class="line"><span class="comment">//遍历结果</span></div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line"><span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">System.out.println(doc.getField(<span class="string">"longValue"</span>).numericValue());</div><div class="line">&#125;</div><div class="line"><span class="comment">//searcher.search(query, results);</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;longValue:80&gt;&gt;</div><div class="line">Document&lt;stored&lt;longValue:50&gt;&gt;</div></pre></td></tr></table></figure><h2 id="FloatField使用"><a href="#FloatField使用" class="headerlink" title="FloatField使用"></a>FloatField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 保存一个floatField</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexFloatFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">Document document = <span class="keyword">new</span> Document();</div><div class="line">document.add(<span class="keyword">new</span> FloatField(<span class="string">"floatValue"</span>, <span class="number">9.1f</span>, Field.Store.YES));</div><div class="line">document.add(<span class="keyword">new</span> FloatDocValuesField(<span class="string">"floatValue"</span>, <span class="number">82.0f</span>));</div><div class="line">Document document1 = <span class="keyword">new</span> Document();</div><div class="line">document1.add(<span class="keyword">new</span> FloatField(<span class="string">"floatValue"</span>, <span class="number">80.1f</span>, Field.Store.YES));</div><div class="line">document1.add(<span class="keyword">new</span> FloatDocValuesField(<span class="string">"floatValue"</span>, <span class="number">80.1f</span>));</div><div class="line">IndexWriter writer = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer = IndexUtil.getIndexWriter(<span class="string">"floatFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">writer.addDocument(document);</div><div class="line">writer.addDocument(document1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试intField排序</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFloatFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"floatFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="comment">//构建排序字段</span></div><div class="line">SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"floatValue"</span>,SortField.Type.FLOAT,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line"><span class="comment">//查询所有结果</span></div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">ScoreDoc[] scores = docs.scoreDocs;</div><div class="line"><span class="comment">//遍历结果</span></div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line"><span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">System.out.println(doc.getField(<span class="string">"floatValue"</span>).numericValue());</div><div class="line">&#125;</div><div class="line"><span class="comment">//searcher.search(query, results);</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;floatValue:9.1&gt;&gt;</div><div class="line">Document&lt;stored&lt;floatValue:80.1&gt;&gt;</div></pre></td></tr></table></figure><h2 id="BinaryDocValuesField使用"><a href="#BinaryDocValuesField使用" class="headerlink" title="BinaryDocValuesField使用"></a>BinaryDocValuesField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryDocValuesFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 保存一个BinaryDocValuesField</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">Document document = <span class="keyword">new</span> Document();</div><div class="line">document.add(<span class="keyword">new</span> BinaryDocValuesField(<span class="string">"binaryValue"</span>,<span class="keyword">new</span> BytesRef(<span class="string">"1234"</span>.getBytes())));</div><div class="line">Document document1 = <span class="keyword">new</span> Document();</div><div class="line">document1.add(<span class="keyword">new</span> BinaryDocValuesField(<span class="string">"binaryValue"</span>,<span class="keyword">new</span> BytesRef(<span class="string">"2345"</span>.getBytes())));</div><div class="line">IndexWriter writer = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer = IndexUtil.getIndexWriter(<span class="string">"binaryValueFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">writer.addDocument(document);</div><div class="line">writer.addDocument(document1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试BinaryDocValuesField排序</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBinaryDocValuesFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"binaryValueFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="comment">//构建排序字段</span></div><div class="line">SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"binaryValue"</span>,SortField.Type.STRING_VAL,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line"><span class="comment">//查询所有结果</span></div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">ScoreDoc[] scores = docs.scoreDocs;</div><div class="line"><span class="comment">//遍历结果</span></div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line"><span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">System.out.println(doc);</div><div class="line"><span class="comment">//System.out.println(doc.getField("binaryValue").numericValue());</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//searcher.search(query, results);</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;&gt;</div><div class="line">Document&lt;&gt;</div></pre></td></tr></table></figure><p>为什么这样呢，这是跟BinaryDocValuesField的特性决定的，只索引不存值！</p><h2 id="StringField使用"><a href="#StringField使用" class="headerlink" title="StringField使用"></a>StringField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.SortedDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 保存一个StringField</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">Document document = <span class="keyword">new</span> Document();</div><div class="line">document.add(<span class="keyword">new</span> StringField(<span class="string">"stringValue"</span>,<span class="string">"12445"</span>, Field.Store.YES));</div><div class="line">document.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"stringValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"12445"</span>.getBytes())));</div><div class="line">Document document1 = <span class="keyword">new</span> Document();</div><div class="line">document1.add(<span class="keyword">new</span> StringField(<span class="string">"stringValue"</span>,<span class="string">"23456"</span>, Field.Store.YES));</div><div class="line">document1.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"stringValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"23456"</span>.getBytes())));</div><div class="line">IndexWriter writer = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer = IndexUtil.getIndexWriter(<span class="string">"stringFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">writer.addDocument(document);</div><div class="line">writer.addDocument(document1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试StringField排序</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"stringFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="comment">//构建排序字段</span></div><div class="line">SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"stringVal"</span>,SortField.Type.STRING,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line"><span class="comment">//查询所有结果</span></div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">ScoreDoc[] scores = docs.scoreDocs;</div><div class="line"><span class="comment">//遍历结果</span></div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line"><span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">System.out.println(doc);</div><div class="line"><span class="comment">//System.out.println(doc.getField("binaryValue").numericValue());</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//searcher.search(query, results);</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored,indexed,tokenized,omitNorms,indexOptions=DOCS&lt;stringValue:12445&gt;&gt;</div><div class="line">Document&lt;stored,indexed,tokenized,omitNorms,indexOptions=DOCS&lt;stringValue:23456&gt;&gt;</div></pre></td></tr></table></figure><h2 id="TextField使用"><a href="#TextField使用" class="headerlink" title="TextField使用"></a>TextField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.SortedDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 保存一个StringField</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">Document document = <span class="keyword">new</span> Document();</div><div class="line">document.add(<span class="keyword">new</span> TextField(<span class="string">"textValue"</span>,<span class="string">"12345"</span>, Field.Store.YES));</div><div class="line">document.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"textValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"12345"</span>.getBytes())));</div><div class="line">Document document1 = <span class="keyword">new</span> Document();</div><div class="line">document1.add(<span class="keyword">new</span> TextField(<span class="string">"textValue"</span>,<span class="string">"23456"</span>, Field.Store.YES));</div><div class="line">document1.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"textValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"23456"</span>.getBytes())));</div><div class="line">IndexWriter writer = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer = IndexUtil.getIndexWriter(<span class="string">"textFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">writer.addDocument(document);</div><div class="line">writer.addDocument(document1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试StringField排序</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"textFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="comment">//构建排序字段</span></div><div class="line">SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"textValue"</span>,SortField.Type.STRING,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line"><span class="comment">//查询所有结果</span></div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">ScoreDoc[] scores = docs.scoreDocs;</div><div class="line"><span class="comment">//遍历结果</span></div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line"><span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">System.out.println(doc);</div><div class="line"><span class="comment">//System.out.println(doc.getField("binaryValue").numericValue());</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//searcher.search(query, results);</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored,indexed,tokenized&lt;textValue:23456&gt;&gt;</div><div class="line">Document&lt;stored,indexed,tokenized&lt;textValue:12345&gt;&gt;</div></pre></td></tr></table></figure><h2 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h2><p><a href="http://download.csdn.net/detail/wuyinggui10000/8669987" target="_blank" rel="external">lucene field使用源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（2）—lucene的各种Field及其排序&quot;&gt;&lt;a href=&quot;#lucene（2）—lucene的各种Field及其排序&quot; class=&quot;headerlink&quot; title=&quot;lucene（2）—lucene的各种Field及其排序&quot;&gt;&lt;/a&gt;lucene（2）—lucene的各种Field及其排序&lt;/h1&gt;&lt;h2 id=&quot;Lucene的Field说明&quot;&gt;&lt;a href=&quot;#Lucene的Field说明&quot; class=&quot;headerlink&quot; title=&quot;Lucene的Field说明&quot;&gt;&lt;/a&gt;Lucene的Field说明&lt;/h2&gt;&lt;p&gt;Lucene存储对象是以document为存储单元，对象中相关的属性值则存放到Field中；&lt;/p&gt;
&lt;p&gt;lucene中所有Field都是IndexableField接口的实现&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene的多样化查询</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/21%E3%80%81lucene%E7%9A%84%E5%A4%9A%E6%A0%B7%E5%8C%96%E6%9F%A5%E8%AF%A2/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/21、lucene的多样化查询/</id>
    <published>2019-03-16T01:53:14.219Z</published>
    <updated>2019-03-16T03:35:04.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（21）—lucene的多样化查询"><a href="#lucene（21）—lucene的多样化查询" class="headerlink" title="lucene（21）—lucene的多样化查询"></a>lucene（21）—lucene的多样化查询</h1><table><thead><tr><th>查询类</th><th>说明</th></tr></thead><tbody><tr><td>TermQuery</td><td>通过项进行搜索</td></tr><tr><td>TermRangeQuery</td><td>在指定的项范围内进行搜索</td></tr><tr><td>PrefixQuery</td><td>通过字符串搜索</td></tr><tr><td>BooleanQuery</td><td>组合查询</td></tr><tr><td>PhraseQuery</td><td>通过短语搜索</td></tr><tr><td>WildcardQuery</td><td>通配符查询</td></tr><tr><td>FuzzyQuery</td><td>搜索类似项</td></tr><tr><td>MatchAllDocsQuery</td><td>匹配所有文档</td></tr><tr><td>MatchNoDocsQuery</td><td>不用匹配文档</td></tr><tr><td>QueryParser</td><td>解析查询表达式</td></tr><tr><td>MultiPhraseQuery</td><td>多短语查询</td></tr><tr><td>NumericRangeQuery</td><td>数字范围查询，一般在价格、时间域的查询</td></tr></tbody></table><a id="more"></a><p>在 Lucene4 以后，组合查询只有一个构造方法，并没有无参构造方法，而是多了一个静态内部类 Builder。所以组合查如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Query booleanQuery = <span class="keyword">new</span> BooleanQuery.Builder().add(query1,BooleanClause.Occur.MUST).add(query1,BooleanClause.Occur.MUST).build();</div></pre></td></tr></table></figure><p>BooleanClause.Occur 提供了一下四种：</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>MUST</td><td>相当于 SQL 中的 and</td></tr><tr><td>FILTER</td><td></td></tr><tr><td>SHOULD</td><td>相当于 SQL 中的 in</td></tr><tr><td>MUST_NOT</td></tr></tbody></table><p>当它们同事使用的情况：</p><h2 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h2><p>lucene 包含了 一个建立在 SpanQuery 类基础上的整套查询体系，大致反映了 Lucene 的 Query 类体系。SpanQuery 是指域中的起始词汇单元和终止词汇单元的位置。SpanQuery 有一些常用的子类，如下所示：</p><h3 id="FieldMaskingSpanQuery"><a href="#FieldMaskingSpanQuery" class="headerlink" title="FieldMaskingSpanQuery"></a>FieldMaskingSpanQuery</h3><p>用于在多个域之间查询，即把另一个域看成某个域，从而看起来像是在同个域中查询，因为 Lucene 默认某个条件只能作用在单个域上，不支持跨域查询，只能在同一个域中查询，所以有了FieldMaskingSpanQuery。</p><h3 id="SpanTermQuery"><a href="#SpanTermQuery" class="headerlink" title="SpanTermQuery"></a>SpanTermQuery</h3><p>和其他跨度查询类型结合使用，单独使用时，相当于 Term,slop 为跨度因子，用来限制两个 Trem 之间的最大跨度。还有一个 inOrder 参数，它用来设置是否允许尽心倒叙跨度。即 TremA 到 TramB 不一定从左到右去匹配也可以从右到左，从右到左就是倒叙，inOrder 为 true 即表示 order (顺序) 很重要不能倒叙去匹配必须正向去匹配，false 返之。注意，停用词不在 slop 统计范围内</p><h3 id="SpanFirstQuery"><a href="#SpanFirstQuery" class="headerlink" title="SpanFirstQuery"></a>SpanFirstQuery</h3><p>表示对出现在一个域中的 [0,n] 范围内的 Term 项进行的匹配查询，关键是 n 指定了查询的 term 出现范围的上限。</p><h3 id="SpanContainingQuery"><a href="#SpanContainingQuery" class="headerlink" title="SpanContainingQuery"></a>SpanContainingQuery</h3><p>返回在另一个范围内的查询匹配结果，big 和 little 的句子可以是任何 span 类型查询。在包含 little 匹配中从 big 匹配跨度返回。例如 “a beautiful and boring world” , big 查询是 SpanNearQuery(SpanTermQuery(“beautiful “),SpanTermQuery(“world”)).setSlop(2),而 little 查询是 SpanTermQuery(“boring”) ，则该 Doc 命中，并 big 匹配跨度返回，即 big 优先级高。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（21）—lucene的多样化查询&quot;&gt;&lt;a href=&quot;#lucene（21）—lucene的多样化查询&quot; class=&quot;headerlink&quot; title=&quot;lucene（21）—lucene的多样化查询&quot;&gt;&lt;/a&gt;lucene（21）—lucene的多样化查询&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;查询类&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TermQuery&lt;/td&gt;
&lt;td&gt;通过项进行搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TermRangeQuery&lt;/td&gt;
&lt;td&gt;在指定的项范围内进行搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PrefixQuery&lt;/td&gt;
&lt;td&gt;通过字符串搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BooleanQuery&lt;/td&gt;
&lt;td&gt;组合查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PhraseQuery&lt;/td&gt;
&lt;td&gt;通过短语搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WildcardQuery&lt;/td&gt;
&lt;td&gt;通配符查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FuzzyQuery&lt;/td&gt;
&lt;td&gt;搜索类似项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MatchAllDocsQuery&lt;/td&gt;
&lt;td&gt;匹配所有文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MatchNoDocsQuery&lt;/td&gt;
&lt;td&gt;不用匹配文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QueryParser&lt;/td&gt;
&lt;td&gt;解析查询表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MultiPhraseQuery&lt;/td&gt;
&lt;td&gt;多短语查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NumericRangeQuery&lt;/td&gt;
&lt;td&gt;数字范围查询，一般在价格、时间域的查询&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene 综合应用实例</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/20%E3%80%81lucene%E7%9A%84%E7%BB%BC%E5%90%88%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/20、lucene的综合使用实例/</id>
    <published>2019-03-16T01:53:14.209Z</published>
    <updated>2019-03-16T03:34:55.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（20）—lucene-综合应用实例"><a href="#lucene（20）—lucene-综合应用实例" class="headerlink" title="lucene（20）—lucene 综合应用实例"></a>lucene（20）—lucene 综合应用实例</h1><p>最近因项目需求的需要，完成一个”会话检索”功能。该功能是把录音转写成文字，对转写后的文本进行关键字检索。因为该功能对检索条件类型的使用比较完整（例如：时间范围、关键字、语速等不同类型）以及使用的注意点也比较多，所以在这里给大家分享一下。希望可以帮到你。</p><a id="more"></a><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><p>会话检索，支持 多个文件夹同时检索，支持的索引大小为 1300 MB 左右（大约是45万条数据），支持 多个条件进行 and 检索。</p><h2 id="功能依赖"><a href="#功能依赖" class="headerlink" title="功能依赖"></a>功能依赖</h2><p>lucene 使用的版本是 5.5.3 ，相对来说还是比较老的，当前最新的版本是 7.7.0 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queries<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-backward-codecs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-memory<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-highlighter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-spatial<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-smartcn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h3><p>分页处理类 Page</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"><span class="comment">/** 当前第几页(从1开始计算) */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentPage;</div><div class="line"><span class="comment">/** 每页显示几条 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageSize;</div><div class="line"><span class="comment">/** 总记录数 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalRecord;</div><div class="line"><span class="comment">/** 总页数 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalPage;</div><div class="line"><span class="comment">/** 分页数据集合[用泛型T来限定集合元素类型] */</span></div><div class="line"><span class="keyword">private</span> Collection&lt;T&gt; items;</div><div class="line"><span class="comment">/** 当前显示起始索引(从零开始计算) */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> startIndex;</div><div class="line"><span class="comment">/** 当前显示结束索引(从零开始计算) */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> endIndex;</div><div class="line"><span class="comment">/** 一组最多显示几个页码[比如Google一组最多显示10个页码] */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> groupSize;</div><div class="line"><span class="comment">/** 左边偏移量 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> leftOffset = <span class="number">5</span>;</div><div class="line"><span class="comment">/** 右边偏移量 */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> rightOffset = <span class="number">4</span>;</div><div class="line"><span class="comment">/** 当前页码范围 */</span></div><div class="line"><span class="keyword">private</span> String[] pageRange;</div><div class="line"><span class="comment">/** 分页数据 */</span></div><div class="line"><span class="keyword">private</span> List&lt;Document&gt; docList;</div><div class="line"><span class="comment">/** 上一页最后一个ScoreDoc对象 */</span></div><div class="line"><span class="keyword">private</span> ScoreDoc afterDoc;</div><div class="line"><span class="comment">/** 上一页最后一个ScoreDoc对象的Document对象ID */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> afterDocId;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRangeIndex</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> groupSize = getGroupSize();</div><div class="line"><span class="keyword">int</span> totalPage = getTotalPage();</div><div class="line"><span class="keyword">if</span> (totalPage &lt; <span class="number">2</span>) &#123;</div><div class="line">startIndex = <span class="number">0</span>;</div><div class="line">endIndex = totalPage - startIndex;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">int</span> currentPage = getCurrentPage();</div><div class="line"><span class="keyword">if</span> (groupSize &gt;= totalPage) &#123;</div><div class="line">startIndex = <span class="number">0</span>;</div><div class="line">endIndex = totalPage - startIndex - <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">int</span> leftOffset = getLeftOffset();</div><div class="line"><span class="keyword">int</span> middleOffset = getMiddleOffset();</div><div class="line"><span class="keyword">if</span> (-<span class="number">1</span> == middleOffset) &#123;</div><div class="line">startIndex = <span class="number">0</span>;</div><div class="line">endIndex = groupSize - <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPage &lt;= leftOffset) &#123;</div><div class="line">startIndex = <span class="number">0</span>;</div><div class="line">endIndex = groupSize - <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">startIndex = currentPage - leftOffset - <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (currentPage + rightOffset &gt; totalPage) &#123;</div><div class="line">endIndex = totalPage - <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">endIndex = currentPage + rightOffset - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (currentPage &lt;= <span class="number">0</span>) &#123;</div><div class="line">currentPage = <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">int</span> totalPage = getTotalPage();</div><div class="line"><span class="keyword">if</span> (totalPage &gt; <span class="number">0</span> &amp;&amp; currentPage &gt; getTotalPage()) &#123;</div><div class="line">currentPage = totalPage;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> currentPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (pageSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">pageSize = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pageSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalRecord</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> totalRecord;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalRecord</span><span class="params">(<span class="keyword">int</span> totalRecord)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.totalRecord = totalRecord;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> totalRecord = getTotalRecord();</div><div class="line"><span class="keyword">if</span> (totalRecord == <span class="number">0</span>) &#123;</div><div class="line">totalPage = <span class="number">0</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">int</span> pageSize = getPageSize();</div><div class="line">totalPage = totalRecord % pageSize == <span class="number">0</span> ? totalRecord / pageSize : (totalRecord / pageSize) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> totalPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(<span class="keyword">int</span> totalPage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.totalPage = totalPage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStartIndex</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> startIndex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartIndex</span><span class="params">(<span class="keyword">int</span> startIndex)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.startIndex = startIndex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEndIndex</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> endIndex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndIndex</span><span class="params">(<span class="keyword">int</span> endIndex)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.endIndex = endIndex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGroupSize</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (groupSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">groupSize = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> groupSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupSize</span><span class="params">(<span class="keyword">int</span> groupSize)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.groupSize = groupSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeftOffset</span><span class="params">()</span> </span>&#123;</div><div class="line">leftOffset = getGroupSize() / <span class="number">2</span>;</div><div class="line"><span class="keyword">return</span> leftOffset;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftOffset</span><span class="params">(<span class="keyword">int</span> leftOffset)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.leftOffset = leftOffset;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRightOffset</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> groupSize = getGroupSize();</div><div class="line"><span class="keyword">if</span> (groupSize % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">rightOffset = (groupSize / <span class="number">2</span>) - <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">rightOffset = groupSize / <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> rightOffset;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightOffset</span><span class="params">(<span class="keyword">int</span> rightOffset)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.rightOffset = rightOffset;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** 中心位置索引[从1开始计算] */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMiddleOffset</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> groupSize = getGroupSize();</div><div class="line"><span class="keyword">int</span> totalPage = getTotalPage();</div><div class="line"><span class="keyword">if</span> (groupSize &gt;= totalPage) &#123;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> getLeftOffset() + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> String[] getPageRange() &#123;</div><div class="line">setRangeIndex();</div><div class="line"><span class="keyword">int</span> size = endIndex - startIndex + <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (totalPage == <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"1"</span> &#125;;</div><div class="line">&#125;</div><div class="line">pageRange = <span class="keyword">new</span> String[size];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">pageRange[i] = (startIndex + i + <span class="number">1</span>) + <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pageRange;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageRange</span><span class="params">(String[] pageRange)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.pageRange = pageRange;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(Collection&lt;T&gt; items)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.items = items;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;T&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> items;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDocList</span><span class="params">(List&lt;Document&gt; docList)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.docList = docList;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Document&gt; <span class="title">getDocList</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> docList;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAfterDoc</span><span class="params">(ScoreDoc afterDoc)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.afterDoc = afterDoc;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ScoreDoc <span class="title">getAfterDoc</span><span class="params">()</span> </span>&#123;</div><div class="line">setAfterDocId(afterDocId);</div><div class="line"><span class="keyword">return</span> afterDoc;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAfterDocId</span><span class="params">(<span class="keyword">int</span> afterDocId)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.afterDocId = afterDocId;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == afterDoc) &#123;</div><div class="line"><span class="keyword">this</span>.afterDoc = <span class="keyword">new</span> ScoreDoc(afterDocId, <span class="number">1.0f</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAfterDocId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> afterDocId;&#125;</div><div class="line"></div><div class="line">    <span class="comment">/*构造方法*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentPage = currentPage;</div><div class="line"><span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, Collection&lt;T&gt; items)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentPage = currentPage;</div><div class="line"><span class="keyword">this</span>.pageSize = pageSize;</div><div class="line"><span class="keyword">this</span>.items = items;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, Collection&lt;T&gt; items, <span class="keyword">int</span> groupSize)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentPage = currentPage;</div><div class="line"><span class="keyword">this</span>.pageSize = pageSize;</div><div class="line"><span class="keyword">this</span>.items = items;</div><div class="line"><span class="keyword">this</span>.groupSize = groupSize;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> groupSize, <span class="keyword">int</span> afterDocId)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.currentPage = currentPage;</div><div class="line"><span class="keyword">this</span>.pageSize = pageSize;</div><div class="line"><span class="keyword">this</span>.groupSize = groupSize;</div><div class="line"><span class="keyword">this</span>.afterDocId = afterDocId;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>会话记录 IQCConversationInfoBean  实体类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IQCConversationInfoBean</span> <span class="keyword">extends</span> <span class="title">EntityBean</span> </span>&#123;</div><div class="line"><span class="comment">// serialVersionUID</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4459013070304617092L</span>;</div><div class="line">    <span class="keyword">private</span> String serialNo;<span class="comment">// 通话编号</span></div><div class="line">    <span class="keyword">private</span> Date callTime; <span class="comment">// 呼入时间</span></div><div class="line">    <span class="keyword">private</span> String callDate; <span class="comment">// 会话日期</span></div><div class="line">    <span class="keyword">private</span> Date hangupTime; <span class="comment">// 挂机时间</span></div><div class="line">    <span class="keyword">private</span> String language;  <span class="comment">// 语种</span></div><div class="line">    <span class="keyword">private</span> String agentContent; <span class="comment">// 座席通话内容</span></div><div class="line">    <span class="keyword">private</span> String custContent; <span class="comment">// 客户通话内容</span></div><div class="line">    <span class="keyword">private</span> String allContent; <span class="comment">//全部通话内容</span></div><div class="line">    <span class="keyword">private</span> String agentFirst;  <span class="comment">// 座席首句</span></div><div class="line">    <span class="keyword">private</span> String agentLast; <span class="comment">// 座席尾句</span></div><div class="line">    <span class="keyword">private</span> String custFirst; <span class="comment">// 客户首句</span></div><div class="line">    <span class="keyword">private</span> String custLast; <span class="comment">// 客户尾句</span></div><div class="line">    <span class="keyword">private</span> Float agentMaxSpeed=<span class="number">0f</span>; <span class="comment">// 座席最大语速</span></div><div class="line">    <span class="keyword">private</span> Float agentMinSpeed=<span class="number">0f</span>; <span class="comment">// 座席最小语速</span></div><div class="line">    <span class="keyword">private</span> Float agentAvgSpeed=<span class="number">0f</span>; <span class="comment">// 座席平均语速</span></div><div class="line">    <span class="keyword">private</span> Float custMaxSpeed=<span class="number">0f</span>; <span class="comment">// 座席最大语速</span></div><div class="line">    <span class="keyword">private</span> Float custMinSpeed=<span class="number">0f</span>; <span class="comment">// 座席最小语速</span></div><div class="line">    <span class="keyword">private</span> Float custAvgSpeed=<span class="number">0f</span>; <span class="comment">// 座席平均语速</span></div><div class="line">    <span class="keyword">private</span> Integer silenceSeconds; <span class="comment">// 静音时长</span></div><div class="line">    <span class="keyword">private</span> String sumNo; <span class="comment">//小结编号</span></div><div class="line">    <span class="keyword">private</span> Float silencePercent; <span class="comment">// 静音占比</span></div><div class="line">    <span class="keyword">private</span> String mediaType; <span class="comment">// 会话类型</span></div><div class="line">    <span class="keyword">private</span> Integer maxSilenceSeconds; <span class="comment">// 最大静音时长</span></div><div class="line">    <span class="keyword">private</span> String accountCode; <span class="comment">// 座席用户号</span></div><div class="line">    <span class="keyword">private</span> String empName; <span class="comment">// 座席姓名</span></div><div class="line">    <span class="keyword">private</span> Integer talkSeconds; <span class="comment">// 通话时长</span></div><div class="line">    <span class="keyword">private</span>  Integer minTalkSeconds; <span class="comment">// 最小通话时长</span></div><div class="line">    <span class="keyword">private</span>  Integer maxTalkSeconds; <span class="comment">// 最大通话时长</span></div><div class="line">    <span class="keyword">private</span> Float custMaxEmotion=<span class="number">0f</span>; <span class="comment">// 客户最大情绪</span></div><div class="line">    <span class="keyword">private</span> Float custMinEmotion=<span class="number">0f</span>; <span class="comment">// 客户最小情绪</span></div><div class="line">    <span class="keyword">private</span> Float custAvgEmotion=<span class="number">0f</span>; <span class="comment">// 客户平均情绪</span></div><div class="line">    <span class="keyword">private</span> Float agentMaxEmotion=<span class="number">0f</span>; <span class="comment">// 座席最大情绪</span></div><div class="line">    <span class="keyword">private</span> Float agentMinEmotion=<span class="number">0f</span>; <span class="comment">// 座席最小情绪</span></div><div class="line">    <span class="keyword">private</span> Float agentAvgEmotion=<span class="number">0f</span>; <span class="comment">// 座席平均情绪</span></div><div class="line">    <span class="keyword">private</span> Integer silenceCount; <span class="comment">// 静音次数</span></div><div class="line">    <span class="keyword">private</span> String overLap; <span class="comment">// 是否重叠音</span></div><div class="line">    <span class="keyword">private</span> String callNo; <span class="comment">// 来电号码</span></div><div class="line">    <span class="keyword">private</span> String custNo; <span class="comment">// 客户号</span></div><div class="line">    <span class="keyword">private</span> String custGender; <span class="comment">// 客户性别</span></div><div class="line">    <span class="keyword">private</span> String businessGroupCode; <span class="comment">// 座席组别</span></div><div class="line">    <span class="keyword">private</span> String satisfiedType; <span class="comment">// 满意度</span></div><div class="line">    <span class="keyword">private</span> String custName; <span class="comment">// 客户姓名</span></div><div class="line">    <span class="keyword">private</span> String taskCode; <span class="comment">// 任务编号</span></div><div class="line">    <span class="keyword">private</span> String analysisResult; <span class="comment">// 分析结果</span></div><div class="line">    <span class="keyword">private</span> String channelCode; <span class="comment">// 数据渠道</span></div><div class="line">    <span class="comment">//扩展字段</span></div><div class="line">    <span class="keyword">private</span> String filePath; <span class="comment">// 文件路径</span></div><div class="line">    <span class="keyword">private</span> String beginTime; <span class="comment">// 查询条件开始时间</span></div><div class="line">    <span class="keyword">private</span> String endTime; <span class="comment">// 查询条件结束时间</span></div><div class="line">    </div><div class="line">    .....</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>lucene 工具类 LuceneUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneUtils</span> </span>&#123;</div><div class="line">    <span class="comment">// 打开索引目录</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FSDirectory <span class="title">openFSDirectory</span><span class="params">(String luceneDir)</span> </span>&#123;</div><div class="line">FSDirectory directory = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">directory = FSDirectory.open(Paths.get(luceneDir));</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 注意：isLocked方法内部会试图去获取Lock,如果获取到Lock， 会关闭它，否则return</div><div class="line"> * false表示索引目录没有被锁， 这也就是为什么unlock方法被从IndexWriter类中移除的原因</div><div class="line"> */</div><div class="line">IndexWriter.isLocked(directory);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> directory;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//  创建索引阅读器（多目录）</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MultiReader <span class="title">getMultiReader</span><span class="params">(List&lt;String&gt; dirPathList)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    List&lt;IndexReader&gt; indexReaders = <span class="keyword">new</span> ArrayList&lt;IndexReader&gt;();</div><div class="line">    <span class="keyword">for</span>(String dirPath : dirPathList)&#123;</div><div class="line">        Directory directory = openFSDirectory(dirPath);</div><div class="line">        <span class="keyword">if</span>(DirectoryReader.indexExists(directory))&#123;</div><div class="line">            IndexReader reader = DirectoryReader.open(directory);</div><div class="line">            indexReaders.add(reader);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(indexReaders.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultiReader(indexReaders.toArray(<span class="keyword">new</span> IndexReader[indexReaders.size()]));</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 创建索引查询器（多目录）</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiIndexSearcher</span></span></div><div class="line">        <span class="params">(MultiReader multiReader, ExecutorService executor)</span> &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != executor) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(multiReader, executor);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(multiReader);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取符合条件的总记录数</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ScoreDoc[] searchTotalRecord(IndexSearcher search, Query query) &#123;</div><div class="line">        ScoreDoc[] docs = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TopDocs topDocs = search.search(query, Integer.MAX_VALUE);</div><div class="line">            <span class="keyword">if</span> (topDocs==<span class="keyword">null</span> || topDocs.scoreDocs==<span class="keyword">null</span> || topDocs.scoreDocs.length==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> docs;</div><div class="line">            &#125;</div><div class="line">            docs = topDocs.scoreDocs;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> docs;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// Lucene多目录分页查询</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(IndexSearcher searcher, Query query, Page&lt;Document&gt; page)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException &#123;</div><div class="line">        ScoreDoc[] scoreDocs = searchTotalRecord(searcher, query);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != scoreDocs) &#123;</div><div class="line">            <span class="comment">// 设置总记录数</span></div><div class="line">            page.setTotalRecord(scoreDocs.length);</div><div class="line">            ScoreDoc afterDoc = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (page.getCurrentPage() &gt; <span class="number">1</span>) &#123;</div><div class="line">                afterDoc = scoreDocs[(page.getCurrentPage() - <span class="number">1</span>) * page.getPageSize() - <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            TopDocs topDocs = searcher.searchAfter(afterDoc, query, page.getPageSize());</div><div class="line">            List&lt;Document&gt; docList = <span class="keyword">new</span> ArrayList&lt;Document&gt;();</div><div class="line">            ScoreDoc[] docs = topDocs.scoreDocs;</div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (ScoreDoc scoreDoc : docs) &#123;</div><div class="line">                <span class="keyword">int</span> docID = scoreDoc.doc;</div><div class="line">                Document document = searcher.doc(docID);</div><div class="line">                <span class="keyword">if</span> (index == docs.length - <span class="number">1</span>) &#123;</div><div class="line">                    page.setAfterDoc(scoreDoc);</div><div class="line">                    page.setAfterDocId(docID);</div><div class="line">                &#125;</div><div class="line">                docList.add(document);</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">            page.setItems(docList);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"iqcConversationIndexService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IQCConversationIndexService</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMM"</span>);</div><div class="line">    <span class="comment">// 获取索引目录</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_ROOT_PATH = SysConstant.config.getProperty(<span class="string">"indexRootPath"</span>);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ResultBean&lt;IQCConversationInfoBean&gt; <span class="title">getIQCConversationInfoPageByBean</span></span></div><div class="line">        <span class="params">(IQCConversationInfoBean bean, <span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception &#123;</div><div class="line">        ResultBean&lt;IQCConversationInfoBean&gt; rb = <span class="keyword">new</span> ResultBean&lt;IQCConversationInfoBean&gt;() ;</div><div class="line">        ExecutorService _executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line">        MultiReader multiReader = <span class="keyword">null</span>;</div><div class="line">        IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Page&lt;Document&gt; page = <span class="keyword">new</span> Page&lt;Document&gt;(currentPage, pageSize);</div><div class="line">             <span class="comment">// 根据时间获取检索文件夹</span></div><div class="line">            Date beginDate = formatter.parse(bean.getBeginTime().substring(<span class="number">0</span>,<span class="number">6</span>));</div><div class="line">            Date endDate = formatter.parse(bean.getEndTime().substring(<span class="number">0</span>,<span class="number">6</span>));</div><div class="line">            String dirName = <span class="string">""</span>;</div><div class="line">            <span class="comment">//计算时间区间内每个日期文件夹并解析其中的文件</span></div><div class="line">            Calendar tempStart = Calendar.getInstance();</div><div class="line">            tempStart.setTime(endDate);</div><div class="line">            List&lt;String&gt; indexDirecorys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">            <span class="keyword">while</span>(beginDate.getTime() &lt;= endDate.getTime())&#123;</div><div class="line">                dirName = JCalendar.getDateStr(endDate, <span class="string">"yyyyMM"</span>);</div><div class="line">                indexDirecorys.add(INDEX_ROOT_PATH + File.separator + dirName);</div><div class="line">                tempStart.add(Calendar.MONTH, -<span class="number">1</span>);</div><div class="line">                endDate = tempStart.getTime();</div><div class="line">            &#125;</div><div class="line">            multiReader = LuceneUtils.getMultiReader(indexDirecorys);</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=multiReader)&#123;</div><div class="line">                searcher = LuceneUtils.getMultiIndexSearcher(multiReader,_executorService);</div><div class="line">                BooleanQuery booleanQuery = dealBooleanQueryTerms(bean);</div><div class="line">                LuceneUtils.pageQuery(searcher, booleanQuery, page);</div><div class="line">                <span class="keyword">if</span> (page==<span class="keyword">null</span> || page.getItems()==<span class="keyword">null</span> || page.getItems().size()==<span class="number">0</span>) &#123;</div><div class="line">                    log.debug(<span class="string">"未检索到记录"</span>);</div><div class="line">                    rb.setTotal(<span class="number">0l</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">for</span>(Document doc : page.getItems())&#123;</div><div class="line">                        IQCConversationInfoExtBean temp = <span class="keyword">new</span> IQCConversationInfoExtBean();</div><div class="line">                        <span class="keyword">for</span>(IndexableField field : doc.getFields())&#123;</div><div class="line">                            setConversationValue(temp, field);</div><div class="line">                        &#125;</div><div class="line">                        rb.getRows().add(temp);</div><div class="line">                    &#125;</div><div class="line">                    rb.setTotal((<span class="keyword">long</span>) page.getTotalRecord());</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                log.info(<span class="string">"不存在索引会话记录【"</span>+bean.getBeginTime()+<span class="string">"】至【"</span>+bean.getEndTime()+<span class="string">"】"</span>);</div><div class="line">                rb.setTotal(<span class="number">0l</span>);</div><div class="line">            &#125;</div><div class="line">            rb.setReturnCode(SysConstant.SYS_RETURN_SUCCESS_CODE);</div><div class="line">            rb.setReturnMessage(SysConstant.SYS_RETURN_SUCCESS_MESSAGE);</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"会话检索异常"</span>, e);</div><div class="line">            rb.setReturnCode(SysConstant.SYS_RETURN_EXCEPTION_CODE);</div><div class="line">            rb.setReturnMessage(<span class="string">"检索异常："</span>+e.getMessage());</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!_executorService.isShutdown())&#123;</div><div class="line">                _executorService.shutdown();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=searcher)&#123;</div><div class="line">                searcher.getIndexReader().close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=multiReader)&#123;</div><div class="line">                 multiReader.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">// 多种条件组合检索</span></div><div class="line">    <span class="function"><span class="keyword">private</span> BooleanQuery <span class="title">dealBooleanQueryTerms</span></span></div><div class="line">        <span class="params">(IQCConversationInfoBean bean)</span> <span class="keyword">throws</span> Exception&#123;</div><div class="line">        BooleanQuery.Builder booleanQueryBuilder = <span class="keyword">new</span> BooleanQuery.Builder();</div><div class="line">        <span class="comment">//关键词</span></div><div class="line">        <span class="keyword">if</span>(StringUtil.isNotEmpty(bean.getAllContent()))&#123;</div><div class="line">            Term t = <span class="keyword">new</span> Term(<span class="string">"allContent"</span>, <span class="string">".*"</span>+bean.getAllContent()+<span class="string">".*"</span>);</div><div class="line">            Query query = <span class="keyword">new</span> RegexQuery(t);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//客户语速</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=bean.getCustMinSpeed() &amp;&amp; <span class="keyword">null</span>!=bean.getCustMaxSpeed())&#123;</div><div class="line">            Query query = NumericRangeQuery.newFloatRange(</div><div class="line">                <span class="string">"custMaxSpeed"</span>, bean.getCustMinSpeed(), bean.getCustMaxSpeed(), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//来电号码</span></div><div class="line">        <span class="keyword">if</span>(StringUtil.isNotEmpty(bean.getCallNo()))&#123;</div><div class="line">            Query query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"callNo"</span>, bean.getCallNo()));</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//呼入时间</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=bean.getBeginTime() &amp;&amp; <span class="keyword">null</span>!=bean.getEndTime())&#123;</div><div class="line">            <span class="keyword">long</span> beginTime = JCalendar.getDate(bean.getBeginTime(), <span class="string">"yyyyMMddHHmmss"</span>).getTime();</div><div class="line">            <span class="keyword">long</span> endTime = JCalendar.getDate(bean.getEndTime(), <span class="string">"yyyyMMddHHmmss"</span>).getTime();</div><div class="line">            Query query = NumericRangeQuery.newLongRange(</div><div class="line">                <span class="string">"callTime"</span>, beginTime,endTime, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//通话时长</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=bean.getMinTalkSeconds() &amp;&amp; <span class="keyword">null</span>!=bean.getMaxTalkSeconds())&#123;</div><div class="line">            Query query = NumericRangeQuery.newIntRange(</div><div class="line">                <span class="string">"maxTalkSeconds"</span>, bean.getMinTalkSeconds(), bean.getMaxTalkSeconds(), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  <span class="comment">// 通过反射设置对象的值-单层不考虑继承</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setConversationValue</span><span class="params">(IQCConversationInfoBean iqcConversationInfoBean,</span></span></div><div class="line">                                            IndexableField indexableField)&#123;</div><div class="line">        String fieldName = indexableField.name();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != iqcConversationInfoBean &amp;&amp; !fieldName.equals(<span class="string">"serialVersionUID"</span>)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Class&lt;?&gt; clazz1 = IQCConversationInfoBean.class;</div><div class="line">                Field[] fields = clazz1.getDeclaredFields();</div><div class="line">                <span class="keyword">for</span>(Field field : fields)&#123;</div><div class="line">                    <span class="keyword">if</span>(field.getName().equals(fieldName))&#123;</div><div class="line">                        String name=firstLetterUpperCase(field.getName());</div><div class="line">                        String setmethodName=<span class="string">"set"</span>+name;</div><div class="line">                        Method m = clazz1.getDeclaredMethod(setmethodName, field.getType());</div><div class="line">                        <span class="keyword">switch</span>(field.getType().getSimpleName())&#123;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"String"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean, indexableField.stringValue());</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"Float"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean, indexableField.numericValue());</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"Long"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean, indexableField.numericValue());</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"Date"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean,</div><div class="line">                                         <span class="keyword">new</span> Date((<span class="keyword">long</span>) indexableField.numericValue()));</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">firstLetterUpperCase</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(str==<span class="keyword">null</span>||str.length()&lt;<span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">return</span> str;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            String first=str.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</div><div class="line">            <span class="keyword">return</span> first+str.substring(<span class="number">1</span>,str.length());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="检索流程"><a href="#检索流程" class="headerlink" title="检索流程"></a>检索流程</h3><p>根据关键词解析（queryParser）出查询条件query（Termquery）,利用检索工具（indexSearcher）去索引库获取文档的id,然后再根据文档 id去文档信息库获取文档信息。</p><p>分词器不同，建立的索引数据就不同；比较通用的一个中文分词器IKAnalyzer的用法。</p><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111029-773415.jpg" alt=""></p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111103-683410.jpg" alt=""></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用多线程。在使用多线程时，只需要创建线程池即可。事实上，Lucene 在  IndexSearcher 中 判断是否有 executor ,如果 IndexSearcher 有 executor ，则会由每个线程控制一部分索引的读取，而且查询的过程采用的是 future 机制，这种方式是边读边往结果集里边追加数据，这样异步处理机制提升了效率。具体源码可看 IndexSearcher  的 search。</p><p>控制检索文件夹。如果同时检索的文件夹太多的时，会增加 GC 负担</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111130-898673.jpg" alt=""></p><p>在你能承受的范围内设置更多的内存。以免造成内存溢出</p><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111155-172723.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文是对 Lucene 多条件检索的记录。实现多目录多线程的检索方式；实现分页功能；实现多种类型的条件查询以及数据量较大时检索的注意点进行记录。为了更好的使用 Lucene 后面将总结如何提高 Lucene 的检索效率。</p><p>全文检索，lucene 在 匹配效果、速度和效率是极大的优于数据库的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（20）—lucene-综合应用实例&quot;&gt;&lt;a href=&quot;#lucene（20）—lucene-综合应用实例&quot; class=&quot;headerlink&quot; title=&quot;lucene（20）—lucene 综合应用实例&quot;&gt;&lt;/a&gt;lucene（20）—lucene 综合应用实例&lt;/h1&gt;&lt;p&gt;最近因项目需求的需要，完成一个”会话检索”功能。该功能是把录音转写成文字，对转写后的文本进行关键字检索。因为该功能对检索条件类型的使用比较完整（例如：时间范围、关键字、语速等不同类型）以及使用的注意点也比较多，所以在这里给大家分享一下。希望可以帮到你。&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene增量更新和NRT(near-real-time)Query近实时查询</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/19%E3%80%81lucene%E5%A2%9E%E9%87%8F%E6%9B%B4%E6%96%B0%E5%92%8CNRT(near-real-time)Query%E8%BF%91%E5%AE%9E%E6%97%B6%E6%9F%A5%E8%AF%A2/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/19、lucene增量更新和NRT(near-real-time)Query近实时查询/</id>
    <published>2019-03-16T01:53:14.199Z</published>
    <updated>2019-03-16T03:34:47.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（19）—lucene增量更新和NRT-near-real-time-Query近实时查询"><a href="#lucene（19）—lucene增量更新和NRT-near-real-time-Query近实时查询" class="headerlink" title="lucene（19）—lucene增量更新和NRT(near-real-time)Query近实时查询"></a>lucene（19）—lucene增量更新和NRT(near-real-time)Query近实时查询</h1><p>有时候我们创建完索引之后，数据源可能有更新的内容，而我们又想像数据库那样能直接体现在查询中，这里就是我们所说的增量索引。对于这样的需求我们怎么来实现呢？lucene内部是没有提供这种增量索引的实现的；</p><a id="more"></a><p>这里我们一般可能会想到，将之前的索引全部删除，然后进行索引的重建。对于这种做法，如果数据源的条数不是特别大的情况下倒还可以，如果数据源的条数特别大的话，势必会造成查询数据耗时，同时索引的构建也是比较耗时的，几相叠加，势必可能造成查询的时候数据缺失的情况，这势必严重影响用户的体验；</p><p>比较常见的增量索引的实现是：</p><ul><li>设置一个定时器，定时从数据源中读取比现有索引文件中新的内容或是数据源中带有更新标示的数据。</li><li>对数据转换成需要的document并进行索引</li></ul><p>这样做较以上的那种全删除索引然后重建的好处在于：</p><ul><li>数据源查询扫描的数据量小</li><li>相应的更新索引的条数也少，减少了大量的IndexWriter的commit和close这些耗时操作</li></ul><p>以上解决了增量的问题，但是实时性的问题还是存在的：</p><ul><li>索引的变更只有在IndexWriter的commit执行之后才可以体现出来</li></ul><p>那么我们怎样对实时性有个提升呢，大家都知道lucene索引可以以文件索引和内存索引两种方式存在，相较于文件索引，内存索引的执行效率要高于文件索引的构建，因为文件索引是要频繁的IO操作的；结合以上的考虑，我们采用文件索引+内存索引的形式来进行lucene的增量更新；其实现机制如下：</p><ul><li>定时任务扫描数据源的变更</li><li>对获得的数据源列表放在内存中</li><li>内存中的document达到数量限制的时候，以队列的方式删除内存中的索引，并将之添加到文件索引</li><li>查询的时候采用文件+内存索引联合查询的方式以达到NRT效果</li></ul><h2 id="定时任务调度器"><a href="#定时任务调度器" class="headerlink" title="定时任务调度器"></a>定时任务调度器</h2><p>java内置了TimerTask，此类是可以提供定时任务的，但是有一点就是TimerTask的任务是无状态的，我们还需要对任务进行并行的设置；了解到quartz任务调度框架提供了有状态的任务StatefulJob，即在本次调度任务没有执行完毕时，下次任务不会执行；</p><p>常见的我们启动一个quartz任务的方式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Date runTime = DateBuilder.evenSecondDate(new Date());</div><div class="line">   StdSchedulerFactory sf = new StdSchedulerFactory();</div><div class="line">      Scheduler scheduler = sf.getScheduler();</div><div class="line">   JobDetail job = JobBuilder.newJob(XXX.class).build();</div><div class="line">      Trigger trigger = TriggerBuilder.newTrigger().startAt(runTime).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(3).repeatForever()).forJob(job).build();</div><div class="line">      scheduler.scheduleJob(job, trigger);</div><div class="line">      </div><div class="line">      scheduler.start();&lt;/span&gt;</div></pre></td></tr></table></figure><p>以上我们是设置了每三秒执行一次定时任务，而任务类是XXX</p><h2 id="任务类通用方法"><a href="#任务类通用方法" class="headerlink" title="任务类通用方法"></a>任务类通用方法</h2><p>这里我定义了一个XXX的父类，其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.chechong.lucene.indexcreasement;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.RAMDirectory;</div><div class="line"><span class="keyword">import</span> org.quartz.Job;</div><div class="line"><span class="keyword">import</span> org.quartz.StatefulJob;</div><div class="line"> </div><div class="line"><span class="comment">/**有状态的任务：串行执行，即不允许上次执行没有完成即开始本次如果需要并行给接口改为Job即可</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseInCreasementIndex</span> <span class="keyword">implements</span> <span class="title">StatefulJob</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 内存索引</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> RAMDirectory ramDirectory;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseInCreasementIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseInCreasementIndex</span><span class="params">(RAMDirectory ramDirectory)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.ramDirectory = ramDirectory;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**更新索引</span></div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">updateIndexData</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"><span class="comment">/**消费数据</span></div><div class="line"> * <span class="doctag">@param</span> list</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(List list)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>任务类相关实现,以下方法是获取待添加索引的数据源XXXInCreasementIndex</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">XXXInCreasementIndex index = <span class="keyword">new</span> XXXInCreasementIndex(Constants.XXX_INDEX_PATH, XXXDao.getInstance(), RamDirectoryControl.getRAMDireactory());</div><div class="line">index.updateIndexData();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndexData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">int</span> maxBeanID = SearchUtil.getLastIndexBeanID();</div><div class="line">System.out.println(maxBeanID);</div><div class="line">List&lt;XXX&gt; sources = XXXDao.getListInfoBefore(maxBeanID);、、</div><div class="line"><span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.size() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">this</span>.consume(sources);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里，XXX代表我们要获取数据的实体类对象</p><p>consume方法主要是做两件事：</p><ul><li>数据存放到内存索引</li><li>判断内存索引数量，超出限制的话以队列方式取出超出的数量，并将之存放到文件索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(List list)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">IndexWriter writer = RamDirectoryControl.getRAMIndexWriter();</div><div class="line">RamDirectoryControl.consume(writer,list);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上边我们将内存索引和队列的实现放在了RamDirectoryControl中</p><h2 id="内存索引控制器"><a href="#内存索引控制器" class="headerlink" title="内存索引控制器"></a>内存索引控制器</h2><p>首先我们对内存索引的IndexWriter进行初始化，在初始化的时候需要注意先执行一次commit，否则会提示no segments的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> IndexWriter ramIndexWriter;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> RAMDirectory directory;</div><div class="line"><span class="keyword">static</span>&#123;</div><div class="line">directory = <span class="keyword">new</span> RAMDirectory();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ramIndexWriter = getRAMIndexWriter();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RAMDirectory <span class="title">getRAMDireactory</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> directory;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcher</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">IndexReader reader = <span class="keyword">null</span>;</div><div class="line">IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">reader = DirectoryReader.open(directory);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">searcher =  <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line"><span class="keyword">return</span> searcher;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**单例模式获取ramIndexWriter</span></div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> Exception </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexWriter <span class="title">getRAMIndexWriter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"><span class="keyword">if</span>(ramIndexWriter == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">synchronized</span> (IndexWriter.class) &#123;</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</div><div class="line">IndexWriterConfig iwConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);   </div><div class="line">    iwConfig.setOpenMode(OpenMode.CREATE_OR_APPEND);  </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ramIndexWriter = <span class="keyword">new</span> IndexWriter(directory, iwConfig);</div><div class="line">ramIndexWriter.commit();</div><div class="line">ramIndexWriter.close();</div><div class="line">iwConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);   </div><div class="line">    iwConfig.setOpenMode(OpenMode.CREATE_OR_APPEND);  </div><div class="line">ramIndexWriter = <span class="keyword">new</span> IndexWriter(directory, iwConfig);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> ramIndexWriter;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义一个获取内存索引<a href="https://www.baidu.com/s?wd=%E4%B8%AD%E6%95%B0%E6%8D%AE&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">中数据</a>条数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**根据查询器、查询条件、每页数、排序条件进行查询</span></div><div class="line"> * <span class="doctag">@param</span> query 查询条件</div><div class="line"> * <span class="doctag">@param</span> first 起始值</div><div class="line"> * <span class="doctag">@param</span> max 最大值</div><div class="line"> * <span class="doctag">@param</span> sort 排序条件</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPageAndSortField</span><span class="params">(IndexSearcher searcher,Query query, <span class="keyword">int</span> first,<span class="keyword">int</span> max, Sort sort)</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">TopFieldCollector collector = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(sort != <span class="keyword">null</span>)&#123;</div><div class="line">collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"createTime"</span>,SortField.Type.STRING,<span class="keyword">true</span>);</div><div class="line">Sort defaultSort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">collector = TopFieldCollector.create(defaultSort,first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line">searcher.search(query, collector);</div><div class="line"><span class="keyword">return</span> collector.topDocs(first, max);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此方法返回结果为TopDocs，我们根据TopDocs的totalHits来获取内存索引中的数据条数，以此来鉴别内存占用，防止内存溢出。</p><p>consume方法的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**消费数据</span></div><div class="line"> * <span class="doctag">@param</span> docs </div><div class="line"> * <span class="doctag">@param</span> listSize </div><div class="line"> * <span class="doctag">@param</span> writer</div><div class="line"> * <span class="doctag">@param</span> list</div><div class="line"> * <span class="doctag">@throws</span> Exception </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(IndexWriter writer, List list)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">IndexSearcher searcher = getIndexSearcher();</div><div class="line">System.out.println(directory);</div><div class="line">TopDocs topDocs = getScoreDocsByPerPageAndSortField(searcher,query, <span class="number">1</span>, <span class="number">1</span>, <span class="keyword">null</span>);</div><div class="line"><span class="keyword">int</span> currentTotal = topDocs.totalHits;</div><div class="line"><span class="keyword">if</span>(currentTotal+list.size() &gt; Constants.XXX_RAM_LIMIT)&#123;</div><div class="line"><span class="comment">//超出内存限制</span></div><div class="line"><span class="keyword">int</span> pulCount = Constants.XXX_RAM_LIMIT - currentTotal;</div><div class="line">List&lt;Document&gt; docs = <span class="keyword">new</span> LinkedList&lt;Document&gt;();</div><div class="line"></div><div class="line"><span class="keyword">if</span>(pulCount &lt;= <span class="number">0</span>)&#123;</div><div class="line"><span class="comment">//直接处理集合的内容</span></div><div class="line">TopDocs allDocs = SearchUtil.getScoreDocsByPerPageAndSortField(searcher, query, <span class="number">0</span>,currentTotal, <span class="keyword">null</span>);</div><div class="line">ScoreDoc[] scores = allDocs.scoreDocs;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; scores.length ; i ++)&#123;</div><div class="line"><span class="comment">//取出内存中的数据</span></div><div class="line">Document doc1 = searcher.doc(scores[i].doc);</div><div class="line">Integer pollId = Integer.parseInt(doc1.get(<span class="string">"id"</span>));</div><div class="line">Document doc = delDocumentFromRAMDirectory(pollId);</div><div class="line"><span class="keyword">if</span>(doc != <span class="keyword">null</span>)&#123;</div><div class="line">XXX carSource = (XXX) BeanTransferUtil.doc2Bean(doc, XXX.class);</div><div class="line">Document doc2 = carSource2Document(carSource);</div><div class="line"><span class="keyword">if</span>(doc2 != <span class="keyword">null</span>)&#123;</div><div class="line">docs.add(doc2);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">addDocumentToFSDirectory(docs);</div><div class="line">writer = getRAMIndexWriter();</div><div class="line">consume(writer, list);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//先取出未达到内存的部分</span></div><div class="line">List subProcessList = list.subList(<span class="number">0</span>, pulCount);</div><div class="line">consume(writer, subProcessList);</div><div class="line">List leaveList = list.subList(pulCount, list.size());</div><div class="line">consume(writer, leaveList);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//未超出限制，直接存放到内存</span></div><div class="line"><span class="keyword">int</span> listSize = list.size();</div><div class="line"><span class="keyword">if</span>(listSize &gt; <span class="number">0</span>)&#123;</div><div class="line"><span class="comment">//存放到内存</span></div><div class="line"> </div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上边的逻辑为：</p><p>根据getScoreDocsByPerPageAndSortField获取当前内存中的数据条数<br>根据内存中数据数量A和本次获取的数据源的总数B和内存中限制的数量C进行比较<br>如果A+B&lt;=C则未超出内存索引的限制，所有数据均存放到内存<br>反之，判断当前内存中的数据是否已经达到限制，如果已经超出，则直接处理取出内存中的内容，然后回调此方法。<br>如果未达到限制，先取出未达到限制的部分，然后对剩余的进行回调。</p><p>这里我们的BeanTransferUtil是根据document转换成对应的bean的方法，此处用到了反射和commons-beanutils.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.chechong.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTransferUtil</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">doc2Bean</span><span class="params">(Document doc, Class clazz)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Object obj = clazz.newInstance();</div><div class="line">Field[] fields = clazz.getDeclaredFields();</div><div class="line"><span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">field.setAccessible(<span class="keyword">true</span>);</div><div class="line">String fieldName = field.getName();</div><div class="line">BeanUtils.setProperty(obj, fieldName, doc.get(fieldName));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line">&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从内存索引中读取索引的方法如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**从内存索引中删除指定的doc</span></div><div class="line"> * <span class="doctag">@param</span> pollId</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Document <span class="title">delDocumentFromRAMDirectory</span><span class="params">(Integer pollId)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">Document doc = <span class="keyword">null</span>;</div><div class="line">Query query = SearchUtil.getQuery(<span class="string">"id"</span>, <span class="string">"int"</span>, pollId+<span class="string">""</span>, <span class="keyword">false</span>);</div><div class="line">IndexSearcher searcher = getIndexSearcher();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">TopDocs queryDoc = SearchUtil.getScoreDocsByPerPageAndSortField(searcher, query, <span class="number">0</span>, <span class="number">1</span>, <span class="keyword">null</span>);</div><div class="line">ScoreDoc[] docs = queryDoc.scoreDocs;</div><div class="line">System.out.println(docs.length);</div><div class="line"><span class="keyword">if</span>(docs.length &gt; <span class="number">0</span>)&#123;</div><div class="line">doc = searcher.doc(docs[<span class="number">0</span>].doc);</div><div class="line">System.out.println(doc);</div><div class="line">ramIndexWriter.deleteDocuments(query);</div><div class="line">ramIndexWriter.commit();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> doc;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此处是根据id来读取内存索引中的内容，然后将它转换成document同时删除内存中的对应记录。</p><h2 id="NRT近实时查询的实现"><a href="#NRT近实时查询的实现" class="headerlink" title="NRT近实时查询的实现"></a>NRT近实时查询的实现</h2><p>对于上边的索引我们要采用适当的查询方法，这里查询时候为了达到近实时的效果，需要将内存索引添加到查询的范围中，即IndexReader中。</p><p>这里的IndexSearcher的获取方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**多目录多线程查询</span></div><div class="line"> * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line"> * <span class="doctag">@param</span> service 多线程查询</div><div class="line"> * <span class="doctag">@param</span> isAddRamDirectory 是否增加内存索引查询</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service, <span class="keyword">boolean</span> isAddRamDirectory)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">File[] files = file.listFiles();</div><div class="line"></div><div class="line">IndexReader[] readers = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(!isAddRamDirectory)&#123;</div><div class="line">readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">readers = <span class="keyword">new</span> IndexReader[files.length+<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(isAddRamDirectory)&#123;</div><div class="line">readers[files.length] = DirectoryReader.open(RamDirectoryControl.getRAMDireactory());</div><div class="line">&#125;</div><div class="line"></div><div class="line">MultiReader multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line"><span class="keyword">return</span> searcher;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如此，我们就可以在查询的时候既从文件索引中读取，也从内存索引中检索数据了； </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（19）—lucene增量更新和NRT-near-real-time-Query近实时查询&quot;&gt;&lt;a href=&quot;#lucene（19）—lucene增量更新和NRT-near-real-time-Query近实时查询&quot; class=&quot;headerlink&quot; title=&quot;lucene（19）—lucene增量更新和NRT(near-real-time)Query近实时查询&quot;&gt;&lt;/a&gt;lucene（19）—lucene增量更新和NRT(near-real-time)Query近实时查询&lt;/h1&gt;&lt;p&gt;有时候我们创建完索引之后，数据源可能有更新的内容，而我们又想像数据库那样能直接体现在查询中，这里就是我们所说的增量索引。对于这样的需求我们怎么来实现呢？lucene内部是没有提供这种增量索引的实现的；&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene的IndexWriter对象创建和索引策略的选择</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/1%E3%80%81lucene%E7%9A%84IndexWriter%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E7%B4%A2%E5%BC%95%E7%AD%96%E7%95%A5%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/1、lucene的IndexWriter对象创建和索引策略的选择/</id>
    <published>2019-03-16T01:53:14.199Z</published>
    <updated>2019-03-16T03:13:43.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（1）—lucene的IndexWriter对象创建和索引策略的选择"><a href="#lucene（1）—lucene的IndexWriter对象创建和索引策略的选择" class="headerlink" title="lucene（1）—lucene的IndexWriter对象创建和索引策略的选择"></a>lucene（1）—lucene的IndexWriter对象创建和索引策略的选择</h1><p>因工作的需要（数据量大造成原有系统查询效率低），最近做了搜索引擎相关的内容，选择了lucene5版本（15年发布的）。</p><a id="more"></a><p>lucene是一个开放源代码的全文搜索引擎开发工具包，提供了简单强大的搜索引擎接口，其优点如下：</p><ul><li>数据以索引文件的形式存储，索引文件可以跨平台，只要保证索引完整，复制到任何机器或者磁盘空间均可以查询索引内容；</li><li>在传统全文检索引擎的倒排索引的基础上，实现了分块索引，能够针对新的文件建立小文件索引，提升索引速度。然后通过与原有索引的合并，达到优化的目的；</li><li>索引的构建和查询都十分简洁，有强大的类库实现相关功能；</li><li>开发源代码，论坛和资源十分丰富。</li></ul><p>索引的构建过程描述如下：</p><p> 1）判断JRE版本是否为64位和是否支持堆外内存，并创建</p><p>​               1.1  如果满足条件，创建MMapDirectory，此种Directory可以有效的利用虚拟机内存地址空间 ；</p><p>​               1.2  如果不满足以上条件，判断系统是否是windows,如果满足条件，创建SimpleFSDirectory，此种directory提供了性能不太高的多线程支持，lucene推荐使用<a href="https://blog.csdn.net/wuyinggui10000/article/details/45502445" target="_blank" rel="external">NIOFSDirectory</a><code>或者MMapDirectory来替代之；</code></p><p>​               1.3 如果以上均不满足，创建NIOFSDirectory对象，此种directory的英文说明为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An FSDirectory implementation that uses java.nio<span class="string">'s FileChannel'</span>s positional read, which allows multiple threads to read from the same file without synchronizing</div></pre></td></tr></table></figure><p>大意是一个利用了java nio中FileChannel的FSDirectory实现，允许无syschronized的对同一文件进行多线程读</p><p> 2）词库分析器Analyzer创建（需要注意的是使用哪种Analyzer进行索引查询，创建的时候也要使用对应的索引器，否则查询结果有问题）</p><p> 3）IndexWriterConfig对象创建,并获取IndexWriter对象</p><p>​            3.1 判断是覆盖索引还是追加索引，如果是覆盖索引indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</p><p>​            3.2 如果追加indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</p><p>​    4) 遍历根据要索引的对象列表，对单个对象的field进行lucene相关field构建，添加到Document对象中</p><p>​    5）IndexWriter对索引进行写入；</p><p>​    6）IndexWriter执行commit()和close()结束索引创建过程</p><p>以lucene5为例，索引器的创建如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**创建索引写入器</span></div><div class="line"> * <span class="doctag">@param</span> indexPath</div><div class="line"> * <span class="doctag">@param</span> create</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexWriter <span class="title">getIndexWriter</span><span class="params">(String indexPath,<span class="keyword">boolean</span> create)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">    Directory dir = FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">    IndexWriterConfig iwc = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">    <span class="keyword">if</span> (create)&#123;</div><div class="line">        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</div><div class="line">    &#125;</div><div class="line">    IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">    <span class="keyword">return</span> writer;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面给出当时工作需要的创建索引测试例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadIndexTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern p_html = Pattern.compile(<span class="string">"&lt;[^&gt;]+&gt;"</span>, Pattern.CASE_INSENSITIVE);</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException, ParseException </span>&#123;</div><div class="line">String indexPath = <span class="string">"D:\\LuceneIndex\\IQC\\ag\\voice\\20190201"</span>;</div><div class="line">System.out.println(<span class="string">"开始创建索引"</span>);</div><div class="line">IQCConversationInfoBean iqcConversationInfoBean = <span class="keyword">new</span> IQCConversationInfoBean();</div><div class="line">iqcConversationInfoBean.setMediaType(<span class="string">"voice"</span>);</div><div class="line">iqcConversationInfoBean.setCallDate(<span class="string">"20190201"</span>);</div><div class="line">iqcConversationInfoBean.setCallTime(JCalendar.getDate(<span class="string">"20190201145454"</span>, <span class="string">"yyyyMMddHHmmss"</span>));</div><div class="line">iqcConversationInfoBean.setHangupTime(JCalendar.getDate(<span class="string">"20190201145959"</span>, <span class="string">"yyyyMMddHHmmss"</span>)); <span class="comment">// 挂机时间</span></div><div class="line">iqcConversationInfoBean.setChannelCode(<span class="string">"ag"</span>);</div><div class="line">iqcConversationInfoBean.setAccountCode(<span class="string">"Admin"</span>);</div><div class="line">iqcConversationInfoBean.setEmpName(<span class="string">"超级管理员"</span>);</div><div class="line">iqcConversationInfoBean.setLanguage(<span class="string">"1"</span>);</div><div class="line">iqcConversationInfoBean.setCustNo(<span class="string">"123456"</span>);</div><div class="line">iqcConversationInfoBean.setCustName(<span class="string">"洪尼玛"</span>);</div><div class="line">iqcConversationInfoBean.setCallNo(<span class="string">"18565279427"</span>);</div><div class="line">iqcConversationInfoBean.setSatisfiedType(<span class="string">"1"</span>); <span class="comment">// 满意度</span></div><div class="line">        <span class="comment">// 座席通话内容</span></div><div class="line">iqcConversationInfoBean.setAgentContent(<span class="string">"您好，请问有什么可以帮到您请问是陈女士吗啊，对从您实名号，您是通过什么渠道转的？手机银行的您，是同行转账，还是跨行转账？那真没有到账的话，要以系统处理为准呢？他这些要以系统处理为准的，今天是年30系统的。我这边帮您看一下，嗯撤销不了哇，因为您当时选择的普通转账那这个你这什么时候到账，就看那边的系统处理为准的那您可以用此到家吗，你干嘛用普通到账呢啊啊我这边看到您用的是普通转账来的是系统转帐，"</span>);</div><div class="line"><span class="comment">// agentFirst</span></div><div class="line">iqcConversationInfoBean.setAgentFirst(<span class="string">"您好，请问有什么可以帮到您请问是陈女士吗啊，对从您实名号，您是通过什么渠道转的？手机银行的您，是同行转账，还是跨行转账？那真没有到账的话，要以系统处理为准呢？他这些要以系统处理为准的，今天是年30系统的。我这边帮您看一下，嗯撤销不了哇，因为您当时选择的普通转账那这个你这什么时候到账，就看那边的系统处理为准的那您可以用此到家吗，你干嘛用普通到账呢啊啊我这边看到您用的是普通转账来的是系统转帐，"</span>);</div><div class="line"><span class="comment">// agentLast</span></div><div class="line">iqcConversationInfoBean.setAgentLast(<span class="string">"已经登记好了"</span>);</div><div class="line"><span class="comment">// 客户通话内容</span></div><div class="line">iqcConversationInfoBean.setCustContent(<span class="string">"你好，我想问一下，我这将是广州农农商银行，现在我回来到这边那个密码，搞忘记了，可不可以在我换地方改密改密码呢，还还找密码呢"</span>);</div><div class="line"><span class="comment">// 客户首句</span></div><div class="line">iqcConversationInfoBean.setCustFirst(<span class="string">"你好，我想问一下，我这将是广州农农商银行，现在我回来到这边那个密码，搞忘记了，可不可以在我换地方改密改密码呢，还还找密码呢"</span>);</div><div class="line"><span class="comment">// 客户尾句</span></div><div class="line">iqcConversationInfoBean.setCustLast(<span class="string">"结果登记"</span>);</div><div class="line"><span class="comment">// 全部通话内容</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">                iqcConversationInfoBean.setAllContent(<span class="string">"&lt;li start=13070 end=14870 emotion=5.0 speed=4.0 &gt;坐席：您好，请问有什么可以帮您&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=14880 end=21470 emotion=6.0 speed=3.0 &gt;客户：然后你们这个银行，这里呀，那柜员机老是故障啊，嗯，也没用过的维修的&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=21480 end=23270 emotion=6.0 speed=2.68 &gt;坐席：嗯，哪个柜员机呀&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=23280 end=27780 emotion=6.0 speed=1.46 &gt;客户：我们广州市白云区江高镇&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=29000 end=30200 emotion=6.0 speed=3.0 &gt;客户：然后，新楼村&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=30210 end=32250 emotion=6.0 speed=4.11 &gt;坐席：嗯桂圆是有没有那个订单号啊？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=32890 end=36190 emotion=6.0 speed=3.81 &gt;坐席：在屏幕上方有一个本机终端号的，有没有看到？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=36200 end=38590 emotion=6.0 speed=3.51 &gt;客户：没看，但是我我报你帮我查一下&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=38600 end=40690 emotion=6.0 speed=4.01 &gt;坐席：那个地址在哪里啊，刚刚在哪里&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=40700 end=45490 emotion=6.0 speed=2.12 &gt;客户：呃，江高镇，然后新楼村新楼路31号&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=45500 end=46630 emotion=5.0 speed=1.06 &gt;坐席：嗯好&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=11  class=\"silences\"  &gt; 11S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=58500 end=60550 emotion=6.0 speed=3.51 &gt;坐席：他旁边没有网点的他，旁边&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=61420 end=64720 emotion=6.0 speed=2.36 &gt;客户：没有就这个柜员机，我们学校&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=64730 end=66520 emotion=6.0 speed=2.34 &gt;坐席：嗯，什么学校啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=66530 end=68230 emotion=6.0 speed=2.47 &gt;客户：广东、江南理工&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=68870 end=73970 emotion=6.0 speed=3.17 &gt;坐席：学校里面的嘛，对江南理工就是那个江西的，在南方的南吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=73980 end=79170 emotion=6.0 speed=1.38 &gt;客户：然后是江南江南是南方的南&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=80140 end=84040 emotion=6.0 speed=3.69 &gt;坐席：江南理工没有看到他这个有柜员，机的地方啊，他是在&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=84050 end=86900 emotion=6.0 speed=2.1 &gt;客户：哦，江南理工技工学校&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=88210 end=89410 emotion=6.0 speed=3.0 &gt;坐席：在哪个区的？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=89420 end=91140 emotion=6.0 speed=2.09 &gt;客户：白云区江高镇&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=98540 end=99740 emotion=6.0 speed=3.0 &gt;客户：然后那个金融&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=10  class=\"silences\"  &gt; 10S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=99750 end=105570 emotion=6.0 speed=2.47 &gt;坐席：他是在那个往港、煤炭地质局对面，那个技工学校吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=106250 end=109250 emotion=6.0 speed=3.0 &gt;客户：不是我们是白云区江高镇新楼村的&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=109260 end=111950 emotion=6.0 speed=2.23 &gt;坐席：新农村新是哪个新啊？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=111960 end=113150 emotion=6.0 speed=2.52 &gt;客户：新中国的新&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=113160 end=114350 emotion=4.0 speed=0.5 &gt;坐席：嗯&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=114360 end=116880 emotion=6.0 speed=3.33 &gt;客户：楼市大龙的龙村，是村庄的村。&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=118240 end=120340 emotion=6.0 speed=3.14 &gt;坐席：没有看到他这个地点有啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=120350 end=123340 emotion=6.0 speed=3.01 &gt;客户：那我，们在银行的奇怪呢，是因为&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=123350 end=126640 emotion=6.0 speed=3.1 &gt;坐席：您要看一下，他去柜员机的位置才行啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=126650 end=129340 emotion=6.0 speed=4.01 &gt;客户：我们会员就直接就是在我们学校"</span>+i+<span class="string">"里面吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=129350 end=135630 emotion=7.0 speed=3.53 &gt;坐席：是什么学校啊，刚才跟你说了广东将的，其实没有跟他有这个学校，有没有全称呢？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=136300 end=139210 emotion=7.0 speed=2.26 &gt;客户：广东、江南理工技工学校&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=142190 end=148190 emotion=6.0 speed=2.8 &gt;坐席：但是，我们收他技工，学校就只有出来刚刚那个旺港煤炭地质局&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=148200 end=158090 emotion=6.0 speed=2.73 &gt;客户：您的商品一双鞋呢，不，是旺旺，我们是在广州市白云区江高镇新楼村新楼路31号，这个详细的地址&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=9  class=\"silences\"  &gt; 9S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=158100 end=162340 emotion=6.0 speed=4.1 &gt;坐席：嗯，您学校地址，但是，他柜员机不，他不一定是这么登记的吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=162980 end=172900 emotion=6.0 speed=3.81 &gt;客户：那你这个是你们的问题了，你像我这个我是我现在就是就是现在要要告诉你们呢，这里有我们这个，这个地址啊，你们所学校有因为台风的呀啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=11  class=\"silences\"  &gt; 11S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=173540 end=174440 emotion=6.0 speed=3.33 &gt;坐席：好评返现。&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=174450 end=178640 emotion=7.0 speed=3.57 &gt;客户：我整天啊，有问题一直，搞错了，你们要反映上去，上面&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=178650 end=184940 emotion=7.0 speed=3.52 &gt;坐席：但是，您这样去把您那个柜员机上面，它有一个模板套，您的会员区发布宝贝订单号&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=185550 end=186360 emotion=7.0 speed=2.22 &gt;坐席：好不好&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=184950 end=185540 emotion=6.0 speed=1.01 &gt;客户：嗯&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=187000 end=190300 emotion=6.0 speed=3.81 &gt;坐席：但是，我们确实现在没有看到您这个地方，有啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=190310 end=192100 emotion=7.0 speed=3.68 &gt;客户：那您说一下怎么办，因为&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=192110 end=193600 emotion=6.0 speed=4.83 &gt;坐席：我们没有查到我们就没有办&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=193610 end=196850 emotion=7.0 speed=4.44 &gt;客户：反馈到我想问一下，你，说你，你说让我现在怎么办？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=197550 end=201450 emotion=6.0 speed=4.76 &gt;坐席：所以，您看一下您那个柜员机，他旁边是只有一台吗，还是什么情况啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=201460 end=205500 emotion=6.0 speed=2.97 &gt;客户：有一台机黑屏，什么都看不到，整天出故障啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=5  class=\"silences\"  &gt; 5S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=206990 end=208360 emotion=6.0 speed=3.06 &gt;坐席：嗯，稍等一下啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=209060 end=211320 emotion=6.0 speed=3.71 &gt;客户：你们现在真的老子真的有问题啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=213040 end=220180 emotion=6.0 speed=3.78 &gt;客户：你报一个详细地址了，还问我是在哪个，你说的那个不是在那里，这里你们就往那low爆了，知道吧&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=220820 end=223260 emotion=6.0 speed=2.7 &gt;客户：你要找人过来核实修改呀&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=33  class=\"silences\"  &gt; 33S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=256910 end=257430 emotion=4.0 speed=1.15 &gt;客户：嗯&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=258590 end=259330 emotion=5.0 speed=1.62 &gt;客户：是吧&lt;/li&gt;"</span>);</div><div class="line">                iqcConversationInfoBean.setSerialNo(UUID.randomUUID().toString());</div><div class="line">        iqcConversationInfoBean.setAgentMaxSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setAgentMinSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setAgentAvgSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setAgentMaxEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setAgentMinEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setAgentAvgEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setCustMaxSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setCustMinSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setCustAvgSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setCustMaxEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setCustMinEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        iqcConversationInfoBean.setCustAvgEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">        Map&lt;String, Object&gt; textFiled = ReflectUtil.reflectObjectToMap(iqcConversationInfoBean, <span class="keyword">true</span>);</div><div class="line">        </div><div class="line">        Document doc = createDoc(textFiled);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=doc)&#123;</div><div class="line">            addDoc(indexPath, doc, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//System.out.println(i+"索引创建完毕");</span></div><div class="line">    &#125;</div><div class="line">System.out.println(<span class="string">"创建索引完毕"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Document <span class="title">createDoc</span><span class="params">(Map&lt;String, Object&gt; textFiled)</span> </span>&#123;</div><div class="line">        Document doc = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            doc = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (textFiled != <span class="keyword">null</span> &amp;&amp; textFiled.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                doc = <span class="keyword">new</span> Document();</div><div class="line">                <span class="comment">// 遍历需要增加到索引的属性</span></div><div class="line">                List&lt;String&gt; NOT_ANALYZED = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">// 非分析域，但是需要保存</span></div><div class="line">                <span class="keyword">for</span> (String Not : <span class="string">"id;status;update;agentFirst;agentLast;agentContent;custFirst;custLast;custContent;allContent;"</span>.split(<span class="string">";"</span>)) &#123;</div><div class="line"><span class="comment">//                    for (String Not : "id;status;update;mediaType;callDate;channelCode;accountCode;empName;language;custNo;custName;callNo;satisfiedType;agentFirst;agentLast;agentContent;custFirst;custLast;custContent;allContent;".split(";")) &#123;</span></div><div class="line">                    NOT_ANALYZED.add(Not);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (String keyName : textFiled.keySet()) &#123;</div><div class="line">                    <span class="keyword">if</span> (keyName != <span class="keyword">null</span> &amp;&amp; !keyName.isEmpty()) &#123;</div><div class="line">                        <span class="comment">// if</span></div><div class="line">                        <span class="comment">// (keyName.equals(SysConstant.config.getProperty("kbmsID"))||keyName.indexOf(SysConstant.config.getProperty("DIM"))&gt;=0)</span></div><div class="line">                        <span class="comment">// &#123;</span></div><div class="line">                        <span class="keyword">if</span> (keyName.equals(<span class="string">"serialNo"</span>)) &#123;</div><div class="line">                            doc.add(LuceneHelper.getnotanalyzedField(keyName, textFiled.get(keyName)));</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NOT_ANALYZED.contains(keyName)) &#123;</div><div class="line">                            Matcher m_html = p_html.matcher((String) textFiled.get(keyName));</div><div class="line">                            doc.add(<span class="keyword">new</span> Field(keyName, m_html.replaceAll(<span class="string">""</span>), Field.Store.YES,</div><div class="line">                                    Field.Index.NOT_ANALYZED));</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            doc.add(LuceneHelper.getField(keyName, textFiled.get(keyName)));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"无法初始化doc"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> doc;</div><div class="line">    &#125;   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(String fieldName, Object value)</span> </span>&#123;</div><div class="line">        FieldType fieldType = <span class="keyword">new</span> FieldType();</div><div class="line">        fieldType.setOmitNorms(<span class="keyword">true</span>);</div><div class="line">        fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);</div><div class="line">        fieldType.setStored(<span class="keyword">true</span>);</div><div class="line">        fieldType.setTokenized(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Integer) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IntField(fieldName, Integer.parseInt(value.toString()), fieldType);</div><div class="line">            <span class="comment">// return new</span></div><div class="line">            <span class="comment">// NumericDocValuesField(fieldName,Long.parseLong(value.toString()));</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Long) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LongField(fieldName, (Long) value, fieldType);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Float) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FloatField(fieldName, (Float) value, fieldType);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LongField(fieldName, ((Date) value).getTime(), fieldType);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TextField(fieldName, value.toString(), Field.Store.YES);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addDoc</span><span class="params">(String indexPath, Document doc, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 索引配置器</span></div><div class="line">        IndexWriterConfig iwc = <span class="keyword">null</span>;</div><div class="line">        IndexWriter indexWriter = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (indexPath != <span class="keyword">null</span> &amp;&amp; !indexPath.isEmpty() &amp;&amp; doc != <span class="keyword">null</span>) &#123;</div><div class="line">                File indexDir = <span class="keyword">new</span> File(indexPath);</div><div class="line">                <span class="keyword">if</span> (!indexDir.exists())</div><div class="line">                    indexDir.mkdirs();</div><div class="line">                <span class="keyword">if</span> (indexDir.exists()) &#123;</div><div class="line">                    <span class="comment">/* 创建索引文件 */</span></div><div class="line">                    iwc = <span class="keyword">new</span> IndexWriterConfig(ChineseAnalyzerUtil.getAnalyzer());</div><div class="line">                    <span class="comment">// 创建索引文件对象</span></div><div class="line">                    Directory dir = FSDirectory.open(indexDir.toPath());</div><div class="line">                    <span class="keyword">boolean</span> isNeedCreate = indexDir.listFiles().length &gt; <span class="number">0</span> ? <span class="keyword">false</span> : <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">if</span> (isNeedCreate) &#123;<span class="comment">// 是否需要创建,默认 CREATE_OR_APPEND</span></div><div class="line">                        iwc.setOpenMode(OpenMode.CREATE);</div><div class="line">                        System.out.println(<span class="string">"创建新索引,OpenMode==&gt;&gt;CREATE"</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 写入索引文件对象</span></div><div class="line">                    indexWriter = <span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">                    <span class="comment">// 加载到索引中</span></div><div class="line">                    <span class="comment">// 遍历需要增加到索引的属性</span></div><div class="line">                    <span class="comment">// 加载到索引文档</span></div><div class="line">                    <span class="comment">// indexWriter.addDocument(doc);</span></div><div class="line">                    IndexableField kbmsID = doc.getField(<span class="string">"serialNo"</span>);</div><div class="line">                    <span class="keyword">if</span> (kbmsID != <span class="keyword">null</span>) &#123;</div><div class="line">                        String termId = kbmsID.name();</div><div class="line">                        String termValue = kbmsID.stringValue();</div><div class="line">                        indexWriter.updateDocument(<span class="keyword">new</span> Term(termId, termValue), doc);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        indexWriter.addDocument(doc);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 提交到索引</span></div><div class="line">                    indexWriter.commit();</div><div class="line">                    indexWriter.close();</div><div class="line">                    res = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    message = <span class="string">"contentPath 参数为空，正文无法读取，无法创建索引"</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                message = <span class="string">"indexPath:"</span> + indexPath + <span class="string">" 目录不存在，无法创建索引"</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(<span class="string">"创建Lucene索引异常"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (message != <span class="keyword">null</span> &amp;&amp; !message.isEmpty())</div><div class="line">            System.out.println(<span class="string">"message-"</span> + message);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>注意</code>：创建索引的内用是对一通通话的内容进行</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（1）—lucene的IndexWriter对象创建和索引策略的选择&quot;&gt;&lt;a href=&quot;#lucene（1）—lucene的IndexWriter对象创建和索引策略的选择&quot; class=&quot;headerlink&quot; title=&quot;lucene（1）—lucene的IndexWriter对象创建和索引策略的选择&quot;&gt;&lt;/a&gt;lucene（1）—lucene的IndexWriter对象创建和索引策略的选择&lt;/h1&gt;&lt;p&gt;因工作的需要（数据量大造成原有系统查询效率低），最近做了搜索引擎相关的内容，选择了lucene5版本（15年发布的）。&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene索引时join和查询时join使用示例</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/18%E3%80%81lucene%E7%B4%A2%E5%BC%95%E6%97%B6join%E5%92%8C%E6%9F%A5%E8%AF%A2%E6%97%B6join%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/18、lucene索引时join和查询时join使用示例/</id>
    <published>2019-03-16T01:53:14.179Z</published>
    <updated>2019-03-16T03:34:40.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（18）—lucene索引时join和查询时join使用示例"><a href="#lucene（18）—lucene索引时join和查询时join使用示例" class="headerlink" title="lucene（18）—lucene索引时join和查询时join使用示例"></a>lucene（18）—lucene索引时join和查询时join使用示例</h1><p>了解sql的朋友都知道，我们在查询的时候可以采用join查询，即对有一定关联关系的对象进行联合查询来对多维的数据进行整理。这个联合查询的方式挺方便的，跟我们现实生活中的托人找关系类似，我们想要完成一件事，先找自己的熟人，然后通过熟人在一次找到其他，最终通过这种手段找到想要联系到的人。有点类似于”世间万物皆有联系“的感觉。</p><a id="more"></a><p>lucene的join包提供了索引时join和查询时join的功能；</p><h2 id="Index-time-join"><a href="#Index-time-join" class="headerlink" title="Index-time join"></a>Index-time join</h2><p>大意是索引时join提供了查询时join的支持，且IndexWriter.addDocuments()方法调用时被join的documents以单个document块存储索引。索引时join对普通文本内容（如xml文档或数据库表）是方便可用的。特别是对类似于数据库的那种多表关联的情况，我们需要对提供关联关系的列提供join支持；</p><p>在索引时join的时候，索引中的documents被分割成parent documents（每个索引块的最后一个document）和child documents (除了parent documents外的所有documents).  由于lucene并不记录doc块的信息，我们需要提供一个Filter来标示parent documents。</p><p>在搜索结果的时候，我们利用ToParentBlockJoinQuery来从child query到parent document space来remap/join对应的结果。</p><p>如果我们只关注匹配查询条件的parent documents，我们可以用任意的collector来采集匹配到的parent documents；如果我们还想采集匹配parent document查询条件的child documents，我们就需要利用ToParentBlockJoinCollector来进行查询；一旦查询完成，我们可以利用<code>ToParentBlockJoinCollector.getTopGroups()来获取匹配条件的TopGroups.</code></p><h2 id="Query-time-joins"><a href="#Query-time-joins" class="headerlink" title="Query-time joins"></a>Query-time joins</h2><p>查询时join是基于索引词，其实现有两步：</p><ul><li>第一步先从匹配fromQuery的fromField中采集所有的数据；</li><li>从第一步得到的数据中筛选出所有符合条件的documents</li></ul><p>查询时join接收一下输入参数：</p><ul><li>fromField：fromField的名称，即要join的documents中的字段；</li><li>formQuery: 用户的查询条件</li><li>multipleValuesPerDocument： fromField在document是否是多个值</li><li>scoreMode：定义other join side中score是如何被使用的。如果不关注scoring，我们只需要设置成ScoreMode.None，此种方式会忽略评分因此会更高效和节约内存；</li><li>toField：toField的名称，即要join的toField的在对应的document中的字段</li></ul><p>通常查询时join的实现类似于如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String fromField = <span class="string">"from"</span>; <span class="comment">// Name of the from field</span></div><div class="line"><span class="keyword">boolean</span> multipleValuesPerDocument = <span class="keyword">false</span>; <span class="comment">// Set only yo true in the case when your fromField has multiple values per document in your index</span></div><div class="line">String toField = <span class="string">"to"</span>; <span class="comment">// Name of the to field</span></div><div class="line">ScoreMode scoreMode = ScoreMode.Max <span class="comment">// Defines how the scores are translated into the other side of the join.</span></div><div class="line">Query fromQuery = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"content"</span>, searchTerm)); <span class="comment">// Query executed to collect from values to join to the to values</span></div><div class="line"> </div><div class="line">Query joinQuery = JoinUtil.createJoinQuery(fromField, multipleValuesPerDocument, toField, fromQuery, fromSearcher, scoreMode);</div><div class="line">TopDocs topDocs = toSearcher.search(joinQuery, <span class="number">10</span>); <span class="comment">// Note: toSearcher can be the same as the fromSearcher</span></div><div class="line"><span class="comment">// Render topDocs...</span></div></pre></td></tr></table></figure><h2 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h2><p>这里我们模拟6组数据，示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.SortedDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.join.JoinUtil;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.join.ScoreMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> </span>&#123;</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimple</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">final</span> String idField = <span class="string">"id"</span>;</div><div class="line">    <span class="keyword">final</span> String toField = <span class="string">"productId"</span>;</div><div class="line"> </div><div class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">    config.setOpenMode(OpenMode.CREATE);</div><div class="line">    IndexWriter w = <span class="keyword">new</span> IndexWriter(dir, config);</div><div class="line"> </div><div class="line">    <span class="comment">// 0</span></div><div class="line">    Document doc = <span class="keyword">new</span> Document();</div><div class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>, <span class="string">"random text"</span>, Field.Store.YES));</div><div class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"name1"</span>, Field.Store.YES));</div><div class="line">    doc.add(<span class="keyword">new</span> TextField(idField, <span class="string">"1"</span>, Field.Store.YES));</div><div class="line">    doc.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"1"</span>)));</div><div class="line">    </div><div class="line">    w.addDocument(doc);</div><div class="line"> </div><div class="line">    <span class="comment">// 1</span></div><div class="line">    Document doc1 = <span class="keyword">new</span> Document();</div><div class="line">    doc1.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"10.0"</span>, Field.Store.YES));</div><div class="line">    doc1.add(<span class="keyword">new</span> TextField(idField, <span class="string">"2"</span>, Field.Store.YES));</div><div class="line">    doc1.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"2"</span>)));</div><div class="line">    doc1.add(<span class="keyword">new</span> TextField(toField, <span class="string">"1"</span>, Field.Store.YES));</div><div class="line">    doc1.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"1"</span>)));</div><div class="line">    </div><div class="line">    w.addDocument(doc1);</div><div class="line"> </div><div class="line">    <span class="comment">// 2</span></div><div class="line">    Document doc2 = <span class="keyword">new</span> Document();</div><div class="line">    doc2.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"20.0"</span>, Field.Store.YES));</div><div class="line">    doc2.add(<span class="keyword">new</span> TextField(idField, <span class="string">"3"</span>, Field.Store.YES));</div><div class="line">    doc2.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"3"</span>)));</div><div class="line">    doc2.add(<span class="keyword">new</span> TextField(toField, <span class="string">"1"</span>, Field.Store.YES));</div><div class="line">    doc2.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"1"</span>)));</div><div class="line">    </div><div class="line">    w.addDocument(doc2);</div><div class="line"> </div><div class="line">    <span class="comment">// 3</span></div><div class="line">    Document doc3 = <span class="keyword">new</span> Document();</div><div class="line">    doc3.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>, <span class="string">"more random text"</span>, Field.Store.YES));</div><div class="line">    doc3.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"name2"</span>, Field.Store.YES));</div><div class="line">    doc3.add(<span class="keyword">new</span> TextField(idField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">    doc3.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">    </div><div class="line">    w.addDocument(doc3);</div><div class="line">    </div><div class="line"> </div><div class="line">    <span class="comment">// 4</span></div><div class="line">    Document doc4 = <span class="keyword">new</span> Document();</div><div class="line">    doc4.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"10.0"</span>, Field.Store.YES));</div><div class="line">    doc4.add(<span class="keyword">new</span> TextField(idField, <span class="string">"5"</span>, Field.Store.YES));</div><div class="line">    doc4.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"5"</span>)));</div><div class="line">    doc4.add(<span class="keyword">new</span> TextField(toField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">    doc4.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">    w.addDocument(doc4);</div><div class="line"> </div><div class="line">    <span class="comment">// 5</span></div><div class="line">    Document doc5 = <span class="keyword">new</span> Document();</div><div class="line">    doc5.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"20.0"</span>, Field.Store.YES));</div><div class="line">    doc5.add(<span class="keyword">new</span> TextField(idField, <span class="string">"6"</span>, Field.Store.YES));</div><div class="line">    doc5.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"6"</span>)));</div><div class="line">    doc5.add(<span class="keyword">new</span> TextField(toField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">    doc5.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">    w.addDocument(doc5);</div><div class="line">    </div><div class="line">    <span class="comment">//6</span></div><div class="line">    Document doc6 = <span class="keyword">new</span> Document();</div><div class="line">    doc6.add(<span class="keyword">new</span> TextField(toField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">    doc6.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">    w.addDocument(doc6);</div><div class="line">    w.commit();</div><div class="line">    w.close();</div><div class="line">    IndexReader reader = DirectoryReader.open(dir);</div><div class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    </div><div class="line"> </div><div class="line">    <span class="comment">// Search for product</span></div><div class="line">    Query joinQuery = JoinUtil.createJoinQuery(idField, <span class="keyword">false</span>, toField, <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"name"</span>, <span class="string">"name2"</span>)), indexSearcher, ScoreMode.None);</div><div class="line">    System.out.println(joinQuery);</div><div class="line">    TopDocs result = indexSearcher.search(joinQuery, <span class="number">10</span>);</div><div class="line">    System.out.println(<span class="string">"查询到的匹配数据："</span>+result.totalHits);</div><div class="line">    </div><div class="line"> </div><div class="line">    joinQuery = JoinUtil.createJoinQuery(idField, <span class="keyword">false</span>, toField, <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"name"</span>, <span class="string">"name1"</span>)), indexSearcher, ScoreMode.None);</div><div class="line">    result = indexSearcher.search(joinQuery, <span class="number">10</span>);</div><div class="line">    System.out.println(<span class="string">"查询到的匹配数据："</span>+result.totalHits);</div><div class="line">    <span class="comment">// Search for offer</span></div><div class="line">    joinQuery = JoinUtil.createJoinQuery(toField, <span class="keyword">false</span>, idField, <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"id"</span>, <span class="string">"5"</span>)), indexSearcher, ScoreMode.None);</div><div class="line">    result = indexSearcher.search(joinQuery, <span class="number">10</span>);</div><div class="line">    System.out.println(<span class="string">"查询到的匹配数据："</span>+result.totalHits);</div><div class="line"> </div><div class="line">    indexSearcher.getIndexReader().close();</div><div class="line">    dir.close();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>程序的运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查询到的匹配数据：3</div><div class="line">查询到的匹配数据：2</div><div class="line">查询到的匹配数据：1</div></pre></td></tr></table></figure><p>以第一个查询为例：</p><p>我们在查询的时候先根据name=name2这个查询条件找到记录为doc3的document,由于查询的是toField匹配的，我们在根据doc3找到其toField的值为4，然后查询条件变为productId:4，找出除本条记录外的其他数据，结果正好为3，符合条件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（18）—lucene索引时join和查询时join使用示例&quot;&gt;&lt;a href=&quot;#lucene（18）—lucene索引时join和查询时join使用示例&quot; class=&quot;headerlink&quot; title=&quot;lucene（18）—lucene索引时join和查询时join使用示例&quot;&gt;&lt;/a&gt;lucene（18）—lucene索引时join和查询时join使用示例&lt;/h1&gt;&lt;p&gt;了解sql的朋友都知道，我们在查询的时候可以采用join查询，即对有一定关联关系的对象进行联合查询来对多维的数据进行整理。这个联合查询的方式挺方便的，跟我们现实生活中的托人找关系类似，我们想要完成一件事，先找自己的熟人，然后通过熟人在一次找到其他，最终通过这种手段找到想要联系到的人。有点类似于”世间万物皆有联系“的感觉。&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene搜索之expressions表达式处理</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/17%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8Bexpressions%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%84%E7%90%86/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/17、lucene搜索之expressions表达式处理/</id>
    <published>2019-03-16T01:53:14.149Z</published>
    <updated>2019-03-16T03:34:32.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（17）—lucene搜索之expressions表达式处理"><a href="#lucene（17）—lucene搜索之expressions表达式处理" class="headerlink" title="lucene（17）—lucene搜索之expressions表达式处理"></a>lucene（17）—lucene搜索之expressions表达式处理</h1><p>有时候我们在做lucene的结果展示的时候可能需要对多个列的内容进行计算，根据多个field对应的值做数值方面的运算。</p><p>lucene自4.6版本起，提供了用于运算的expression模块；</p><a id="more"></a><p>expression分为两部分：</p><ul><li><code>org.apache.lucene.expressions：提供了字段绑定和相关的表达式参数传递的功能；</code></li><li><code>org.apache.lucene.expressions.js:提供了表达式定义的功能。</code></li></ul><h2 id="Expression类使用示例"><a href="#Expression类使用示例" class="headerlink" title="Expression类使用示例"></a>Expression类使用示例</h2><p>Expression是提供document的运算的支持类；</p><p>我们的运算表达式和其绑定内容通常类似于如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// compile an expression:</span></div><div class="line">Expression expr = JavascriptCompiler.compile(<span class="string">"sqrt(_score) + ln(popularity)"</span>);</div><div class="line"></div><div class="line"><span class="comment">// SimpleBindings just maps variables to SortField instances</span></div><div class="line">SimpleBindings bindings = <span class="keyword">new</span> SimpleBindings();    </div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"_score"</span>, SortField.Type.SCORE));</div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"popularity"</span>, SortField.Type.INT));</div><div class="line"></div><div class="line"><span class="comment">// create a sort field and sort by it (reverse order)</span></div><div class="line">Sort sort = <span class="keyword">new</span> Sort(expr.getSortField(bindings, <span class="keyword">true</span>));</div><div class="line">Query query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"body"</span>, <span class="string">"contents"</span>));</div><div class="line">searcher.search(query, <span class="keyword">null</span>, <span class="number">10</span>, sort);</div></pre></td></tr></table></figure><p>如上所示，我们对document中的_score和popularity两个字段进行值的运算，这里是对_score开平方之后和popularity的对数运算求和，运算方式的定义在第一行；</p><p>下边有定义了SimpleBindings，binding主要是对运算的数据进行数据绑定；</p><p>最终的查询结果是根据以上的运算结果采取倒排序的方式表达式说明表达式的构造可以采用如下的几种来进行组合：</p><p>数值型的</p><ul><li>加减乘除取模（+-*/%）等运算符</li><li>移位运算符：| &amp; ^ ~ &lt;&lt; &gt;&gt; &gt;&gt;&gt;</li><li>布尔运算符（包括三目运算符）：     &amp;&amp; || ! ?:</li><li>比较运算符：&lt; &lt;= == &gt;= &gt;</li><li>数学运算函数：abs ceil exp floor ln log10 logn max min sqrt pow</li><li>三角运算函数：acosh acos asinh asin atanh atan atan2 cosh cos sinh sin tanh tan</li><li>haversin公式</li><li>min,max函数</li></ul><p>代码示例：</p><p>我写了一个测试程序，模拟长方形的运算并排序；</p><p>面积倒序排序；当面积相同时，按宽度倒序，长度倒序；</p><p>周长倒序排序；周长相同时，按宽度倒序，长度倒序；</p><p>示例程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.expression;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.expressions.Expression;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.expressions.SimpleBindings;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.expressions.js.JavascriptCompiler;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneExpressionTest</span></span>&#123;</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Directory directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">config.setOpenMode(OpenMode.CREATE_OR_APPEND);</div><div class="line">IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, config);</div><div class="line"></div><div class="line">Document doc = <span class="keyword">new</span> Document();</div><div class="line"><span class="comment">//模拟长方形</span></div><div class="line">doc.add(<span class="keyword">new</span> IntField(<span class="string">"width"</span>, <span class="number">3</span>,Field.Store.YES));</div><div class="line">doc.add(<span class="keyword">new</span> IntField(<span class="string">"longth"</span>, <span class="number">4</span>,Field.Store.YES));</div><div class="line">doc.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"width"</span>, <span class="number">3</span>));</div><div class="line">doc.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longth"</span>, <span class="number">4</span>));</div><div class="line">writer.addDocument(doc);</div><div class="line"></div><div class="line">Document doc1 = <span class="keyword">new</span> Document();</div><div class="line">doc1.add(<span class="keyword">new</span> IntField(<span class="string">"width"</span>, <span class="number">2</span>,Field.Store.YES));</div><div class="line">doc1.add(<span class="keyword">new</span> IntField(<span class="string">"longth"</span>, <span class="number">5</span>,Field.Store.YES));</div><div class="line">doc1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"width"</span>, <span class="number">2</span>));</div><div class="line">doc1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longth"</span>, <span class="number">5</span>));</div><div class="line">writer.addDocument(doc1);</div><div class="line"></div><div class="line">Document doc2 = <span class="keyword">new</span> Document();</div><div class="line">doc2.add(<span class="keyword">new</span> IntField(<span class="string">"width"</span>, <span class="number">2</span>,Field.Store.YES));</div><div class="line">doc2.add(<span class="keyword">new</span> IntField(<span class="string">"longth"</span>, <span class="number">6</span>,Field.Store.YES));</div><div class="line">doc2.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"width"</span>, <span class="number">2</span>));</div><div class="line">doc2.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longth"</span>, <span class="number">6</span>));</div><div class="line">writer.addDocument(doc2);</div><div class="line"></div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 面积比较</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAcreage</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Expression expr = JavascriptCompiler.compile(<span class="string">"width*longth"</span>);</div><div class="line"></div><div class="line">SimpleBindings bindings = <span class="keyword">new</span> SimpleBindings();    </div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"width"</span>, SortField.Type.INT));</div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"longth"</span>, SortField.Type.INT));</div><div class="line"></div><div class="line">Sort sort = <span class="keyword">new</span> Sort(expr.getSortField(bindings, <span class="keyword">true</span>));</div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line"></div><div class="line">Directory directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">IndexReader reader = DirectoryReader.open(directory);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">TopDocs docs = searcher.search(query, <span class="number">10</span>, sort);</div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : docs.scoreDocs) &#123;</div><div class="line">System.out.println(searcher.doc(scoreDoc.doc));</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 周长比较</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCircum</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Expression expr = JavascriptCompiler.compile(<span class="string">"width+longth+sqrt(pow(width,2)+pow(longth,2))"</span>);</div><div class="line"></div><div class="line">SimpleBindings bindings = <span class="keyword">new</span> SimpleBindings();    </div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"width"</span>, SortField.Type.INT));</div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"longth"</span>, SortField.Type.INT));</div><div class="line"></div><div class="line">Sort sort = <span class="keyword">new</span> Sort(expr.getSortField(bindings, <span class="keyword">true</span>));</div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line"></div><div class="line">Directory directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">IndexReader reader = DirectoryReader.open(directory);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">TopDocs docs = searcher.search(query, <span class="number">10</span>, sort);</div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : docs.scoreDocs) &#123;</div><div class="line">System.out.println(searcher.doc(scoreDoc.doc));</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>面积的比较运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;width:3&gt; stored&lt;longth:4&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:6&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:5&gt;&gt;</div></pre></td></tr></table></figure><p>同样的，周长比较的运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:6&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:5&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:3&gt; stored&lt;longth:4&gt;&gt;</div></pre></td></tr></table></figure><p>以上是lucene的expression的应用,源代码下载地址：</p><p><a href="http://download.csdn.net/detail/wuyinggui10000/8762423" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8762423</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（17）—lucene搜索之expressions表达式处理&quot;&gt;&lt;a href=&quot;#lucene（17）—lucene搜索之expressions表达式处理&quot; class=&quot;headerlink&quot; title=&quot;lucene（17）—lucene搜索之expressions表达式处理&quot;&gt;&lt;/a&gt;lucene（17）—lucene搜索之expressions表达式处理&lt;/h1&gt;&lt;p&gt;有时候我们在做lucene的结果展示的时候可能需要对多个列的内容进行计算，根据多个field对应的值做数值方面的运算。&lt;/p&gt;
&lt;p&gt;lucene自4.6版本起，提供了用于运算的expression模块；&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene搜索之facet查询查询示例（2）</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/16%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8Bfacet%E6%9F%A5%E8%AF%A2%E6%9F%A5%E8%AF%A2%E7%A4%BA%E4%BE%8B%EF%BC%882%EF%BC%89/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/16、lucene搜索之facet查询查询示例（2）/</id>
    <published>2019-03-16T01:53:14.149Z</published>
    <updated>2019-03-16T03:34:23.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（16）—lucene搜索之facet查询查询示例（2）"><a href="#lucene（16）—lucene搜索之facet查询查询示例（2）" class="headerlink" title="lucene（16）—lucene搜索之facet查询查询示例（2）"></a>lucene（16）—lucene搜索之facet查询查询示例（2）</h1><p>lucene（14）—lucene搜索之facet索引原理和facet查询实例，上篇主要是统计facet的dim和每个种类对应的数量，个人感觉这个跟lucene的group不同的在于facet的存储类似于hash（key-field-value）形式的，而group则是单一的map（key-value）形式的，虽然都可以统计某一品类的数量，显然facet更具扩展性。</p><a id="more"></a><h2 id="key-field-value查询"><a href="#key-field-value查询" class="headerlink" title="key-field-value查询"></a>key-field-value查询</h2><p>facet可以对某一个维度的满足某个条件的结果进行统计，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Test</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDrillDownSlide</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">   DirectoryReader indexReader = DirectoryReader.open(directory);</div><div class="line">   IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(indexReader);</div><div class="line">   DrillSideways ds = <span class="keyword">new</span> DrillSideways(searcher, config, taxoReader);</div><div class="line">   DrillDownQuery ddq = <span class="keyword">new</span> DrillDownQuery(config);</div><div class="line">   ddq.add(<span class="string">"filePath"</span>, <span class="string">"ik"</span>);</div><div class="line">   DrillSidewaysResult r = ds.search(ddq, <span class="number">10</span>);</div><div class="line">   TopDocs hits = r.hits;</div><div class="line">   <span class="keyword">for</span> (ScoreDoc scoreDoc : hits.scoreDocs) &#123;</div><div class="line">    Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">    System.out.println(doc.get(<span class="string">"path"</span>));</div><div class="line">   &#125;</div><div class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">   e.printStackTrace();</div><div class="line">  &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>这里我们搜索的dim是filePath，查找的范围是ik相关联的数据，对应的查询结果就是所有包含在IK文件夹下的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\IKAnalyzer.cfg.xml</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\IKAnalyzer2012FF_u1.jar</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\IKAnalyzer2015.jar</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\LICENSE.txt</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\NOTICE.txt</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\stopword.dic</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\allclasses-frame.html</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\allclasses-noframe.html</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\constant-values.html</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\deprecated-list.html</div></pre></td></tr></table></figure><h2 id="range查询"><a href="#range查询" class="headerlink" title="range查询"></a>range查询</h2><p>facet还支持range查询，range查询的类型包括DoubleRange和LongRange；其对应的Facets为DoubleRangeFacets和LongRangeFacets;</p><p>以LongRangeFacetCounts为例，LongRangeFacetCounts可以对long类型的数值进行整理查询</p><p>这里我们对每个文档的单词数量进行区间的分组，range查询示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOverlappedEndStart</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexReader reader = DirectoryReader.open(directory);</div><div class="line">FacetsCollector fc = <span class="keyword">new</span> FacetsCollector();</div><div class="line">    IndexSearcher s = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    s.search(<span class="keyword">new</span> MatchAllDocsQuery(), fc);</div><div class="line">    Facets facets = <span class="keyword">new</span> LongRangeFacetCounts(<span class="string">"contentLength"</span>, fc,</div><div class="line">            <span class="keyword">new</span> LongRange(<span class="string">"0-100"</span>, <span class="number">0L</span>, <span class="keyword">true</span>, <span class="number">100L</span>, <span class="keyword">true</span>),</div><div class="line">            <span class="keyword">new</span> LongRange(<span class="string">"100-200"</span>, <span class="number">100L</span>, <span class="keyword">true</span>, <span class="number">200L</span>, <span class="keyword">true</span>),</div><div class="line">            <span class="keyword">new</span> LongRange(<span class="string">"200-300"</span>, <span class="number">200L</span>, <span class="keyword">true</span>, <span class="number">300L</span>, <span class="keyword">true</span>),</div><div class="line">            <span class="keyword">new</span> LongRange(<span class="string">"300-400"</span>, <span class="number">300L</span>, <span class="keyword">true</span>, <span class="number">400L</span>, <span class="keyword">true</span>));</div><div class="line">    FacetResult result = facets.getTopChildren(<span class="number">10</span>, <span class="string">"contentLength"</span>);</div><div class="line">    System.out.println(result.toString());</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dim=contentLength path=[] value=22 childCount=4</div><div class="line">  0-100 (7)</div><div class="line">  100-200 (9)</div><div class="line">  200-300 (3)</div><div class="line">  300-400 (3)</div></pre></td></tr></table></figure><h2 id="多个dim查询"><a href="#多个dim查询" class="headerlink" title="多个dim查询"></a>多个dim查询</h2><p>facet里DrillSideways可以定义多个facetCount的查询，这时返回的结果为各个facet对应的统计数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMixedRangeAndNonRangeTaxonomy</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexReader reader = DirectoryReader.open(directory);</div><div class="line">    IndexSearcher s = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    DrillSideways ds = <span class="keyword">new</span> DrillSideways(s, config, taxoReader)&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Facets <span class="title">buildFacetsResult</span><span class="params">(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims)</span> <span class="keyword">throws</span> IOException </span>&#123;        </div><div class="line">          FacetsCollector fieldFC = drillDowns;</div><div class="line">          FacetsCollector dimFC = drillDowns;</div><div class="line">          <span class="keyword">if</span> (drillSideways != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;drillSideways.length;i++) &#123;</div><div class="line">              String dim = drillSidewaysDims[i];</div><div class="line">              <span class="keyword">if</span> (dim.equals(<span class="string">"contentLength"</span>)) &#123;</div><div class="line">                fieldFC = drillSideways[i];</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dimFC = drillSideways[i];</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          Map&lt;String,Facets&gt; byDim = <span class="keyword">new</span> HashMap&lt;String,Facets&gt;();</div><div class="line">          byDim.put(<span class="string">"contentLength"</span>,<span class="keyword">new</span> LongRangeFacetCounts(<span class="string">"contentLength"</span>, fieldFC,</div><div class="line">                          <span class="keyword">new</span> LongRange(<span class="string">"less than 100"</span>, <span class="number">0L</span>, <span class="keyword">true</span>, <span class="number">100L</span>, <span class="keyword">false</span>),</div><div class="line">                          <span class="keyword">new</span> LongRange(<span class="string">"between 100 and 200"</span>, <span class="number">100L</span>, <span class="keyword">true</span>, <span class="number">200L</span>, <span class="keyword">false</span>),</div><div class="line">                          <span class="keyword">new</span> LongRange(<span class="string">"over 200"</span>, <span class="number">200L</span>, <span class="keyword">true</span>, Integer.MAX_VALUE, <span class="keyword">false</span>)));</div><div class="line">          byDim.put(<span class="string">"dim"</span>, <span class="keyword">new</span> FastTaxonomyFacetCounts(taxoReader, config, dimFC));</div><div class="line">          <span class="keyword">return</span> <span class="keyword">new</span> MultiFacets(byDim);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">scoreSubDocsAtOnce</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    DrillDownQuery ddq = <span class="keyword">new</span> DrillDownQuery(config);</div><div class="line">    DrillSidewaysResult dsr = ds.search(ddq, <span class="number">10</span>);</div><div class="line">    Facets facet = dsr.facets;</div><div class="line">    List&lt;FacetResult&gt; results = facet.getAllDims(reader.maxDoc());</div><div class="line">    <span class="keyword">for</span> (FacetResult facetResult : results) &#123;</div><div class="line">System.out.println(facetResult.dim);</div><div class="line">LabelAndValue[] values = facetResult.labelValues;</div><div class="line"><span class="keyword">for</span> (LabelAndValue labelAndValue : values) &#123;</div><div class="line">System.out.println(<span class="string">"\t"</span>+labelAndValue.label +<span class="string">"       "</span>+labelAndValue.value);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dim</div><div class="line">odd       126</div><div class="line">even       119</div><div class="line">contentLength</div><div class="line">less than 100       7</div><div class="line">between 100 and 200       9</div><div class="line">over 200       229</div></pre></td></tr></table></figure><h2 id="对单个range的列表查询支持"><a href="#对单个range的列表查询支持" class="headerlink" title="对单个range的列表查询支持"></a>对单个range的列表查询支持</h2><p>facet支持单个range的区间查询，这样可以查询出此range对饮的TopDocs列表，等同于返回了document对象列表；</p><p>这里我们查询内容长度在0到100之间的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDrillDownQueryWithRange</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexReader reader = DirectoryReader.open(directory);</div><div class="line">    IndexSearcher s = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    DrillDownQuery ddq = <span class="keyword">new</span> DrillDownQuery(config);</div><div class="line">    ddq.add(<span class="string">"contentLength"</span>, NumericRangeQuery.newLongRange(<span class="string">"contentLength"</span>, <span class="number">0l</span>, <span class="number">100l</span>, <span class="keyword">true</span>, <span class="keyword">false</span>));<span class="comment">//;</span></div><div class="line">    TopDocs docs = s.search(ddq, reader.maxDoc());</div><div class="line">    System.out.println(<span class="string">"查询到的数据总数："</span>+docs.totalHits);</div><div class="line">    <span class="keyword">for</span> (ScoreDoc scoreDoc : docs.scoreDocs) &#123;</div><div class="line">System.out.println(s.doc(scoreDoc.doc).get(<span class="string">"path"</span>));</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">查询到的数据总数：7</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\DONATE.txt</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\jcseg-elasticsearch\src\main\resources\es-plugin.properties</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\lexicon\lex-autoload.todo</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\lexicon\lex-en-pun.lex</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\lexicon\lex-ln-adorn.lex</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\resources\inherit.gif</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\src\ext.dic</div></pre></td></tr></table></figure><p>本节内容都是示例，个人觉得这种会比较直观些，facet涉及的面比较广，这里没有facet的sort和其他相关操作，会在后续补上，希望大家持续关注。﻿﻿ </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（16）—lucene搜索之facet查询查询示例（2）&quot;&gt;&lt;a href=&quot;#lucene（16）—lucene搜索之facet查询查询示例（2）&quot; class=&quot;headerlink&quot; title=&quot;lucene（16）—lucene搜索之facet查询查询示例（2）&quot;&gt;&lt;/a&gt;lucene（16）—lucene搜索之facet查询查询示例（2）&lt;/h1&gt;&lt;p&gt;lucene（14）—lucene搜索之facet索引原理和facet查询实例，上篇主要是统计facet的dim和每个种类对应的数量，个人感觉这个跟lucene的group不同的在于facet的存储类似于hash（key-field-value）形式的，而group则是单一的map（key-value）形式的，虽然都可以统计某一品类的数量，显然facet更具扩展性。&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/15%E3%80%81java%E8%AF%BB%E5%8F%96word%20excel%20pdf%E5%8F%8Alucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2RegExQuery%E5%92%8C%E6%89%8B%E6%9C%BA%E9%82%AE%E7%AE%B1%E6%9F%A5%E8%AF%A2%E7%A4%BA%E4%BE%8B/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/15、java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例/</id>
    <published>2019-03-16T01:53:14.139Z</published>
    <updated>2019-03-16T03:34:14.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（15）—java读取word-excel-pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例"><a href="#lucene（15）—java读取word-excel-pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例" class="headerlink" title="lucene（15）—java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例"></a>lucene（15）—java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例</h1><p>读取文本文件中的内容，找出文件中的手机号和邮箱，我自己写了一个读取文档的内容的正则查询示例，用于匹配文件中是否含有邮箱或者手机号，这个等于是对之前的文本处理工具的一个梳理，同时结合lucene内部提供的正则匹配查询RegexQuery；</p><p>废话不多说了，直接上代码，这里先对文件内容读取分类处理，分为pdf word excel 和普通文本四类，不同的种类读取文本内容不一样</p><p>pdf利用pdfbox读取内容，word和excel利用poi进行读取内容，文本文档利用jdk自带的读取</p><a id="more"></a><h2 id="读取pdf、word、excel和普通文本文档内容（支持word-excel-2007）"><a href="#读取pdf、word、excel和普通文本文档内容（支持word-excel-2007）" class="headerlink" title="读取pdf、word、excel和普通文本文档内容（支持word excel 2007）"></a>读取pdf、word、excel和普通文本文档内容（支持word excel 2007）</h2><p>这里代码做了一点调整， 主要是对excel格式的空行和空列的过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.util;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.apache.pdfbox.PDFReader;</div><div class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDDocument;</div><div class="line"><span class="keyword">import</span> org.apache.pdfbox.util.PDFTextStripper;</div><div class="line"><span class="keyword">import</span> org.apache.poi.EncryptedDocumentException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.POIXMLDocument;</div><div class="line"><span class="keyword">import</span> org.apache.poi.POIXMLTextExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hwpf.extractor.WordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.OpenXML4JException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellStyle;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.WorkbookFactory;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xwpf.extractor.XWPFWordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.xmlbeans.XmlException;</div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**读取文件信息和下属文件夹</span></div><div class="line"> * <span class="doctag">@param</span> folder</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> OpenXML4JException </div><div class="line"> * <span class="doctag">@throws</span> XmlException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;FileBean&gt; <span class="title">getFolderFiles</span><span class="params">(String folder)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">List&lt;FileBean&gt; fileBeans = <span class="keyword">new</span> LinkedList&lt;FileBean&gt;();</div><div class="line">File file = <span class="keyword">new</span> File(folder);</div><div class="line"><span class="keyword">if</span>(file.isDirectory())&#123;</div><div class="line">File[] files = file.listFiles();</div><div class="line"><span class="keyword">if</span>(files != <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">for</span> (File file2 : files) &#123;</div><div class="line">fileBeans.addAll(getFolderFiles(file2.getAbsolutePath()));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">FileBean bean = <span class="keyword">new</span> FileBean();</div><div class="line">String filePath = file.getAbsolutePath();</div><div class="line">bean.setPath(file.getAbsolutePath());</div><div class="line">bean.setModified(file.lastModified());</div><div class="line">String content = <span class="string">""</span>;</div><div class="line"><span class="keyword">if</span>(filePath.endsWith(<span class="string">".doc"</span>) || filePath.endsWith(<span class="string">".docx"</span>))&#123;</div><div class="line">content = readDoc(file);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(filePath.endsWith(<span class="string">".xls"</span>) || filePath.endsWith(<span class="string">".xlsx"</span>))&#123;</div><div class="line">content = readExcel(file);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(filePath.endsWith(<span class="string">".pdf"</span>))&#123;</div><div class="line">content = readPdf(file);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">content = <span class="keyword">new</span> String(Files.readAllBytes(Paths.get(folder)));</div><div class="line">&#125;</div><div class="line">bean.setContent(content);</div><div class="line">fileBeans.add(bean);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> fileBeans;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**讀取excel文件</span></div><div class="line"> * <span class="doctag">@param</span> file</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> * <span class="doctag">@throws</span> InvalidFormatException </div><div class="line"> * <span class="doctag">@throws</span> EncryptedDocumentException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readExcel</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">String filePath = file.getAbsolutePath();</div><div class="line">StringBuffer content = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</div><div class="line"><span class="keyword">if</span>(filePath.endsWith(<span class="string">".xls"</span>))&#123;</div><div class="line">InputStream inp = <span class="keyword">new</span> FileInputStream(filePath);</div><div class="line">    Workbook wb = WorkbookFactory.create(inp);   </div><div class="line">    Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sheet.getFirstRowNum();i&lt;= sheet.getPhysicalNumberOfRows();i++)&#123;  </div><div class="line">    HSSFRow row = (HSSFRow) sheet.getRow(i);  </div><div class="line">    <span class="keyword">if</span> (row == <span class="keyword">null</span>) &#123;  </div><div class="line">      <span class="keyword">continue</span>;  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = row.getFirstCellNum(); j &lt;= row.getLastCellNum(); j++) &#123; </div><div class="line">    <span class="keyword">if</span>(j &lt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">continue</span>;<span class="comment">//增加下标判断</span></div><div class="line">    &#125;</div><div class="line">    HSSFCell cell = row.getCell(j);  </div><div class="line">    <span class="keyword">if</span> (cell == <span class="keyword">null</span>) &#123;  </div><div class="line">      <span class="keyword">continue</span>;  </div><div class="line">    &#125;</div><div class="line">    content.append(cell.getStringCellValue());</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    wb.close();</div><div class="line">    inp.close();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">XSSFWorkbook xwb = <span class="keyword">new</span> XSSFWorkbook(file.getAbsolutePath());</div><div class="line">XSSFSheet sheet = xwb.getSheetAt(<span class="number">0</span>);  </div><div class="line"><span class="comment">// 定义 row、cell  </span></div><div class="line">XSSFRow row;  </div><div class="line">String cell;  </div><div class="line"><span class="comment">// 循环输出表格中的内容  </span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = sheet.getFirstRowNum(); i &lt; sheet.getPhysicalNumberOfRows(); i++) &#123;  </div><div class="line">    row = sheet.getRow(i);  </div><div class="line">    <span class="keyword">if</span>(row == <span class="keyword">null</span>)&#123;</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = row.getFirstCellNum(); j &lt; row.getPhysicalNumberOfCells(); j++) &#123;  </div><div class="line">        <span class="comment">// 通过 row.getCell(j).toString() 获取单元格内容，</span></div><div class="line">    <span class="keyword">if</span>(j&lt;<span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    XSSFCell xfcell = row.getCell(j);</div><div class="line">    <span class="keyword">if</span>(xfcell == <span class="keyword">null</span>)&#123;</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    xfcell.setCellType(Cell.CELL_TYPE_STRING);<span class="comment">//数值型的转成文本型</span></div><div class="line">        cell = xfcell.getStringCellValue();</div><div class="line">        content.append(cell+<span class="string">" "</span>);</div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> content.toString();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**讀取word內容</span></div><div class="line"> * <span class="doctag">@param</span> file</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> * <span class="doctag">@throws</span> OpenXML4JException </div><div class="line"> * <span class="doctag">@throws</span> XmlException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readDoc</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException, XmlException, OpenXML4JException </span>&#123;</div><div class="line">String filePath = file.getAbsolutePath();</div><div class="line"><span class="keyword">if</span>(filePath.endsWith(<span class="string">".doc"</span>))&#123;</div><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">WordExtractor ex = <span class="keyword">new</span> WordExtractor(is);  </div><div class="line">String text2003 = ex.getText();  </div><div class="line">ex.close();</div><div class="line">is.close();</div><div class="line"><span class="keyword">return</span> text2003;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">OPCPackage opcPackage = POIXMLDocument.openPackage(filePath);  </div><div class="line">POIXMLTextExtractor extractor = <span class="keyword">new</span> XWPFWordExtractor(opcPackage);  </div><div class="line">String text2007 = extractor.getText();  </div><div class="line">extractor.close();</div><div class="line"><span class="keyword">return</span> text2007;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**讀取pdf內容</span></div><div class="line"> * <span class="doctag">@param</span> file</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readPdf</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">PDDocument doc = PDDocument.load(file.getAbsolutePath());</div><div class="line">PDFTextStripper stripper = <span class="keyword">new</span> PDFTextStripper();</div><div class="line">String content = stripper.getText(doc);</div><div class="line">doc.close();</div><div class="line"><span class="keyword">return</span> content;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="正则查询query构建"><a href="#正则查询query构建" class="headerlink" title="正则查询query构建"></a>正则查询query构建</h2><p>在原有 lucene 查询的工具类的基础上加入正则查询的构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**获取regexQuery对象</span></div><div class="line"> * <span class="doctag">@param</span> field</div><div class="line"> * <span class="doctag">@param</span> regex</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getRegexExpQuery</span><span class="params">(String field,String regex)</span></span>&#123;</div><div class="line">Query query = <span class="keyword">null</span>;</div><div class="line">Term term = <span class="keyword">new</span> Term(field, regex);</div><div class="line">query = <span class="keyword">new</span> RegexpQuery(term);</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最终的searchUtil的内容为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.NumericRangeQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.RegexpQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField.Type;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</div><div class="line"><span class="comment">/**获取IndexSearcher对象（适合单索引目录查询使用）</span></div><div class="line"> * <span class="doctag">@param</span> indexPath 索引目录</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcher</span><span class="params">(String indexPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">DirectoryReader reader = DirectoryReader.open(IndexUtil.getIndexWriter(indexPath, <span class="keyword">true</span>), realtime);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line"><span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">service.shutdown();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> searcher;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**多目录多线程查询</span></div><div class="line"> * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line"> * <span class="doctag">@param</span> service 多线程查询</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">MultiReader multiReader;</div><div class="line">File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">File[] files = file.listFiles();</div><div class="line">IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line"><span class="keyword">if</span>(!realtime)&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">readers[i] = DirectoryReader.open(IndexUtil.getIndexWriter(files[i].getPath(), <span class="keyword">true</span>), <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line"><span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">service.shutdown();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> searcher;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**从指定配置项中查询</span></div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@param</span> analyzer 分词器</div><div class="line"> * <span class="doctag">@param</span> field 字段</div><div class="line"> * <span class="doctag">@param</span> fieldType字段类型</div><div class="line"> * <span class="doctag">@param</span> queryStr 查询条件</div><div class="line"> * <span class="doctag">@param</span> range 是否区间查询</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String field,String fieldType,String queryStr,<span class="keyword">boolean</span> range)</span></span>&#123;</div><div class="line">Query q = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(queryStr != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(queryStr))&#123;</div><div class="line"><span class="keyword">if</span>(range)&#123;</div><div class="line">String[] strs = queryStr.split(<span class="string">"\\|"</span>);</div><div class="line"><span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line"><span class="keyword">int</span> min = <span class="keyword">new</span> Integer(strs[<span class="number">0</span>]);</div><div class="line"><span class="keyword">int</span> max = <span class="keyword">new</span> Integer(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newIntRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">Double min = <span class="keyword">new</span> Double(strs[<span class="number">0</span>]);</div><div class="line">Double max = <span class="keyword">new</span> Double(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newDoubleRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">Float min = <span class="keyword">new</span> Float(strs[<span class="number">0</span>]);</div><div class="line">Float max = <span class="keyword">new</span> Float(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newFloatRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"long"</span>.equals(fieldType))&#123;</div><div class="line">Long min = <span class="keyword">new</span> Long(strs[<span class="number">0</span>]);</div><div class="line">Long max = <span class="keyword">new</span> Long(strs[<span class="number">1</span>]);</div><div class="line">q = NumericRangeQuery.newLongRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">q = NumericRangeQuery.newIntRange(field, <span class="keyword">new</span> Integer(queryStr), <span class="keyword">new</span> Integer(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">q = NumericRangeQuery.newDoubleRange(field, <span class="keyword">new</span> Double(queryStr), <span class="keyword">new</span> Double(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">q = NumericRangeQuery.newFloatRange(field, <span class="keyword">new</span> Float(queryStr), <span class="keyword">new</span> Float(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">Term term = <span class="keyword">new</span> Term(field, queryStr);</div><div class="line">q = <span class="keyword">new</span> TermQuery(term);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">q= <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(q);</div><div class="line"><span class="keyword">return</span> q;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**多条件查询类似于sql in</span></div><div class="line"> * <span class="doctag">@param</span> querys</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"><span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">query.add(subQuery,Occur.SHOULD);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**获取regexQuery对象</span></div><div class="line"> * <span class="doctag">@param</span> field</div><div class="line"> * <span class="doctag">@param</span> regex</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getRegexExpQuery</span><span class="params">(String field,String regex)</span></span>&#123;</div><div class="line">Query query = <span class="keyword">null</span>;</div><div class="line">Term term = <span class="keyword">new</span> Term(field, regex);</div><div class="line">query = <span class="keyword">new</span> RegexpQuery(term);</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**多条件查询类似于sql and</span></div><div class="line"> * <span class="doctag">@param</span> querys</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"><span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">query.add(subQuery,Occur.MUST);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> query;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**对多个条件进行排序构建排序条件</span></div><div class="line"> * <span class="doctag">@param</span> fields</div><div class="line"> * <span class="doctag">@param</span> type</div><div class="line"> * <span class="doctag">@param</span> reverses</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sort <span class="title">getSortInfo</span><span class="params">(String[] fields,Type[] types,<span class="keyword">boolean</span>[] reverses)</span></span>&#123;</div><div class="line">SortField[] sortFields = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">int</span> fieldLength = fields.length;</div><div class="line"><span class="keyword">int</span> typeLength = types.length;</div><div class="line"><span class="keyword">int</span> reverLength = reverses.length;</div><div class="line"><span class="keyword">if</span>(!(fieldLength == typeLength) || !(fieldLength == reverLength))&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sortFields = <span class="keyword">new</span> SortField[fields.length];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</div><div class="line">sortFields[i] = <span class="keyword">new</span> SortField(fields[i], types[i], reverses[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Sort(sortFields);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**根据查询器、查询条件、每页数、排序条件进行查询</span></div><div class="line"> * <span class="doctag">@param</span> query 查询条件</div><div class="line"> * <span class="doctag">@param</span> first 起始值</div><div class="line"> * <span class="doctag">@param</span> max 最大值</div><div class="line"> * <span class="doctag">@param</span> sort 排序条件</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPageAndSortField</span><span class="params">(IndexSearcher searcher,Query query, <span class="keyword">int</span> first,<span class="keyword">int</span> max, Sort sort)</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">TopFieldCollector collector = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(sort != <span class="keyword">null</span>)&#123;</div><div class="line">collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;<span class="keyword">new</span> SortField(<span class="string">"modified"</span>, SortField.Type.LONG)&#125;);</div><div class="line">collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line">searcher.search(query, collector);</div><div class="line"><span class="keyword">return</span> collector.topDocs(first, max);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**获取上次索引的id,增量更新使用</span></div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getLastIndexBeanID</span><span class="params">(IndexReader multiReader)</span></span>&#123;</div><div class="line">Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line">searcher = <span class="keyword">new</span> IndexSearcher(multiReader);</div><div class="line">SortField sortField = <span class="keyword">new</span> SortField(<span class="string">"id"</span>, SortField.Type.INT,<span class="keyword">true</span>);</div><div class="line">Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;sortField&#125;);</div><div class="line">TopDocs docs = getScoreDocsByPerPageAndSortField(searcher,query, <span class="number">0</span>, <span class="number">1</span>, sort);</div><div class="line">ScoreDoc[] scoreDocs = docs.scoreDocs;</div><div class="line"><span class="keyword">int</span> total = scoreDocs.length;</div><div class="line"><span class="keyword">if</span>(total &gt; <span class="number">0</span>)&#123;</div><div class="line">ScoreDoc scoreDoc = scoreDocs[<span class="number">0</span>];</div><div class="line">Document doc = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">doc = searcher.doc(scoreDoc.doc);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Integer(doc.get(<span class="string">"id"</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="正则查询测试"><a href="#正则查询测试" class="headerlink" title="正则查询测试"></a>正则查询测试</h2><p>正则查询测试类，主要是测试是否包含手机号或邮箱号，这里的手机号验证有点粗糙，希望不要介意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">IndexSearcher searcher = SearchUtil.getMultiSearcher(<span class="string">"index"</span>, Executors.newCachedThreadPool(), <span class="keyword">false</span>);</div><div class="line">Query phoneQuery = SearchUtil.getRegexExpQuery(<span class="string">"content"</span>, <span class="string">"1[0-9]&#123;10&#125;"</span>);</div><div class="line">Query mailQuery = SearchUtil.getRegexExpQuery(<span class="string">"content"</span>, <span class="string">"([a-z0-9A-Z]+[-_|\\.]?)+[a-z0-9A-Z]*@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]&#123;2,&#125;"</span>);</div><div class="line">Query finaQuery = SearchUtil.getMultiQueryLikeSqlIn(<span class="keyword">new</span> Query[]&#123;phoneQuery,mailQuery&#125;); </div><div class="line">TopDocs topDocs = SearchUtil.getScoreDocsByPerPageAndSortField(searcher, finaQuery, <span class="number">0</span>, <span class="number">20</span>, <span class="keyword">null</span>);</div><div class="line">System.out.println(<span class="string">"符合条件的数据总数："</span>+topDocs.totalHits);</div><div class="line">System.out.println(<span class="string">"本次查询到的数目为："</span>+topDocs.scoreDocs.length);</div><div class="line">ScoreDoc[] scoreDocs = topDocs.scoreDocs;</div><div class="line"><span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</div><div class="line">Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">System.out.println(doc.get(<span class="string">"path"</span>)+<span class="string">"    "</span>+doc.get(<span class="string">"content"</span>));</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最终测试结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">content:/1[0-9]&#123;10&#125;/</div><div class="line">content:/([a-z0-9A-Z]+[-_|\.]?)+[a-z0-9A-Z]*@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\.)+[a-zA-Z]&#123;2,&#125;/</div><div class="line">符合条件的数据总数：6</div><div class="line">本次查询到的数目为：6</div><div class="line">D:\hadoop\lucene_regexSearch\testDir\2.txt.txt    ﻿电话号码：18519237811</div><div class="line">D:\hadoop\lucene_regexSearch\testDir\3.txt.txt    电子邮箱yinggui_Wu@163.com</div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.docx    邮箱内容yinggui_Wu@163.com</div><div class="line"> </div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.pdf    邮箱内容 yinggui_Wu@163.com </div><div class="line"> </div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.xlsx    1 2 3 18510539956 </div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.txt.txt    ﻿&lt;a target=_blank href=&quot;mailto:fanyi@qq.com&quot;&gt;fanyi@qq.com&lt;/a&gt;</div></pre></td></tr></table></figure><p>代码下载地址</p><p><a href="http://download.csdn.net/detail/wuyinggui10000/8746407" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8746407</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（15）—java读取word-excel-pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例&quot;&gt;&lt;a href=&quot;#lucene（15）—java读取word-excel-pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例&quot; class=&quot;headerlink&quot; title=&quot;lucene（15）—java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例&quot;&gt;&lt;/a&gt;lucene（15）—java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例&lt;/h1&gt;&lt;p&gt;读取文本文件中的内容，找出文件中的手机号和邮箱，我自己写了一个读取文档的内容的正则查询示例，用于匹配文件中是否含有邮箱或者手机号，这个等于是对之前的文本处理工具的一个梳理，同时结合lucene内部提供的正则匹配查询RegexQuery；&lt;/p&gt;
&lt;p&gt;废话不多说了，直接上代码，这里先对文件内容读取分类处理，分为pdf word excel 和普通文本四类，不同的种类读取文本内容不一样&lt;/p&gt;
&lt;p&gt;pdf利用pdfbox读取内容，word和excel利用poi进行读取内容，文本文档利用jdk自带的读取&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene搜索之facet查询原理和facet查询实例</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/14%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8Bfacet%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86%E5%92%8Cfacet%E6%9F%A5%E8%AF%A2%E5%AE%9E%E4%BE%8B/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/14、lucene搜索之facet查询原理和facet查询实例/</id>
    <published>2019-03-16T01:53:13.889Z</published>
    <updated>2019-03-16T03:34:05.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（14）—lucene搜索之facet查询原理和facet查询实例"><a href="#lucene（14）—lucene搜索之facet查询原理和facet查询实例" class="headerlink" title="lucene（14）—lucene搜索之facet查询原理和facet查询实例"></a>lucene（14）—lucene搜索之facet查询原理和facet查询实例</h1><h2 id="Facet说明"><a href="#Facet说明" class="headerlink" title="Facet说明"></a>Facet说明</h2><p>我们在浏览网站的时候，经常会遇到按某一类条件查询的情况，这种情况尤以电商网站最多，以天猫商城为例，我们选择某一个品牌，系统会将该品牌对应的商品展示出来，效果图如下：</p><a id="more"></a><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316105905-628459.jpg" alt=""></p><p>如上图，我们关注的是品牌，选购热点等方面，对于类似的功能我们用lucene的term查询当然可以，但是在数据量特别大的情况下还用普通查询来实现显然会因为FSDirectory.open等耗时的操作造成查询效率的低下，同时普通查询是全部document都扫描一遍，这样显然造成了查询效率低；</p><p>lucene提供了facet查询用于对同一类的document进行聚类化，这样在查询的时候先关注某一个方面，这种显然缩小了查询范围，进而提升了查询效率；</p><p>facet模块提供了多个用于处理facet的统计和值处理的方法；</p><p>要实现facet的功能，我们需要了解facetField,FacetField定义了dim和此field对应的path,需要特别注意的是我们在做facetField索引的时候，需要事先调用FacetsConfig.build(Document);</p><p>FacetField的indexOptions设置为了DOCS_AND_FREQS_AND_POSITIONS的,即既索引又统计出现的频次和出现的位置，这样做主要是为了方便查询和统计；</p><p>相应的在存储的时候我们需要利用FacetsConfig和DirectoryTaxonomyWriter；</p><p>DirectoryTaxonomyWriter用来利用Directory来存储Taxono信息到硬盘；</p><p>DirectoryTaxonomyWriter的构造器如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DirectoryTaxonomyWriter</span><span class="params">(Directory directory, OpenMode openMode,</span></span></div><div class="line">      TaxonomyWriterCache cache) <span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    dir = directory;</div><div class="line">    IndexWriterConfig config = createIndexWriterConfig(openMode);</div><div class="line">    indexWriter = openIndexWriter(dir, config);</div><div class="line"> </div><div class="line">    <span class="comment">// verify (to some extent) that merge policy in effect would preserve category docids </span></div><div class="line">    <span class="keyword">assert</span> !(indexWriter.getConfig().getMergePolicy() <span class="keyword">instanceof</span> TieredMergePolicy) : </div><div class="line">      <span class="string">"for preserving category docids, merging none-adjacent segments is not allowed"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// after we opened the writer, and the index is locked, it's safe to check</span></div><div class="line">    <span class="comment">// the commit data and read the index epoch</span></div><div class="line">    openMode = config.getOpenMode();</div><div class="line">    <span class="keyword">if</span> (!DirectoryReader.indexExists(directory)) &#123;</div><div class="line">      indexEpoch = <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      String epochStr = <span class="keyword">null</span>;</div><div class="line">      Map&lt;String, String&gt; commitData = readCommitData(directory);</div><div class="line">      <span class="keyword">if</span> (commitData != <span class="keyword">null</span>) &#123;</div><div class="line">        epochStr = commitData.get(INDEX_EPOCH);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// no commit data, or no epoch in it means an old taxonomy, so set its epoch to 1, for lack</span></div><div class="line">      <span class="comment">// of a better value.</span></div><div class="line">      indexEpoch = epochStr == <span class="keyword">null</span> ? <span class="number">1</span> : Long.parseLong(epochStr, <span class="number">16</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (openMode == OpenMode.CREATE) &#123;</div><div class="line">      ++indexEpoch;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    FieldType ft = <span class="keyword">new</span> FieldType(TextField.TYPE_NOT_STORED);</div><div class="line">    ft.setOmitNorms(<span class="keyword">true</span>);</div><div class="line">    parentStreamField = <span class="keyword">new</span> Field(Consts.FIELD_PAYLOADS, parentStream, ft);</div><div class="line">    fullPathField = <span class="keyword">new</span> StringField(Consts.FULL, <span class="string">""</span>, Field.Store.YES);</div><div class="line"> </div><div class="line">    nextID = indexWriter.maxDoc();</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</div><div class="line">      cache = defaultTaxonomyWriterCache();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.cache = cache;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (nextID == <span class="number">0</span>) &#123;</div><div class="line">      cacheIsComplete = <span class="keyword">true</span>;</div><div class="line">      <span class="comment">// Make sure that the taxonomy always contain the root category</span></div><div class="line">      <span class="comment">// with category id 0.</span></div><div class="line">      addCategory(<span class="keyword">new</span> FacetLabel());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// There are some categories on the disk, which we have not yet</span></div><div class="line">      <span class="comment">// read into the cache, and therefore the cache is incomplete.</span></div><div class="line">      <span class="comment">// We choose not to read all the categories into the cache now,</span></div><div class="line">      <span class="comment">// to avoid terrible performance when a taxonomy index is opened</span></div><div class="line">      <span class="comment">// to add just a single category. We will do it later, after we</span></div><div class="line">      <span class="comment">// notice a few cache misses.</span></div><div class="line">      cacheIsComplete = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>由上述代码可知，DirectoryTaxonomyWriter先打开一个IndexWriter,在确保indexWriter打开和locked的前提下，读取directory对应的segments中需要提交的内容，如果读取到的内容为空，说明是上次的内容，设置indexEpoch为1，接着对cache进行设置；判断directory中是否还包含有document，如果有设置cacheIsComplete为false,反之为true;</p><p>时候不早了，今天先写到这里，明天会在此基础上补充，大家见谅</p><h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><p>我对之前的读取文件夹内容的做了个facet索引的例子</p><p>对BaseIndex修改了facet的设置，相关代码如下 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetResult;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.Facets;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.FastTaxonomyFacetCounts;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexOptions;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.RAMDirectory;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseIndex</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 父级索引路径</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> String parentIndexPath;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 索引编写器</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> IndexWriter writer;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> subIndex;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 主线程</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch1;  </div><div class="line"><span class="comment">/**</span></div><div class="line"> *工作线程 </div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch2; </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对象列表</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> List&lt;T&gt; list;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * facet查询</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> String facet;</div><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> FacetsConfig config = <span class="keyword">new</span> FacetsConfig();  </div><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> String indexPath = <span class="string">"index1"</span>;</div><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> DirectoryTaxonomyWriter taxoWriter;</div><div class="line"><span class="keyword">static</span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Directory directory = FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">taxoWriter = <span class="keyword">new</span> DirectoryTaxonomyWriter(directory);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"BaseIndex initializing error"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(IndexWriter writer,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">List&lt;T&gt; list, String facet)&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.writer = writer;</div><div class="line"><span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line"><span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line"><span class="keyword">this</span>.list = list;</div><div class="line"><span class="keyword">this</span>.facet = facet;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String parentIndexPath, <span class="keyword">int</span> subIndex,</span></span></div><div class="line">CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</div><div class="line">List&lt;T&gt; list) &#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.parentIndexPath = parentIndexPath;</div><div class="line"><span class="keyword">this</span>.subIndex = subIndex;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//多目录索引创建</span></div><div class="line">File file = <span class="keyword">new</span> File(parentIndexPath+<span class="string">"/index"</span>+subIndex);</div><div class="line"><span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">file.mkdir();</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(parentIndexPath+<span class="string">"/index"</span>+subIndex, <span class="keyword">true</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;;</div><div class="line"><span class="keyword">this</span>.subIndex = subIndex;</div><div class="line"><span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line"><span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line"><span class="keyword">this</span>.list = list;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String path,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">List&lt;T&gt; list) &#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//单目录索引创建</span></div><div class="line">File file = <span class="keyword">new</span> File(path);</div><div class="line"><span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">file.mkdir();</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(path,<span class="keyword">true</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;;</div><div class="line"><span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line"><span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line"><span class="keyword">this</span>.list = list;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**创建索引</span></div><div class="line"> * <span class="doctag">@param</span> writer</div><div class="line"> * <span class="doctag">@param</span> carSource</div><div class="line"> * <span class="doctag">@param</span> create</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> * <span class="doctag">@throws</span> ParseException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer,T t)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"><span class="comment">/**批量索引创建</span></div><div class="line"> * <span class="doctag">@param</span> writer</div><div class="line"> * <span class="doctag">@param</span> t</div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDocs</span><span class="params">(IndexWriter writer,List&lt;T&gt; t)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"><span class="keyword">for</span> (T t2 : t) &#123;</div><div class="line">indexDoc(writer,t2);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**带group的索引创建</span></div><div class="line"> * <span class="doctag">@param</span> writer</div><div class="line"> * <span class="doctag">@param</span> docs</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDocsWithGroup</span><span class="params">(IndexWriter writer,String groupFieldName,String groupFieldValue,List&lt;Document&gt; docs)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line"> Field groupEndField = <span class="keyword">new</span> Field(groupFieldName, groupFieldValue, Field.Store.NO, Field.Index.NOT_ANALYZED);</div><div class="line"> docs.get(docs.size()-<span class="number">1</span>).add(groupEndField);</div><div class="line"> <span class="comment">//</span></div><div class="line"> writer.updateDocuments(<span class="keyword">new</span> Term(groupFieldName, groupFieldValue),docs);</div><div class="line"> writer.commit();</div><div class="line"> writer.close();</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">countDownLatch1.await();</div><div class="line">System.out.println(writer);</div><div class="line">indexDocs(writer,list);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">countDownLatch2.countDown();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">writer.commit();</div><div class="line">writer.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相应得，document的索引需要利用DirectoryTaxonomyWriter来进行原有document的处理 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBeanIndex</span> <span class="keyword">extends</span> <span class="title">BaseIndex</span>&lt;<span class="title">FileBean</span>&gt;</span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String facet;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileBeanIndex</span><span class="params">(IndexWriter writer, CountDownLatch countDownLatch12, CountDownLatch countDownLatch1,</span></span></div><div class="line">List&lt;FileBean&gt; fileBeans, String facet1) &#123;</div><div class="line"><span class="keyword">super</span>(writer, countDownLatch12, countDownLatch1, fileBeans, facet);</div><div class="line">facet = facet1;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer, FileBean t)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Document doc = <span class="keyword">new</span> Document();</div><div class="line">String path = t.getPath();</div><div class="line">System.out.println(t.getPath());</div><div class="line">doc.add(<span class="keyword">new</span> StringField(<span class="string">"path"</span>, path, Field.Store.YES));</div><div class="line">doc.add(<span class="keyword">new</span> LongField(<span class="string">"modified"</span>, t.getModified(), Field.Store.YES));</div><div class="line">doc.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, t.getContent(), Field.Store.YES));</div><div class="line">doc.add(<span class="keyword">new</span> FacetField(<span class="string">"filePath"</span>, <span class="keyword">new</span> String[]&#123;facet&#125;));</div><div class="line"><span class="comment">//doc = config.build(taxoWriter,doc);</span></div><div class="line"><span class="keyword">if</span> (writer.getConfig().getOpenMode() == IndexWriterConfig.OpenMode.CREATE)&#123;</div><div class="line">        <span class="comment">//writer.addDocument(doc);</span></div><div class="line">writer.addDocument(<span class="keyword">this</span>.config.build(taxoWriter, doc));</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    writer.updateDocument(<span class="keyword">new</span> Term(<span class="string">"path"</span>, t.getPath()), <span class="keyword">this</span>.config.build(taxoWriter, doc));</div><div class="line">    &#125;</div><div class="line">taxoWriter.commit();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试facet功能的测试类： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetResult;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.Facets;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.LabelAndValue;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.FastTaxonomyFacetCounts;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.TaxonomyReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearchFacet</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Directory directory;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Directory taxoDirectory;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> TaxonomyReader taxoReader;</div><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> FacetsConfig config = <span class="keyword">new</span> FacetsConfig();</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">taxoDirectory = FSDirectory.open(Paths.get(<span class="string">"index1"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">taxoReader = <span class="keyword">new</span> DirectoryTaxonomyReader(taxoDirectory);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSearchFacet</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">DirectoryReader indexReader = DirectoryReader.open(directory);</div><div class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(indexReader);</div><div class="line">FacetsCollector fc = <span class="keyword">new</span> FacetsCollector();</div><div class="line">FacetsCollector.search(searcher, <span class="keyword">new</span> MatchAllDocsQuery(), indexReader.maxDoc(), fc);  </div><div class="line">Facets facets = <span class="keyword">new</span> FastTaxonomyFacetCounts(taxoReader, config, fc);</div><div class="line">List&lt;FacetResult&gt; results =facets.getAllDims(<span class="number">100</span>);</div><div class="line"><span class="keyword">for</span> (FacetResult facetResult : results) &#123;</div><div class="line">System.out.println(facetResult.dim);</div><div class="line">LabelAndValue[] values = facetResult.labelValues;</div><div class="line"><span class="keyword">for</span> (LabelAndValue labelAndValue : values) &#123;</div><div class="line">System.out.println(<span class="string">"\t"</span>+labelAndValue.label +<span class="string">"       "</span>+labelAndValue.value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">indexReader.close();</div><div class="line">taxoReader.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">testSearchFacet();</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相关代码下载</p><p><a href="http://download.csdn.net/detail/wuyinggui10000/8738651" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8738651</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（14）—lucene搜索之facet查询原理和facet查询实例&quot;&gt;&lt;a href=&quot;#lucene（14）—lucene搜索之facet查询原理和facet查询实例&quot; class=&quot;headerlink&quot; title=&quot;lucene（14）—lucene搜索之facet查询原理和facet查询实例&quot;&gt;&lt;/a&gt;lucene（14）—lucene搜索之facet查询原理和facet查询实例&lt;/h1&gt;&lt;h2 id=&quot;Facet说明&quot;&gt;&lt;a href=&quot;#Facet说明&quot; class=&quot;headerlink&quot; title=&quot;Facet说明&quot;&gt;&lt;/a&gt;Facet说明&lt;/h2&gt;&lt;p&gt;我们在浏览网站的时候，经常会遇到按某一类条件查询的情况，这种情况尤以电商网站最多，以天猫商城为例，我们选择某一个品牌，系统会将该品牌对应的商品展示出来，效果图如下：&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具</title>
    <link href="http://swenfang.github.io/2019/03/16/Lucene/13%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://swenfang.github.io/2019/03/16/Lucene/13、自定义排序的实现原理和编写自己的自定义排序工具/</id>
    <published>2019-03-16T01:53:13.849Z</published>
    <updated>2019-03-16T03:33:55.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具"><a href="#lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具" class="headerlink" title="lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具"></a>lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具</h1><h2 id="自定义排序说明"><a href="#自定义排序说明" class="headerlink" title="自定义排序说明"></a>自定义排序说明</h2><p>我们在做lucene搜索的时候，可能会需要排序功能，虽然lucene内置了多种类型的排序，但是如果在需要先进行某些值的运算然后在排序的时候就有点显得<a href="https://www.baidu.com/s?wd=%E6%97%A0%E8%83%BD%E4%B8%BA%E5%8A%9B&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">无能为力</a>了；</p><a id="more"></a><p>要做自定义查询，我们就要研究lucene已经实现的排序功能，lucene的所有排序都是要继承FieldComparator,然后重写内部实现，这里以IntComparator为例子来查看其实现；</p><h2 id="IntComparator相关实现"><a href="#IntComparator相关实现" class="headerlink" title="IntComparator相关实现"></a>IntComparator相关实现</h2><p>其类的声明为 public static class IntComparator extends NumericComparator<integer>,这里说明IntComparator接收的是Integer类型的参数，即只处理IntField的排序；</integer></p><p>IntComparator声明的参数为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] values;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bottom;                           <span class="comment">// Value of bottom of queue</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> topValue;</div></pre></td></tr></table></figure><p>查看copy方法可知</p><ul><li>values随着类初始化而初始化其长度</li><li>values用于存储NumericDocValues中读取到的内容</li></ul><p>具体实现如下：</p><p>values的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">     * Creates a new comparator based on &#123;<span class="doctag">@link</span> Integer#compare&#125; for &#123;<span class="doctag">@code</span> numHits&#125;.</div><div class="line">     * When a document has no value for the field, &#123;<span class="doctag">@code</span> missingValue&#125; is substituted. </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntComparator</span><span class="params">(<span class="keyword">int</span> numHits, String field, Integer missingValue)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>(field, missingValue);</div><div class="line">      values = <span class="keyword">new</span> <span class="keyword">int</span>[numHits];</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>values值填充(此为IntComparator的处理方式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> slot, <span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> v2 = (<span class="keyword">int</span>) currentReaderValues.get(doc);</div><div class="line">     <span class="comment">// Test for v2 == 0 to save Bits.get method call for</span></div><div class="line">     <span class="comment">// the common case (doc has value and value is non-zero):</span></div><div class="line">     <span class="keyword">if</span> (docsWithField != <span class="keyword">null</span> &amp;&amp; v2 == <span class="number">0</span> &amp;&amp; !docsWithField.get(doc)) &#123;</div><div class="line">       v2 = missingValue;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     values[slot] = v2;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>这些实现都是类似的，我们的应用实现自定义排序的时候需要做的是对binaryDocValues或NumericDocValues的值进行计算，然后实现FieldComparator内部方法，对应IntComparator就是如上的值copy操作；</p><p>然后我们需要实现compareTop、compareBottom和compare，IntComparator的实现为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> slot1, <span class="keyword">int</span> slot2)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> Integer.compare(values[slot1], values[slot2]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareBottom</span><span class="params">(<span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> v2 = (<span class="keyword">int</span>) currentReaderValues.get(doc);</div><div class="line">  <span class="comment">// Test for v2 == 0 to save Bits.get method call for</span></div><div class="line">  <span class="comment">// the common case (doc has value and value is non-zero):</span></div><div class="line">  <span class="keyword">if</span> (docsWithField != <span class="keyword">null</span> &amp;&amp; v2 == <span class="number">0</span> &amp;&amp; !docsWithField.get(doc)) &#123;</div><div class="line">    v2 = missingValue;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> Integer.compare(bottom, v2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTop</span><span class="params">(<span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> docValue = (<span class="keyword">int</span>) currentReaderValues.get(doc);</div><div class="line">      <span class="comment">// Test for docValue == 0 to save Bits.get method call for</span></div><div class="line">      <span class="comment">// the common case (doc has value and value is non-zero):</span></div><div class="line">      <span class="keyword">if</span> (docsWithField != <span class="keyword">null</span> &amp;&amp; docValue == <span class="number">0</span> &amp;&amp; !docsWithField.get(doc)) &#123;</div><div class="line">        docValue = missingValue;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> Integer.compare(topValue, docValue);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="实现自己的FieldComparator"><a href="#实现自己的FieldComparator" class="headerlink" title="实现自己的FieldComparator"></a>实现自己的FieldComparator</h2><p>要实现FieldComparator，需要对接收参数进行处理，定义处理值的集合，同时定义BinaryDocValues和接收的参数等，这里我写了一个通用的比较器，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.BinaryDocValues;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DocValues;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.LeafReaderContext;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SimpleFieldComparator;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.util.ObjectUtil;</div><div class="line"> </div><div class="line"><span class="comment">/**自定义comparator</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfDefineComparator</span> <span class="keyword">extends</span> <span class="title">SimpleFieldComparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> Object[] values;<span class="comment">//定义的Object[]，同IntComparator</span></div><div class="line"><span class="keyword">private</span> Object bottom;</div><div class="line"><span class="keyword">private</span> Object top;</div><div class="line"><span class="keyword">private</span> String field;</div><div class="line"><span class="keyword">private</span> BinaryDocValues binaryDocValues;<span class="comment">//接收的BinaryDocValues,同IntComparator中的NumericDocValues</span></div><div class="line"><span class="keyword">private</span> ObjectUtil objectUtil;<span class="comment">//这里为了便于拓展用接口代替抽象类</span></div><div class="line"><span class="keyword">private</span> Object[] params;<span class="comment">//接收的参数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelfDefineComparator</span><span class="params">(String field, <span class="keyword">int</span> numHits, Object[] params,ObjectUtil objectUtil)</span> </span>&#123;  </div><div class="line">values = <span class="keyword">new</span> Object[numHits];</div><div class="line"><span class="keyword">this</span>.objectUtil = objectUtil;</div><div class="line"><span class="keyword">this</span>.field = field;</div><div class="line"><span class="keyword">this</span>.params = params;  </div><div class="line">&#125;  </div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBottom</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.bottom = values[slot];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareBottom</span><span class="params">(<span class="keyword">int</span> doc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">Object distance = getValues(doc);</div><div class="line"><span class="keyword">return</span> (bottom.toString()).compareTo(distance.toString());</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTop</span><span class="params">(<span class="keyword">int</span> doc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">Object distance = getValues(doc);</div><div class="line"><span class="keyword">return</span> objectUtil.compareTo(top,distance);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> slot, <span class="keyword">int</span> doc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">values[slot] = getValues(doc);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getValues</span><span class="params">(<span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">Object instance = objectUtil.getValues(doc,params,binaryDocValues) ;</div><div class="line"><span class="keyword">return</span> instance;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSetNextReader</span><span class="params">(LeafReaderContext context)</span></span></div><div class="line"><span class="keyword">throws</span> IOException &#123;</div><div class="line">binaryDocValues = DocValues.getBinary(context.reader(), field);<span class="comment">//context.reader().getBinaryDocValues(field);</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> slot1, <span class="keyword">int</span> slot2)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> objectUtil.compareTo(values[slot1],values[slot2]);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTopValue</span><span class="params">(String value)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.top = value;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> values[slot].toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中ObjectUtil是一个接口，定义了值处理的过程，最终是要服务于comparator的compare方法的，同时对comparator的内部compare方法进行了定义</p><p>ObjectUtil接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.BinaryDocValues;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObjectUtil</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**自定义的获取处理值的方法</span></div><div class="line"> * <span class="doctag">@param</span> doc </div><div class="line"> * <span class="doctag">@param</span> params </div><div class="line"> * <span class="doctag">@param</span> binaryDocValues </div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">getValues</span><span class="params">(<span class="keyword">int</span> doc, Object[] params, BinaryDocValues binaryDocValues)</span> </span>;</div><div class="line"> </div><div class="line"><span class="comment">/**compare比较器实现</span></div><div class="line"> * <span class="doctag">@param</span> object</div><div class="line"> * <span class="doctag">@param</span> object2</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object object, Object object2)</span></span>;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们不仅要提供比较器和comparator，同时还要提供接收用户输入的FiledComparatorSource </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.FieldComparator;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.FieldComparatorSource;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.util.ObjectUtil;</div><div class="line"> </div><div class="line"><span class="comment">/**comparator用于接收用户原始输入，继承自FieldComparatorSource实现了自定义comparator的构建</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfDefineComparatorSource</span> <span class="keyword">extends</span> <span class="title">FieldComparatorSource</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> Object[] params;<span class="comment">//接收的参数</span></div><div class="line"><span class="keyword">private</span> ObjectUtil objectUtil;<span class="comment">//这里为了便于拓展用接口代替抽象类</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> Object[] getParams() &#123;</div><div class="line"><span class="keyword">return</span> params;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Object[] params)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.params = params;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> ObjectUtil <span class="title">getObjectUtil</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> objectUtil;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectUtil</span><span class="params">(ObjectUtil objectUtil)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.objectUtil = objectUtil;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelfDefineComparatorSource</span><span class="params">(Object[] params, ObjectUtil objectUtil)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.params = params;</div><div class="line"><span class="keyword">this</span>.objectUtil = objectUtil;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> FieldComparator&lt;?&gt; newComparator(String fieldname, <span class="keyword">int</span> numHits,</div><div class="line"><span class="keyword">int</span> sortPos, <span class="keyword">boolean</span> reversed) <span class="keyword">throws</span> IOException &#123;</div><div class="line"><span class="comment">//实际比较由SelfDefineComparator实现</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> SelfDefineComparator(fieldname, numHits, params, objectUtil);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相关测试程序，这里我们<a href="https://www.baidu.com/s?wd=%E6%A8%A1%E6%8B%9F&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">模拟</a>一个StringComparator，对String值进行排序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.RAMDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.util.CustomerUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.util.ObjectUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.util.StringComparaUtil;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> 吴莹桂</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">RAMDirectory directory = <span class="keyword">new</span> RAMDirectory();  </div><div class="line">Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">IndexWriterConfig indexWriterConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">indexWriterConfig.setOpenMode(OpenMode.CREATE_OR_APPEND);</div><div class="line">IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, indexWriterConfig);</div><div class="line">        addDocument(indexWriter, <span class="string">"B"</span>);  </div><div class="line">        addDocument(indexWriter, <span class="string">"D"</span>);  </div><div class="line">        addDocument(indexWriter, <span class="string">"A"</span>);  </div><div class="line">        addDocument(indexWriter, <span class="string">"E"</span>);  </div><div class="line">        indexWriter.commit();</div><div class="line">        indexWriter.close();  </div><div class="line">        IndexReader reader = DirectoryReader.open(directory);</div><div class="line">        IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);  </div><div class="line">        Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">        ObjectUtil util = <span class="keyword">new</span> StringComparaUtil();</div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField(<span class="string">"name"</span>,<span class="keyword">new</span> SelfDefineComparatorSource(<span class="keyword">new</span> Object[]&#123;&#125;,util),<span class="keyword">true</span>));  </div><div class="line">        TopDocs topDocs = searcher.search(query, Integer.MAX_VALUE, sort);</div><div class="line">        ScoreDoc[] docs = topDocs.scoreDocs;</div><div class="line">        <span class="keyword">for</span>(ScoreDoc doc : docs)&#123;</div><div class="line">            Document document = searcher.doc(doc.doc);  </div><div class="line">            System.out.println(document.get(<span class="string">"name"</span>));</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDocument</span><span class="params">(IndexWriter writer,String name)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        Document document = <span class="keyword">new</span> Document();  </div><div class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"name"</span>,name,Field.Store.YES));  </div><div class="line">        document.add(<span class="keyword">new</span> BinaryDocValuesField(<span class="string">"name"</span>, <span class="keyword">new</span> BytesRef(name.getBytes())));  </div><div class="line">        writer.addDocument(document);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其对应的ObjectUtil实现如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.BinaryDocValues;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringComparaUtil</span> <span class="keyword">implements</span> <span class="title">ObjectUtil</span> </span>&#123;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValues</span><span class="params">(<span class="keyword">int</span> doc, Object[] params,</span></span></div><div class="line">BinaryDocValues binaryDocValues) &#123;</div><div class="line">BytesRef bytesRef = binaryDocValues.get(doc);</div><div class="line">String value = bytesRef.utf8ToString();</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object object, Object object2)</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> object.toString().compareTo(object2.toString());</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具&quot;&gt;&lt;a href=&quot;#lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具&quot; class=&quot;headerlink&quot; title=&quot;lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具&quot;&gt;&lt;/a&gt;lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具&lt;/h1&gt;&lt;h2 id=&quot;自定义排序说明&quot;&gt;&lt;a href=&quot;#自定义排序说明&quot; class=&quot;headerlink&quot; title=&quot;自定义排序说明&quot;&gt;&lt;/a&gt;自定义排序说明&lt;/h2&gt;&lt;p&gt;我们在做lucene搜索的时候，可能会需要排序功能，虽然lucene内置了多种类型的排序，但是如果在需要先进行某些值的运算然后在排序的时候就有点显得&lt;a href=&quot;https://www.baidu.com/s?wd=%E6%97%A0%E8%83%BD%E4%B8%BA%E5%8A%9B&amp;amp;tn=24004469_oem_dg&amp;amp;rsv_dl=gh_pl_sl_csd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;无能为力&lt;/a&gt;了；&lt;/p&gt;
    
    </summary>
    
      <category term="lucene" scheme="http://swenfang.github.io/categories/lucene/"/>
    
    
      <category term="lucene" scheme="http://swenfang.github.io/tags/lucene/"/>
    
  </entry>
  
</feed>
