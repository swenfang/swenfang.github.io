<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[lucene搜索之拼写检查和相似度查询提示（spellcheck）]]></title>
      <url>/2019/03/16/Lucene/9%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5%E5%92%8C%E7%9B%B8%E4%BC%BC%E5%BA%A6%E6%9F%A5%E8%AF%A2%E6%8F%90%E7%A4%BA%EF%BC%88spellcheck%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）"><a href="#lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）" class="headerlink" title="lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）"></a>lucene（9）—lucene搜索之拼写检查和相似度查询提示（spellcheck）</h1><h2 id="suggest应用场景"><a href="#suggest应用场景" class="headerlink" title="suggest应用场景"></a>suggest应用场景</h2><p>用户的输入行为是不确定的，而我们在写程序的时候总是想让用户按照指定的内容或指定格式的内容进行搜索，这里就要进行人工干预用户输入的搜索条件了；我们在用百度谷歌等搜索引擎的时候经常会看到按键放下的时候直接会提示用户是否想搜索某些相关的内容，恰好lucene在开发的时候想到了这一点，lucene提供的suggest包正是用来解决上述问题的。</p>
<a id="more"></a>
<p>suggest包联想词相关介绍<br>suggest包提供了lucene的自动补全或者拼写检查的支持；</p>
<p>拼写检查相关的类在org.apache.lucene.search.spell包下；</p>
<p>联想相关的在org.apache.lucene.search.suggest包下；</p>
<p>基于联想词分词相关的类在org.apache.lucene.search.suggest.analyzing包下；</p>
<h2 id="拼写检查原理"><a href="#拼写检查原理" class="headerlink" title="拼写检查原理"></a>拼写检查原理</h2><p>Lucene的拼写检查由org.apache.lucene.search.spell.SpellChecker类提供支持；<br>SpellChecker设置了默认精度0.5，如果我们需要细粒度的支持可以通过调用setAccuracy(float accuracy)来设定；<br>spellChecker会将外部来源的词进行索引；<br>这些来源包括：</p>
<pre><code>DocumentDictionary查询document中的field对应的值；

FileDictionary基于一个文本文件的Directionary,每行一项，词组之间以&quot;\t&quot; TAB分隔符进行，每项中不能含有两个以上的分隔符；

HighFrequencyDictionary从原有的索引文件中读取某个term的值，并按照出现次数检查；

LuceneDictionary也是从原有索引文件中读取某个term的值，但是不检查出现次数；

PlainTextDictionary从文本中读取内容，按行读取，没有分隔符；
</code></pre><p> 其索引的原理如下：</p>
<p>对索引过程加syschronized同步；<br>检查Spellchecker是否已经关闭，如果关闭，抛出异常，提示内容为：Spellchecker has been closed；<br>对外部来源的索引进行遍历，统计被遍历的词的长度，如果长度小于三，忽略该词，反之构建document对象并索引到本地文件，创建索引的时候会对每个单词进行详细拆分（对应addGram方法），其执行过程如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">- Indexes the data from the given &#123;<span class="doctag">@link</span> Dictionary&#125;.</div><div class="line">- <span class="doctag">@param</span> dict Dictionary to index</div><div class="line">- <span class="doctag">@param</span> config &#123;<span class="doctag">@link</span> IndexWriterConfig&#125; to use</div><div class="line">- <span class="doctag">@param</span> fullMerge whether or not the spellcheck index should be fully merged</div><div class="line">- <span class="doctag">@throws</span> AlreadyClosedException if the Spellchecker is already closed</div><div class="line">- <span class="doctag">@throws</span> IOException If there is a low-level I/O error.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">indexDictionary</span><span class="params">(Dictionary dict, IndexWriterConfig config, <span class="keyword">boolean</span> fullMerge)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="keyword">synchronized</span> (modifyCurrentIndexLock) &#123;</div><div class="line">  ensureOpen();</div><div class="line">  <span class="keyword">final</span> Directory dir = <span class="keyword">this</span>.spellIndex;</div><div class="line">  <span class="keyword">final</span> IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, config);</div><div class="line">  IndexSearcher indexSearcher = obtainSearcher();</div><div class="line">  <span class="keyword">final</span> List&lt;TermsEnum&gt; termsEnums = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> </div><div class="line">  <span class="keyword">final</span> IndexReader reader = searcher.getIndexReader();</div><div class="line">  <span class="keyword">if</span> (reader.maxDoc() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> LeafReaderContext ctx : reader.leaves()) &#123;</div><div class="line">      Terms terms = ctx.reader().terms(F_WORD);</div><div class="line">      <span class="keyword">if</span> (terms != <span class="keyword">null</span>)</div><div class="line">        termsEnums.add(terms.iterator(<span class="keyword">null</span>));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">boolean</span> isEmpty = termsEnums.isEmpty();</div><div class="line"> </div><div class="line">  <span class="keyword">try</span> &#123; </div><div class="line">    BytesRefIterator iter = dict.getEntryIterator();</div><div class="line">    BytesRef currentTerm;</div><div class="line">    </div><div class="line">    terms: <span class="keyword">while</span> ((currentTerm = iter.next()) != <span class="keyword">null</span>) &#123;</div><div class="line">  </div><div class="line">      String word = currentTerm.utf8ToString();</div><div class="line">      <span class="keyword">int</span> len = word.length();</div><div class="line">      <span class="keyword">if</span> (len &lt; <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>; <span class="comment">// too short we bail but "too long" is fine...</span></div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span> (!isEmpty) &#123;</div><div class="line">        <span class="keyword">for</span> (TermsEnum te : termsEnums) &#123;</div><div class="line">          <span class="keyword">if</span> (te.seekExact(currentTerm)) &#123;</div><div class="line">            <span class="keyword">continue</span> terms;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="comment">// ok index the word</span></div><div class="line">      Document doc = createDocument(word, getMin(len), getMax(len));</div><div class="line">      writer.addDocument(doc);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    releaseSearcher(indexSearcher);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (fullMerge) &#123;</div><div class="line">    writer.forceMerge(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// close writer</span></div><div class="line">  writer.close();</div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> this isn't that great, maybe in the future SpellChecker should take</span></div><div class="line">  <span class="comment">// IWC in its ctor / keep its writer open?</span></div><div class="line">  </div><div class="line">  <span class="comment">// also re-open the spell index to see our own changes when the next suggestion</span></div><div class="line">  <span class="comment">// is fetched:</span></div><div class="line">  swapSearcher(dir);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  对词语进行遍历拆分的方法为addGram,其实现为：</p>
<p> <img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316104850-311058.jpg" alt=""></p>
<p>查看代码可知，联想词的索引不仅关注每个词的起始位置，也关注其倒数的位置；</p>
<p>联想词查询的时候，先判断grams里边是否包含有待查询的词拆分后的内容，如果有放到结果SuggestWordQueue中，最终结果为遍历SuggestWordQueue得来的String[],其代码实现如下：<br>​     </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String[] suggestSimilar(String word, <span class="keyword">int</span> numSug, IndexReader ir,String field, SuggestMode suggestMode, <span class="keyword">float</span> accuracy) <span class="keyword">throws</span> IOException &#123;</div><div class="line">  <span class="comment">// obtainSearcher calls ensureOpen</span></div><div class="line">  <span class="keyword">final</span> IndexSearcher indexSearcher = obtainSearcher();</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">   <span class="keyword">if</span> (ir == <span class="keyword">null</span> || field == <span class="keyword">null</span>) &#123;</div><div class="line">   suggestMode = SuggestMode.SUGGEST_ALWAYS;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (suggestMode == SuggestMode.SUGGEST_ALWAYS) &#123;</div><div class="line">     ir = <span class="keyword">null</span>;</div><div class="line">     field = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> lengthWord = word.length();</div><div class="line"> <span class="keyword">final</span> <span class="keyword">int</span> freq = (ir != <span class="keyword">null</span> &amp;&amp; field != <span class="keyword">null</span>) ? ir.docFreq(<span class="keyword">new</span> Term(field, word)) : <span class="number">0</span>;</div><div class="line"> <span class="keyword">final</span> <span class="keyword">int</span> goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : <span class="number">0</span>;</div><div class="line"> <span class="comment">// if the word exists in the real index and we don't care for word frequency, return the word itself</span></div><div class="line"> <span class="keyword">if</span> (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX &amp;&amp; freq &gt; <span class="number">0</span>) &#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; word &#125;;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line"> String[] grams;</div><div class="line"> String key;</div><div class="line"></div><div class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> ng = getMin(lengthWord); ng &lt;= getMax(lengthWord); ng++) &#123;</div><div class="line"></div><div class="line">   key = <span class="string">"gram"</span> + ng; <span class="comment">// form key</span></div><div class="line"></div><div class="line">   grams = formGrams(word, ng); <span class="comment">// form word into ngrams (allow dups too)</span></div><div class="line"></div><div class="line">   <span class="keyword">if</span> (grams.length == <span class="number">0</span>) &#123;</div><div class="line">     <span class="keyword">continue</span>; <span class="comment">// hmm</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (bStart &gt; <span class="number">0</span>) &#123; <span class="comment">// should we boost prefixes?</span></div><div class="line">     add(query, <span class="string">"start"</span> + ng, grams[<span class="number">0</span>], bStart); <span class="comment">// matches start of word</span></div><div class="line"></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (bEnd &gt; <span class="number">0</span>) &#123; <span class="comment">// should we boost suffixes</span></div><div class="line">     add(query, <span class="string">"end"</span> + ng, grams[grams.length - <span class="number">1</span>], bEnd); <span class="comment">// matches end of word</span></div><div class="line"></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grams.length; i++) &#123;</div><div class="line">     add(query, key, grams[i]);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">int</span> maxHits = <span class="number">10</span> * numSug;</div><div class="line"> <span class="comment">//    System.out.println("Q: " + query);</span></div><div class="line"> ScoreDoc[] hits = indexSearcher.search(query, maxHits).scoreDocs;</div><div class="line"> <span class="comment">//    System.out.println("HITS: " + hits.length());</span></div><div class="line"> SuggestWordQueue sugQueue = <span class="keyword">new</span> SuggestWordQueue(numSug, comparator);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// go thru more than 'maxr' matches in case the distance filter triggers</span></div><div class="line">  <span class="keyword">int</span> stop = Math.min(hits.length, maxHits);</div><div class="line">  SuggestWord sugWord = <span class="keyword">new</span> SuggestWord();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stop; i++) &#123;</div><div class="line"> </div><div class="line">    sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); <span class="comment">// get orig word</span></div><div class="line"> </div><div class="line">    <span class="comment">// don't suggest a word for itself, that would be silly</span></div><div class="line">    <span class="keyword">if</span> (sugWord.string.equals(word)) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// edit distance</span></div><div class="line">    sugWord.score = sd.getDistance(word,sugWord.string);</div><div class="line">    <span class="keyword">if</span> (sugWord.score &lt; accuracy) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (ir != <span class="keyword">null</span> &amp;&amp; field != <span class="keyword">null</span>) &#123; <span class="comment">// use the user index</span></div><div class="line">      sugWord.freq = ir.docFreq(<span class="keyword">new</span> Term(field, sugWord.string)); <span class="comment">// freq in the index</span></div><div class="line">      <span class="comment">// don't suggest a word that is not present in the field</span></div><div class="line">      <span class="keyword">if</span> ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR &amp;&amp; goalFreq &gt; sugWord.freq) || sugWord.freq &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    sugQueue.insertWithOverflow(sugWord);</div><div class="line">    <span class="keyword">if</span> (sugQueue.size() == numSug) &#123;</div><div class="line">      <span class="comment">// if queue full, maintain the minScore score</span></div><div class="line">      accuracy = sugQueue.top().score;</div><div class="line">    &#125;</div><div class="line">    sugWord = <span class="keyword">new</span> SuggestWord();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// convert to array string</span></div><div class="line">  String[] list = <span class="keyword">new</span> String[sugQueue.size()];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = sugQueue.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    list[i] = sugQueue.pop().string;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> list;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  releaseSearcher(indexSearcher);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><p>以下是我根据FileDirectory相关描述编写的一个测试程序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.spell.SpellChecker;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.suggest.FileDictionary;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuggestUtil</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Directory spellIndexDirectory;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			spellIndexDirectory = FSDirectory.open(Paths.get(<span class="string">"suggest"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">			</div><div class="line">			SpellChecker spellchecker = <span class="keyword">new</span> SpellChecker(spellIndexDirectory );</div><div class="line">			Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer(<span class="keyword">true</span>);</div><div class="line">			IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">			config.setOpenMode(OpenMode.CREATE_OR_APPEND);</div><div class="line">			spellchecker.setAccuracy(<span class="number">0f</span>);</div><div class="line">			<span class="comment">//HighFrequencyDictionary dire = new HighFrequencyDictionary(reader, field, thresh)</span></div><div class="line">			spellchecker.indexDictionary(<span class="keyword">new</span> FileDictionary(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"D:\\hadoop\\lucene_suggest\\src\\suggest.txt"</span>))),config,<span class="keyword">false</span>);</div><div class="line">			String[] similars = spellchecker.suggestSimilar(<span class="string">"中国"</span>, <span class="number">10</span>);</div><div class="line">			<span class="keyword">for</span> (String similar : similars) &#123;</div><div class="line">				System.out.println(similar);</div><div class="line">			&#125;</div><div class="line">			spellIndexDirectory.close();</div><div class="line">			spellchecker.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">				</div><div class="line"> </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，我用的suggest.txt内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">中国人民	100</div><div class="line">奔驰3	101</div><div class="line">奔驰中国	102</div><div class="line">奔驰S级	103</div><div class="line">奔驰A级	104</div><div class="line">奔驰C级	105</div></pre></td></tr></table></figure>
<p>测试结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">中国人民</div><div class="line">奔驰中国</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之索引的查询原理和查询工具类（支持分页）示例]]></title>
      <url>/2019/03/16/Lucene/8%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88%E6%94%AF%E6%8C%81%E5%88%86%E9%A1%B5%EF%BC%89%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例"><a href="#lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例" class="headerlink" title="lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例"></a>lucene（8）—lucene搜索之索引的查询原理和查询工具类（支持分页）示例</h1><h2 id="IndexSearcher常用方法"><a href="#IndexSearcher常用方法" class="headerlink" title="IndexSearcher常用方法"></a>IndexSearcher常用方法</h2><p>IndexSearcher提供了几个常用的方法：</p>
<a id="more"></a>
<ul>
<li>IndexSearcher.doc(int docID)   获取索引文件中的第n个索引存储的相关字段，返回为Document类型，可以据此读取document中的Field.STORE.YES的字段；</li>
<li>IndexSearcher.doc(int docID, StoredFieldVisitor fieldVisitor)  获取StoredFieldVisitor指定的字段的document，StoredFieldVisitor定义如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">StoredFieldVisitor visitor = <span class="keyword">new</span> DocumentStoredFieldVisitor(String... fields);</div></pre></td></tr></table></figure>
<ul>
<li>IndexSearcher.doc(int docID, Set<string> fieldsToLoad) 此方法同上边的IndexSearcher.doc(int docID, StoredFieldVisitor fieldVisitor) ，其实现如下图</string></li>
</ul>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316102208-992593.jpg" alt=""></p>
<ul>
<li><p>IndexSearcher.count(Query query) 统计符合query条件的document个数</p>
</li>
<li><p>IndexSearcher.searchAfter(final ScoreDoc after, Query query, int numHits) 此方法会返回符合query查询条件的且在after之后的numHits条记录；</p>
<p>其实现原理为：</p>
<p>先读取当前索引文件的最大数据条数limit，然后判断after是否为空和after对应的document的下标是否超出limit的限制，如果超出的话抛出非法的参数异常；</p>
<p>设置读取的条数为numHits和limit中最小的（因为有超出最大条数的可能，避免超出限制而造成的异常）</p>
<p>接下来创建一个CollectorManager类型的对象，该对象定义了要返回的TopDocs的个数，上一页的document的结尾（after）,并且对查询结果进行分析合并</p>
<p>最后调用search(query,manager)来查询结果</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316104446-227930.jpg" alt=""></p>
</li>
<li><p>IndexSearcher.search(Query query, int n) 查询符合query条件的前n个记录</p>
</li>
<li>IndexSearcher.search(Query query, Collector results) 查询符合collector的记录，collector定义了分页等信息</li>
<li>IndexSearcher.search(Query query, int n,Sort sort, boolean doDocScores, boolean doMaxScore) 实现任意排序的查询，同时控制是否计算hit score和max score是否被计算在内，查询前n条符合query条件的document;</li>
<li><p>IndexSearcher.search(Query query, CollectorManager&lt;C, T&gt; collectorManager) 利用给定的collectorManager获取符合query条件的结果，其执行流程如下：</p>
<p>先判断是否有ExecutorService执行查询的任务，如果没有executor，IndexSearcher会在单个任务下进行查询操作；</p>
<p>如果IndexSearcher有executor，则会由每个线程控制一部分索引的读取，而且查询的过程中采用的是future机制，此种方式是边读边往结果集里边追加数据，这种异</p>
<p>步的处理机制也提升了效率，其执行过程如下：</p>
</li>
</ul>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316104636-782439.jpg" alt=""></p>
<h2 id="编码实践"><a href="#编码实践" class="headerlink" title="编码实践"></a>编码实践</h2><p>我中午的时候写了一个SearchUtil的工具类，里边添加了多目录查询和分页查询的功能，经测试可用，工具类和测试的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search.util;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"> </div><div class="line"><span class="comment">/**lucene索引查询工具类</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line">	<span class="comment">/**获取IndexSearcher对象</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByParentPath</span><span class="params">(String parentPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		MultiReader reader = <span class="keyword">null</span>;</div><div class="line">		<span class="comment">//设置</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File[] files = <span class="keyword">new</span> File(parentPath).listFiles();</div><div class="line">			IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">				readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">			&#125;</div><div class="line">			reader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">	<span class="comment">/**根据索引路径获取IndexReader</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DirectoryReader <span class="title">getIndexReader</span><span class="params">(String indexPath)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> DirectoryReader.open(FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据索引路径获取IndexSearcher</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByIndexPath</span><span class="params">(String indexPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		IndexReader reader = getIndexReader(indexPath);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**如果索引目录会有变更用此方法获取新的IndexSearcher这种方式会占用较少的资源</span></div><div class="line">	 * <span class="doctag">@param</span> oldSearcher</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherOpenIfChanged</span><span class="params">(IndexSearcher oldSearcher,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		DirectoryReader reader = (DirectoryReader) oldSearcher.getIndexReader();</div><div class="line">		DirectoryReader newReader = DirectoryReader.openIfChanged(reader);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(newReader, service);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多条件查询类似于sql in</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.SHOULD);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多条件查询类似于sql and</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.MUST);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据IndexSearcher和docID获取默认的document</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> docID</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDefaultFullDocument</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.doc(docID);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据IndexSearcher和docID</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> docID</div><div class="line">	 * <span class="doctag">@param</span> listField</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocumentByListField</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID,Set&lt;String&gt; listField)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.doc(docID, listField);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**分页查询</span></div><div class="line">	 * <span class="doctag">@param</span> page 当前页数</div><div class="line">	 * <span class="doctag">@param</span> perPage 每页显示条数</div><div class="line">	 * <span class="doctag">@param</span> searcher searcher查询器</div><div class="line">	 * <span class="doctag">@param</span> query 查询条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPage</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> perPage,IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		TopDocs result = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">			System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		ScoreDoc before = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(page != <span class="number">1</span>)&#123;</div><div class="line">			TopDocs docsBefore = searcher.search(query, (page-<span class="number">1</span>)*perPage);</div><div class="line">			ScoreDoc[] scoreDocs = docsBefore.scoreDocs;</div><div class="line">			<span class="keyword">if</span>(scoreDocs.length &gt; <span class="number">0</span>)&#123;</div><div class="line">				before = scoreDocs[scoreDocs.length - <span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		result = searcher.searchAfter(before, query, perPage);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocs</span><span class="params">(IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		TopDocs docs = searcher.search(query, getMaxDocId(searcher));</div><div class="line">		<span class="keyword">return</span> docs;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**统计document的数量,此方法等同于matchAllDocsQuery查询</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxDocId</span><span class="params">(IndexSearcher searcher)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.getIndexReader().maxDoc();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相关测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> com.lucene.search.util.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ExecutorService service = Executors.newCachedThreadPool();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			</div><div class="line">			IndexSearcher searcher = SearchUtil.getIndexSearcherByParentPath(<span class="string">"index"</span>,service);</div><div class="line">			System.out.println(SearchUtil.getMaxDocId(searcher));</div><div class="line">			Term term = <span class="keyword">new</span> Term(<span class="string">"content"</span>, <span class="string">"lucene"</span>);</div><div class="line">			Query query = <span class="keyword">new</span> TermQuery(term);</div><div class="line">			TopDocs docs = SearchUtil.getScoreDocsByPerPage(<span class="number">2</span>, <span class="number">20</span>, searcher, query);</div><div class="line">			ScoreDoc[] scoreDocs = docs.scoreDocs;</div><div class="line">			System.out.println(<span class="string">"所有的数据总数为："</span>+docs.totalHits);</div><div class="line">			System.out.println(<span class="string">"本页查询到的总数为："</span>+scoreDocs.length);</div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</div><div class="line">				Document doc = SearchUtil.getDefaultFullDocument(searcher, scoreDoc.doc);</div><div class="line">				<span class="comment">//System.out.println(doc);</span></div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"\n\n"</span>);</div><div class="line">			TopDocs docsAll = SearchUtil.getScoreDocs(searcher, query);</div><div class="line">			Set&lt;String&gt; fieldSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">			fieldSet.add(<span class="string">"path"</span>);</div><div class="line">			fieldSet.add(<span class="string">"modified"</span>);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">20</span> ; i ++) &#123;</div><div class="line">				Document doc = SearchUtil.getDocumentByListField(searcher, docsAll.scoreDocs[i].doc,fieldSet);</div><div class="line">				System.out.println(doc);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			service.shutdownNow();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p>代码下载请点击<a href="http://download.csdn.net/detail/wuyinggui10000/8703067" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8703165</a>，运行时请先运行IndexTest类进行索引的创建~！</p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之IndexSearcher构建过程]]></title>
      <url>/2019/03/16/Lucene/7%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8BIndexSearcher%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="lucene（7）—lucene搜索之IndexSearcher构建过程"><a href="#lucene（7）—lucene搜索之IndexSearcher构建过程" class="headerlink" title="lucene（7）—lucene搜索之IndexSearcher构建过程"></a>lucene（7）—lucene搜索之IndexSearcher构建过程</h1><h2 id="IndexSearcher"><a href="#IndexSearcher" class="headerlink" title="IndexSearcher"></a>IndexSearcher</h2><p>搜索引擎的构建分为索引内容和查询索引两个大方面，这里要介绍的是lucene索引查询器即IndexSearcher的构建过程；</p>
<a id="more"></a>
<p>首先了解下IndexSearcher：</p>
<ul>
<li>IndexSearcher提供了对单个IndexReader的查询实现；</li>
<li>我们对索引的查询，可以通过调用search(Query,n)或者search(Query,Filter,n)方法；</li>
<li>在索引内容变动不大的情况下，我们可以对索引的搜索采用单个IndexSearcher共享的方式来提升性能；</li>
<li>如果索引有变动，我们就需要使用DirectoryReader.openIfChanged(DirectoryReader)来获取新的reader，然后创建新的IndexSearcher对象；</li>
<li>为了使查询延迟率低，我们最好使用近实时搜索的方法（此时我们的DirectoryReader的构建就要采用<code>DirectoryReader.open(IndexWriter, boolean)</code>）</li>
<li>IndexSearcher实例是完全线程安全的,这意味着多个线程可以并发调用任何方法。如果需要外部同步,无需添加IndexSearcher的同步；</li>
</ul>
<h2 id="IndexSearcher的创建过程"><a href="#IndexSearcher的创建过程" class="headerlink" title="IndexSearcher的创建过程"></a>IndexSearcher的创建过程</h2><ul>
<li><p>根据索引文件路径创建FSDirectory的实例，返回的FSDirectory实例跟系统或运行环境有关，对于Linux, MacOSX, Solaris, and Windows 64-bit JREs返回的是一个MMapDirectory实例，对于其他非windows JREs环境返回的是NIOFSDirectory，而对于其他Windows的JRE环境返回的是SimpleFSDirectory，其执行效率依次降低</p>
</li>
<li><p>接着DirectoryReader根据获取到的FSDirectory实例读取索引文件并得到DirectoryReader对象；DirectoryReader的open方法返回实例的原理：读取索引目录中的Segments文件内容，倒序遍历SegmentInfos并填充到SegmentReader（IndexReader的一种实现）数组，并构建StandardDirectoryReader的实例</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316101614-894853.jpg" alt=""></p>
</li>
<li><p>有了IndexReader，IndexSearcher对象实例化就手到拈来了，new IndexSearcher(DirectoryReader)就可以得到其实例；如果我们想提高IndexSearcher的执行效率可以new IndexSearcher(DirecotoryReader,ExcuterService)来创建IndexSearcher对象，这样做的好处为对每块segment采用了分工查询，但是要注意IndexSearcher并不维护ExcuterService的生命周期，我们还需要自行调用ExcuterService的close/awaitTermination</p>
</li>
</ul>
<h2 id="相关实践"><a href="#相关实践" class="headerlink" title="相关实践"></a>相关实践</h2><p>以下是根据IndexSearcher相关的构建过程及其特性编写的一个搜索的工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.NumericRangeQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField.Type;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">	<span class="comment">/**获取IndexSearcher对象（适合单索引目录查询使用）</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath 索引目录</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcher</span><span class="params">(String indexPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">		DirectoryReader reader = DirectoryReader.open(IndexUtil.getIndexWriter(indexPath, <span class="keyword">true</span>), realtime);</div><div class="line">		IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">		<span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">			service.shutdown();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多目录多线程查询</span></div><div class="line">	 * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line">	 * <span class="doctag">@param</span> service 多线程查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">		MultiReader multiReader;</div><div class="line">		File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">		File[] files = file.listFiles();</div><div class="line">		IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">		<span class="keyword">if</span>(!realtime)&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">				readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">				readers[i] = DirectoryReader.open(IndexUtil.getIndexWriter(files[i].getPath(), <span class="keyword">true</span>), <span class="keyword">true</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line">		<span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">			service.shutdown();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**从指定配置项中查询</span></div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@param</span> analyzer 分词器</div><div class="line">	 * <span class="doctag">@param</span> field 字段</div><div class="line">	 * <span class="doctag">@param</span> fieldType	字段类型</div><div class="line">	 * <span class="doctag">@param</span> queryStr 查询条件</div><div class="line">	 * <span class="doctag">@param</span> range 是否区间查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String field,String fieldType,String queryStr,<span class="keyword">boolean</span> range)</span></span>&#123;</div><div class="line">		Query q = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(queryStr != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(queryStr))&#123;</div><div class="line">			<span class="keyword">if</span>(range)&#123;</div><div class="line">				String[] strs = queryStr.split(<span class="string">"\\|"</span>);</div><div class="line">				<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">					<span class="keyword">int</span> min = <span class="keyword">new</span> Integer(strs[<span class="number">0</span>]);</div><div class="line">					<span class="keyword">int</span> max = <span class="keyword">new</span> Integer(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newIntRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">					Double min = <span class="keyword">new</span> Double(strs[<span class="number">0</span>]);</div><div class="line">					Double max = <span class="keyword">new</span> Double(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newDoubleRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">					Float min = <span class="keyword">new</span> Float(strs[<span class="number">0</span>]);</div><div class="line">					Float max = <span class="keyword">new</span> Float(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newFloatRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"long"</span>.equals(fieldType))&#123;</div><div class="line">					Long min = <span class="keyword">new</span> Long(strs[<span class="number">0</span>]);</div><div class="line">					Long max = <span class="keyword">new</span> Long(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newLongRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">					q = NumericRangeQuery.newIntRange(field, <span class="keyword">new</span> Integer(queryStr), <span class="keyword">new</span> Integer(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">					q = NumericRangeQuery.newDoubleRange(field, <span class="keyword">new</span> Double(queryStr), <span class="keyword">new</span> Double(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">					q = NumericRangeQuery.newFloatRange(field, <span class="keyword">new</span> Float(queryStr), <span class="keyword">new</span> Float(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					Term term = <span class="keyword">new</span> Term(field, queryStr);</div><div class="line">					q = <span class="keyword">new</span> TermQuery(term);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			q= <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(q);</div><div class="line">		<span class="keyword">return</span> q;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**多条件查询类似于sql in</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.SHOULD);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多条件查询类似于sql and</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.MUST);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**对多个条件进行排序构建排序条件</span></div><div class="line">	 * <span class="doctag">@param</span> fields</div><div class="line">	 * <span class="doctag">@param</span> type</div><div class="line">	 * <span class="doctag">@param</span> reverses</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sort <span class="title">getSortInfo</span><span class="params">(String[] fields,Type[] types,<span class="keyword">boolean</span>[] reverses)</span></span>&#123;</div><div class="line">		SortField[] sortFields = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> fieldLength = fields.length;</div><div class="line">		<span class="keyword">int</span> typeLength = types.length;</div><div class="line">		<span class="keyword">int</span> reverLength = reverses.length;</div><div class="line">		<span class="keyword">if</span>(!(fieldLength == typeLength) || !(fieldLength == reverLength))&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			sortFields = <span class="keyword">new</span> SortField[fields.length];</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</div><div class="line">				sortFields[i] = <span class="keyword">new</span> SortField(fields[i], types[i], reverses[i]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Sort(sortFields);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据查询器、查询条件、每页数、排序条件进行查询</span></div><div class="line">	 * <span class="doctag">@param</span> query 查询条件</div><div class="line">	 * <span class="doctag">@param</span> first 起始值</div><div class="line">	 * <span class="doctag">@param</span> max 最大值</div><div class="line">	 * <span class="doctag">@param</span> sort 排序条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPageAndSortField</span><span class="params">(IndexSearcher searcher,Query query, <span class="keyword">int</span> first,<span class="keyword">int</span> max, Sort sort)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">				System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			TopFieldCollector collector = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">if</span>(sort != <span class="keyword">null</span>)&#123;</div><div class="line">				collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;<span class="keyword">new</span> SortField(<span class="string">"modified"</span>, SortField.Type.LONG)&#125;);</div><div class="line">				collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">			&#125;</div><div class="line">			searcher.search(query, collector);</div><div class="line">			<span class="keyword">return</span> collector.topDocs(first, max);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**获取上次索引的id,增量更新使用</span></div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getLastIndexBeanID</span><span class="params">(IndexReader multiReader)</span></span>&#123;</div><div class="line">		Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">		IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line">		searcher = <span class="keyword">new</span> IndexSearcher(multiReader);</div><div class="line">		SortField sortField = <span class="keyword">new</span> SortField(<span class="string">"id"</span>, SortField.Type.INT,<span class="keyword">true</span>);</div><div class="line">		Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;sortField&#125;);</div><div class="line">		TopDocs docs = getScoreDocsByPerPageAndSortField(searcher,query, <span class="number">0</span>, <span class="number">1</span>, sort);</div><div class="line">		ScoreDoc[] scoreDocs = docs.scoreDocs;</div><div class="line">		<span class="keyword">int</span> total = scoreDocs.length;</div><div class="line">		<span class="keyword">if</span>(total &gt; <span class="number">0</span>)&#123;</div><div class="line">			ScoreDoc scoreDoc = scoreDocs[<span class="number">0</span>];</div><div class="line">			Document doc = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				doc = searcher.doc(scoreDoc.doc);</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Integer(doc.get(<span class="string">"id"</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="相关代码下载"><a href="#相关代码下载" class="headerlink" title="相关代码下载"></a>相关代码下载</h2><p><a href="http://download.csdn.net/detail/wuyinggui10000/8697451" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8697451</a></p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene索引优化之多线程创建索引]]></title>
      <url>/2019/03/16/Lucene/6%E3%80%81lucene%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<h1 id="lucene（6）—lucene索引优化之多线程创建索引"><a href="#lucene（6）—lucene索引优化之多线程创建索引" class="headerlink" title="lucene（6）—lucene索引优化之多线程创建索引"></a>lucene（6）—lucene索引优化之多线程创建索引</h1><p>前面了解到lucene在索引创建的时候一个IndexWriter获取到一个读写锁，这样势在lucene创建大数据量的索引的时候，执行效率低下的问题；</p>
<a id="more"></a>
<p>查看前面文档 lucene（5）—lucene的索引构建原理 可以看出，lucene索引的建立，跟以下几点关联很大；</p>
<ol>
<li>磁盘空间大小，这个直接影响索引的建立，甚至会造成索引写入提示完成，但是没有同步的问题；</li>
<li>索引合并策略的选择，这个类似于sql里边的批量操作，批量操作的数量过多直接影响执行效率，对于lucene来讲，索引合并前是将document放在内存中，因此选择合适的合并策略也可以提升索引的效率；</li>
<li>唯一索引对应的term的选择，lucene索引的创建过程中是先从索引中删除包含相同term的document然后重新添加document到索引中，这里如果term对应的document过多，会占用磁盘IO，同时造成IndexWriter的写锁占用时间延长，相应的执行效率低下；</li>
</ol>
<p>综上所述，索引优化要保证磁盘空间，同时在term选择上可以以ID等标识来确保唯一性，这样第一条和第三条的风险就规避了；</p>
<p>本文旨在对合并策略和采用多线程创建的方式提高索引的效率；</p>
<p>多线程创建索引，我这边还设计了多目录索引创建，这样避免了同一目录数据量过大索引块合并和索引块重新申请；</p>
<p>废话不多说，这里附上代码，代码示例是读取lucene官网下载并解压的文件夹并给文件信息索引起来</p>
<p>首先定义FileBean来存储文件信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.bean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBean</span> </span>&#123;</div><div class="line">	<span class="comment">//路径</span></div><div class="line">	<span class="keyword">private</span> String path;</div><div class="line">	<span class="comment">//修改时间</span></div><div class="line">	<span class="keyword">private</span> Long modified;</div><div class="line">	<span class="comment">//内容</span></div><div class="line">	<span class="keyword">private</span> String content;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> path;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.path = path;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getModified</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> modified;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModified</span><span class="params">(Long modified)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.modified = modified;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> content;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来是一个工具类，用以将文件夹的信息遍历读取并转换成FileBean的集合</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.util;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**读取文件信息和下属文件夹</span></div><div class="line">	 * <span class="doctag">@param</span> folder</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;FileBean&gt; <span class="title">getFolderFiles</span><span class="params">(String folder)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		List&lt;FileBean&gt; fileBeans = <span class="keyword">new</span> LinkedList&lt;FileBean&gt;();</div><div class="line">		File file = <span class="keyword">new</span> File(folder);</div><div class="line">		<span class="keyword">if</span>(file.isDirectory())&#123;</div><div class="line">			File[] files = file.listFiles();</div><div class="line">			<span class="keyword">if</span>(files != <span class="keyword">null</span>)&#123;</div><div class="line">				<span class="keyword">for</span> (File file2 : files) &#123;</div><div class="line">					fileBeans.addAll(getFolderFiles(file2.getAbsolutePath()));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			FileBean bean = <span class="keyword">new</span> FileBean();</div><div class="line">			bean.setPath(file.getAbsolutePath());</div><div class="line">			bean.setModified(file.lastModified());</div><div class="line">			bean.setContent(<span class="keyword">new</span> String(Files.readAllBytes(Paths.get(folder))));</div><div class="line">			fileBeans.add(bean);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> fileBeans;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个公共的用于处理索引的类 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseIndex</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 父级索引路径</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> String parentIndexPath;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 索引编写器</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> IndexWriter writer;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> subIndex;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 主线程</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch1;  </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *工作线程 </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch2; </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 对象列表</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> List&lt;T&gt; list;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(IndexWriter writer,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">			List&lt;T&gt; list)&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.writer = writer;</div><div class="line">		<span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line">		<span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String parentIndexPath, <span class="keyword">int</span> subIndex,</span></span></div><div class="line">			CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</div><div class="line">			List&lt;T&gt; list) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.parentIndexPath = parentIndexPath;</div><div class="line">		<span class="keyword">this</span>.subIndex = subIndex;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//多目录索引创建</span></div><div class="line">			File file = <span class="keyword">new</span> File(parentIndexPath+<span class="string">"/index"</span>+subIndex);</div><div class="line">			<span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">				file.mkdir();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(parentIndexPath+<span class="string">"/index"</span>+subIndex, <span class="keyword">true</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">this</span>.subIndex = subIndex;</div><div class="line">		<span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line">		<span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String path,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">			List&lt;T&gt; list) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//单目录索引创建</span></div><div class="line">			File file = <span class="keyword">new</span> File(path);</div><div class="line">			<span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">				file.mkdir();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(path,<span class="keyword">true</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line">		<span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**创建索引</span></div><div class="line">	 * <span class="doctag">@param</span> writer</div><div class="line">	 * <span class="doctag">@param</span> carSource</div><div class="line">	 * <span class="doctag">@param</span> create</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> ParseException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer,T t)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	<span class="comment">/**批量索引创建</span></div><div class="line">	 * <span class="doctag">@param</span> writer</div><div class="line">	 * <span class="doctag">@param</span> t</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDocs</span><span class="params">(IndexWriter writer,List&lt;T&gt; t)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">for</span> (T t2 : t) &#123;</div><div class="line">			indexDoc(writer,t2);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			countDownLatch1.await();</div><div class="line">			System.out.println(writer);</div><div class="line">			indexDocs(writer,list);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			countDownLatch2.countDown();</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FileBeanIndex类用于处理FileBean的索引创建 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBeanIndex</span> <span class="keyword">extends</span> <span class="title">BaseIndex</span>&lt;<span class="title">FileBean</span>&gt;</span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileBeanIndex</span><span class="params">(IndexWriter writer, CountDownLatch countDownLatch1,</span></span></div><div class="line">			CountDownLatch countDownLatch2, List&lt;FileBean&gt; list) &#123;</div><div class="line">		<span class="keyword">super</span>(writer, countDownLatch1, countDownLatch2, list);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileBeanIndex</span><span class="params">(String parentIndexPath, <span class="keyword">int</span> subIndex, CountDownLatch countDownLatch1,</span></span></div><div class="line">			CountDownLatch countDownLatch2, List&lt;FileBean&gt; list) &#123;</div><div class="line">		<span class="keyword">super</span>(parentIndexPath, subIndex, countDownLatch1, countDownLatch2, list);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer, FileBean t)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Document doc = <span class="keyword">new</span> Document();</div><div class="line">		System.out.println(t.getPath());</div><div class="line">		doc.add(<span class="keyword">new</span> StringField(<span class="string">"path"</span>, t.getPath(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> LongField(<span class="string">"modified"</span>, t.getModified(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, t.getContent(), Field.Store.YES));</div><div class="line">		<span class="keyword">if</span> (writer.getConfig().getOpenMode() == IndexWriterConfig.OpenMode.CREATE)&#123;</div><div class="line">	        writer.addDocument(doc);</div><div class="line">	    &#125;<span class="keyword">else</span>&#123;</div><div class="line">	    	writer.updateDocument(<span class="keyword">new</span> Term(<span class="string">"path"</span>, t.getPath()), doc);</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IndexUtil工具类里边设置索引合并的策略 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.LogByteSizeMergePolicy;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.LogMergePolicy;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexUtil</span> </span>&#123;</div><div class="line">	<span class="comment">/**创建索引写入器</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@param</span> create</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexWriter <span class="title">getIndexWriter</span><span class="params">(String indexPath,<span class="keyword">boolean</span> create)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		Directory dir = FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">	    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">	    IndexWriterConfig iwc = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">	    LogMergePolicy mergePolicy = <span class="keyword">new</span> LogByteSizeMergePolicy();</div><div class="line">	    <span class="comment">//设置segment添加文档(Document)时的合并频率          //值较小,建立索引的速度就较慢          //值较大,建立索引的速度就较快,&gt;10适合批量建立索引        </span></div><div class="line">	    mergePolicy.setMergeFactor(<span class="number">50</span>);                     </div><div class="line">	    <span class="comment">//设置segment最大合并文档(Document)数         </span></div><div class="line">	    <span class="comment">//值较小有利于追加索引的速度         </span></div><div class="line">	    <span class="comment">//值较大,适合批量建立索引和更快的搜索         </span></div><div class="line">	    mergePolicy.setMaxMergeDocs(<span class="number">5000</span>);                     </div><div class="line">	    <span class="keyword">if</span> (create)&#123;</div><div class="line">	        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</div><div class="line">	    &#125;<span class="keyword">else</span> &#123;</div><div class="line">	        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</div><div class="line">	    &#125;</div><div class="line">	    IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">	    <span class="keyword">return</span> writer;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TestIndex类执行测试程序 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"><span class="keyword">import</span> com.lucene.index.FileBeanIndex;</div><div class="line"><span class="keyword">import</span> com.lucene.index.util.FileUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIndex</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			List&lt;FileBean&gt; fileBeans = FileUtil.getFolderFiles(<span class="string">"C:\\Users\\lenovo\\Desktop\\lucene\\lucene-5.1.0"</span>);</div><div class="line">			<span class="keyword">int</span> totalCount = fileBeans.size();</div><div class="line">			<span class="keyword">int</span> perThreadCount = <span class="number">3000</span>;</div><div class="line">			System.out.println(<span class="string">"查询到的数据总数是"</span>+fileBeans.size());</div><div class="line">			<span class="keyword">int</span> threadCount = totalCount/perThreadCount + (totalCount%perThreadCount == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);  </div><div class="line">			ExecutorService pool = Executors.newFixedThreadPool(threadCount);  </div><div class="line">			CountDownLatch countDownLatch1 = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);  </div><div class="line">			CountDownLatch countDownLatch2 = <span class="keyword">new</span> CountDownLatch(threadCount);  </div><div class="line">			System.out.println(fileBeans.size());</div><div class="line">			</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123; </div><div class="line">				<span class="keyword">int</span> start = i*perThreadCount;</div><div class="line">				<span class="keyword">int</span> end = (i+<span class="number">1</span>) * perThreadCount &lt; totalCount ? (i+<span class="number">1</span>) * perThreadCount : totalCount;</div><div class="line">				List&lt;FileBean&gt; subList = fileBeans.subList(start, end);</div><div class="line">				Runnable runnable = <span class="keyword">new</span> FileBeanIndex(<span class="string">"index"</span>,i, countDownLatch1, countDownLatch2, subList);</div><div class="line">				<span class="comment">//子线程交给线程池管理  </span></div><div class="line">				pool.execute(runnable);  </div><div class="line">			&#125;  </div><div class="line">			countDownLatch1.countDown();  </div><div class="line">			System.out.println(<span class="string">"开始创建索引"</span>);  </div><div class="line">			<span class="comment">//等待所有线程都完成  </span></div><div class="line">			countDownLatch2.await();  </div><div class="line">			 <span class="comment">//线程全部完成工作  </span></div><div class="line">			System.out.println(<span class="string">"所有线程都创建索引完毕"</span>);  </div><div class="line">			<span class="comment">//释放线程池资源  </span></div><div class="line">			pool.shutdown();  </div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上即是多线程多目录索引，大家有什么疑问的欢迎交流； </p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene的索引构建原理]]></title>
      <url>/2019/03/16/Lucene/5%E3%80%81lucene%E7%B4%A2%E5%BC%95%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="lucene（5）—lucene的索引构建原理"><a href="#lucene（5）—lucene的索引构建原理" class="headerlink" title="lucene（5）—lucene的索引构建原理"></a>lucene（5）—lucene的索引构建原理</h1><h2 id="lucene创建索引的原理"><a href="#lucene创建索引的原理" class="headerlink" title="lucene创建索引的原理"></a>lucene创建索引的原理</h2><h3 id="IndexWriter的addDocument方法详解"><a href="#IndexWriter的addDocument方法详解" class="headerlink" title="IndexWriter的addDocument方法详解"></a>IndexWriter的addDocument方法详解</h3><p>今天看了IndexWriter类的addDocument方法，IndexWriter对此方法的说明如下：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Adds a document to this index. </div><div class="line">Note that if an Exception is hit (for example disk full) then the index will be consistent, but this document may not have been added. Furthermore, it&apos;s possible the index will have one segment in non-compound format even when using compound files (when a merge has partially succeeded).</div><div class="line">This method periodically flushes pending documents to the Directory (see above), and also periodically triggers segment merges in the index according to the MergePolicy in use.</div><div class="line">Merges temporarily consume space in the directory. The amount of space required is up to 1X the size of all segments being merged, when no readers/searchers are open against the index, and up to 2X the size of all segments being merged when readers/searchers are open against the index (see forceMerge(int) for details). The sequence of primitive merge operations performed is governed by the merge policy. </div><div class="line">Note that each term in the document can be no longer than MAX_TERM_LENGTH in bytes, otherwise an IllegalArgumentException will be thrown.</div></pre></td></tr></table></figure>
<p>大意如下：</p>
<p>此方法向索引中添加一个document；</p>
<p>需要注意的是如果执行过程中发生异常（比如磁盘空间不足）的时候索引会保持一致性，但是这个document也许并没有被添加，此外，即使使用符合文件也有可能索引包含一个非复合格式的segment（当合并索引有部分成功的时候）</p>
<p>此方法会定期的flush索引文件目录，并且会根据合并策略定期去触发索引文件中segment的合并操作；</p>
<p>刚方法会对合并临时的索引空间，当没有reader或者searcher读取或写入索引文件的时候所需要占用的磁盘空间至少要超过需要合并的segments文件的一倍，反之将会占用两倍以上的空间；序列的合并操作的优化取决于合并策略‘</p>
<p>要确保document中的每一个term占用的字节长度都不能超过MAX_TERM_LENGTH，否则会抛出IllegalArgumentException异常；</p>
<p>其实际的执行方法为：</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316100523-767792.jpg" alt=""></p>
<p>继续跟进updateDocument方法，其实现如下</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316100618-658422.jpg" alt=""></p>
<p>可以看见updateDocument是先从索引中删除包含相同term的document然后重新添加document到索引中；</p>
<p>此操作需要确保IndexWriter没有被关闭，其实现是先有<a href="https://blog.csdn.net/wuyinggui10000/article/details/45625351" target="_blank" rel="external">DocumentsWriter</a>类的updateDocument方法判断，这里先判断将根据term找到对应的document，并先放到待删除的document队列中，然后从队列中读取document，再将要flush的documents写入磁盘，同时更新flush队列中的索引状态；</p>
<p>相关源码如下</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316101101-308029.jpg" alt=""></p>
<p>在此期间有一个ThreadState类型的<a href="https://www.baidu.com/s?wd=%E8%AF%BB%E5%86%99%E9%94%81&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">读写锁</a>，lucene判断ThreadState的状态，如果此锁被激活，从内存中获取document并更新到索引文件且重置内存中索引的数量和状态，最后释放相关的资源。</p>
<p>此即为IndexWriter的索引构建过程，看代码<a href="https://www.baidu.com/s?wd=%E6%99%95%E5%A4%B4%E8%BD%AC%E5%90%91&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">晕头转向</a>的，以后为大家带来一点干货，明天带来lucene索引优化之多线程创建索引。</p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene的中文分词器jcseg和IKAnalyzer分词器及其使用说明]]></title>
      <url>/2019/03/16/Lucene/4%E3%80%81lucene%E7%9A%84%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8jcseg%E5%92%8CIK%20Analyzer%E5%88%86%E8%AF%8D%E5%99%A8%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h1 id="lucene（4）—lucene的中文分词器jcseg和IK-Analyzer分词器及其使用说明"><a href="#lucene（4）—lucene的中文分词器jcseg和IK-Analyzer分词器及其使用说明" class="headerlink" title="lucene（4）—lucene的中文分词器jcseg和IK Analyzer分词器及其使用说明"></a>lucene（4）—lucene的中文分词器jcseg和IK Analyzer分词器及其使用说明</h1><h2 id="为什么要使用lucene中文分词器"><a href="#为什么要使用lucene中文分词器" class="headerlink" title="为什么要使用lucene中文分词器"></a>为什么要使用lucene中文分词器</h2><p>在lucene的开发过程中，我们常会遇到分词时中文识别的问题，lucene提供了</p>
<p>lucene-analyzers-common-5.0.0.jar包来支持分词，但多的是对英国，法国，意大利等过语言的支持，</p>
<p>因此我们需要引入中文分词的概念。</p>
<a id="more"></a>
<h2 id="各种中文分词器及其对比"><a href="#各种中文分词器及其对比" class="headerlink" title="各种中文分词器及其对比"></a>各种中文分词器及其对比</h2><h3 id="jcseg中文分词器"><a href="#jcseg中文分词器" class="headerlink" title="jcseg中文分词器"></a>jcseg中文分词器</h3><p>jcseg是使用Java开发的一款开源的中文分词器, 使用mmseg算法. 分词准确率高达<br>98.4%, 支持中文人名识别, 同义词匹配, 停止词过滤…</p>
<p>jcseg支持三种切分模式：<br>(1).简易模式：FMM算法，适合速度要求场合。<br>(2).复杂模式-MMSEG四种过滤算法，具有较高的岐义去除，分词准确率达到了98.41%。<br>(3).检测模式：只返回词库中已有的词条，很适合某些应用场合。(1.9.4开始)</p>
<p>就分词效率而言，简易模式速度最快</p>
<p>jcseg词库配置丰富，自我感觉功能最强大，详见jcseg开发文档；</p>
<p>jcseg现版本不兼容lucene5，我修改了其analyzer包，相关示例代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analyzer;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.lionsoul.jcseg.analyzer.JcsegAnalyzer5X;</div><div class="line"><span class="keyword">import</span> org.lionsoul.jcseg.core.JcsegTaskConfig;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JcsegAnalyzerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tokenTest</span><span class="params">()</span> </span>&#123;</div><div class="line">		Analyzer analyzer = <span class="keyword">new</span> JcsegAnalyzer5X(JcsegTaskConfig.SIMPLE_MODE);</div><div class="line">		<span class="comment">//非必须(用于修改默认配置): 获取分词任务配置实例</span></div><div class="line">		JcsegAnalyzer5X jcseg = (JcsegAnalyzer5X) analyzer;</div><div class="line">		JcsegTaskConfig config = jcseg.getTaskConfig();</div><div class="line">		<span class="comment">//追加同义词到分词结果中, 需要在jcseg.properties中配置jcseg.loadsyn=1</span></div><div class="line">		config.setAppendCJKSyn(<span class="keyword">true</span>);</div><div class="line">		<span class="comment">//追加拼音到分词结果中, 需要在jcseg.properties中配置jcseg.loadpinyin=1</span></div><div class="line">		config.setAppendCJKPinyin(<span class="keyword">true</span>);</div><div class="line">		<span class="comment">//更多配置, 请查看com.webssky.jcseg.core.JcsegTaskConfig类</span></div><div class="line">	String words = <span class="string">"中华人民共和国"</span>;</div><div class="line">	TokenStream stream = <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">		stream.reset(); </div><div class="line">		CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line">		<span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">			System.out.println(offsetAtt.toString());</div><div class="line">		&#125;</div><div class="line">		stream.end();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(stream != <span class="keyword">null</span>)</div><div class="line">				stream.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">中华</div><div class="line">人民共和国</div></pre></td></tr></table></figure>
<h3 id="IKAnalyzer"><a href="#IKAnalyzer" class="headerlink" title="IKAnalyzer"></a>IKAnalyzer</h3><p>IK Analyzer是一个开源的，基亍java语言开发的轻量级的中文分词工具包。</p>
<p>采用了特有的“正向迭代最细粒度切分算法“，支持细粒度和智能分词两种切分模式；<br>在系统环境：Core2 i7 3.4G双核，4G内存，window 7 64位， Sun JDK 1.6_29 64位 普通pc环境测试，IK2012具有160万字/秒（3000KB/S）的高速处理能力。<br>2012版本的智能分词模式支持简单的分词排歧义处理和数量词合并输出。<br>采用了多子处理器分析模式，支持：英文字母、数字、中文词汇等分词处理，兼容韩文、日文字符<br>优化的词典存储，更小的内存占用。支持用户词典扩展定义。特别的，在2012版本，词典支持中文，英文，数字混合词语。</p>
<p>IK Analyzer支持细粒度切分和智能切分两种分词模式;</p>
<p>在细粒度切分下，词语分解到很细的力度，比如“一个苹果”，会被切分成如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">一个</div><div class="line">一</div><div class="line">个</div><div class="line">苹果</div></pre></td></tr></table></figure>
<p>在智能切分模式下，则会分词如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一个</div><div class="line">苹果</div></pre></td></tr></table></figure>
<p>和jcseg相同，现版本的IK Analyzer只兼容至lucene4版本，我修改了相关源码，使其提供了对lucene5的支持。</p>
<p>IK Analyzer示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analyzer;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IKAnalyzerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tokenTest</span><span class="params">()</span> </span>&#123;</div><div class="line">	Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</div><div class="line">	String words = <span class="string">"中华人民共和国"</span>;</div><div class="line">	TokenStream stream = <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">		stream.reset(); </div><div class="line">		CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line">		<span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">			System.out.println(offsetAtt.toString());</div><div class="line">		&#125;</div><div class="line">		stream.end();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			stream.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">中华人民共和国</div><div class="line">中华人民</div><div class="line">中华</div><div class="line">华人</div><div class="line">人民共和国</div><div class="line">人民</div><div class="line">共和国</div><div class="line">共和</div><div class="line">国</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene的analysis相关和自定义分词器]]></title>
      <url>/2019/03/16/Lucene/3%E3%80%81lucene%E7%9A%84analysis%E7%9B%B8%E5%85%B3%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="lucene（3）—lucene的analysis相关和自定义分词器"><a href="#lucene（3）—lucene的analysis相关和自定义分词器" class="headerlink" title="lucene（3）—lucene的analysis相关和自定义分词器"></a>lucene（3）—lucene的analysis相关和自定义分词器</h1><h2 id="analysis说明"><a href="#analysis说明" class="headerlink" title="analysis说明"></a>analysis说明</h2><h3 id="lucene-ananlysis应用场景"><a href="#lucene-ananlysis应用场景" class="headerlink" title="lucene ananlysis应用场景"></a>lucene ananlysis应用场景</h3><p>lucene提供了analysis用来将文本转换到索引文件或提供给IndexSearcher查询索引；</p>
<p>对于lucene而言，不管是索引还是检索，都是针对于纯文本输入来讲的；</p>
<p>通过lucene的强大类库我们可以访问各种格式的文档，如HTML、XML、PDF、<a href="https://www.baidu.com/s?wd=Word&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">Word</a>、TXT等，</p>
<p>我们需要传递给lucene的只是文件中的纯文本内容；</p>
<a id="more"></a>
<h3 id="lucene的词语切分"><a href="#lucene的词语切分" class="headerlink" title="lucene的词语切分"></a>lucene的词语切分</h3><p>lucene的索引和检索前提是其对文本内容的分析和词组的切分；比如，文档中有一句话叫“Hello World,Welcome to China”</p>
<p>我们想找到包含这段话的文档，而用户输入的查询条件又不尽详细（可能只是hello）</p>
<p>这里我们就需要用到lucene索引该文档的时候预先对文档内容进行切分，将词源和文本对应起来。</p>
<p>有时候对词语进行简单切分还远远不够，我们还需要对字符串进行深度切分，lucene不仅能够对索引内容预处理还可以对请求参数进行切分；</p>
<h3 id="使用analyzer"><a href="#使用analyzer" class="headerlink" title="使用analyzer"></a>使用analyzer</h3><p>lucene的索引使用如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analysis;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.StringReader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.OffsetAttribute;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnalysisTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tokenTest</span><span class="params">()</span> </span>&#123;</div><div class="line">		Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(); <span class="comment">// or any other analyzer</span></div><div class="line">		TokenStream ts = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ts = analyzer.tokenStream(<span class="string">"myfield"</span>, <span class="keyword">new</span> StringReader(</div><div class="line">					<span class="string">"some text goes here"</span>));</div><div class="line">			OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);</div><div class="line">			ts.reset(); <span class="comment">// Resets this stream to the beginning. (Required)</span></div><div class="line">			<span class="keyword">while</span> (ts.incrementToken()) &#123;</div><div class="line">				<span class="comment">// Use AttributeSource.reflectAsString(boolean)</span></div><div class="line">				<span class="comment">// for token stream debugging.</span></div><div class="line">				System.out.println(<span class="string">"token: "</span> + ts.reflectAsString(<span class="keyword">true</span>));</div><div class="line"> </div><div class="line">				System.out.println(<span class="string">"token start offset: "</span></div><div class="line">						+ offsetAtt.startOffset());</div><div class="line">				System.out.println(<span class="string">"token end offset: "</span></div><div class="line">						+ offsetAtt.endOffset());</div><div class="line">			&#125;</div><div class="line">			ts.end(); </div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				ts.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义Analyzer和实现自己的analysis模块"><a href="#自定义Analyzer和实现自己的analysis模块" class="headerlink" title="自定义Analyzer和实现自己的analysis模块"></a>自定义Analyzer和实现自己的analysis模块</h2><p>1.要实现自己的analyzer，我们需要继承Analyzer并重写其中的分词模块。</p>
<p>2.维护停止词词典</p>
<p>3.重写TokenStreamComponents方法，选择合适的分词方法，对词语进行过滤</p>
<p>示例代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analysis.self;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Tokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.LowerCaseTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.util.CharArraySet;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnalyzer</span> <span class="keyword">extends</span> <span class="title">Analyzer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> CharArraySet stopWordSet;<span class="comment">//停止词词典</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> CharArraySet <span class="title">getStopWordSet</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> stopWordSet;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopWordSet</span><span class="params">(CharArraySet stopWordSet)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.stopWordSet = stopWordSet;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyAnalyzer</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.stopWordSet = StopAnalyzer.ENGLISH_STOP_WORDS_SET;<span class="comment">//可在此基础上拓展停止词</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**扩展停止词</span></div><div class="line">	 * <span class="doctag">@param</span> stops</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyAnalyzer</span><span class="params">(String[] stops)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>();</div><div class="line">		stopWordSet.addAll(StopFilter.makeStopSet(stops));</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> TokenStreamComponents <span class="title">createComponents</span><span class="params">(String fieldName)</span> </span>&#123;</div><div class="line">		<span class="comment">//正则匹配分词</span></div><div class="line">		Tokenizer source = <span class="keyword">new</span> LowerCaseTokenizer();</div><div class="line">	    <span class="keyword">return</span> <span class="keyword">new</span> TokenStreamComponents(source, <span class="keyword">new</span> StopFilter(source, stopWordSet));</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Analyzer analyzer = <span class="keyword">new</span> MyAnalyzer();</div><div class="line">		String words = <span class="string">"A AN yuyu"</span>;</div><div class="line">		TokenStream stream = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">			stream.reset(); </div><div class="line">			CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line">			<span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">				System.out.println(offsetAtt.toString());</div><div class="line">			&#125;</div><div class="line">			stream.end();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				stream.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yuyu</div></pre></td></tr></table></figure>
<p>说明该分词器对a an 进行了过滤，这些过滤的词在stopWordSet中</p>
<h3 id="添加字长过滤器"><a href="#添加字长过滤器" class="headerlink" title="添加字长过滤器"></a>添加字长过滤器</h3><p>有时候我们需要对字符串中的短字符进行过滤，比如welcome to BeiJIng中过滤掉长度小于2的字符串，我们期望的结果就变成了Welcome BeiJing,我们仅需要重新实现createComponents方法，相关代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.analysis.self;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Tokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.LowerCaseTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.StopFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.core.WhitespaceTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.miscellaneous.LengthFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.util.CharArraySet;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LengFilterAanlyzer</span> <span class="keyword">extends</span> <span class="title">Analyzer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> len;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> len;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLen</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.len = len;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LengFilterAanlyzer</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LengFilterAanlyzer</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.len = len;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> TokenStreamComponents <span class="title">createComponents</span><span class="params">(String fieldName)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Tokenizer source = <span class="keyword">new</span> WhitespaceTokenizer();</div><div class="line">	    TokenStream result = <span class="keyword">new</span> LengthFilter(source, len, Integer.MAX_VALUE);</div><div class="line">	    <span class="keyword">return</span> <span class="keyword">new</span> TokenStreamComponents(source,result);</div><div class="line"> </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Analyzer analyzer = <span class="keyword">new</span> LengFilterAanlyzer(<span class="number">2</span>);</div><div class="line">		String words = <span class="string">"I am a java coder"</span>;</div><div class="line">		TokenStream stream = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			stream = analyzer.tokenStream(<span class="string">"myfield"</span>, words);</div><div class="line">			stream.reset(); </div><div class="line">			CharTermAttribute  offsetAtt = stream.addAttribute(CharTermAttribute.class);</div><div class="line">			<span class="keyword">while</span> (stream.incrementToken()) &#123;</div><div class="line">				System.out.println(offsetAtt.toString());</div><div class="line">			&#125;</div><div class="line">			stream.end();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				stream.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序的执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">am</div><div class="line">java</div><div class="line">coder</div></pre></td></tr></table></figure>
<p>说明小于2个字符的文本被过滤了。</p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene的各种Field及其排序]]></title>
      <url>/2019/03/16/Lucene/2%E3%80%81lucene%E7%9A%84%E5%90%84%E7%A7%8DField%E5%8F%8A%E5%85%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="lucene（2）—lucene的各种Field及其排序"><a href="#lucene（2）—lucene的各种Field及其排序" class="headerlink" title="lucene（2）—lucene的各种Field及其排序"></a>lucene（2）—lucene的各种Field及其排序</h1><h2 id="Lucene的Field说明"><a href="#Lucene的Field说明" class="headerlink" title="Lucene的Field说明"></a>Lucene的Field说明</h2><p>Lucene存储对象是以document为存储单元，对象中相关的属性值则存放到Field中；</p>
<p>lucene中所有Field都是IndexableField接口的实现</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">org.apache.lucene.index.IndexableField</div><div class="line"> </div><div class="line">Represents a single field <span class="keyword">for</span> indexing. IndexWriter consumes Iterable&lt;IndexableField&gt; as a document.</div></pre></td></tr></table></figure>
<p>IndexableField接口提供了一些方法，主要是对field相关属性的获取，包括</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 获取field的名称 */</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 获取field的类型fieldType */</span></div><div class="line"><span class="function"><span class="keyword">public</span> IndexableFieldType <span class="title">fieldType</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> *获取当前field的权重（评分值） 只有Field有评分的概念，如果我们想对document进行评分值的设定 必须预先对document中对应的field值进行评分设设定*/  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">boost</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 如果此Filed为二进制类型的，返回相应的值*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> BytesRef <span class="title">binaryValue</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建一个用户索引此Field的TokenStream</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> TokenStream <span class="title">tokenStream</span><span class="params">(Analyzer analyzer, TokenStream reuse)</span> <span class="keyword">throws</span> IOException</span>;</div></pre></td></tr></table></figure>
<p>所有的Field均是org.apache.lucene.document.Field的子类；</p>
<p>项目中我们常用的Field类型主要有IntField, LongField, FloatField, DoubleField, BinaryDocValuesField, NumericDocValuesField, SortedDocValuesField, StringField, TextField, StoredField.</p>
<h2 id="lucene常见Field"><a href="#lucene常见Field" class="headerlink" title="lucene常见Field"></a>lucene常见Field</h2><p>IntField 主要对int类型的字段进行存储，需要注意的是如果需要对InfField进行排序使用SortField.Type.INT来比较，如果进范围查询或过滤，需要采用NumericRangeQuery.newIntRange() LongField 主要处理Long类型的字段的存储，排序使用SortField.Type.Long,如果进行范围查询或过滤利用NumericRangeQuery.newLongRange()，LongField常用来进行时间戳的排序，保存System.currentTimeMillions() FloatField 对Float类型的字段进行存储，排序采用SortField.Type.Float,范围查询采用NumericRangeQuery.newFloatRange() BinaryDocVluesField 只存储不共享值，如果需要共享值可以用SortedDocValuesField NumericDocValuesField 用于数值类型的Field的排序(预排序)，需要在要排序的field后添加一个同名的NumericDocValuesField SortedDocValuesField 用于String类型的Field的排序，需要在StringField后添加同名的SortedDocValuesField StringField 用户String类型的字段的存储，StringField是只索引不分词 TextField 对String类型的字段进行存储，TextField和StringField的不同是TextField既索引又分词 StoredField 存储Field的值，可以用IndexSearcher.doc和IndexReader.document来获取此Field和存储的值</p>
<h2 id="IntField使用"><a href="#IntField使用" class="headerlink" title="IntField使用"></a>IntField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntFieldTest</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 保存一个intField</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexIntFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">		Document document = <span class="keyword">new</span> Document();</div><div class="line">		document.add(<span class="keyword">new</span> IntField(<span class="string">"intValue"</span>, <span class="number">30</span>, Field.Store.YES));</div><div class="line">		<span class="comment">//要排序必须加同名的field，且类型为NumericDocValuesField</span></div><div class="line">		document.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"intValue"</span>, <span class="number">30</span>));</div><div class="line">		Document document1 = <span class="keyword">new</span> Document();</div><div class="line">		document1.add(<span class="keyword">new</span> IntField(<span class="string">"intValue"</span>, <span class="number">40</span>, Field.Store.YES));</div><div class="line">		document1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"intValue"</span>, <span class="number">40</span>));</div><div class="line">		IndexWriter writer = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			writer = IndexUtil.getIndexWriter(<span class="string">"intFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">			writer.addDocument(document);</div><div class="line">			writer.addDocument(document1);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试intField排序</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIntFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"intFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line">			<span class="comment">//构建排序字段</span></div><div class="line">			SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">			sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"intValue"</span>,SortField.Type.INT,<span class="keyword">true</span>);</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">			<span class="comment">//查询所有结果</span></div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">			ScoreDoc[] scores = docs.scoreDocs;</div><div class="line">			<span class="comment">//遍历结果</span></div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line">				System.out.println(searcher.doc(scoreDoc.doc));;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//searcher.search(query, results);</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试排序结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;intValue:40&gt;&gt;</div><div class="line">Document&lt;stored&lt;intValue:30&gt;&gt;</div></pre></td></tr></table></figure>
<p>如果修改NumericDocValuesField对应的值，结果会随着其值的大小而改变</p>
<h2 id="LongField使用"><a href="#LongField使用" class="headerlink" title="LongField使用"></a>LongField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 保存一个longField</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">		Document document = <span class="keyword">new</span> Document();</div><div class="line">		document.add(<span class="keyword">new</span> LongField(<span class="string">"longValue"</span>, <span class="number">50L</span>, Field.Store.YES));</div><div class="line">		document.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longValue"</span>, <span class="number">50L</span>));</div><div class="line">		Document document1 = <span class="keyword">new</span> Document();</div><div class="line">		document1.add(<span class="keyword">new</span> LongField(<span class="string">"longValue"</span>, <span class="number">80L</span>, Field.Store.YES));</div><div class="line">		document1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longValue"</span>, <span class="number">80L</span>));</div><div class="line">		IndexWriter writer = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			writer = IndexUtil.getIndexWriter(<span class="string">"longFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">			writer.addDocument(document);</div><div class="line">			writer.addDocument(document1);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试longField排序</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLongFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"longFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line">			<span class="comment">//构建排序字段</span></div><div class="line">			SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">			sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"longValue"</span>,SortField.Type.LONG,<span class="keyword">true</span>);</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">			<span class="comment">//查询所有结果</span></div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">			ScoreDoc[] scores = docs.scoreDocs;</div><div class="line">			<span class="comment">//遍历结果</span></div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line">				<span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">				Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">				System.out.println(doc.getField(<span class="string">"longValue"</span>).numericValue());</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//searcher.search(query, results);</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;longValue:80&gt;&gt;</div><div class="line">Document&lt;stored&lt;longValue:50&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="FloatField使用"><a href="#FloatField使用" class="headerlink" title="FloatField使用"></a>FloatField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 保存一个floatField</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexFloatFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">		Document document = <span class="keyword">new</span> Document();</div><div class="line">		document.add(<span class="keyword">new</span> FloatField(<span class="string">"floatValue"</span>, <span class="number">9.1f</span>, Field.Store.YES));</div><div class="line">		document.add(<span class="keyword">new</span> FloatDocValuesField(<span class="string">"floatValue"</span>, <span class="number">82.0f</span>));</div><div class="line">		Document document1 = <span class="keyword">new</span> Document();</div><div class="line">		document1.add(<span class="keyword">new</span> FloatField(<span class="string">"floatValue"</span>, <span class="number">80.1f</span>, Field.Store.YES));</div><div class="line">		document1.add(<span class="keyword">new</span> FloatDocValuesField(<span class="string">"floatValue"</span>, <span class="number">80.1f</span>));</div><div class="line">		IndexWriter writer = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			writer = IndexUtil.getIndexWriter(<span class="string">"floatFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">			writer.addDocument(document);</div><div class="line">			writer.addDocument(document1);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试intField排序</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFloatFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"floatFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line">			<span class="comment">//构建排序字段</span></div><div class="line">			SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">			sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"floatValue"</span>,SortField.Type.FLOAT,<span class="keyword">true</span>);</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">			<span class="comment">//查询所有结果</span></div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">			ScoreDoc[] scores = docs.scoreDocs;</div><div class="line">			<span class="comment">//遍历结果</span></div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line">				<span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">				Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">				System.out.println(doc.getField(<span class="string">"floatValue"</span>).numericValue());</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//searcher.search(query, results);</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;floatValue:9.1&gt;&gt;</div><div class="line">Document&lt;stored&lt;floatValue:80.1&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="BinaryDocValuesField使用"><a href="#BinaryDocValuesField使用" class="headerlink" title="BinaryDocValuesField使用"></a>BinaryDocValuesField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryDocValuesFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 保存一个BinaryDocValuesField</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">		Document document = <span class="keyword">new</span> Document();</div><div class="line">		document.add(<span class="keyword">new</span> BinaryDocValuesField(<span class="string">"binaryValue"</span>,<span class="keyword">new</span> BytesRef(<span class="string">"1234"</span>.getBytes())));</div><div class="line">		Document document1 = <span class="keyword">new</span> Document();</div><div class="line">		document1.add(<span class="keyword">new</span> BinaryDocValuesField(<span class="string">"binaryValue"</span>,<span class="keyword">new</span> BytesRef(<span class="string">"2345"</span>.getBytes())));</div><div class="line">		IndexWriter writer = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			writer = IndexUtil.getIndexWriter(<span class="string">"binaryValueFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">			writer.addDocument(document);</div><div class="line">			writer.addDocument(document1);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试BinaryDocValuesField排序</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBinaryDocValuesFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"binaryValueFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line">			<span class="comment">//构建排序字段</span></div><div class="line">			SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">			sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"binaryValue"</span>,SortField.Type.STRING_VAL,<span class="keyword">true</span>);</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">			<span class="comment">//查询所有结果</span></div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">			ScoreDoc[] scores = docs.scoreDocs;</div><div class="line">			<span class="comment">//遍历结果</span></div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line">				<span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">				Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">				System.out.println(doc);</div><div class="line">				<span class="comment">//System.out.println(doc.getField("binaryValue").numericValue());</span></div><div class="line">			&#125;</div><div class="line">			<span class="comment">//searcher.search(query, results);</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;&gt;</div><div class="line">Document&lt;&gt;</div></pre></td></tr></table></figure>
<p>为什么这样呢，这是跟BinaryDocValuesField的特性决定的，只索引不存值！</p>
<h2 id="StringField使用"><a href="#StringField使用" class="headerlink" title="StringField使用"></a>StringField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.SortedDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 保存一个StringField</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">		Document document = <span class="keyword">new</span> Document();</div><div class="line">		document.add(<span class="keyword">new</span> StringField(<span class="string">"stringValue"</span>,<span class="string">"12445"</span>, Field.Store.YES));</div><div class="line">		document.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"stringValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"12445"</span>.getBytes())));</div><div class="line">		Document document1 = <span class="keyword">new</span> Document();</div><div class="line">		document1.add(<span class="keyword">new</span> StringField(<span class="string">"stringValue"</span>,<span class="string">"23456"</span>, Field.Store.YES));</div><div class="line">		document1.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"stringValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"23456"</span>.getBytes())));</div><div class="line">		IndexWriter writer = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			writer = IndexUtil.getIndexWriter(<span class="string">"stringFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">			writer.addDocument(document);</div><div class="line">			writer.addDocument(document1);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试StringField排序</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"stringFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line">			<span class="comment">//构建排序字段</span></div><div class="line">			SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">			sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"stringVal"</span>,SortField.Type.STRING,<span class="keyword">true</span>);</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">			<span class="comment">//查询所有结果</span></div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">			ScoreDoc[] scores = docs.scoreDocs;</div><div class="line">			<span class="comment">//遍历结果</span></div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line">				<span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">				Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">				System.out.println(doc);</div><div class="line">				<span class="comment">//System.out.println(doc.getField("binaryValue").numericValue());</span></div><div class="line">			&#125;</div><div class="line">			<span class="comment">//searcher.search(query, results);</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored,indexed,tokenized,omitNorms,indexOptions=DOCS&lt;stringValue:12445&gt;&gt;</div><div class="line">Document&lt;stored,indexed,tokenized,omitNorms,indexOptions=DOCS&lt;stringValue:23456&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="TextField使用"><a href="#TextField使用" class="headerlink" title="TextField使用"></a>TextField使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.field;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.FloatField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.SortedDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFieldTest</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 保存一个StringField</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexLongFieldStored</span><span class="params">()</span> </span>&#123;</div><div class="line">		Document document = <span class="keyword">new</span> Document();</div><div class="line">		document.add(<span class="keyword">new</span> TextField(<span class="string">"textValue"</span>,<span class="string">"12345"</span>, Field.Store.YES));</div><div class="line">		document.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"textValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"12345"</span>.getBytes())));</div><div class="line">		Document document1 = <span class="keyword">new</span> Document();</div><div class="line">		document1.add(<span class="keyword">new</span> TextField(<span class="string">"textValue"</span>,<span class="string">"23456"</span>, Field.Store.YES));</div><div class="line">		document1.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"textValue"</span>, <span class="keyword">new</span> BytesRef(<span class="string">"23456"</span>.getBytes())));</div><div class="line">		IndexWriter writer = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			writer = IndexUtil.getIndexWriter(<span class="string">"textFieldPath"</span>, <span class="keyword">false</span>);</div><div class="line">			writer.addDocument(document);</div><div class="line">			writer.addDocument(document1);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试StringField排序</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringFieldSort</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			IndexSearcher searcher = SearchUtil.getIndexSearcher(<span class="string">"textFieldPath"</span>, <span class="keyword">null</span>);</div><div class="line">			<span class="comment">//构建排序字段</span></div><div class="line">			SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">			sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"textValue"</span>,SortField.Type.STRING,<span class="keyword">true</span>);</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">			<span class="comment">//查询所有结果</span></div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			TopFieldDocs docs = searcher.search(query, <span class="number">2</span>, sort);</div><div class="line">			ScoreDoc[] scores = docs.scoreDocs;</div><div class="line">			<span class="comment">//遍历结果</span></div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scores) &#123;</div><div class="line">				<span class="comment">//System.out.println(searcher.doc(scoreDoc.doc));;</span></div><div class="line">				Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">				System.out.println(doc);</div><div class="line">				<span class="comment">//System.out.println(doc.getField("binaryValue").numericValue());</span></div><div class="line">			&#125;</div><div class="line">			<span class="comment">//searcher.search(query, results);</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored,indexed,tokenized&lt;textValue:23456&gt;&gt;</div><div class="line">Document&lt;stored,indexed,tokenized&lt;textValue:12345&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h2><p><a href="http://download.csdn.net/detail/wuyinggui10000/8669987" target="_blank" rel="external">lucene field使用源码</a></p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene的多样化查询]]></title>
      <url>/2019/03/16/Lucene/21%E3%80%81lucene%E7%9A%84%E5%A4%9A%E6%A0%B7%E5%8C%96%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h1 id="lucene（21）—lucene的多样化查询"><a href="#lucene（21）—lucene的多样化查询" class="headerlink" title="lucene（21）—lucene的多样化查询"></a>lucene（21）—lucene的多样化查询</h1><table>
<thead>
<tr>
<th>查询类</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>TermQuery</td>
<td>通过项进行搜索</td>
</tr>
<tr>
<td>TermRangeQuery</td>
<td>在指定的项范围内进行搜索</td>
</tr>
<tr>
<td>PrefixQuery</td>
<td>通过字符串搜索</td>
</tr>
<tr>
<td>BooleanQuery</td>
<td>组合查询</td>
</tr>
<tr>
<td>PhraseQuery</td>
<td>通过短语搜索</td>
</tr>
<tr>
<td>WildcardQuery</td>
<td>通配符查询</td>
</tr>
<tr>
<td>FuzzyQuery</td>
<td>搜索类似项</td>
</tr>
<tr>
<td>MatchAllDocsQuery</td>
<td>匹配所有文档</td>
</tr>
<tr>
<td>MatchNoDocsQuery</td>
<td>不用匹配文档</td>
</tr>
<tr>
<td>QueryParser</td>
<td>解析查询表达式</td>
</tr>
<tr>
<td>MultiPhraseQuery</td>
<td>多短语查询</td>
</tr>
<tr>
<td>NumericRangeQuery</td>
<td>数字范围查询，一般在价格、时间域的查询</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>在 Lucene4 以后，组合查询只有一个构造方法，并没有无参构造方法，而是多了一个静态内部类 Builder。所以组合查如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Query booleanQuery = <span class="keyword">new</span> BooleanQuery.Builder().add(query1,BooleanClause.Occur.MUST).add(query1,BooleanClause.Occur.MUST).build();</div></pre></td></tr></table></figure>
<p>BooleanClause.Occur 提供了一下四种：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>MUST</td>
<td>相当于 SQL 中的 and</td>
</tr>
<tr>
<td>FILTER</td>
<td></td>
</tr>
<tr>
<td>SHOULD</td>
<td>相当于 SQL 中的 in</td>
</tr>
<tr>
<td>MUST_NOT</td>
</tr>
</tbody>
</table>
<p>当它们同事使用的情况：</p>
<h2 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h2><p>lucene 包含了 一个建立在 SpanQuery 类基础上的整套查询体系，大致反映了 Lucene 的 Query 类体系。SpanQuery 是指域中的起始词汇单元和终止词汇单元的位置。SpanQuery 有一些常用的子类，如下所示：</p>
<h3 id="FieldMaskingSpanQuery"><a href="#FieldMaskingSpanQuery" class="headerlink" title="FieldMaskingSpanQuery"></a>FieldMaskingSpanQuery</h3><p>用于在多个域之间查询，即把另一个域看成某个域，从而看起来像是在同个域中查询，因为 Lucene 默认某个条件只能作用在单个域上，不支持跨域查询，只能在同一个域中查询，所以有了FieldMaskingSpanQuery。</p>
<h3 id="SpanTermQuery"><a href="#SpanTermQuery" class="headerlink" title="SpanTermQuery"></a>SpanTermQuery</h3><p>和其他跨度查询类型结合使用，单独使用时，相当于 Term,slop 为跨度因子，用来限制两个 Trem 之间的最大跨度。还有一个 inOrder 参数，它用来设置是否允许尽心倒叙跨度。即 TremA 到 TramB 不一定从左到右去匹配也可以从右到左，从右到左就是倒叙，inOrder 为 true 即表示 order (顺序) 很重要不能倒叙去匹配必须正向去匹配，false 返之。注意，停用词不在 slop 统计范围内</p>
<h3 id="SpanFirstQuery"><a href="#SpanFirstQuery" class="headerlink" title="SpanFirstQuery"></a>SpanFirstQuery</h3><p>表示对出现在一个域中的 [0,n] 范围内的 Term 项进行的匹配查询，关键是 n 指定了查询的 term 出现范围的上限。</p>
<h3 id="SpanContainingQuery"><a href="#SpanContainingQuery" class="headerlink" title="SpanContainingQuery"></a>SpanContainingQuery</h3><p>返回在另一个范围内的查询匹配结果，big 和 little 的句子可以是任何 span 类型查询。在包含 little 匹配中从 big 匹配跨度返回。例如 “a beautiful and boring world” , big 查询是 SpanNearQuery(SpanTermQuery(“beautiful “),SpanTermQuery(“world”)).setSlop(2),而 little 查询是 SpanTermQuery(“boring”) ，则该 Doc 命中，并 big 匹配跨度返回，即 big 优先级高。 </p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene 综合应用实例]]></title>
      <url>/2019/03/16/Lucene/20%E3%80%81lucene%E7%9A%84%E7%BB%BC%E5%90%88%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="lucene（20）—lucene-综合应用实例"><a href="#lucene（20）—lucene-综合应用实例" class="headerlink" title="lucene（20）—lucene 综合应用实例"></a>lucene（20）—lucene 综合应用实例</h1><p>最近因项目需求的需要，完成一个”会话检索”功能。该功能是把录音转写成文字，对转写后的文本进行关键字检索。因为该功能对检索条件类型的使用比较完整（例如：时间范围、关键字、语速等不同类型）以及使用的注意点也比较多，所以在这里给大家分享一下。希望可以帮到你。</p>
<a id="more"></a>
<h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><p>会话检索，支持 多个文件夹同时检索，支持的索引大小为 1300 MB 左右（大约是45万条数据），支持 多个条件进行 and 检索。</p>
<h2 id="功能依赖"><a href="#功能依赖" class="headerlink" title="功能依赖"></a>功能依赖</h2><p>lucene 使用的版本是 5.5.3 ，相对来说还是比较老的，当前最新的版本是 7.7.0 。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queries<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-backward-codecs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-memory<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-highlighter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-spatial<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-smartcn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h3><p>分页处理类 Page</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">/** 当前第几页(从1开始计算) */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> currentPage;</div><div class="line">	<span class="comment">/** 每页显示几条 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> pageSize;</div><div class="line">	<span class="comment">/** 总记录数 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> totalRecord;</div><div class="line">	<span class="comment">/** 总页数 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> totalPage;</div><div class="line">	<span class="comment">/** 分页数据集合[用泛型T来限定集合元素类型] */</span></div><div class="line">	<span class="keyword">private</span> Collection&lt;T&gt; items;</div><div class="line">	<span class="comment">/** 当前显示起始索引(从零开始计算) */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> startIndex;</div><div class="line">	<span class="comment">/** 当前显示结束索引(从零开始计算) */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> endIndex;</div><div class="line">	<span class="comment">/** 一组最多显示几个页码[比如Google一组最多显示10个页码] */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> groupSize;</div><div class="line">	<span class="comment">/** 左边偏移量 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> leftOffset = <span class="number">5</span>;</div><div class="line">	<span class="comment">/** 右边偏移量 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> rightOffset = <span class="number">4</span>;</div><div class="line">	<span class="comment">/** 当前页码范围 */</span></div><div class="line">	<span class="keyword">private</span> String[] pageRange;</div><div class="line">	<span class="comment">/** 分页数据 */</span></div><div class="line">	<span class="keyword">private</span> List&lt;Document&gt; docList;</div><div class="line">	<span class="comment">/** 上一页最后一个ScoreDoc对象 */</span></div><div class="line">	<span class="keyword">private</span> ScoreDoc afterDoc;</div><div class="line">	<span class="comment">/** 上一页最后一个ScoreDoc对象的Document对象ID */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> afterDocId;</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRangeIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> groupSize = getGroupSize();</div><div class="line">		<span class="keyword">int</span> totalPage = getTotalPage();</div><div class="line">		<span class="keyword">if</span> (totalPage &lt; <span class="number">2</span>) &#123;</div><div class="line">			startIndex = <span class="number">0</span>;</div><div class="line">			endIndex = totalPage - startIndex;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> currentPage = getCurrentPage();</div><div class="line">			<span class="keyword">if</span> (groupSize &gt;= totalPage) &#123;</div><div class="line">				startIndex = <span class="number">0</span>;</div><div class="line">				endIndex = totalPage - startIndex - <span class="number">1</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">int</span> leftOffset = getLeftOffset();</div><div class="line">				<span class="keyword">int</span> middleOffset = getMiddleOffset();</div><div class="line">				<span class="keyword">if</span> (-<span class="number">1</span> == middleOffset) &#123;</div><div class="line">					startIndex = <span class="number">0</span>;</div><div class="line">					endIndex = groupSize - <span class="number">1</span>;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPage &lt;= leftOffset) &#123;</div><div class="line">					startIndex = <span class="number">0</span>;</div><div class="line">					endIndex = groupSize - <span class="number">1</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					startIndex = currentPage - leftOffset - <span class="number">1</span>;</div><div class="line">					<span class="keyword">if</span> (currentPage + rightOffset &gt; totalPage) &#123;</div><div class="line">						endIndex = totalPage - <span class="number">1</span>;</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						endIndex = currentPage + rightOffset - <span class="number">1</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (currentPage &lt;= <span class="number">0</span>) &#123;</div><div class="line">			currentPage = <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> totalPage = getTotalPage();</div><div class="line">			<span class="keyword">if</span> (totalPage &gt; <span class="number">0</span> &amp;&amp; currentPage &gt; getTotalPage()) &#123;</div><div class="line">				currentPage = totalPage;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> currentPage;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (pageSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">			pageSize = <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> pageSize;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalRecord</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> totalRecord;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalRecord</span><span class="params">(<span class="keyword">int</span> totalRecord)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.totalRecord = totalRecord;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> totalRecord = getTotalRecord();</div><div class="line">		<span class="keyword">if</span> (totalRecord == <span class="number">0</span>) &#123;</div><div class="line">			totalPage = <span class="number">0</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> pageSize = getPageSize();</div><div class="line">			totalPage = totalRecord % pageSize == <span class="number">0</span> ? totalRecord / pageSize : (totalRecord / pageSize) + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> totalPage;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(<span class="keyword">int</span> totalPage)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.totalPage = totalPage;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStartIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> startIndex;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartIndex</span><span class="params">(<span class="keyword">int</span> startIndex)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.startIndex = startIndex;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEndIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> endIndex;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndIndex</span><span class="params">(<span class="keyword">int</span> endIndex)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.endIndex = endIndex;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGroupSize</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (groupSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">			groupSize = <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> groupSize;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupSize</span><span class="params">(<span class="keyword">int</span> groupSize)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.groupSize = groupSize;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeftOffset</span><span class="params">()</span> </span>&#123;</div><div class="line">		leftOffset = getGroupSize() / <span class="number">2</span>;</div><div class="line">		<span class="keyword">return</span> leftOffset;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftOffset</span><span class="params">(<span class="keyword">int</span> leftOffset)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.leftOffset = leftOffset;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRightOffset</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> groupSize = getGroupSize();</div><div class="line">		<span class="keyword">if</span> (groupSize % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">			rightOffset = (groupSize / <span class="number">2</span>) - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			rightOffset = groupSize / <span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> rightOffset;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightOffset</span><span class="params">(<span class="keyword">int</span> rightOffset)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rightOffset = rightOffset;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** 中心位置索引[从1开始计算] */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMiddleOffset</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> groupSize = getGroupSize();</div><div class="line">		<span class="keyword">int</span> totalPage = getTotalPage();</div><div class="line">		<span class="keyword">if</span> (groupSize &gt;= totalPage) &#123;</div><div class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> getLeftOffset() + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String[] getPageRange() &#123;</div><div class="line">		setRangeIndex();</div><div class="line">		<span class="keyword">int</span> size = endIndex - startIndex + <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (totalPage == <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"1"</span> &#125;;</div><div class="line">		&#125;</div><div class="line">		pageRange = <span class="keyword">new</span> String[size];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">			pageRange[i] = (startIndex + i + <span class="number">1</span>) + <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> pageRange;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageRange</span><span class="params">(String[] pageRange)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.pageRange = pageRange;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(Collection&lt;T&gt; items)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.items = items;</div><div class="line">	&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;T&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> items;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDocList</span><span class="params">(List&lt;Document&gt; docList)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.docList = docList;</div><div class="line">	&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Document&gt; <span class="title">getDocList</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> docList;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAfterDoc</span><span class="params">(ScoreDoc afterDoc)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.afterDoc = afterDoc;</div><div class="line">	&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ScoreDoc <span class="title">getAfterDoc</span><span class="params">()</span> </span>&#123;</div><div class="line">		setAfterDocId(afterDocId);</div><div class="line">		<span class="keyword">return</span> afterDoc;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAfterDocId</span><span class="params">(<span class="keyword">int</span> afterDocId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.afterDocId = afterDocId;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == afterDoc) &#123;</div><div class="line">			<span class="keyword">this</span>.afterDoc = <span class="keyword">new</span> ScoreDoc(afterDocId, <span class="number">1.0f</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAfterDocId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> afterDocId;&#125;</div><div class="line">	</div><div class="line">    <span class="comment">/*构造方法*/</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">		<span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, Collection&lt;T&gt; items)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">		<span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">		<span class="keyword">this</span>.items = items;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, Collection&lt;T&gt; items, <span class="keyword">int</span> groupSize)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">		<span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">		<span class="keyword">this</span>.items = items;</div><div class="line">		<span class="keyword">this</span>.groupSize = groupSize;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> groupSize, <span class="keyword">int</span> afterDocId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">		<span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">		<span class="keyword">this</span>.groupSize = groupSize;</div><div class="line">		<span class="keyword">this</span>.afterDocId = afterDocId;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>会话记录 IQCConversationInfoBean  实体类 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IQCConversationInfoBean</span> <span class="keyword">extends</span> <span class="title">EntityBean</span> </span>&#123;</div><div class="line">	<span class="comment">// serialVersionUID</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4459013070304617092L</span>;</div><div class="line">    <span class="keyword">private</span> String serialNo;<span class="comment">// 通话编号</span></div><div class="line">    <span class="keyword">private</span> Date callTime; <span class="comment">// 呼入时间</span></div><div class="line">    <span class="keyword">private</span> String callDate; <span class="comment">// 会话日期</span></div><div class="line">    <span class="keyword">private</span> Date hangupTime; <span class="comment">// 挂机时间</span></div><div class="line">    <span class="keyword">private</span> String language;  <span class="comment">// 语种</span></div><div class="line">    <span class="keyword">private</span> String agentContent; <span class="comment">// 座席通话内容</span></div><div class="line">    <span class="keyword">private</span> String custContent; <span class="comment">// 客户通话内容</span></div><div class="line">    <span class="keyword">private</span> String allContent; <span class="comment">//全部通话内容</span></div><div class="line">    <span class="keyword">private</span> String agentFirst;  <span class="comment">// 座席首句</span></div><div class="line">    <span class="keyword">private</span> String agentLast; <span class="comment">// 座席尾句</span></div><div class="line">    <span class="keyword">private</span> String custFirst; <span class="comment">// 客户首句</span></div><div class="line">    <span class="keyword">private</span> String custLast; <span class="comment">// 客户尾句</span></div><div class="line">    <span class="keyword">private</span> Float agentMaxSpeed=<span class="number">0f</span>; <span class="comment">// 座席最大语速</span></div><div class="line">    <span class="keyword">private</span> Float agentMinSpeed=<span class="number">0f</span>; <span class="comment">// 座席最小语速</span></div><div class="line">    <span class="keyword">private</span> Float agentAvgSpeed=<span class="number">0f</span>; <span class="comment">// 座席平均语速</span></div><div class="line">    <span class="keyword">private</span> Float custMaxSpeed=<span class="number">0f</span>; <span class="comment">// 座席最大语速</span></div><div class="line">    <span class="keyword">private</span> Float custMinSpeed=<span class="number">0f</span>; <span class="comment">// 座席最小语速</span></div><div class="line">    <span class="keyword">private</span> Float custAvgSpeed=<span class="number">0f</span>; <span class="comment">// 座席平均语速</span></div><div class="line">    <span class="keyword">private</span> Integer silenceSeconds; <span class="comment">// 静音时长</span></div><div class="line">    <span class="keyword">private</span> String sumNo; <span class="comment">//小结编号</span></div><div class="line">    <span class="keyword">private</span> Float silencePercent; <span class="comment">// 静音占比</span></div><div class="line">    <span class="keyword">private</span> String mediaType; <span class="comment">// 会话类型</span></div><div class="line">    <span class="keyword">private</span> Integer maxSilenceSeconds; <span class="comment">// 最大静音时长</span></div><div class="line">    <span class="keyword">private</span> String accountCode; <span class="comment">// 座席用户号</span></div><div class="line">    <span class="keyword">private</span> String empName; <span class="comment">// 座席姓名</span></div><div class="line">    <span class="keyword">private</span> Integer talkSeconds; <span class="comment">// 通话时长</span></div><div class="line">    <span class="keyword">private</span>  Integer minTalkSeconds; <span class="comment">// 最小通话时长</span></div><div class="line">    <span class="keyword">private</span>  Integer maxTalkSeconds; <span class="comment">// 最大通话时长</span></div><div class="line">    <span class="keyword">private</span> Float custMaxEmotion=<span class="number">0f</span>; <span class="comment">// 客户最大情绪</span></div><div class="line">    <span class="keyword">private</span> Float custMinEmotion=<span class="number">0f</span>; <span class="comment">// 客户最小情绪</span></div><div class="line">    <span class="keyword">private</span> Float custAvgEmotion=<span class="number">0f</span>; <span class="comment">// 客户平均情绪</span></div><div class="line">    <span class="keyword">private</span> Float agentMaxEmotion=<span class="number">0f</span>; <span class="comment">// 座席最大情绪</span></div><div class="line">    <span class="keyword">private</span> Float agentMinEmotion=<span class="number">0f</span>; <span class="comment">// 座席最小情绪</span></div><div class="line">    <span class="keyword">private</span> Float agentAvgEmotion=<span class="number">0f</span>; <span class="comment">// 座席平均情绪</span></div><div class="line">    <span class="keyword">private</span> Integer silenceCount; <span class="comment">// 静音次数</span></div><div class="line">    <span class="keyword">private</span> String overLap; <span class="comment">// 是否重叠音</span></div><div class="line">    <span class="keyword">private</span> String callNo; <span class="comment">// 来电号码</span></div><div class="line">    <span class="keyword">private</span> String custNo; <span class="comment">// 客户号</span></div><div class="line">    <span class="keyword">private</span> String custGender; <span class="comment">// 客户性别</span></div><div class="line">    <span class="keyword">private</span> String businessGroupCode; <span class="comment">// 座席组别</span></div><div class="line">    <span class="keyword">private</span> String satisfiedType; <span class="comment">// 满意度</span></div><div class="line">    <span class="keyword">private</span> String custName; <span class="comment">// 客户姓名</span></div><div class="line">    <span class="keyword">private</span> String taskCode; <span class="comment">// 任务编号</span></div><div class="line">    <span class="keyword">private</span> String analysisResult; <span class="comment">// 分析结果</span></div><div class="line">    <span class="keyword">private</span> String channelCode; <span class="comment">// 数据渠道</span></div><div class="line">    <span class="comment">//扩展字段</span></div><div class="line">    <span class="keyword">private</span> String filePath; <span class="comment">// 文件路径</span></div><div class="line">    <span class="keyword">private</span> String beginTime; <span class="comment">// 查询条件开始时间</span></div><div class="line">    <span class="keyword">private</span> String endTime; <span class="comment">// 查询条件结束时间</span></div><div class="line">    </div><div class="line">    .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>lucene 工具类 LuceneUtils</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneUtils</span> </span>&#123;</div><div class="line">    <span class="comment">// 打开索引目录</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FSDirectory <span class="title">openFSDirectory</span><span class="params">(String luceneDir)</span> </span>&#123;</div><div class="line">		FSDirectory directory = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			directory = FSDirectory.open(Paths.get(luceneDir));</div><div class="line">			<span class="comment">/**</span></div><div class="line">			 * 注意：isLocked方法内部会试图去获取Lock,如果获取到Lock， 会关闭它，否则return</div><div class="line">			 * false表示索引目录没有被锁， 这也就是为什么unlock方法被从IndexWriter类中移除的原因</div><div class="line">			 */</div><div class="line">			IndexWriter.isLocked(directory);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> directory;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//  创建索引阅读器（多目录）</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MultiReader <span class="title">getMultiReader</span><span class="params">(List&lt;String&gt; dirPathList)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	    List&lt;IndexReader&gt; indexReaders = <span class="keyword">new</span> ArrayList&lt;IndexReader&gt;();</div><div class="line">	    <span class="keyword">for</span>(String dirPath : dirPathList)&#123;</div><div class="line">	        Directory directory = openFSDirectory(dirPath);</div><div class="line">	        <span class="keyword">if</span>(DirectoryReader.indexExists(directory))&#123;</div><div class="line">	            IndexReader reader = DirectoryReader.open(directory);</div><div class="line">	            indexReaders.add(reader);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">if</span>(indexReaders.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">	        <span class="keyword">return</span> <span class="keyword">new</span> MultiReader(indexReaders.toArray(<span class="keyword">new</span> IndexReader[indexReaders.size()]));</div><div class="line">	    &#125;<span class="keyword">else</span>&#123;</div><div class="line">	        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 创建索引查询器（多目录）</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiIndexSearcher</span></span></div><div class="line">        <span class="params">(MultiReader multiReader, ExecutorService executor)</span> &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != executor) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(multiReader, executor);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(multiReader);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取符合条件的总记录数</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ScoreDoc[] searchTotalRecord(IndexSearcher search, Query query) &#123;</div><div class="line">        ScoreDoc[] docs = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TopDocs topDocs = search.search(query, Integer.MAX_VALUE);</div><div class="line">            <span class="keyword">if</span> (topDocs==<span class="keyword">null</span> || topDocs.scoreDocs==<span class="keyword">null</span> || topDocs.scoreDocs.length==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> docs;</div><div class="line">            &#125;</div><div class="line">            docs = topDocs.scoreDocs;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> docs;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// Lucene多目录分页查询</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(IndexSearcher searcher, Query query, Page&lt;Document&gt; page)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException &#123;</div><div class="line">        ScoreDoc[] scoreDocs = searchTotalRecord(searcher, query);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != scoreDocs) &#123;</div><div class="line">            <span class="comment">// 设置总记录数</span></div><div class="line">            page.setTotalRecord(scoreDocs.length);</div><div class="line">            ScoreDoc afterDoc = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (page.getCurrentPage() &gt; <span class="number">1</span>) &#123;</div><div class="line">                afterDoc = scoreDocs[(page.getCurrentPage() - <span class="number">1</span>) * page.getPageSize() - <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            TopDocs topDocs = searcher.searchAfter(afterDoc, query, page.getPageSize());</div><div class="line">            List&lt;Document&gt; docList = <span class="keyword">new</span> ArrayList&lt;Document&gt;();</div><div class="line">            ScoreDoc[] docs = topDocs.scoreDocs;</div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (ScoreDoc scoreDoc : docs) &#123;</div><div class="line">                <span class="keyword">int</span> docID = scoreDoc.doc;</div><div class="line">                Document document = searcher.doc(docID);</div><div class="line">                <span class="keyword">if</span> (index == docs.length - <span class="number">1</span>) &#123;</div><div class="line">                    page.setAfterDoc(scoreDoc);</div><div class="line">                    page.setAfterDocId(docID);</div><div class="line">                &#125;</div><div class="line">                docList.add(document);</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">            page.setItems(docList);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"iqcConversationIndexService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IQCConversationIndexService</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMM"</span>);</div><div class="line">    <span class="comment">// 获取索引目录</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_ROOT_PATH = SysConstant.config.getProperty(<span class="string">"indexRootPath"</span>);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ResultBean&lt;IQCConversationInfoBean&gt; <span class="title">getIQCConversationInfoPageByBean</span></span></div><div class="line">        <span class="params">(IQCConversationInfoBean bean, <span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception &#123;</div><div class="line">        ResultBean&lt;IQCConversationInfoBean&gt; rb = <span class="keyword">new</span> ResultBean&lt;IQCConversationInfoBean&gt;() ;</div><div class="line">        ExecutorService _executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line">        MultiReader multiReader = <span class="keyword">null</span>;</div><div class="line">        IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Page&lt;Document&gt; page = <span class="keyword">new</span> Page&lt;Document&gt;(currentPage, pageSize);</div><div class="line">             <span class="comment">// 根据时间获取检索文件夹</span></div><div class="line">            Date beginDate = formatter.parse(bean.getBeginTime().substring(<span class="number">0</span>,<span class="number">6</span>));</div><div class="line">            Date endDate = formatter.parse(bean.getEndTime().substring(<span class="number">0</span>,<span class="number">6</span>));</div><div class="line">            String dirName = <span class="string">""</span>;</div><div class="line">            <span class="comment">//计算时间区间内每个日期文件夹并解析其中的文件</span></div><div class="line">            Calendar tempStart = Calendar.getInstance();</div><div class="line">            tempStart.setTime(endDate);</div><div class="line">            List&lt;String&gt; indexDirecorys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">            <span class="keyword">while</span>(beginDate.getTime() &lt;= endDate.getTime())&#123;</div><div class="line">                dirName = JCalendar.getDateStr(endDate, <span class="string">"yyyyMM"</span>);</div><div class="line">                indexDirecorys.add(INDEX_ROOT_PATH + File.separator + dirName);</div><div class="line">                tempStart.add(Calendar.MONTH, -<span class="number">1</span>);</div><div class="line">                endDate = tempStart.getTime();</div><div class="line">            &#125;</div><div class="line">            multiReader = LuceneUtils.getMultiReader(indexDirecorys);</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=multiReader)&#123;</div><div class="line">                searcher = LuceneUtils.getMultiIndexSearcher(multiReader,_executorService);</div><div class="line">                BooleanQuery booleanQuery = dealBooleanQueryTerms(bean);</div><div class="line">                LuceneUtils.pageQuery(searcher, booleanQuery, page);</div><div class="line">                <span class="keyword">if</span> (page==<span class="keyword">null</span> || page.getItems()==<span class="keyword">null</span> || page.getItems().size()==<span class="number">0</span>) &#123;</div><div class="line">                    log.debug(<span class="string">"未检索到记录"</span>);</div><div class="line">                    rb.setTotal(<span class="number">0l</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">for</span>(Document doc : page.getItems())&#123;</div><div class="line">                        IQCConversationInfoExtBean temp = <span class="keyword">new</span> IQCConversationInfoExtBean();</div><div class="line">                        <span class="keyword">for</span>(IndexableField field : doc.getFields())&#123;</div><div class="line">                            setConversationValue(temp, field);</div><div class="line">                        &#125;</div><div class="line">                        rb.getRows().add(temp);</div><div class="line">                    &#125;</div><div class="line">                    rb.setTotal((<span class="keyword">long</span>) page.getTotalRecord());</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                log.info(<span class="string">"不存在索引会话记录【"</span>+bean.getBeginTime()+<span class="string">"】至【"</span>+bean.getEndTime()+<span class="string">"】"</span>);</div><div class="line">                rb.setTotal(<span class="number">0l</span>);</div><div class="line">            &#125;</div><div class="line">            rb.setReturnCode(SysConstant.SYS_RETURN_SUCCESS_CODE);</div><div class="line">            rb.setReturnMessage(SysConstant.SYS_RETURN_SUCCESS_MESSAGE);</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"会话检索异常"</span>, e);</div><div class="line">            rb.setReturnCode(SysConstant.SYS_RETURN_EXCEPTION_CODE);</div><div class="line">            rb.setReturnMessage(<span class="string">"检索异常："</span>+e.getMessage());</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!_executorService.isShutdown())&#123;</div><div class="line">                _executorService.shutdown();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=searcher)&#123;</div><div class="line">                searcher.getIndexReader().close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=multiReader)&#123;</div><div class="line">                 multiReader.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="comment">// 多种条件组合检索</span></div><div class="line">    <span class="function"><span class="keyword">private</span> BooleanQuery <span class="title">dealBooleanQueryTerms</span></span></div><div class="line">        <span class="params">(IQCConversationInfoBean bean)</span> <span class="keyword">throws</span> Exception&#123;</div><div class="line">        BooleanQuery.Builder booleanQueryBuilder = <span class="keyword">new</span> BooleanQuery.Builder();</div><div class="line">        <span class="comment">//关键词</span></div><div class="line">        <span class="keyword">if</span>(StringUtil.isNotEmpty(bean.getAllContent()))&#123;</div><div class="line">            Term t = <span class="keyword">new</span> Term(<span class="string">"allContent"</span>, <span class="string">".*"</span>+bean.getAllContent()+<span class="string">".*"</span>);</div><div class="line">            Query query = <span class="keyword">new</span> RegexQuery(t);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//客户语速</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=bean.getCustMinSpeed() &amp;&amp; <span class="keyword">null</span>!=bean.getCustMaxSpeed())&#123;</div><div class="line">            Query query = NumericRangeQuery.newFloatRange(</div><div class="line">                <span class="string">"custMaxSpeed"</span>, bean.getCustMinSpeed(), bean.getCustMaxSpeed(), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//来电号码</span></div><div class="line">        <span class="keyword">if</span>(StringUtil.isNotEmpty(bean.getCallNo()))&#123;</div><div class="line">            Query query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"callNo"</span>, bean.getCallNo()));</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//呼入时间</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=bean.getBeginTime() &amp;&amp; <span class="keyword">null</span>!=bean.getEndTime())&#123;</div><div class="line">            <span class="keyword">long</span> beginTime = JCalendar.getDate(bean.getBeginTime(), <span class="string">"yyyyMMddHHmmss"</span>).getTime();</div><div class="line">            <span class="keyword">long</span> endTime = JCalendar.getDate(bean.getEndTime(), <span class="string">"yyyyMMddHHmmss"</span>).getTime();</div><div class="line">            Query query = NumericRangeQuery.newLongRange(</div><div class="line">                <span class="string">"callTime"</span>, beginTime,endTime, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//通话时长</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=bean.getMinTalkSeconds() &amp;&amp; <span class="keyword">null</span>!=bean.getMaxTalkSeconds())&#123;</div><div class="line">            Query query = NumericRangeQuery.newIntRange(</div><div class="line">                <span class="string">"maxTalkSeconds"</span>, bean.getMinTalkSeconds(), bean.getMaxTalkSeconds(), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            booleanQueryBuilder.add(query, BooleanClause.Occur.MUST);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  	<span class="comment">// 通过反射设置对象的值-单层不考虑继承</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setConversationValue</span><span class="params">(IQCConversationInfoBean iqcConversationInfoBean,</span></span></div><div class="line">                                            IndexableField indexableField)&#123;</div><div class="line">        String fieldName = indexableField.name();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != iqcConversationInfoBean &amp;&amp; !fieldName.equals(<span class="string">"serialVersionUID"</span>)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Class&lt;?&gt; clazz1 = IQCConversationInfoBean.class;</div><div class="line">                Field[] fields = clazz1.getDeclaredFields();</div><div class="line">                <span class="keyword">for</span>(Field field : fields)&#123;</div><div class="line">                    <span class="keyword">if</span>(field.getName().equals(fieldName))&#123;</div><div class="line">                        String name=firstLetterUpperCase(field.getName());</div><div class="line">                        String setmethodName=<span class="string">"set"</span>+name;</div><div class="line">                        Method m = clazz1.getDeclaredMethod(setmethodName, field.getType());</div><div class="line">                        <span class="keyword">switch</span>(field.getType().getSimpleName())&#123;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"String"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean, indexableField.stringValue());</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"Float"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean, indexableField.numericValue());</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"Long"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean, indexableField.numericValue());</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                           <span class="keyword">case</span> <span class="string">"Date"</span>: </div><div class="line">                                m.invoke(iqcConversationInfoBean,</div><div class="line">                                         <span class="keyword">new</span> Date((<span class="keyword">long</span>) indexableField.numericValue()));</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">firstLetterUpperCase</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(str==<span class="keyword">null</span>||str.length()&lt;<span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">return</span> str;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            String first=str.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</div><div class="line">            <span class="keyword">return</span> first+str.substring(<span class="number">1</span>,str.length());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="检索流程"><a href="#检索流程" class="headerlink" title="检索流程"></a>检索流程</h3><p>根据关键词解析（queryParser）出查询条件query（Termquery）,利用检索工具（indexSearcher）去索引库获取文档的id,然后再根据文档 id去文档信息库获取文档信息。</p>
<p>分词器不同，建立的索引数据就不同；比较通用的一个中文分词器IKAnalyzer的用法。</p>
<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111029-773415.jpg" alt=""></p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111103-683410.jpg" alt=""></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用多线程。在使用多线程时，只需要创建线程池即可。事实上，Lucene 在  IndexSearcher 中 判断是否有 executor ,如果 IndexSearcher 有 executor ，则会由每个线程控制一部分索引的读取，而且查询的过程采用的是 future 机制，这种方式是边读边往结果集里边追加数据，这样异步处理机制提升了效率。具体源码可看 IndexSearcher  的 search。</p>
<p>控制检索文件夹。如果同时检索的文件夹太多的时，会增加 GC 负担</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111130-898673.jpg" alt=""></p>
<p>在你能承受的范围内设置更多的内存。以免造成内存溢出</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316111155-172723.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文是对 Lucene 多条件检索的记录。实现多目录多线程的检索方式；实现分页功能；实现多种类型的条件查询以及数据量较大时检索的注意点进行记录。为了更好的使用 Lucene 后面将总结如何提高 Lucene 的检索效率。</p>
<p>全文检索，lucene 在 匹配效果、速度和效率是极大的优于数据库的。</p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene的IndexWriter对象创建和索引策略的选择]]></title>
      <url>/2019/03/16/Lucene/1%E3%80%81lucene%E7%9A%84IndexWriter%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E7%B4%A2%E5%BC%95%E7%AD%96%E7%95%A5%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h1 id="lucene（1）—lucene的IndexWriter对象创建和索引策略的选择"><a href="#lucene（1）—lucene的IndexWriter对象创建和索引策略的选择" class="headerlink" title="lucene（1）—lucene的IndexWriter对象创建和索引策略的选择"></a>lucene（1）—lucene的IndexWriter对象创建和索引策略的选择</h1><p>因工作的需要（数据量大造成原有系统查询效率低），最近做了搜索引擎相关的内容，选择了lucene5版本（15年发布的）。</p>
<a id="more"></a>
<p>lucene是一个开放源代码的全文搜索引擎开发工具包，提供了简单强大的搜索引擎接口，其优点如下：</p>
<ul>
<li>数据以索引文件的形式存储，索引文件可以跨平台，只要保证索引完整，复制到任何机器或者磁盘空间均可以查询索引内容；</li>
<li>在传统全文检索引擎的倒排索引的基础上，实现了分块索引，能够针对新的文件建立小文件索引，提升索引速度。然后通过与原有索引的合并，达到优化的目的；</li>
<li>索引的构建和查询都十分简洁，有强大的类库实现相关功能；</li>
<li>开发源代码，论坛和资源十分丰富。</li>
</ul>
<p>索引的构建过程描述如下：</p>
<p> 1）判断JRE版本是否为64位和是否支持堆外内存，并创建</p>
<p>​               1.1  如果满足条件，创建MMapDirectory，此种Directory可以有效的利用虚拟机内存地址空间 ；</p>
<p>​               1.2  如果不满足以上条件，判断系统是否是windows,如果满足条件，创建SimpleFSDirectory，此种directory提供了性能不太高的多线程支持，lucene推荐使用<a href="https://blog.csdn.net/wuyinggui10000/article/details/45502445" target="_blank" rel="external">NIOFSDirectory</a><code>或者MMapDirectory来替代之；</code></p>
<p>​               1.3 如果以上均不满足，创建NIOFSDirectory对象，此种directory的英文说明为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An FSDirectory implementation that uses java.nio<span class="string">'s FileChannel'</span>s positional read, which allows multiple threads to read from the same file without synchronizing</div></pre></td></tr></table></figure>
<p>大意是一个利用了java nio中FileChannel的FSDirectory实现，允许无syschronized的对同一文件进行多线程读</p>
<p> 2）词库分析器Analyzer创建（需要注意的是使用哪种Analyzer进行索引查询，创建的时候也要使用对应的索引器，否则查询结果有问题）</p>
<p> 3）IndexWriterConfig对象创建,并获取IndexWriter对象</p>
<p>​            3.1 判断是覆盖索引还是追加索引，如果是覆盖索引indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</p>
<p>​            3.2 如果追加indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</p>
<p>​    4) 遍历根据要索引的对象列表，对单个对象的field进行lucene相关field构建，添加到Document对象中</p>
<p>​    5）IndexWriter对索引进行写入；</p>
<p>​    6）IndexWriter执行commit()和close()结束索引创建过程</p>
<p>以lucene5为例，索引器的创建如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**创建索引写入器</span></div><div class="line"> * <span class="doctag">@param</span> indexPath</div><div class="line"> * <span class="doctag">@param</span> create</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexWriter <span class="title">getIndexWriter</span><span class="params">(String indexPath,<span class="keyword">boolean</span> create)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">    Directory dir = FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">    IndexWriterConfig iwc = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">    <span class="keyword">if</span> (create)&#123;</div><div class="line">        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</div><div class="line">    &#125;</div><div class="line">    IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">    <span class="keyword">return</span> writer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面给出当时工作需要的创建索引测试例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadIndexTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern p_html = Pattern.compile(<span class="string">"&lt;[^&gt;]+&gt;"</span>, Pattern.CASE_INSENSITIVE);</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException, ParseException </span>&#123;</div><div class="line">		String indexPath = <span class="string">"D:\\LuceneIndex\\IQC\\ag\\voice\\20190201"</span>;</div><div class="line">		System.out.println(<span class="string">"开始创建索引"</span>);</div><div class="line">		IQCConversationInfoBean iqcConversationInfoBean = <span class="keyword">new</span> IQCConversationInfoBean();</div><div class="line">		iqcConversationInfoBean.setMediaType(<span class="string">"voice"</span>);</div><div class="line">		iqcConversationInfoBean.setCallDate(<span class="string">"20190201"</span>);</div><div class="line">		iqcConversationInfoBean.setCallTime(JCalendar.getDate(<span class="string">"20190201145454"</span>, <span class="string">"yyyyMMddHHmmss"</span>));</div><div class="line">		iqcConversationInfoBean.setHangupTime(JCalendar.getDate(<span class="string">"20190201145959"</span>, <span class="string">"yyyyMMddHHmmss"</span>)); <span class="comment">// 挂机时间</span></div><div class="line">		iqcConversationInfoBean.setChannelCode(<span class="string">"ag"</span>);</div><div class="line">		iqcConversationInfoBean.setAccountCode(<span class="string">"Admin"</span>);</div><div class="line">		iqcConversationInfoBean.setEmpName(<span class="string">"超级管理员"</span>);</div><div class="line">		iqcConversationInfoBean.setLanguage(<span class="string">"1"</span>);</div><div class="line">		iqcConversationInfoBean.setCustNo(<span class="string">"123456"</span>);</div><div class="line">		iqcConversationInfoBean.setCustName(<span class="string">"洪尼玛"</span>);</div><div class="line">		iqcConversationInfoBean.setCallNo(<span class="string">"18565279427"</span>);</div><div class="line">		iqcConversationInfoBean.setSatisfiedType(<span class="string">"1"</span>); <span class="comment">// 满意度</span></div><div class="line">        <span class="comment">// 座席通话内容</span></div><div class="line">		iqcConversationInfoBean.setAgentContent(<span class="string">"您好，请问有什么可以帮到您请问是陈女士吗啊，对从您实名号，您是通过什么渠道转的？手机银行的您，是同行转账，还是跨行转账？那真没有到账的话，要以系统处理为准呢？他这些要以系统处理为准的，今天是年30系统的。我这边帮您看一下，嗯撤销不了哇，因为您当时选择的普通转账那这个你这什么时候到账，就看那边的系统处理为准的那您可以用此到家吗，你干嘛用普通到账呢啊啊我这边看到您用的是普通转账来的是系统转帐，"</span>);</div><div class="line">		<span class="comment">// agentFirst</span></div><div class="line">		iqcConversationInfoBean.setAgentFirst(<span class="string">"您好，请问有什么可以帮到您请问是陈女士吗啊，对从您实名号，您是通过什么渠道转的？手机银行的您，是同行转账，还是跨行转账？那真没有到账的话，要以系统处理为准呢？他这些要以系统处理为准的，今天是年30系统的。我这边帮您看一下，嗯撤销不了哇，因为您当时选择的普通转账那这个你这什么时候到账，就看那边的系统处理为准的那您可以用此到家吗，你干嘛用普通到账呢啊啊我这边看到您用的是普通转账来的是系统转帐，"</span>);</div><div class="line">		<span class="comment">// agentLast</span></div><div class="line">		iqcConversationInfoBean.setAgentLast(<span class="string">"已经登记好了"</span>);</div><div class="line">		<span class="comment">// 客户通话内容</span></div><div class="line">		iqcConversationInfoBean.setCustContent(<span class="string">"你好，我想问一下，我这将是广州农农商银行，现在我回来到这边那个密码，搞忘记了，可不可以在我换地方改密改密码呢，还还找密码呢"</span>);</div><div class="line">		<span class="comment">// 客户首句</span></div><div class="line">		iqcConversationInfoBean.setCustFirst(<span class="string">"你好，我想问一下，我这将是广州农农商银行，现在我回来到这边那个密码，搞忘记了，可不可以在我换地方改密改密码呢，还还找密码呢"</span>);</div><div class="line">		<span class="comment">// 客户尾句</span></div><div class="line">		iqcConversationInfoBean.setCustLast(<span class="string">"结果登记"</span>);</div><div class="line">		<span class="comment">// 全部通话内容</span></div><div class="line">		    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">                iqcConversationInfoBean.setAllContent(<span class="string">"&lt;li start=13070 end=14870 emotion=5.0 speed=4.0 &gt;坐席：您好，请问有什么可以帮您&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=14880 end=21470 emotion=6.0 speed=3.0 &gt;客户：然后你们这个银行，这里呀，那柜员机老是故障啊，嗯，也没用过的维修的&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=21480 end=23270 emotion=6.0 speed=2.68 &gt;坐席：嗯，哪个柜员机呀&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=23280 end=27780 emotion=6.0 speed=1.46 &gt;客户：我们广州市白云区江高镇&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=29000 end=30200 emotion=6.0 speed=3.0 &gt;客户：然后，新楼村&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=30210 end=32250 emotion=6.0 speed=4.11 &gt;坐席：嗯桂圆是有没有那个订单号啊？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=32890 end=36190 emotion=6.0 speed=3.81 &gt;坐席：在屏幕上方有一个本机终端号的，有没有看到？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=36200 end=38590 emotion=6.0 speed=3.51 &gt;客户：没看，但是我我报你帮我查一下&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=38600 end=40690 emotion=6.0 speed=4.01 &gt;坐席：那个地址在哪里啊，刚刚在哪里&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=40700 end=45490 emotion=6.0 speed=2.12 &gt;客户：呃，江高镇，然后新楼村新楼路31号&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=45500 end=46630 emotion=5.0 speed=1.06 &gt;坐席：嗯好&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=11  class=\"silences\"  &gt; 11S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=58500 end=60550 emotion=6.0 speed=3.51 &gt;坐席：他旁边没有网点的他，旁边&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=61420 end=64720 emotion=6.0 speed=2.36 &gt;客户：没有就这个柜员机，我们学校&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=64730 end=66520 emotion=6.0 speed=2.34 &gt;坐席：嗯，什么学校啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=66530 end=68230 emotion=6.0 speed=2.47 &gt;客户：广东、江南理工&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=68870 end=73970 emotion=6.0 speed=3.17 &gt;坐席：学校里面的嘛，对江南理工就是那个江西的，在南方的南吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=73980 end=79170 emotion=6.0 speed=1.38 &gt;客户：然后是江南江南是南方的南&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=80140 end=84040 emotion=6.0 speed=3.69 &gt;坐席：江南理工没有看到他这个有柜员，机的地方啊，他是在&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=84050 end=86900 emotion=6.0 speed=2.1 &gt;客户：哦，江南理工技工学校&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=88210 end=89410 emotion=6.0 speed=3.0 &gt;坐席：在哪个区的？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=89420 end=91140 emotion=6.0 speed=2.09 &gt;客户：白云区江高镇&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=98540 end=99740 emotion=6.0 speed=3.0 &gt;客户：然后那个金融&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=10  class=\"silences\"  &gt; 10S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=99750 end=105570 emotion=6.0 speed=2.47 &gt;坐席：他是在那个往港、煤炭地质局对面，那个技工学校吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=106250 end=109250 emotion=6.0 speed=3.0 &gt;客户：不是我们是白云区江高镇新楼村的&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=109260 end=111950 emotion=6.0 speed=2.23 &gt;坐席：新农村新是哪个新啊？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=111960 end=113150 emotion=6.0 speed=2.52 &gt;客户：新中国的新&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=113160 end=114350 emotion=4.0 speed=0.5 &gt;坐席：嗯&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=114360 end=116880 emotion=6.0 speed=3.33 &gt;客户：楼市大龙的龙村，是村庄的村。&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=118240 end=120340 emotion=6.0 speed=3.14 &gt;坐席：没有看到他这个地点有啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=120350 end=123340 emotion=6.0 speed=3.01 &gt;客户：那我，们在银行的奇怪呢，是因为&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=123350 end=126640 emotion=6.0 speed=3.1 &gt;坐席：您要看一下，他去柜员机的位置才行啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=126650 end=129340 emotion=6.0 speed=4.01 &gt;客户：我们会员就直接就是在我们学校"</span>+i+<span class="string">"里面吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=129350 end=135630 emotion=7.0 speed=3.53 &gt;坐席：是什么学校啊，刚才跟你说了广东将的，其实没有跟他有这个学校，有没有全称呢？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=136300 end=139210 emotion=7.0 speed=2.26 &gt;客户：广东、江南理工技工学校&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=6  class=\"silences\"  &gt; 6S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=142190 end=148190 emotion=6.0 speed=2.8 &gt;坐席：但是，我们收他技工，学校就只有出来刚刚那个旺港煤炭地质局&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=148200 end=158090 emotion=6.0 speed=2.73 &gt;客户：您的商品一双鞋呢，不，是旺旺，我们是在广州市白云区江高镇新楼村新楼路31号，这个详细的地址&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=9  class=\"silences\"  &gt; 9S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=158100 end=162340 emotion=6.0 speed=4.1 &gt;坐席：嗯，您学校地址，但是，他柜员机不，他不一定是这么登记的吗？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=162980 end=172900 emotion=6.0 speed=3.81 &gt;客户：那你这个是你们的问题了，你像我这个我是我现在就是就是现在要要告诉你们呢，这里有我们这个，这个地址啊，你们所学校有因为台风的呀啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=11  class=\"silences\"  &gt; 11S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=173540 end=174440 emotion=6.0 speed=3.33 &gt;坐席：好评返现。&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=174450 end=178640 emotion=7.0 speed=3.57 &gt;客户：我整天啊，有问题一直，搞错了，你们要反映上去，上面&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=4  class=\"silences\"  &gt; 4S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=178650 end=184940 emotion=7.0 speed=3.52 &gt;坐席：但是，您这样去把您那个柜员机上面，它有一个模板套，您的会员区发布宝贝订单号&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=185550 end=186360 emotion=7.0 speed=2.22 &gt;坐席：好不好&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=184950 end=185540 emotion=6.0 speed=1.01 &gt;客户：嗯&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=187000 end=190300 emotion=6.0 speed=3.81 &gt;坐席：但是，我们确实现在没有看到您这个地方，有啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=190310 end=192100 emotion=7.0 speed=3.68 &gt;客户：那您说一下怎么办，因为&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=192110 end=193600 emotion=6.0 speed=4.83 &gt;坐席：我们没有查到我们就没有办&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=193610 end=196850 emotion=7.0 speed=4.44 &gt;客户：反馈到我想问一下，你，说你，你说让我现在怎么办？&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=3  class=\"silences\"  &gt; 3S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=197550 end=201450 emotion=6.0 speed=4.76 &gt;坐席：所以，您看一下您那个柜员机，他旁边是只有一台吗，还是什么情况啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=201460 end=205500 emotion=6.0 speed=2.97 &gt;客户：有一台机黑屏，什么都看不到，整天出故障啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=5  class=\"silences\"  &gt; 5S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=206990 end=208360 emotion=6.0 speed=3.06 &gt;坐席：嗯，稍等一下啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=209060 end=211320 emotion=6.0 speed=3.71 &gt;客户：你们现在真的老子真的有问题啊&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=213040 end=220180 emotion=6.0 speed=3.78 &gt;客户：你报一个详细地址了，还问我是在哪个，你说的那个不是在那里，这里你们就往那low爆了，知道吧&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=220820 end=223260 emotion=6.0 speed=2.7 &gt;客户：你要找人过来核实修改呀&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=0 silence=33  class=\"silences\"  &gt; 33S. &lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=256910 end=257430 emotion=4.0 speed=1.15 &gt;客户：嗯&lt;/li&gt;"</span> +</div><div class="line">                        <span class="string">"&lt;li start=258590 end=259330 emotion=5.0 speed=1.62 &gt;客户：是吧&lt;/li&gt;"</span>);</div><div class="line">                iqcConversationInfoBean.setSerialNo(UUID.randomUUID().toString());</div><div class="line">		        iqcConversationInfoBean.setAgentMaxSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setAgentMinSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setAgentAvgSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setAgentMaxEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setAgentMinEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setAgentAvgEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setCustMaxSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setCustMinSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setCustAvgSpeed((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setCustMaxEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setCustMinEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        iqcConversationInfoBean.setCustAvgEmotion((<span class="keyword">float</span>)Math.round(Math.random()*<span class="number">100</span>));</div><div class="line">		        Map&lt;String, Object&gt; textFiled = ReflectUtil.reflectObjectToMap(iqcConversationInfoBean, <span class="keyword">true</span>);</div><div class="line">		        </div><div class="line">		        Document doc = createDoc(textFiled);</div><div class="line">		        <span class="keyword">if</span>(<span class="keyword">null</span>!=doc)&#123;</div><div class="line">		            addDoc(indexPath, doc, <span class="keyword">null</span>);</div><div class="line">		        &#125;</div><div class="line">		        <span class="comment">//System.out.println(i+"索引创建完毕");</span></div><div class="line">		    &#125;</div><div class="line">		System.out.println(<span class="string">"创建索引完毕"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Document <span class="title">createDoc</span><span class="params">(Map&lt;String, Object&gt; textFiled)</span> </span>&#123;</div><div class="line">        Document doc = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            doc = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (textFiled != <span class="keyword">null</span> &amp;&amp; textFiled.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                doc = <span class="keyword">new</span> Document();</div><div class="line">                <span class="comment">// 遍历需要增加到索引的属性</span></div><div class="line">                List&lt;String&gt; NOT_ANALYZED = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">// 非分析域，但是需要保存</span></div><div class="line">                <span class="keyword">for</span> (String Not : <span class="string">"id;status;update;agentFirst;agentLast;agentContent;custFirst;custLast;custContent;allContent;"</span>.split(<span class="string">";"</span>)) &#123;</div><div class="line"><span class="comment">//                    for (String Not : "id;status;update;mediaType;callDate;channelCode;accountCode;empName;language;custNo;custName;callNo;satisfiedType;agentFirst;agentLast;agentContent;custFirst;custLast;custContent;allContent;".split(";")) &#123;</span></div><div class="line">                    NOT_ANALYZED.add(Not);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (String keyName : textFiled.keySet()) &#123;</div><div class="line">                    <span class="keyword">if</span> (keyName != <span class="keyword">null</span> &amp;&amp; !keyName.isEmpty()) &#123;</div><div class="line">                        <span class="comment">// if</span></div><div class="line">                        <span class="comment">// (keyName.equals(SysConstant.config.getProperty("kbmsID"))||keyName.indexOf(SysConstant.config.getProperty("DIM"))&gt;=0)</span></div><div class="line">                        <span class="comment">// &#123;</span></div><div class="line">                        <span class="keyword">if</span> (keyName.equals(<span class="string">"serialNo"</span>)) &#123;</div><div class="line">                            doc.add(LuceneHelper.getnotanalyzedField(keyName, textFiled.get(keyName)));</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NOT_ANALYZED.contains(keyName)) &#123;</div><div class="line">                            Matcher m_html = p_html.matcher((String) textFiled.get(keyName));</div><div class="line">                            doc.add(<span class="keyword">new</span> Field(keyName, m_html.replaceAll(<span class="string">""</span>), Field.Store.YES,</div><div class="line">                                    Field.Index.NOT_ANALYZED));</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            doc.add(LuceneHelper.getField(keyName, textFiled.get(keyName)));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"无法初始化doc"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> doc;</div><div class="line">    &#125;   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(String fieldName, Object value)</span> </span>&#123;</div><div class="line">        FieldType fieldType = <span class="keyword">new</span> FieldType();</div><div class="line">        fieldType.setOmitNorms(<span class="keyword">true</span>);</div><div class="line">        fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);</div><div class="line">        fieldType.setStored(<span class="keyword">true</span>);</div><div class="line">        fieldType.setTokenized(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Integer) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IntField(fieldName, Integer.parseInt(value.toString()), fieldType);</div><div class="line">            <span class="comment">// return new</span></div><div class="line">            <span class="comment">// NumericDocValuesField(fieldName,Long.parseLong(value.toString()));</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Long) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LongField(fieldName, (Long) value, fieldType);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Float) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FloatField(fieldName, (Float) value, fieldType);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LongField(fieldName, ((Date) value).getTime(), fieldType);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TextField(fieldName, value.toString(), Field.Store.YES);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addDoc</span><span class="params">(String indexPath, Document doc, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 索引配置器</span></div><div class="line">        IndexWriterConfig iwc = <span class="keyword">null</span>;</div><div class="line">        IndexWriter indexWriter = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (indexPath != <span class="keyword">null</span> &amp;&amp; !indexPath.isEmpty() &amp;&amp; doc != <span class="keyword">null</span>) &#123;</div><div class="line">                File indexDir = <span class="keyword">new</span> File(indexPath);</div><div class="line">                <span class="keyword">if</span> (!indexDir.exists())</div><div class="line">                    indexDir.mkdirs();</div><div class="line">                <span class="keyword">if</span> (indexDir.exists()) &#123;</div><div class="line">                    <span class="comment">/* 创建索引文件 */</span></div><div class="line">                    iwc = <span class="keyword">new</span> IndexWriterConfig(ChineseAnalyzerUtil.getAnalyzer());</div><div class="line">                    <span class="comment">// 创建索引文件对象</span></div><div class="line">                    Directory dir = FSDirectory.open(indexDir.toPath());</div><div class="line">                    <span class="keyword">boolean</span> isNeedCreate = indexDir.listFiles().length &gt; <span class="number">0</span> ? <span class="keyword">false</span> : <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">if</span> (isNeedCreate) &#123;<span class="comment">// 是否需要创建,默认 CREATE_OR_APPEND</span></div><div class="line">                        iwc.setOpenMode(OpenMode.CREATE);</div><div class="line">                        System.out.println(<span class="string">"创建新索引,OpenMode==&gt;&gt;CREATE"</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 写入索引文件对象</span></div><div class="line">                    indexWriter = <span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">                    <span class="comment">// 加载到索引中</span></div><div class="line">                    <span class="comment">// 遍历需要增加到索引的属性</span></div><div class="line">                    <span class="comment">// 加载到索引文档</span></div><div class="line">                    <span class="comment">// indexWriter.addDocument(doc);</span></div><div class="line">                    IndexableField kbmsID = doc.getField(<span class="string">"serialNo"</span>);</div><div class="line">                    <span class="keyword">if</span> (kbmsID != <span class="keyword">null</span>) &#123;</div><div class="line">                        String termId = kbmsID.name();</div><div class="line">                        String termValue = kbmsID.stringValue();</div><div class="line">                        indexWriter.updateDocument(<span class="keyword">new</span> Term(termId, termValue), doc);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        indexWriter.addDocument(doc);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 提交到索引</span></div><div class="line">                    indexWriter.commit();</div><div class="line">                    indexWriter.close();</div><div class="line">                    res = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    message = <span class="string">"contentPath 参数为空，正文无法读取，无法创建索引"</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                message = <span class="string">"indexPath:"</span> + indexPath + <span class="string">" 目录不存在，无法创建索引"</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(<span class="string">"创建Lucene索引异常"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (message != <span class="keyword">null</span> &amp;&amp; !message.isEmpty())</div><div class="line">            System.out.println(<span class="string">"message-"</span> + message);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意</code>：创建索引的内用是对一通通话的内容进行</p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene增量更新和NRT(near-real-time)Query近实时查询]]></title>
      <url>/2019/03/16/Lucene/19%E3%80%81lucene%E5%A2%9E%E9%87%8F%E6%9B%B4%E6%96%B0%E5%92%8CNRT(near-real-time)Query%E8%BF%91%E5%AE%9E%E6%97%B6%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h1 id="lucene（19）—lucene增量更新和NRT-near-real-time-Query近实时查询"><a href="#lucene（19）—lucene增量更新和NRT-near-real-time-Query近实时查询" class="headerlink" title="lucene（19）—lucene增量更新和NRT(near-real-time)Query近实时查询"></a>lucene（19）—lucene增量更新和NRT(near-real-time)Query近实时查询</h1><p>有时候我们创建完索引之后，数据源可能有更新的内容，而我们又想像数据库那样能直接体现在查询中，这里就是我们所说的增量索引。对于这样的需求我们怎么来实现呢？lucene内部是没有提供这种增量索引的实现的；</p>
<a id="more"></a>
<p>这里我们一般可能会想到，将之前的索引全部删除，然后进行索引的重建。对于这种做法，如果数据源的条数不是特别大的情况下倒还可以，如果数据源的条数特别大的话，势必会造成查询数据耗时，同时索引的构建也是比较耗时的，几相叠加，势必可能造成查询的时候数据缺失的情况，这势必严重影响用户的体验；</p>
<p>比较常见的增量索引的实现是：</p>
<ul>
<li>设置一个定时器，定时从数据源中读取比现有索引文件中新的内容或是数据源中带有更新标示的数据。</li>
<li>对数据转换成需要的document并进行索引</li>
</ul>
<p>这样做较以上的那种全删除索引然后重建的好处在于：</p>
<ul>
<li>数据源查询扫描的数据量小</li>
<li>相应的更新索引的条数也少，减少了大量的IndexWriter的commit和close这些耗时操作</li>
</ul>
<p>以上解决了增量的问题，但是实时性的问题还是存在的：</p>
<ul>
<li>索引的变更只有在IndexWriter的commit执行之后才可以体现出来</li>
</ul>
<p>那么我们怎样对实时性有个提升呢，大家都知道lucene索引可以以文件索引和内存索引两种方式存在，相较于文件索引，内存索引的执行效率要高于文件索引的构建，因为文件索引是要频繁的IO操作的；结合以上的考虑，我们采用文件索引+内存索引的形式来进行lucene的增量更新；其实现机制如下：</p>
<ul>
<li>定时任务扫描数据源的变更</li>
<li>对获得的数据源列表放在内存中</li>
<li>内存中的document达到数量限制的时候，以队列的方式删除内存中的索引，并将之添加到文件索引</li>
<li>查询的时候采用文件+内存索引联合查询的方式以达到NRT效果</li>
</ul>
<h2 id="定时任务调度器"><a href="#定时任务调度器" class="headerlink" title="定时任务调度器"></a>定时任务调度器</h2><p>java内置了TimerTask，此类是可以提供定时任务的，但是有一点就是TimerTask的任务是无状态的，我们还需要对任务进行并行的设置；了解到quartz任务调度框架提供了有状态的任务StatefulJob，即在本次调度任务没有执行完毕时，下次任务不会执行；</p>
<p>常见的我们启动一个quartz任务的方式如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Date runTime = DateBuilder.evenSecondDate(new Date());</div><div class="line">   StdSchedulerFactory sf = new StdSchedulerFactory();</div><div class="line">      Scheduler scheduler = sf.getScheduler();</div><div class="line">   JobDetail job = JobBuilder.newJob(XXX.class).build();</div><div class="line">      Trigger trigger = TriggerBuilder.newTrigger().startAt(runTime).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(3).repeatForever()).forJob(job).build();</div><div class="line">      scheduler.scheduleJob(job, trigger);</div><div class="line">      </div><div class="line">      scheduler.start();&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>以上我们是设置了每三秒执行一次定时任务，而任务类是XXX</p>
<h2 id="任务类通用方法"><a href="#任务类通用方法" class="headerlink" title="任务类通用方法"></a>任务类通用方法</h2><p>这里我定义了一个XXX的父类，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.chechong.lucene.indexcreasement;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.RAMDirectory;</div><div class="line"><span class="keyword">import</span> org.quartz.Job;</div><div class="line"><span class="keyword">import</span> org.quartz.StatefulJob;</div><div class="line"> </div><div class="line"><span class="comment">/**有状态的任务：串行执行，即不允许上次执行没有完成即开始本次如果需要并行给接口改为Job即可</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseInCreasementIndex</span> <span class="keyword">implements</span> <span class="title">StatefulJob</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 内存索引</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> RAMDirectory ramDirectory;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseInCreasementIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseInCreasementIndex</span><span class="params">(RAMDirectory ramDirectory)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.ramDirectory = ramDirectory;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**更新索引</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">updateIndexData</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	<span class="comment">/**消费数据</span></div><div class="line">	 * <span class="doctag">@param</span> list</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(List list)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任务类相关实现,以下方法是获取待添加索引的数据源XXXInCreasementIndex</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			XXXInCreasementIndex index = <span class="keyword">new</span> XXXInCreasementIndex(Constants.XXX_INDEX_PATH, XXXDao.getInstance(), RamDirectoryControl.getRAMDireactory());</div><div class="line">			index.updateIndexData();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndexData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">int</span> maxBeanID = SearchUtil.getLastIndexBeanID();</div><div class="line">		System.out.println(maxBeanID);</div><div class="line">		List&lt;XXX&gt; sources = XXXDao.getListInfoBefore(maxBeanID);、、</div><div class="line">		<span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.consume(sources);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>这里，XXX代表我们要获取数据的实体类对象</p>
<p>consume方法主要是做两件事：</p>
<ul>
<li>数据存放到内存索引</li>
<li>判断内存索引数量，超出限制的话以队列方式取出超出的数量，并将之存放到文件索引</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(List list)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		IndexWriter writer = RamDirectoryControl.getRAMIndexWriter();</div><div class="line">		RamDirectoryControl.consume(writer,list);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>上边我们将内存索引和队列的实现放在了RamDirectoryControl中</p>
<h2 id="内存索引控制器"><a href="#内存索引控制器" class="headerlink" title="内存索引控制器"></a>内存索引控制器</h2><p>首先我们对内存索引的IndexWriter进行初始化，在初始化的时候需要注意先执行一次commit，否则会提示no segments的异常</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> IndexWriter ramIndexWriter;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> RAMDirectory directory;</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		directory = <span class="keyword">new</span> RAMDirectory();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ramIndexWriter = getRAMIndexWriter();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RAMDirectory <span class="title">getRAMDireactory</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> directory;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcher</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		IndexReader reader = <span class="keyword">null</span>;</div><div class="line">		IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			reader = DirectoryReader.open(directory);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		searcher =  <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**单例模式获取ramIndexWriter</span></div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexWriter <span class="title">getRAMIndexWriter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">			<span class="keyword">if</span>(ramIndexWriter == <span class="keyword">null</span>)&#123;</div><div class="line">				<span class="keyword">synchronized</span> (IndexWriter.class) &#123;</div><div class="line">					Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</div><div class="line">					IndexWriterConfig iwConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);   </div><div class="line">				    iwConfig.setOpenMode(OpenMode.CREATE_OR_APPEND);  </div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						ramIndexWriter = <span class="keyword">new</span> IndexWriter(directory, iwConfig);</div><div class="line">						ramIndexWriter.commit();</div><div class="line">						ramIndexWriter.close();</div><div class="line">						iwConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);   </div><div class="line">					    iwConfig.setOpenMode(OpenMode.CREATE_OR_APPEND);  </div><div class="line">						ramIndexWriter = <span class="keyword">new</span> IndexWriter(directory, iwConfig);</div><div class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">						<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> ramIndexWriter;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>定义一个获取内存索引<a href="https://www.baidu.com/s?wd=%E4%B8%AD%E6%95%B0%E6%8D%AE&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">中数据</a>条数的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**根据查询器、查询条件、每页数、排序条件进行查询</span></div><div class="line">	 * <span class="doctag">@param</span> query 查询条件</div><div class="line">	 * <span class="doctag">@param</span> first 起始值</div><div class="line">	 * <span class="doctag">@param</span> max 最大值</div><div class="line">	 * <span class="doctag">@param</span> sort 排序条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPageAndSortField</span><span class="params">(IndexSearcher searcher,Query query, <span class="keyword">int</span> first,<span class="keyword">int</span> max, Sort sort)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">				System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			TopFieldCollector collector = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">if</span>(sort != <span class="keyword">null</span>)&#123;</div><div class="line">				collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				SortField[] sortField = <span class="keyword">new</span> SortField[<span class="number">1</span>];</div><div class="line">				sortField[<span class="number">0</span>] = <span class="keyword">new</span> SortField(<span class="string">"createTime"</span>,SortField.Type.STRING,<span class="keyword">true</span>);</div><div class="line">				Sort defaultSort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">				collector = TopFieldCollector.create(defaultSort,first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">			&#125;</div><div class="line">			searcher.search(query, collector);</div><div class="line">			<span class="keyword">return</span> collector.topDocs(first, max);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>此方法返回结果为TopDocs，我们根据TopDocs的totalHits来获取内存索引中的数据条数，以此来鉴别内存占用，防止内存溢出。</p>
<p>consume方法的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**消费数据</span></div><div class="line">	 * <span class="doctag">@param</span> docs </div><div class="line">	 * <span class="doctag">@param</span> listSize </div><div class="line">	 * <span class="doctag">@param</span> writer</div><div class="line">	 * <span class="doctag">@param</span> list</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(IndexWriter writer, List list)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">		IndexSearcher searcher = getIndexSearcher();</div><div class="line">		System.out.println(directory);</div><div class="line">		TopDocs topDocs = getScoreDocsByPerPageAndSortField(searcher,query, <span class="number">1</span>, <span class="number">1</span>, <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">int</span> currentTotal = topDocs.totalHits;</div><div class="line">		<span class="keyword">if</span>(currentTotal+list.size() &gt; Constants.XXX_RAM_LIMIT)&#123;</div><div class="line">			<span class="comment">//超出内存限制</span></div><div class="line">			<span class="keyword">int</span> pulCount = Constants.XXX_RAM_LIMIT - currentTotal;</div><div class="line">			List&lt;Document&gt; docs = <span class="keyword">new</span> LinkedList&lt;Document&gt;();</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(pulCount &lt;= <span class="number">0</span>)&#123;</div><div class="line">				<span class="comment">//直接处理集合的内容</span></div><div class="line">				TopDocs allDocs = SearchUtil.getScoreDocsByPerPageAndSortField(searcher, query, <span class="number">0</span>,currentTotal, <span class="keyword">null</span>);</div><div class="line">				ScoreDoc[] scores = allDocs.scoreDocs;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; scores.length ; i ++)&#123;</div><div class="line">					<span class="comment">//取出内存中的数据</span></div><div class="line">					Document doc1 = searcher.doc(scores[i].doc);</div><div class="line">					Integer pollId = Integer.parseInt(doc1.get(<span class="string">"id"</span>));</div><div class="line">					Document doc = delDocumentFromRAMDirectory(pollId);</div><div class="line">					<span class="keyword">if</span>(doc != <span class="keyword">null</span>)&#123;</div><div class="line">						XXX carSource = (XXX) BeanTransferUtil.doc2Bean(doc, XXX.class);</div><div class="line">						Document doc2 = carSource2Document(carSource);</div><div class="line">						<span class="keyword">if</span>(doc2 != <span class="keyword">null</span>)&#123;</div><div class="line">							docs.add(doc2);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				addDocumentToFSDirectory(docs);</div><div class="line">				writer = getRAMIndexWriter();</div><div class="line">				consume(writer, list);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//先取出未达到内存的部分</span></div><div class="line">				List subProcessList = list.subList(<span class="number">0</span>, pulCount);</div><div class="line">				consume(writer, subProcessList);</div><div class="line">				List leaveList = list.subList(pulCount, list.size());</div><div class="line">				consume(writer, leaveList);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//未超出限制，直接存放到内存</span></div><div class="line">			<span class="keyword">int</span> listSize = list.size();</div><div class="line">			<span class="keyword">if</span>(listSize &gt; <span class="number">0</span>)&#123;</div><div class="line">				<span class="comment">//存放到内存</span></div><div class="line"> </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>上边的逻辑为：</p>
<p>根据getScoreDocsByPerPageAndSortField获取当前内存中的数据条数<br>根据内存中数据数量A和本次获取的数据源的总数B和内存中限制的数量C进行比较<br>如果A+B&lt;=C则未超出内存索引的限制，所有数据均存放到内存<br>反之，判断当前内存中的数据是否已经达到限制，如果已经超出，则直接处理取出内存中的内容，然后回调此方法。<br>如果未达到限制，先取出未达到限制的部分，然后对剩余的进行回调。</p>
<p>这里我们的BeanTransferUtil是根据document转换成对应的bean的方法，此处用到了反射和commons-beanutils.jar</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.chechong.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTransferUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">doc2Bean</span><span class="params">(Document doc, Class clazz)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Object obj = clazz.newInstance();</div><div class="line">			Field[] fields = clazz.getDeclaredFields();</div><div class="line">			<span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">				field.setAccessible(<span class="keyword">true</span>);</div><div class="line">				String fieldName = field.getName();</div><div class="line">				BeanUtils.setProperty(obj, fieldName, doc.get(fieldName));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> obj;</div><div class="line">		&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从内存索引中读取索引的方法如下： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**从内存索引中删除指定的doc</span></div><div class="line">	 * <span class="doctag">@param</span> pollId</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Document <span class="title">delDocumentFromRAMDirectory</span><span class="params">(Integer pollId)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		Document doc = <span class="keyword">null</span>;</div><div class="line">		Query query = SearchUtil.getQuery(<span class="string">"id"</span>, <span class="string">"int"</span>, pollId+<span class="string">""</span>, <span class="keyword">false</span>);</div><div class="line">		IndexSearcher searcher = getIndexSearcher();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			TopDocs queryDoc = SearchUtil.getScoreDocsByPerPageAndSortField(searcher, query, <span class="number">0</span>, <span class="number">1</span>, <span class="keyword">null</span>);</div><div class="line">			ScoreDoc[] docs = queryDoc.scoreDocs;</div><div class="line">			System.out.println(docs.length);</div><div class="line">			<span class="keyword">if</span>(docs.length &gt; <span class="number">0</span>)&#123;</div><div class="line">				doc = searcher.doc(docs[<span class="number">0</span>].doc);</div><div class="line">				System.out.println(doc);</div><div class="line">				ramIndexWriter.deleteDocuments(query);</div><div class="line">				ramIndexWriter.commit();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> doc;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>此处是根据id来读取内存索引中的内容，然后将它转换成document同时删除内存中的对应记录。</p>
<h2 id="NRT近实时查询的实现"><a href="#NRT近实时查询的实现" class="headerlink" title="NRT近实时查询的实现"></a>NRT近实时查询的实现</h2><p>对于上边的索引我们要采用适当的查询方法，这里查询时候为了达到近实时的效果，需要将内存索引添加到查询的范围中，即IndexReader中。</p>
<p>这里的IndexSearcher的获取方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**多目录多线程查询</span></div><div class="line">	 * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line">	 * <span class="doctag">@param</span> service 多线程查询</div><div class="line">	 * <span class="doctag">@param</span> isAddRamDirectory 是否增加内存索引查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service, <span class="keyword">boolean</span> isAddRamDirectory)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">		File[] files = file.listFiles();</div><div class="line">	</div><div class="line">		IndexReader[] readers = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(!isAddRamDirectory)&#123;</div><div class="line">			readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			readers = <span class="keyword">new</span> IndexReader[files.length+<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">			readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(isAddRamDirectory)&#123;</div><div class="line">			readers[files.length] = DirectoryReader.open(RamDirectoryControl.getRAMDireactory());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		MultiReader multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>如此，我们就可以在查询的时候既从文件索引中读取，也从内存索引中检索数据了； </p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene索引时join和查询时join使用示例]]></title>
      <url>/2019/03/16/Lucene/18%E3%80%81lucene%E7%B4%A2%E5%BC%95%E6%97%B6join%E5%92%8C%E6%9F%A5%E8%AF%A2%E6%97%B6join%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="lucene（18）—lucene索引时join和查询时join使用示例"><a href="#lucene（18）—lucene索引时join和查询时join使用示例" class="headerlink" title="lucene（18）—lucene索引时join和查询时join使用示例"></a>lucene（18）—lucene索引时join和查询时join使用示例</h1><p>了解sql的朋友都知道，我们在查询的时候可以采用join查询，即对有一定关联关系的对象进行联合查询来对多维的数据进行整理。这个联合查询的方式挺方便的，跟我们现实生活中的托人找关系类似，我们想要完成一件事，先找自己的熟人，然后通过熟人在一次找到其他，最终通过这种手段找到想要联系到的人。有点类似于”世间万物皆有联系“的感觉。</p>
<a id="more"></a>
<p>lucene的join包提供了索引时join和查询时join的功能；</p>
<h2 id="Index-time-join"><a href="#Index-time-join" class="headerlink" title="Index-time join"></a>Index-time join</h2><p>大意是索引时join提供了查询时join的支持，且IndexWriter.addDocuments()方法调用时被join的documents以单个document块存储索引。索引时join对普通文本内容（如xml文档或数据库表）是方便可用的。特别是对类似于数据库的那种多表关联的情况，我们需要对提供关联关系的列提供join支持；</p>
<p>在索引时join的时候，索引中的documents被分割成parent documents（每个索引块的最后一个document）和child documents (除了parent documents外的所有documents).  由于lucene并不记录doc块的信息，我们需要提供一个Filter来标示parent documents。</p>
<p>在搜索结果的时候，我们利用ToParentBlockJoinQuery来从child query到parent document space来remap/join对应的结果。</p>
<p>如果我们只关注匹配查询条件的parent documents，我们可以用任意的collector来采集匹配到的parent documents；如果我们还想采集匹配parent document查询条件的child documents，我们就需要利用ToParentBlockJoinCollector来进行查询；一旦查询完成，我们可以利用<code>ToParentBlockJoinCollector.getTopGroups()来获取匹配条件的TopGroups.</code></p>
<h2 id="Query-time-joins"><a href="#Query-time-joins" class="headerlink" title="Query-time joins"></a>Query-time joins</h2><p>查询时join是基于索引词，其实现有两步：</p>
<ul>
<li>第一步先从匹配fromQuery的fromField中采集所有的数据；</li>
<li>从第一步得到的数据中筛选出所有符合条件的documents</li>
</ul>
<p>查询时join接收一下输入参数：</p>
<ul>
<li>fromField：fromField的名称，即要join的documents中的字段；</li>
<li>formQuery: 用户的查询条件</li>
<li>multipleValuesPerDocument： fromField在document是否是多个值</li>
<li>scoreMode：定义other join side中score是如何被使用的。如果不关注scoring，我们只需要设置成ScoreMode.None，此种方式会忽略评分因此会更高效和节约内存；</li>
<li>toField：toField的名称，即要join的toField的在对应的document中的字段</li>
</ul>
<p>通常查询时join的实现类似于如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String fromField = <span class="string">"from"</span>; <span class="comment">// Name of the from field</span></div><div class="line"><span class="keyword">boolean</span> multipleValuesPerDocument = <span class="keyword">false</span>; <span class="comment">// Set only yo true in the case when your fromField has multiple values per document in your index</span></div><div class="line">String toField = <span class="string">"to"</span>; <span class="comment">// Name of the to field</span></div><div class="line">ScoreMode scoreMode = ScoreMode.Max <span class="comment">// Defines how the scores are translated into the other side of the join.</span></div><div class="line">Query fromQuery = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"content"</span>, searchTerm)); <span class="comment">// Query executed to collect from values to join to the to values</span></div><div class="line"> </div><div class="line">Query joinQuery = JoinUtil.createJoinQuery(fromField, multipleValuesPerDocument, toField, fromQuery, fromSearcher, scoreMode);</div><div class="line">TopDocs topDocs = toSearcher.search(joinQuery, <span class="number">10</span>); <span class="comment">// Note: toSearcher can be the same as the fromSearcher</span></div><div class="line"><span class="comment">// Render topDocs...</span></div></pre></td></tr></table></figure>
<h2 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h2><p>这里我们模拟6组数据，示例代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.SortedDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.join.JoinUtil;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.join.ScoreMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimple</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	    <span class="keyword">final</span> String idField = <span class="string">"id"</span>;</div><div class="line">	    <span class="keyword">final</span> String toField = <span class="string">"productId"</span>;</div><div class="line"> </div><div class="line">	    Directory dir = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">	    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">	    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">	    config.setOpenMode(OpenMode.CREATE);</div><div class="line">	    IndexWriter w = <span class="keyword">new</span> IndexWriter(dir, config);</div><div class="line"> </div><div class="line">	    <span class="comment">// 0</span></div><div class="line">	    Document doc = <span class="keyword">new</span> Document();</div><div class="line">	    doc.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>, <span class="string">"random text"</span>, Field.Store.YES));</div><div class="line">	    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"name1"</span>, Field.Store.YES));</div><div class="line">	    doc.add(<span class="keyword">new</span> TextField(idField, <span class="string">"1"</span>, Field.Store.YES));</div><div class="line">	    doc.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"1"</span>)));</div><div class="line">	    </div><div class="line">	    w.addDocument(doc);</div><div class="line"> </div><div class="line">	    <span class="comment">// 1</span></div><div class="line">	    Document doc1 = <span class="keyword">new</span> Document();</div><div class="line">	    doc1.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"10.0"</span>, Field.Store.YES));</div><div class="line">	    doc1.add(<span class="keyword">new</span> TextField(idField, <span class="string">"2"</span>, Field.Store.YES));</div><div class="line">	    doc1.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"2"</span>)));</div><div class="line">	    doc1.add(<span class="keyword">new</span> TextField(toField, <span class="string">"1"</span>, Field.Store.YES));</div><div class="line">	    doc1.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"1"</span>)));</div><div class="line">	    </div><div class="line">	    w.addDocument(doc1);</div><div class="line"> </div><div class="line">	    <span class="comment">// 2</span></div><div class="line">	    Document doc2 = <span class="keyword">new</span> Document();</div><div class="line">	    doc2.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"20.0"</span>, Field.Store.YES));</div><div class="line">	    doc2.add(<span class="keyword">new</span> TextField(idField, <span class="string">"3"</span>, Field.Store.YES));</div><div class="line">	    doc2.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"3"</span>)));</div><div class="line">	    doc2.add(<span class="keyword">new</span> TextField(toField, <span class="string">"1"</span>, Field.Store.YES));</div><div class="line">	    doc2.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"1"</span>)));</div><div class="line">	    </div><div class="line">	    w.addDocument(doc2);</div><div class="line"> </div><div class="line">	    <span class="comment">// 3</span></div><div class="line">	    Document doc3 = <span class="keyword">new</span> Document();</div><div class="line">	    doc3.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>, <span class="string">"more random text"</span>, Field.Store.YES));</div><div class="line">	    doc3.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"name2"</span>, Field.Store.YES));</div><div class="line">	    doc3.add(<span class="keyword">new</span> TextField(idField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">	    doc3.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">	    </div><div class="line">	    w.addDocument(doc3);</div><div class="line">	    </div><div class="line"> </div><div class="line">	    <span class="comment">// 4</span></div><div class="line">	    Document doc4 = <span class="keyword">new</span> Document();</div><div class="line">	    doc4.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"10.0"</span>, Field.Store.YES));</div><div class="line">	    doc4.add(<span class="keyword">new</span> TextField(idField, <span class="string">"5"</span>, Field.Store.YES));</div><div class="line">	    doc4.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"5"</span>)));</div><div class="line">	    doc4.add(<span class="keyword">new</span> TextField(toField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">	    doc4.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">	    w.addDocument(doc4);</div><div class="line"> </div><div class="line">	    <span class="comment">// 5</span></div><div class="line">	    Document doc5 = <span class="keyword">new</span> Document();</div><div class="line">	    doc5.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, <span class="string">"20.0"</span>, Field.Store.YES));</div><div class="line">	    doc5.add(<span class="keyword">new</span> TextField(idField, <span class="string">"6"</span>, Field.Store.YES));</div><div class="line">	    doc5.add(<span class="keyword">new</span> SortedDocValuesField(idField, <span class="keyword">new</span> BytesRef(<span class="string">"6"</span>)));</div><div class="line">	    doc5.add(<span class="keyword">new</span> TextField(toField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">	    doc5.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">	    w.addDocument(doc5);</div><div class="line">	    </div><div class="line">	    <span class="comment">//6</span></div><div class="line">	    Document doc6 = <span class="keyword">new</span> Document();</div><div class="line">	    doc6.add(<span class="keyword">new</span> TextField(toField, <span class="string">"4"</span>, Field.Store.YES));</div><div class="line">	    doc6.add(<span class="keyword">new</span> SortedDocValuesField(toField, <span class="keyword">new</span> BytesRef(<span class="string">"4"</span>)));</div><div class="line">	    w.addDocument(doc6);</div><div class="line">	    w.commit();</div><div class="line">	    w.close();</div><div class="line">	    IndexReader reader = DirectoryReader.open(dir);</div><div class="line">	    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">	    </div><div class="line"> </div><div class="line">	    <span class="comment">// Search for product</span></div><div class="line">	    Query joinQuery = JoinUtil.createJoinQuery(idField, <span class="keyword">false</span>, toField, <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"name"</span>, <span class="string">"name2"</span>)), indexSearcher, ScoreMode.None);</div><div class="line">	    System.out.println(joinQuery);</div><div class="line">	    TopDocs result = indexSearcher.search(joinQuery, <span class="number">10</span>);</div><div class="line">	    System.out.println(<span class="string">"查询到的匹配数据："</span>+result.totalHits);</div><div class="line">	    </div><div class="line"> </div><div class="line">	    joinQuery = JoinUtil.createJoinQuery(idField, <span class="keyword">false</span>, toField, <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"name"</span>, <span class="string">"name1"</span>)), indexSearcher, ScoreMode.None);</div><div class="line">	    result = indexSearcher.search(joinQuery, <span class="number">10</span>);</div><div class="line">	    System.out.println(<span class="string">"查询到的匹配数据："</span>+result.totalHits);</div><div class="line">	    <span class="comment">// Search for offer</span></div><div class="line">	    joinQuery = JoinUtil.createJoinQuery(toField, <span class="keyword">false</span>, idField, <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"id"</span>, <span class="string">"5"</span>)), indexSearcher, ScoreMode.None);</div><div class="line">	    result = indexSearcher.search(joinQuery, <span class="number">10</span>);</div><div class="line">	    System.out.println(<span class="string">"查询到的匹配数据："</span>+result.totalHits);</div><div class="line"> </div><div class="line">	    indexSearcher.getIndexReader().close();</div><div class="line">	    dir.close();</div><div class="line">	  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序的运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查询到的匹配数据：3</div><div class="line">查询到的匹配数据：2</div><div class="line">查询到的匹配数据：1</div></pre></td></tr></table></figure>
<p>以第一个查询为例：</p>
<p>我们在查询的时候先根据name=name2这个查询条件找到记录为doc3的document,由于查询的是toField匹配的，我们在根据doc3找到其toField的值为4，然后查询条件变为productId:4，找出除本条记录外的其他数据，结果正好为3，符合条件。</p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之expressions表达式处理]]></title>
      <url>/2019/03/16/Lucene/17%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8Bexpressions%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="lucene（17）—lucene搜索之expressions表达式处理"><a href="#lucene（17）—lucene搜索之expressions表达式处理" class="headerlink" title="lucene（17）—lucene搜索之expressions表达式处理"></a>lucene（17）—lucene搜索之expressions表达式处理</h1><p>有时候我们在做lucene的结果展示的时候可能需要对多个列的内容进行计算，根据多个field对应的值做数值方面的运算。</p>
<p>lucene自4.6版本起，提供了用于运算的expression模块；</p>
<a id="more"></a>
<p>expression分为两部分：</p>
<ul>
<li><code>org.apache.lucene.expressions：提供了字段绑定和相关的表达式参数传递的功能；</code></li>
<li><code>org.apache.lucene.expressions.js:提供了表达式定义的功能。</code></li>
</ul>
<h2 id="Expression类使用示例"><a href="#Expression类使用示例" class="headerlink" title="Expression类使用示例"></a>Expression类使用示例</h2><p>Expression是提供document的运算的支持类；</p>
<p>我们的运算表达式和其绑定内容通常类似于如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// compile an expression:</span></div><div class="line">Expression expr = JavascriptCompiler.compile(<span class="string">"sqrt(_score) + ln(popularity)"</span>);</div><div class="line"></div><div class="line"><span class="comment">// SimpleBindings just maps variables to SortField instances</span></div><div class="line">SimpleBindings bindings = <span class="keyword">new</span> SimpleBindings();    </div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"_score"</span>, SortField.Type.SCORE));</div><div class="line">bindings.add(<span class="keyword">new</span> SortField(<span class="string">"popularity"</span>, SortField.Type.INT));</div><div class="line"></div><div class="line"><span class="comment">// create a sort field and sort by it (reverse order)</span></div><div class="line">Sort sort = <span class="keyword">new</span> Sort(expr.getSortField(bindings, <span class="keyword">true</span>));</div><div class="line">Query query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"body"</span>, <span class="string">"contents"</span>));</div><div class="line">searcher.search(query, <span class="keyword">null</span>, <span class="number">10</span>, sort);</div></pre></td></tr></table></figure>
<p>如上所示，我们对document中的_score和popularity两个字段进行值的运算，这里是对_score开平方之后和popularity的对数运算求和，运算方式的定义在第一行；</p>
<p>下边有定义了SimpleBindings，binding主要是对运算的数据进行数据绑定；</p>
<p>最终的查询结果是根据以上的运算结果采取倒排序的方式表达式说明表达式的构造可以采用如下的几种来进行组合：</p>
<p>数值型的</p>
<ul>
<li>加减乘除取模（+-*/%）等运算符</li>
<li>移位运算符：| &amp; ^ ~ &lt;&lt; &gt;&gt; &gt;&gt;&gt;</li>
<li>布尔运算符（包括三目运算符）：     &amp;&amp; || ! ?:</li>
<li>比较运算符：&lt; &lt;= == &gt;= &gt;</li>
<li>数学运算函数：abs ceil exp floor ln log10 logn max min sqrt pow</li>
<li>三角运算函数：acosh acos asinh asin atanh atan atan2 cosh cos sinh sin tanh tan</li>
<li>haversin公式</li>
<li>min,max函数</li>
</ul>
<p>代码示例：</p>
<p>我写了一个测试程序，模拟长方形的运算并排序；</p>
<p>面积倒序排序；当面积相同时，按宽度倒序，长度倒序；</p>
<p>周长倒序排序；周长相同时，按宽度倒序，长度倒序；</p>
<p>示例程序如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.expression;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.IntField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.NumericDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.expressions.Expression;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.expressions.SimpleBindings;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.expressions.js.JavascriptCompiler;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneExpressionTest</span></span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Directory directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">			Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">			IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">			config.setOpenMode(OpenMode.CREATE_OR_APPEND);</div><div class="line">			IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, config);</div><div class="line">			</div><div class="line">			Document doc = <span class="keyword">new</span> Document();</div><div class="line">			<span class="comment">//模拟长方形</span></div><div class="line">			doc.add(<span class="keyword">new</span> IntField(<span class="string">"width"</span>, <span class="number">3</span>,Field.Store.YES));</div><div class="line">			doc.add(<span class="keyword">new</span> IntField(<span class="string">"longth"</span>, <span class="number">4</span>,Field.Store.YES));</div><div class="line">			doc.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"width"</span>, <span class="number">3</span>));</div><div class="line">			doc.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longth"</span>, <span class="number">4</span>));</div><div class="line">			writer.addDocument(doc);</div><div class="line">			</div><div class="line">			Document doc1 = <span class="keyword">new</span> Document();</div><div class="line">			doc1.add(<span class="keyword">new</span> IntField(<span class="string">"width"</span>, <span class="number">2</span>,Field.Store.YES));</div><div class="line">			doc1.add(<span class="keyword">new</span> IntField(<span class="string">"longth"</span>, <span class="number">5</span>,Field.Store.YES));</div><div class="line">			doc1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"width"</span>, <span class="number">2</span>));</div><div class="line">			doc1.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longth"</span>, <span class="number">5</span>));</div><div class="line">			writer.addDocument(doc1);</div><div class="line">			</div><div class="line">			Document doc2 = <span class="keyword">new</span> Document();</div><div class="line">			doc2.add(<span class="keyword">new</span> IntField(<span class="string">"width"</span>, <span class="number">2</span>,Field.Store.YES));</div><div class="line">			doc2.add(<span class="keyword">new</span> IntField(<span class="string">"longth"</span>, <span class="number">6</span>,Field.Store.YES));</div><div class="line">			doc2.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"width"</span>, <span class="number">2</span>));</div><div class="line">			doc2.add(<span class="keyword">new</span> NumericDocValuesField(<span class="string">"longth"</span>, <span class="number">6</span>));</div><div class="line">			writer.addDocument(doc2);</div><div class="line">			</div><div class="line">			writer.commit();</div><div class="line">			writer.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 面积比较</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAcreage</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Expression expr = JavascriptCompiler.compile(<span class="string">"width*longth"</span>);</div><div class="line">			</div><div class="line">			SimpleBindings bindings = <span class="keyword">new</span> SimpleBindings();    </div><div class="line">			bindings.add(<span class="keyword">new</span> SortField(<span class="string">"width"</span>, SortField.Type.INT));</div><div class="line">			bindings.add(<span class="keyword">new</span> SortField(<span class="string">"longth"</span>, SortField.Type.INT));</div><div class="line">			</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(expr.getSortField(bindings, <span class="keyword">true</span>));</div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			</div><div class="line">			Directory directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">			IndexReader reader = DirectoryReader.open(directory);</div><div class="line">			IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">			TopDocs docs = searcher.search(query, <span class="number">10</span>, sort);</div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : docs.scoreDocs) &#123;</div><div class="line">				System.out.println(searcher.doc(scoreDoc.doc));</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 周长比较</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCircum</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Expression expr = JavascriptCompiler.compile(<span class="string">"width+longth+sqrt(pow(width,2)+pow(longth,2))"</span>);</div><div class="line">			</div><div class="line">			SimpleBindings bindings = <span class="keyword">new</span> SimpleBindings();    </div><div class="line">			bindings.add(<span class="keyword">new</span> SortField(<span class="string">"width"</span>, SortField.Type.INT));</div><div class="line">			bindings.add(<span class="keyword">new</span> SortField(<span class="string">"longth"</span>, SortField.Type.INT));</div><div class="line">			</div><div class="line">			Sort sort = <span class="keyword">new</span> Sort(expr.getSortField(bindings, <span class="keyword">true</span>));</div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			</div><div class="line">			Directory directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>));</div><div class="line">			IndexReader reader = DirectoryReader.open(directory);</div><div class="line">			IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">			TopDocs docs = searcher.search(query, <span class="number">10</span>, sort);</div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : docs.scoreDocs) &#123;</div><div class="line">				System.out.println(searcher.doc(scoreDoc.doc));</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>面积的比较运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;width:3&gt; stored&lt;longth:4&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:6&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:5&gt;&gt;</div></pre></td></tr></table></figure>
<p>同样的，周长比较的运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:6&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:2&gt; stored&lt;longth:5&gt;&gt;</div><div class="line">Document&lt;stored&lt;width:3&gt; stored&lt;longth:4&gt;&gt;</div></pre></td></tr></table></figure>
<p>以上是lucene的expression的应用,源代码下载地址：</p>
<p><a href="http://download.csdn.net/detail/wuyinggui10000/8762423" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8762423</a></p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之facet查询查询示例（2）]]></title>
      <url>/2019/03/16/Lucene/16%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8Bfacet%E6%9F%A5%E8%AF%A2%E6%9F%A5%E8%AF%A2%E7%A4%BA%E4%BE%8B%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="lucene（16）—lucene搜索之facet查询查询示例（2）"><a href="#lucene（16）—lucene搜索之facet查询查询示例（2）" class="headerlink" title="lucene（16）—lucene搜索之facet查询查询示例（2）"></a>lucene（16）—lucene搜索之facet查询查询示例（2）</h1><p>lucene（14）—lucene搜索之facet索引原理和facet查询实例，上篇主要是统计facet的dim和每个种类对应的数量，个人感觉这个跟lucene的group不同的在于facet的存储类似于hash（key-field-value）形式的，而group则是单一的map（key-value）形式的，虽然都可以统计某一品类的数量，显然facet更具扩展性。</p>
<a id="more"></a>
<h2 id="key-field-value查询"><a href="#key-field-value查询" class="headerlink" title="key-field-value查询"></a>key-field-value查询</h2><p>facet可以对某一个维度的满足某个条件的结果进行统计，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Test</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDrillDownSlide</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">   DirectoryReader indexReader = DirectoryReader.open(directory);</div><div class="line">   IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(indexReader);</div><div class="line">   DrillSideways ds = <span class="keyword">new</span> DrillSideways(searcher, config, taxoReader);</div><div class="line">   DrillDownQuery ddq = <span class="keyword">new</span> DrillDownQuery(config);</div><div class="line">   ddq.add(<span class="string">"filePath"</span>, <span class="string">"ik"</span>);</div><div class="line">   DrillSidewaysResult r = ds.search(ddq, <span class="number">10</span>);</div><div class="line">   TopDocs hits = r.hits;</div><div class="line">   <span class="keyword">for</span> (ScoreDoc scoreDoc : hits.scoreDocs) &#123;</div><div class="line">    Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">    System.out.println(doc.get(<span class="string">"path"</span>));</div><div class="line">   &#125;</div><div class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">   e.printStackTrace();</div><div class="line">  &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这里我们搜索的dim是filePath，查找的范围是ik相关联的数据，对应的查询结果就是所有包含在IK文件夹下的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\IKAnalyzer.cfg.xml</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\IKAnalyzer2012FF_u1.jar</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\IKAnalyzer2015.jar</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\LICENSE.txt</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\NOTICE.txt</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\dist\stopword.dic</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\allclasses-frame.html</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\allclasses-noframe.html</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\constant-values.html</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\deprecated-list.html</div></pre></td></tr></table></figure>
<h2 id="range查询"><a href="#range查询" class="headerlink" title="range查询"></a>range查询</h2><p>facet还支持range查询，range查询的类型包括DoubleRange和LongRange；其对应的Facets为DoubleRangeFacets和LongRangeFacets;</p>
<p>以LongRangeFacetCounts为例，LongRangeFacetCounts可以对long类型的数值进行整理查询</p>
<p>这里我们对每个文档的单词数量进行区间的分组，range查询示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOverlappedEndStart</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		IndexReader reader = DirectoryReader.open(directory);</div><div class="line">		FacetsCollector fc = <span class="keyword">new</span> FacetsCollector();</div><div class="line">	    IndexSearcher s = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">	    s.search(<span class="keyword">new</span> MatchAllDocsQuery(), fc);</div><div class="line">	    Facets facets = <span class="keyword">new</span> LongRangeFacetCounts(<span class="string">"contentLength"</span>, fc,</div><div class="line">	            <span class="keyword">new</span> LongRange(<span class="string">"0-100"</span>, <span class="number">0L</span>, <span class="keyword">true</span>, <span class="number">100L</span>, <span class="keyword">true</span>),</div><div class="line">	            <span class="keyword">new</span> LongRange(<span class="string">"100-200"</span>, <span class="number">100L</span>, <span class="keyword">true</span>, <span class="number">200L</span>, <span class="keyword">true</span>),</div><div class="line">	            <span class="keyword">new</span> LongRange(<span class="string">"200-300"</span>, <span class="number">200L</span>, <span class="keyword">true</span>, <span class="number">300L</span>, <span class="keyword">true</span>),</div><div class="line">	            <span class="keyword">new</span> LongRange(<span class="string">"300-400"</span>, <span class="number">300L</span>, <span class="keyword">true</span>, <span class="number">400L</span>, <span class="keyword">true</span>));</div><div class="line">	    FacetResult result = facets.getTopChildren(<span class="number">10</span>, <span class="string">"contentLength"</span>);</div><div class="line">	    System.out.println(result.toString());</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dim=contentLength path=[] value=22 childCount=4</div><div class="line">  0-100 (7)</div><div class="line">  100-200 (9)</div><div class="line">  200-300 (3)</div><div class="line">  300-400 (3)</div></pre></td></tr></table></figure>
<h2 id="多个dim查询"><a href="#多个dim查询" class="headerlink" title="多个dim查询"></a>多个dim查询</h2><p>facet里DrillSideways可以定义多个facetCount的查询，这时返回的结果为各个facet对应的统计数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMixedRangeAndNonRangeTaxonomy</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		IndexReader reader = DirectoryReader.open(directory);</div><div class="line">	    IndexSearcher s = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">	    DrillSideways ds = <span class="keyword">new</span> DrillSideways(s, config, taxoReader)&#123;</div><div class="line">	        <span class="meta">@Override</span></div><div class="line">	        <span class="function"><span class="keyword">protected</span> Facets <span class="title">buildFacetsResult</span><span class="params">(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims)</span> <span class="keyword">throws</span> IOException </span>&#123;        </div><div class="line">	          FacetsCollector fieldFC = drillDowns;</div><div class="line">	          FacetsCollector dimFC = drillDowns;</div><div class="line">	          <span class="keyword">if</span> (drillSideways != <span class="keyword">null</span>) &#123;</div><div class="line">	            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;drillSideways.length;i++) &#123;</div><div class="line">	              String dim = drillSidewaysDims[i];</div><div class="line">	              <span class="keyword">if</span> (dim.equals(<span class="string">"contentLength"</span>)) &#123;</div><div class="line">	                fieldFC = drillSideways[i];</div><div class="line">	              &#125; <span class="keyword">else</span> &#123;</div><div class="line">	            	dimFC = drillSideways[i];</div><div class="line">	              &#125;</div><div class="line">	            &#125;</div><div class="line">	          &#125;</div><div class="line">	          Map&lt;String,Facets&gt; byDim = <span class="keyword">new</span> HashMap&lt;String,Facets&gt;();</div><div class="line">	          byDim.put(<span class="string">"contentLength"</span>,<span class="keyword">new</span> LongRangeFacetCounts(<span class="string">"contentLength"</span>, fieldFC,</div><div class="line">	                          <span class="keyword">new</span> LongRange(<span class="string">"less than 100"</span>, <span class="number">0L</span>, <span class="keyword">true</span>, <span class="number">100L</span>, <span class="keyword">false</span>),</div><div class="line">	                          <span class="keyword">new</span> LongRange(<span class="string">"between 100 and 200"</span>, <span class="number">100L</span>, <span class="keyword">true</span>, <span class="number">200L</span>, <span class="keyword">false</span>),</div><div class="line">	                          <span class="keyword">new</span> LongRange(<span class="string">"over 200"</span>, <span class="number">200L</span>, <span class="keyword">true</span>, Integer.MAX_VALUE, <span class="keyword">false</span>)));</div><div class="line">	          byDim.put(<span class="string">"dim"</span>, <span class="keyword">new</span> FastTaxonomyFacetCounts(taxoReader, config, dimFC));</div><div class="line">	          <span class="keyword">return</span> <span class="keyword">new</span> MultiFacets(byDim);</div><div class="line">	        &#125;</div><div class="line">	        </div><div class="line">	        <span class="meta">@Override</span></div><div class="line">	        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">scoreSubDocsAtOnce</span><span class="params">()</span> </span>&#123;</div><div class="line">	          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	        &#125;</div><div class="line">	    &#125;;</div><div class="line">	    DrillDownQuery ddq = <span class="keyword">new</span> DrillDownQuery(config);</div><div class="line">	    DrillSidewaysResult dsr = ds.search(ddq, <span class="number">10</span>);</div><div class="line">	    Facets facet = dsr.facets;</div><div class="line">	    List&lt;FacetResult&gt; results = facet.getAllDims(reader.maxDoc());</div><div class="line">	    <span class="keyword">for</span> (FacetResult facetResult : results) &#123;</div><div class="line">			System.out.println(facetResult.dim);</div><div class="line">			LabelAndValue[] values = facetResult.labelValues;</div><div class="line">			<span class="keyword">for</span> (LabelAndValue labelAndValue : values) &#123;</div><div class="line">				System.out.println(<span class="string">"\t"</span>+labelAndValue.label +<span class="string">"       "</span>+labelAndValue.value);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dim</div><div class="line">	odd       126</div><div class="line">	even       119</div><div class="line">contentLength</div><div class="line">	less than 100       7</div><div class="line">	between 100 and 200       9</div><div class="line">	over 200       229</div></pre></td></tr></table></figure>
<h2 id="对单个range的列表查询支持"><a href="#对单个range的列表查询支持" class="headerlink" title="对单个range的列表查询支持"></a>对单个range的列表查询支持</h2><p>facet支持单个range的区间查询，这样可以查询出此range对饮的TopDocs列表，等同于返回了document对象列表；</p>
<p>这里我们查询内容长度在0到100之间的数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDrillDownQueryWithRange</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		IndexReader reader = DirectoryReader.open(directory);</div><div class="line">	    IndexSearcher s = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">	    DrillDownQuery ddq = <span class="keyword">new</span> DrillDownQuery(config);</div><div class="line">	    ddq.add(<span class="string">"contentLength"</span>, NumericRangeQuery.newLongRange(<span class="string">"contentLength"</span>, <span class="number">0l</span>, <span class="number">100l</span>, <span class="keyword">true</span>, <span class="keyword">false</span>));<span class="comment">//;</span></div><div class="line">	    TopDocs docs = s.search(ddq, reader.maxDoc());</div><div class="line">	    System.out.println(<span class="string">"查询到的数据总数："</span>+docs.totalHits);</div><div class="line">	    <span class="keyword">for</span> (ScoreDoc scoreDoc : docs.scoreDocs) &#123;</div><div class="line">			System.out.println(s.doc(scoreDoc.doc).get(<span class="string">"path"</span>));</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">查询到的数据总数：7</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\DONATE.txt</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\jcseg-elasticsearch\src\main\resources\es-plugin.properties</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\lexicon\lex-autoload.todo</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\lexicon\lex-en-pun.lex</div><div class="line">C:\Users\lenovo\Desktop\lucene\jcseg\lexicon\lex-ln-adorn.lex</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\doc\resources\inherit.gif</div><div class="line">C:\Users\lenovo\Desktop\lucene\IK-Analyzer-2012FF\src\ext.dic</div></pre></td></tr></table></figure>
<p>本节内容都是示例，个人觉得这种会比较直观些，facet涉及的面比较广，这里没有facet的sort和其他相关操作，会在后续补上，希望大家持续关注。﻿﻿ </p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例]]></title>
      <url>/2019/03/16/Lucene/15%E3%80%81java%E8%AF%BB%E5%8F%96word%20excel%20pdf%E5%8F%8Alucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2RegExQuery%E5%92%8C%E6%89%8B%E6%9C%BA%E9%82%AE%E7%AE%B1%E6%9F%A5%E8%AF%A2%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="lucene（15）—java读取word-excel-pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例"><a href="#lucene（15）—java读取word-excel-pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例" class="headerlink" title="lucene（15）—java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例"></a>lucene（15）—java读取word excel pdf及lucene搜索之正则表达式查询RegExQuery和手机邮箱查询示例</h1><p>读取文本文件中的内容，找出文件中的手机号和邮箱，我自己写了一个读取文档的内容的正则查询示例，用于匹配文件中是否含有邮箱或者手机号，这个等于是对之前的文本处理工具的一个梳理，同时结合lucene内部提供的正则匹配查询RegexQuery；</p>
<p>废话不多说了，直接上代码，这里先对文件内容读取分类处理，分为pdf word excel 和普通文本四类，不同的种类读取文本内容不一样</p>
<p>pdf利用pdfbox读取内容，word和excel利用poi进行读取内容，文本文档利用jdk自带的读取</p>
<a id="more"></a>
<h2 id="读取pdf、word、excel和普通文本文档内容（支持word-excel-2007）"><a href="#读取pdf、word、excel和普通文本文档内容（支持word-excel-2007）" class="headerlink" title="读取pdf、word、excel和普通文本文档内容（支持word excel 2007）"></a>读取pdf、word、excel和普通文本文档内容（支持word excel 2007）</h2><p>这里代码做了一点调整， 主要是对excel格式的空行和空列的过滤</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.util;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.apache.pdfbox.PDFReader;</div><div class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDDocument;</div><div class="line"><span class="keyword">import</span> org.apache.pdfbox.util.PDFTextStripper;</div><div class="line"><span class="keyword">import</span> org.apache.poi.EncryptedDocumentException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.POIXMLDocument;</div><div class="line"><span class="keyword">import</span> org.apache.poi.POIXMLTextExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hwpf.extractor.WordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.OpenXML4JException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellStyle;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.WorkbookFactory;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xwpf.extractor.XWPFWordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.xmlbeans.XmlException;</div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**读取文件信息和下属文件夹</span></div><div class="line">	 * <span class="doctag">@param</span> folder</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 * <span class="doctag">@throws</span> OpenXML4JException </div><div class="line">	 * <span class="doctag">@throws</span> XmlException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;FileBean&gt; <span class="title">getFolderFiles</span><span class="params">(String folder)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		List&lt;FileBean&gt; fileBeans = <span class="keyword">new</span> LinkedList&lt;FileBean&gt;();</div><div class="line">		File file = <span class="keyword">new</span> File(folder);</div><div class="line">		<span class="keyword">if</span>(file.isDirectory())&#123;</div><div class="line">			File[] files = file.listFiles();</div><div class="line">			<span class="keyword">if</span>(files != <span class="keyword">null</span>)&#123;</div><div class="line">				<span class="keyword">for</span> (File file2 : files) &#123;</div><div class="line">					fileBeans.addAll(getFolderFiles(file2.getAbsolutePath()));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			FileBean bean = <span class="keyword">new</span> FileBean();</div><div class="line">			String filePath = file.getAbsolutePath();</div><div class="line">			bean.setPath(file.getAbsolutePath());</div><div class="line">			bean.setModified(file.lastModified());</div><div class="line">			String content = <span class="string">""</span>;</div><div class="line">			<span class="keyword">if</span>(filePath.endsWith(<span class="string">".doc"</span>) || filePath.endsWith(<span class="string">".docx"</span>))&#123;</div><div class="line">				content = readDoc(file);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(filePath.endsWith(<span class="string">".xls"</span>) || filePath.endsWith(<span class="string">".xlsx"</span>))&#123;</div><div class="line">				content = readExcel(file);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(filePath.endsWith(<span class="string">".pdf"</span>))&#123;</div><div class="line">				content = readPdf(file);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				content = <span class="keyword">new</span> String(Files.readAllBytes(Paths.get(folder)));</div><div class="line">			&#125;</div><div class="line">			bean.setContent(content);</div><div class="line">			fileBeans.add(bean);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> fileBeans;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**讀取excel文件</span></div><div class="line">	 * <span class="doctag">@param</span> file</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> InvalidFormatException </div><div class="line">	 * <span class="doctag">@throws</span> EncryptedDocumentException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readExcel</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		String filePath = file.getAbsolutePath();</div><div class="line">		StringBuffer content = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</div><div class="line">		<span class="keyword">if</span>(filePath.endsWith(<span class="string">".xls"</span>))&#123;</div><div class="line">			InputStream inp = <span class="keyword">new</span> FileInputStream(filePath);</div><div class="line">		    Workbook wb = WorkbookFactory.create(inp);   </div><div class="line">		    Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</div><div class="line">		    <span class="keyword">for</span>(<span class="keyword">int</span> i = sheet.getFirstRowNum();i&lt;= sheet.getPhysicalNumberOfRows();i++)&#123;  </div><div class="line">		    	HSSFRow row = (HSSFRow) sheet.getRow(i);  </div><div class="line">		    	<span class="keyword">if</span> (row == <span class="keyword">null</span>) &#123;  </div><div class="line">		    		  <span class="keyword">continue</span>;  </div><div class="line">		    	&#125;</div><div class="line">		    	<span class="keyword">for</span> (<span class="keyword">int</span> j = row.getFirstCellNum(); j &lt;= row.getLastCellNum(); j++) &#123; </div><div class="line">		    		<span class="keyword">if</span>(j &lt; <span class="number">0</span>)&#123;</div><div class="line">		    			<span class="keyword">continue</span>;<span class="comment">//增加下标判断</span></div><div class="line">		    		&#125;</div><div class="line">		    		HSSFCell cell = row.getCell(j);  </div><div class="line">		    		<span class="keyword">if</span> (cell == <span class="keyword">null</span>) &#123;  </div><div class="line">			    		  <span class="keyword">continue</span>;  </div><div class="line">			    	&#125;</div><div class="line">		    		content.append(cell.getStringCellValue());</div><div class="line">		    		</div><div class="line">		    	&#125;</div><div class="line">		    &#125;</div><div class="line">		    wb.close();</div><div class="line">		    inp.close();</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			XSSFWorkbook xwb = <span class="keyword">new</span> XSSFWorkbook(file.getAbsolutePath());</div><div class="line">			XSSFSheet sheet = xwb.getSheetAt(<span class="number">0</span>);  </div><div class="line">			<span class="comment">// 定义 row、cell  </span></div><div class="line">			XSSFRow row;  </div><div class="line">			String cell;  </div><div class="line">			<span class="comment">// 循环输出表格中的内容  </span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = sheet.getFirstRowNum(); i &lt; sheet.getPhysicalNumberOfRows(); i++) &#123;  </div><div class="line">			    row = sheet.getRow(i);  </div><div class="line">			    <span class="keyword">if</span>(row == <span class="keyword">null</span>)&#123;</div><div class="line">			    	<span class="keyword">continue</span>;</div><div class="line">			    &#125;</div><div class="line">			    <span class="keyword">for</span> (<span class="keyword">int</span> j = row.getFirstCellNum(); j &lt; row.getPhysicalNumberOfCells(); j++) &#123;  </div><div class="line">			        <span class="comment">// 通过 row.getCell(j).toString() 获取单元格内容，</span></div><div class="line">			    	<span class="keyword">if</span>(j&lt;<span class="number">0</span>)&#123;</div><div class="line">			    		<span class="keyword">continue</span>;</div><div class="line">			    	&#125;</div><div class="line">			    	XSSFCell xfcell = row.getCell(j);</div><div class="line">			    	<span class="keyword">if</span>(xfcell == <span class="keyword">null</span>)&#123;</div><div class="line">			    		<span class="keyword">continue</span>;</div><div class="line">			    	&#125;</div><div class="line">			    	xfcell.setCellType(Cell.CELL_TYPE_STRING);<span class="comment">//数值型的转成文本型</span></div><div class="line">			        cell = xfcell.getStringCellValue();</div><div class="line">			        content.append(cell+<span class="string">" "</span>);</div><div class="line">			    &#125;  </div><div class="line">			&#125;  </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> content.toString();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**讀取word內容</span></div><div class="line">	 * <span class="doctag">@param</span> file</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> OpenXML4JException </div><div class="line">	 * <span class="doctag">@throws</span> XmlException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readDoc</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException, XmlException, OpenXML4JException </span>&#123;</div><div class="line">		String filePath = file.getAbsolutePath();</div><div class="line">		<span class="keyword">if</span>(filePath.endsWith(<span class="string">".doc"</span>))&#123;</div><div class="line">			InputStream is = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">			WordExtractor ex = <span class="keyword">new</span> WordExtractor(is);  </div><div class="line">			String text2003 = ex.getText();  </div><div class="line">			ex.close();</div><div class="line">			is.close();</div><div class="line">			<span class="keyword">return</span> text2003;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			OPCPackage opcPackage = POIXMLDocument.openPackage(filePath);  </div><div class="line">			POIXMLTextExtractor extractor = <span class="keyword">new</span> XWPFWordExtractor(opcPackage);  </div><div class="line">			String text2007 = extractor.getText();  </div><div class="line">			extractor.close();</div><div class="line">			<span class="keyword">return</span> text2007;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**讀取pdf內容</span></div><div class="line">	 * <span class="doctag">@param</span> file</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readPdf</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		PDDocument doc = PDDocument.load(file.getAbsolutePath());</div><div class="line">		PDFTextStripper stripper = <span class="keyword">new</span> PDFTextStripper();</div><div class="line">		String content = stripper.getText(doc);</div><div class="line">		doc.close();</div><div class="line">		<span class="keyword">return</span> content;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="正则查询query构建"><a href="#正则查询query构建" class="headerlink" title="正则查询query构建"></a>正则查询query构建</h2><p>在原有 lucene 查询的工具类的基础上加入正则查询的构建</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**获取regexQuery对象</span></div><div class="line"> * <span class="doctag">@param</span> field</div><div class="line"> * <span class="doctag">@param</span> regex</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getRegexExpQuery</span><span class="params">(String field,String regex)</span></span>&#123;</div><div class="line">	Query query = <span class="keyword">null</span>;</div><div class="line">	Term term = <span class="keyword">new</span> Term(field, regex);</div><div class="line">	query = <span class="keyword">new</span> RegexpQuery(term);</div><div class="line">	<span class="keyword">return</span> query;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终的searchUtil的内容为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.NumericRangeQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.RegexpQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField.Type;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</div><div class="line"><span class="keyword">import</span> com.lucene.index.IndexUtil;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</div><div class="line">	<span class="comment">/**获取IndexSearcher对象（适合单索引目录查询使用）</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath 索引目录</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcher</span><span class="params">(String indexPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">		DirectoryReader reader = DirectoryReader.open(IndexUtil.getIndexWriter(indexPath, <span class="keyword">true</span>), realtime);</div><div class="line">		IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">		<span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">			service.shutdown();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多目录多线程查询</span></div><div class="line">	 * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line">	 * <span class="doctag">@param</span> service 多线程查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service,<span class="keyword">boolean</span> realtime)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</div><div class="line">		MultiReader multiReader;</div><div class="line">		File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">		File[] files = file.listFiles();</div><div class="line">		IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">		<span class="keyword">if</span>(!realtime)&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">				readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">				readers[i] = DirectoryReader.open(IndexUtil.getIndexWriter(files[i].getPath(), <span class="keyword">true</span>), <span class="keyword">true</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line">		<span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</div><div class="line">			service.shutdown();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**从指定配置项中查询</span></div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@param</span> analyzer 分词器</div><div class="line">	 * <span class="doctag">@param</span> field 字段</div><div class="line">	 * <span class="doctag">@param</span> fieldType	字段类型</div><div class="line">	 * <span class="doctag">@param</span> queryStr 查询条件</div><div class="line">	 * <span class="doctag">@param</span> range 是否区间查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String field,String fieldType,String queryStr,<span class="keyword">boolean</span> range)</span></span>&#123;</div><div class="line">		Query q = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(queryStr != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(queryStr))&#123;</div><div class="line">			<span class="keyword">if</span>(range)&#123;</div><div class="line">				String[] strs = queryStr.split(<span class="string">"\\|"</span>);</div><div class="line">				<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">					<span class="keyword">int</span> min = <span class="keyword">new</span> Integer(strs[<span class="number">0</span>]);</div><div class="line">					<span class="keyword">int</span> max = <span class="keyword">new</span> Integer(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newIntRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">					Double min = <span class="keyword">new</span> Double(strs[<span class="number">0</span>]);</div><div class="line">					Double max = <span class="keyword">new</span> Double(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newDoubleRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">					Float min = <span class="keyword">new</span> Float(strs[<span class="number">0</span>]);</div><div class="line">					Float max = <span class="keyword">new</span> Float(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newFloatRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"long"</span>.equals(fieldType))&#123;</div><div class="line">					Long min = <span class="keyword">new</span> Long(strs[<span class="number">0</span>]);</div><div class="line">					Long max = <span class="keyword">new</span> Long(strs[<span class="number">1</span>]);</div><div class="line">					q = NumericRangeQuery.newLongRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">					q = NumericRangeQuery.newIntRange(field, <span class="keyword">new</span> Integer(queryStr), <span class="keyword">new</span> Integer(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">					q = NumericRangeQuery.newDoubleRange(field, <span class="keyword">new</span> Double(queryStr), <span class="keyword">new</span> Double(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">					q = NumericRangeQuery.newFloatRange(field, <span class="keyword">new</span> Float(queryStr), <span class="keyword">new</span> Float(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					Term term = <span class="keyword">new</span> Term(field, queryStr);</div><div class="line">					q = <span class="keyword">new</span> TermQuery(term);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			q= <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(q);</div><div class="line">		<span class="keyword">return</span> q;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**多条件查询类似于sql in</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.SHOULD);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**获取regexQuery对象</span></div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 * <span class="doctag">@param</span> regex</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getRegexExpQuery</span><span class="params">(String field,String regex)</span></span>&#123;</div><div class="line">		Query query = <span class="keyword">null</span>;</div><div class="line">		Term term = <span class="keyword">new</span> Term(field, regex);</div><div class="line">		query = <span class="keyword">new</span> RegexpQuery(term);</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**多条件查询类似于sql and</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.MUST);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**对多个条件进行排序构建排序条件</span></div><div class="line">	 * <span class="doctag">@param</span> fields</div><div class="line">	 * <span class="doctag">@param</span> type</div><div class="line">	 * <span class="doctag">@param</span> reverses</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sort <span class="title">getSortInfo</span><span class="params">(String[] fields,Type[] types,<span class="keyword">boolean</span>[] reverses)</span></span>&#123;</div><div class="line">		SortField[] sortFields = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> fieldLength = fields.length;</div><div class="line">		<span class="keyword">int</span> typeLength = types.length;</div><div class="line">		<span class="keyword">int</span> reverLength = reverses.length;</div><div class="line">		<span class="keyword">if</span>(!(fieldLength == typeLength) || !(fieldLength == reverLength))&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			sortFields = <span class="keyword">new</span> SortField[fields.length];</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</div><div class="line">				sortFields[i] = <span class="keyword">new</span> SortField(fields[i], types[i], reverses[i]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Sort(sortFields);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据查询器、查询条件、每页数、排序条件进行查询</span></div><div class="line">	 * <span class="doctag">@param</span> query 查询条件</div><div class="line">	 * <span class="doctag">@param</span> first 起始值</div><div class="line">	 * <span class="doctag">@param</span> max 最大值</div><div class="line">	 * <span class="doctag">@param</span> sort 排序条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPageAndSortField</span><span class="params">(IndexSearcher searcher,Query query, <span class="keyword">int</span> first,<span class="keyword">int</span> max, Sort sort)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">				System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			TopFieldCollector collector = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">if</span>(sort != <span class="keyword">null</span>)&#123;</div><div class="line">				collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;<span class="keyword">new</span> SortField(<span class="string">"modified"</span>, SortField.Type.LONG)&#125;);</div><div class="line">				collector = TopFieldCollector.create(sort, first+max, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">			&#125;</div><div class="line">			searcher.search(query, collector);</div><div class="line">			<span class="keyword">return</span> collector.topDocs(first, max);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**获取上次索引的id,增量更新使用</span></div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getLastIndexBeanID</span><span class="params">(IndexReader multiReader)</span></span>&#123;</div><div class="line">		Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">		IndexSearcher searcher = <span class="keyword">null</span>;</div><div class="line">		searcher = <span class="keyword">new</span> IndexSearcher(multiReader);</div><div class="line">		SortField sortField = <span class="keyword">new</span> SortField(<span class="string">"id"</span>, SortField.Type.INT,<span class="keyword">true</span>);</div><div class="line">		Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField[]&#123;sortField&#125;);</div><div class="line">		TopDocs docs = getScoreDocsByPerPageAndSortField(searcher,query, <span class="number">0</span>, <span class="number">1</span>, sort);</div><div class="line">		ScoreDoc[] scoreDocs = docs.scoreDocs;</div><div class="line">		<span class="keyword">int</span> total = scoreDocs.length;</div><div class="line">		<span class="keyword">if</span>(total &gt; <span class="number">0</span>)&#123;</div><div class="line">			ScoreDoc scoreDoc = scoreDocs[<span class="number">0</span>];</div><div class="line">			Document doc = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				doc = searcher.doc(scoreDoc.doc);</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Integer(doc.get(<span class="string">"id"</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="正则查询测试"><a href="#正则查询测试" class="headerlink" title="正则查询测试"></a>正则查询测试</h2><p>正则查询测试类，主要是测试是否包含手机号或邮箱号，这里的手机号验证有点粗糙，希望不要介意</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index.test;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			IndexSearcher searcher = SearchUtil.getMultiSearcher(<span class="string">"index"</span>, Executors.newCachedThreadPool(), <span class="keyword">false</span>);</div><div class="line">			Query phoneQuery = SearchUtil.getRegexExpQuery(<span class="string">"content"</span>, <span class="string">"1[0-9]&#123;10&#125;"</span>);</div><div class="line">			Query mailQuery = SearchUtil.getRegexExpQuery(<span class="string">"content"</span>, <span class="string">"([a-z0-9A-Z]+[-_|\\.]?)+[a-z0-9A-Z]*@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]&#123;2,&#125;"</span>);</div><div class="line">			Query finaQuery = SearchUtil.getMultiQueryLikeSqlIn(<span class="keyword">new</span> Query[]&#123;phoneQuery,mailQuery&#125;); </div><div class="line">			TopDocs topDocs = SearchUtil.getScoreDocsByPerPageAndSortField(searcher, finaQuery, <span class="number">0</span>, <span class="number">20</span>, <span class="keyword">null</span>);</div><div class="line">			System.out.println(<span class="string">"符合条件的数据总数："</span>+topDocs.totalHits);</div><div class="line">			System.out.println(<span class="string">"本次查询到的数目为："</span>+topDocs.scoreDocs.length);</div><div class="line">			ScoreDoc[] scoreDocs = topDocs.scoreDocs;</div><div class="line">			<span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</div><div class="line">				Document doc = searcher.doc(scoreDoc.doc);</div><div class="line">				System.out.println(doc.get(<span class="string">"path"</span>)+<span class="string">"    "</span>+doc.get(<span class="string">"content"</span>));</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终测试结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">content:/1[0-9]&#123;10&#125;/</div><div class="line">content:/([a-z0-9A-Z]+[-_|\.]?)+[a-z0-9A-Z]*@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\.)+[a-zA-Z]&#123;2,&#125;/</div><div class="line">符合条件的数据总数：6</div><div class="line">本次查询到的数目为：6</div><div class="line">D:\hadoop\lucene_regexSearch\testDir\2.txt.txt    ﻿电话号码：18519237811</div><div class="line">D:\hadoop\lucene_regexSearch\testDir\3.txt.txt    电子邮箱yinggui_Wu@163.com</div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.docx    邮箱内容yinggui_Wu@163.com</div><div class="line"> </div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.pdf    邮箱内容 yinggui_Wu@163.com </div><div class="line"> </div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.xlsx    1 2 3 18510539956 </div><div class="line">D:\hadoop\lucene_regexSearch\testDir\1.txt.txt    ﻿&lt;a target=_blank href=&quot;mailto:fanyi@qq.com&quot;&gt;fanyi@qq.com&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>代码下载地址</p>
<p><a href="http://download.csdn.net/detail/wuyinggui10000/8746407" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8746407</a></p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之facet查询原理和facet查询实例]]></title>
      <url>/2019/03/16/Lucene/14%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8Bfacet%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86%E5%92%8Cfacet%E6%9F%A5%E8%AF%A2%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="lucene（14）—lucene搜索之facet查询原理和facet查询实例"><a href="#lucene（14）—lucene搜索之facet查询原理和facet查询实例" class="headerlink" title="lucene（14）—lucene搜索之facet查询原理和facet查询实例"></a>lucene（14）—lucene搜索之facet查询原理和facet查询实例</h1><h2 id="Facet说明"><a href="#Facet说明" class="headerlink" title="Facet说明"></a>Facet说明</h2><p>我们在浏览网站的时候，经常会遇到按某一类条件查询的情况，这种情况尤以电商网站最多，以天猫商城为例，我们选择某一个品牌，系统会将该品牌对应的商品展示出来，效果图如下：</p>
<a id="more"></a>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316105905-628459.jpg" alt=""></p>
<p>如上图，我们关注的是品牌，选购热点等方面，对于类似的功能我们用lucene的term查询当然可以，但是在数据量特别大的情况下还用普通查询来实现显然会因为FSDirectory.open等耗时的操作造成查询效率的低下，同时普通查询是全部document都扫描一遍，这样显然造成了查询效率低；</p>
<p>lucene提供了facet查询用于对同一类的document进行聚类化，这样在查询的时候先关注某一个方面，这种显然缩小了查询范围，进而提升了查询效率；</p>
<p>facet模块提供了多个用于处理facet的统计和值处理的方法；</p>
<p>要实现facet的功能，我们需要了解facetField,FacetField定义了dim和此field对应的path,需要特别注意的是我们在做facetField索引的时候，需要事先调用FacetsConfig.build(Document);</p>
<p>FacetField的indexOptions设置为了DOCS_AND_FREQS_AND_POSITIONS的,即既索引又统计出现的频次和出现的位置，这样做主要是为了方便查询和统计；</p>
<p>相应的在存储的时候我们需要利用FacetsConfig和DirectoryTaxonomyWriter；</p>
<p>DirectoryTaxonomyWriter用来利用Directory来存储Taxono信息到硬盘；</p>
<p>DirectoryTaxonomyWriter的构造器如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DirectoryTaxonomyWriter</span><span class="params">(Directory directory, OpenMode openMode,</span></span></div><div class="line">      TaxonomyWriterCache cache) <span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    dir = directory;</div><div class="line">    IndexWriterConfig config = createIndexWriterConfig(openMode);</div><div class="line">    indexWriter = openIndexWriter(dir, config);</div><div class="line"> </div><div class="line">    <span class="comment">// verify (to some extent) that merge policy in effect would preserve category docids </span></div><div class="line">    <span class="keyword">assert</span> !(indexWriter.getConfig().getMergePolicy() <span class="keyword">instanceof</span> TieredMergePolicy) : </div><div class="line">      <span class="string">"for preserving category docids, merging none-adjacent segments is not allowed"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// after we opened the writer, and the index is locked, it's safe to check</span></div><div class="line">    <span class="comment">// the commit data and read the index epoch</span></div><div class="line">    openMode = config.getOpenMode();</div><div class="line">    <span class="keyword">if</span> (!DirectoryReader.indexExists(directory)) &#123;</div><div class="line">      indexEpoch = <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      String epochStr = <span class="keyword">null</span>;</div><div class="line">      Map&lt;String, String&gt; commitData = readCommitData(directory);</div><div class="line">      <span class="keyword">if</span> (commitData != <span class="keyword">null</span>) &#123;</div><div class="line">        epochStr = commitData.get(INDEX_EPOCH);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// no commit data, or no epoch in it means an old taxonomy, so set its epoch to 1, for lack</span></div><div class="line">      <span class="comment">// of a better value.</span></div><div class="line">      indexEpoch = epochStr == <span class="keyword">null</span> ? <span class="number">1</span> : Long.parseLong(epochStr, <span class="number">16</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (openMode == OpenMode.CREATE) &#123;</div><div class="line">      ++indexEpoch;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    FieldType ft = <span class="keyword">new</span> FieldType(TextField.TYPE_NOT_STORED);</div><div class="line">    ft.setOmitNorms(<span class="keyword">true</span>);</div><div class="line">    parentStreamField = <span class="keyword">new</span> Field(Consts.FIELD_PAYLOADS, parentStream, ft);</div><div class="line">    fullPathField = <span class="keyword">new</span> StringField(Consts.FULL, <span class="string">""</span>, Field.Store.YES);</div><div class="line"> </div><div class="line">    nextID = indexWriter.maxDoc();</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</div><div class="line">      cache = defaultTaxonomyWriterCache();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.cache = cache;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (nextID == <span class="number">0</span>) &#123;</div><div class="line">      cacheIsComplete = <span class="keyword">true</span>;</div><div class="line">      <span class="comment">// Make sure that the taxonomy always contain the root category</span></div><div class="line">      <span class="comment">// with category id 0.</span></div><div class="line">      addCategory(<span class="keyword">new</span> FacetLabel());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// There are some categories on the disk, which we have not yet</span></div><div class="line">      <span class="comment">// read into the cache, and therefore the cache is incomplete.</span></div><div class="line">      <span class="comment">// We choose not to read all the categories into the cache now,</span></div><div class="line">      <span class="comment">// to avoid terrible performance when a taxonomy index is opened</span></div><div class="line">      <span class="comment">// to add just a single category. We will do it later, after we</span></div><div class="line">      <span class="comment">// notice a few cache misses.</span></div><div class="line">      cacheIsComplete = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>由上述代码可知，DirectoryTaxonomyWriter先打开一个IndexWriter,在确保indexWriter打开和locked的前提下，读取directory对应的segments中需要提交的内容，如果读取到的内容为空，说明是上次的内容，设置indexEpoch为1，接着对cache进行设置；判断directory中是否还包含有document，如果有设置cacheIsComplete为false,反之为true;</p>
<p>时候不早了，今天先写到这里，明天会在此基础上补充，大家见谅</p>
<h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><p>我对之前的读取文件夹内容的做了个facet索引的例子</p>
<p>对BaseIndex修改了facet的设置，相关代码如下 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetResult;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.Facets;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.FastTaxonomyFacetCounts;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexOptions;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.RAMDirectory;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.search.SearchUtil;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseIndex</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 父级索引路径</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> String parentIndexPath;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 索引编写器</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> IndexWriter writer;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> subIndex;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 主线程</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch1;  </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *工作线程 </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch2; </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 对象列表</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> List&lt;T&gt; list;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * facet查询</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> String facet;</div><div class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> FacetsConfig config = <span class="keyword">new</span> FacetsConfig();  </div><div class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> String indexPath = <span class="string">"index1"</span>;</div><div class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> DirectoryTaxonomyWriter taxoWriter;</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Directory directory = FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">			taxoWriter = <span class="keyword">new</span> DirectoryTaxonomyWriter(directory);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"BaseIndex initializing error"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(IndexWriter writer,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">			List&lt;T&gt; list, String facet)&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.writer = writer;</div><div class="line">		<span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line">		<span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">		<span class="keyword">this</span>.facet = facet;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String parentIndexPath, <span class="keyword">int</span> subIndex,</span></span></div><div class="line">			CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</div><div class="line">			List&lt;T&gt; list) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.parentIndexPath = parentIndexPath;</div><div class="line">		<span class="keyword">this</span>.subIndex = subIndex;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//多目录索引创建</span></div><div class="line">			File file = <span class="keyword">new</span> File(parentIndexPath+<span class="string">"/index"</span>+subIndex);</div><div class="line">			<span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">				file.mkdir();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(parentIndexPath+<span class="string">"/index"</span>+subIndex, <span class="keyword">true</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">this</span>.subIndex = subIndex;</div><div class="line">		<span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line">		<span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseIndex</span><span class="params">(String path,CountDownLatch countDownLatch1, CountDownLatch countDownLatch2,</span></span></div><div class="line">			List&lt;T&gt; list) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//单目录索引创建</span></div><div class="line">			File file = <span class="keyword">new</span> File(path);</div><div class="line">			<span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">				file.mkdir();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.writer = IndexUtil.getIndexWriter(path,<span class="keyword">true</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">this</span>.countDownLatch1 = countDownLatch1;</div><div class="line">		<span class="keyword">this</span>.countDownLatch2 = countDownLatch2;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**创建索引</span></div><div class="line">	 * <span class="doctag">@param</span> writer</div><div class="line">	 * <span class="doctag">@param</span> carSource</div><div class="line">	 * <span class="doctag">@param</span> create</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> ParseException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer,T t)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	<span class="comment">/**批量索引创建</span></div><div class="line">	 * <span class="doctag">@param</span> writer</div><div class="line">	 * <span class="doctag">@param</span> t</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDocs</span><span class="params">(IndexWriter writer,List&lt;T&gt; t)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">for</span> (T t2 : t) &#123;</div><div class="line">			indexDoc(writer,t2);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**带group的索引创建</span></div><div class="line">	 * <span class="doctag">@param</span> writer</div><div class="line">	 * <span class="doctag">@param</span> docs</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDocsWithGroup</span><span class="params">(IndexWriter writer,String groupFieldName,String groupFieldValue,List&lt;Document&gt; docs)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		 Field groupEndField = <span class="keyword">new</span> Field(groupFieldName, groupFieldValue, Field.Store.NO, Field.Index.NOT_ANALYZED);</div><div class="line">		 docs.get(docs.size()-<span class="number">1</span>).add(groupEndField);</div><div class="line">		 <span class="comment">//</span></div><div class="line">		 writer.updateDocuments(<span class="keyword">new</span> Term(groupFieldName, groupFieldValue),docs);</div><div class="line">		 writer.commit();</div><div class="line">		 writer.close();</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			countDownLatch1.await();</div><div class="line">			System.out.println(writer);</div><div class="line">			indexDocs(writer,list);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			countDownLatch2.countDown();</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				writer.commit();</div><div class="line">				writer.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相应得，document的索引需要利用DirectoryTaxonomyWriter来进行原有document的处理 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.index;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.LongField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.bean.FileBean;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBeanIndex</span> <span class="keyword">extends</span> <span class="title">BaseIndex</span>&lt;<span class="title">FileBean</span>&gt;</span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String facet;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileBeanIndex</span><span class="params">(IndexWriter writer, CountDownLatch countDownLatch12, CountDownLatch countDownLatch1,</span></span></div><div class="line">			List&lt;FileBean&gt; fileBeans, String facet1) &#123;</div><div class="line">		<span class="keyword">super</span>(writer, countDownLatch12, countDownLatch1, fileBeans, facet);</div><div class="line">		facet = facet1;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDoc</span><span class="params">(IndexWriter writer, FileBean t)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Document doc = <span class="keyword">new</span> Document();</div><div class="line">		String path = t.getPath();</div><div class="line">		System.out.println(t.getPath());</div><div class="line">		doc.add(<span class="keyword">new</span> StringField(<span class="string">"path"</span>, path, Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> LongField(<span class="string">"modified"</span>, t.getModified(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, t.getContent(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> FacetField(<span class="string">"filePath"</span>, <span class="keyword">new</span> String[]&#123;facet&#125;));</div><div class="line">		<span class="comment">//doc = config.build(taxoWriter,doc);</span></div><div class="line">		<span class="keyword">if</span> (writer.getConfig().getOpenMode() == IndexWriterConfig.OpenMode.CREATE)&#123;</div><div class="line">	        <span class="comment">//writer.addDocument(doc);</span></div><div class="line">			writer.addDocument(<span class="keyword">this</span>.config.build(taxoWriter, doc));</div><div class="line">	    &#125;<span class="keyword">else</span>&#123;</div><div class="line">	    	writer.updateDocument(<span class="keyword">new</span> Term(<span class="string">"path"</span>, t.getPath()), <span class="keyword">this</span>.config.build(taxoWriter, doc));</div><div class="line">	    &#125;</div><div class="line">		taxoWriter.commit();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试facet功能的测试类： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetResult;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.Facets;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.FacetsConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.LabelAndValue;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.FastTaxonomyFacetCounts;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.TaxonomyReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearchFacet</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Directory directory;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Directory taxoDirectory;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> TaxonomyReader taxoReader;</div><div class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> FacetsConfig config = <span class="keyword">new</span> FacetsConfig();</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			directory = FSDirectory.open(Paths.get(<span class="string">"index"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">			taxoDirectory = FSDirectory.open(Paths.get(<span class="string">"index1"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">			taxoReader = <span class="keyword">new</span> DirectoryTaxonomyReader(taxoDirectory);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSearchFacet</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			DirectoryReader indexReader = DirectoryReader.open(directory);</div><div class="line">			IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(indexReader);</div><div class="line">			FacetsCollector fc = <span class="keyword">new</span> FacetsCollector();</div><div class="line">			FacetsCollector.search(searcher, <span class="keyword">new</span> MatchAllDocsQuery(), indexReader.maxDoc(), fc);  </div><div class="line">			Facets facets = <span class="keyword">new</span> FastTaxonomyFacetCounts(taxoReader, config, fc);</div><div class="line">			List&lt;FacetResult&gt; results =facets.getAllDims(<span class="number">100</span>);</div><div class="line">			<span class="keyword">for</span> (FacetResult facetResult : results) &#123;</div><div class="line">				System.out.println(facetResult.dim);</div><div class="line">				LabelAndValue[] values = facetResult.labelValues;</div><div class="line">				<span class="keyword">for</span> (LabelAndValue labelAndValue : values) &#123;</div><div class="line">					System.out.println(<span class="string">"\t"</span>+labelAndValue.label +<span class="string">"       "</span>+labelAndValue.value);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			indexReader.close();</div><div class="line">			taxoReader.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		testSearchFacet();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相关代码下载</p>
<p><a href="http://download.csdn.net/detail/wuyinggui10000/8738651" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8738651</a></p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具]]></title>
      <url>/2019/03/16/Lucene/13%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h1 id="lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具"><a href="#lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具" class="headerlink" title="lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具"></a>lucene（13）—lucene搜索之自定义排序的实现原理和编写自己的自定义排序工具</h1><h2 id="自定义排序说明"><a href="#自定义排序说明" class="headerlink" title="自定义排序说明"></a>自定义排序说明</h2><p>我们在做lucene搜索的时候，可能会需要排序功能，虽然lucene内置了多种类型的排序，但是如果在需要先进行某些值的运算然后在排序的时候就有点显得<a href="https://www.baidu.com/s?wd=%E6%97%A0%E8%83%BD%E4%B8%BA%E5%8A%9B&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">无能为力</a>了；</p>
<a id="more"></a>
<p>要做自定义查询，我们就要研究lucene已经实现的排序功能，lucene的所有排序都是要继承FieldComparator,然后重写内部实现，这里以IntComparator为例子来查看其实现；</p>
<h2 id="IntComparator相关实现"><a href="#IntComparator相关实现" class="headerlink" title="IntComparator相关实现"></a>IntComparator相关实现</h2><p>其类的声明为 public static class IntComparator extends NumericComparator<integer>,这里说明IntComparator接收的是Integer类型的参数，即只处理IntField的排序；</integer></p>
<p>IntComparator声明的参数为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] values;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bottom;                           <span class="comment">// Value of bottom of queue</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> topValue;</div></pre></td></tr></table></figure>
<p>查看copy方法可知</p>
<ul>
<li>values随着类初始化而初始化其长度</li>
<li>values用于存储NumericDocValues中读取到的内容</li>
</ul>
<p>具体实现如下：</p>
<p>values的初始化</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">     * Creates a new comparator based on &#123;<span class="doctag">@link</span> Integer#compare&#125; for &#123;<span class="doctag">@code</span> numHits&#125;.</div><div class="line">     * When a document has no value for the field, &#123;<span class="doctag">@code</span> missingValue&#125; is substituted. </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntComparator</span><span class="params">(<span class="keyword">int</span> numHits, String field, Integer missingValue)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>(field, missingValue);</div><div class="line">      values = <span class="keyword">new</span> <span class="keyword">int</span>[numHits];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>values值填充(此为IntComparator的处理方式)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> slot, <span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> v2 = (<span class="keyword">int</span>) currentReaderValues.get(doc);</div><div class="line">     <span class="comment">// Test for v2 == 0 to save Bits.get method call for</span></div><div class="line">     <span class="comment">// the common case (doc has value and value is non-zero):</span></div><div class="line">     <span class="keyword">if</span> (docsWithField != <span class="keyword">null</span> &amp;&amp; v2 == <span class="number">0</span> &amp;&amp; !docsWithField.get(doc)) &#123;</div><div class="line">       v2 = missingValue;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     values[slot] = v2;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这些实现都是类似的，我们的应用实现自定义排序的时候需要做的是对binaryDocValues或NumericDocValues的值进行计算，然后实现FieldComparator内部方法，对应IntComparator就是如上的值copy操作；</p>
<p>然后我们需要实现compareTop、compareBottom和compare，IntComparator的实现为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> slot1, <span class="keyword">int</span> slot2)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> Integer.compare(values[slot1], values[slot2]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareBottom</span><span class="params">(<span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> v2 = (<span class="keyword">int</span>) currentReaderValues.get(doc);</div><div class="line">  <span class="comment">// Test for v2 == 0 to save Bits.get method call for</span></div><div class="line">  <span class="comment">// the common case (doc has value and value is non-zero):</span></div><div class="line">  <span class="keyword">if</span> (docsWithField != <span class="keyword">null</span> &amp;&amp; v2 == <span class="number">0</span> &amp;&amp; !docsWithField.get(doc)) &#123;</div><div class="line">    v2 = missingValue;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> Integer.compare(bottom, v2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTop</span><span class="params">(<span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> docValue = (<span class="keyword">int</span>) currentReaderValues.get(doc);</div><div class="line">      <span class="comment">// Test for docValue == 0 to save Bits.get method call for</span></div><div class="line">      <span class="comment">// the common case (doc has value and value is non-zero):</span></div><div class="line">      <span class="keyword">if</span> (docsWithField != <span class="keyword">null</span> &amp;&amp; docValue == <span class="number">0</span> &amp;&amp; !docsWithField.get(doc)) &#123;</div><div class="line">        docValue = missingValue;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> Integer.compare(topValue, docValue);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="实现自己的FieldComparator"><a href="#实现自己的FieldComparator" class="headerlink" title="实现自己的FieldComparator"></a>实现自己的FieldComparator</h2><p>要实现FieldComparator，需要对接收参数进行处理，定义处理值的集合，同时定义BinaryDocValues和接收的参数等，这里我写了一个通用的比较器，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.BinaryDocValues;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DocValues;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.LeafReaderContext;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SimpleFieldComparator;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.util.ObjectUtil;</div><div class="line"> </div><div class="line"><span class="comment">/**自定义comparator</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfDefineComparator</span> <span class="keyword">extends</span> <span class="title">SimpleFieldComparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object[] values;<span class="comment">//定义的Object[]，同IntComparator</span></div><div class="line">	<span class="keyword">private</span> Object bottom;</div><div class="line">	<span class="keyword">private</span> Object top;</div><div class="line">	<span class="keyword">private</span> String field;</div><div class="line">	<span class="keyword">private</span> BinaryDocValues binaryDocValues;<span class="comment">//接收的BinaryDocValues,同IntComparator中的NumericDocValues</span></div><div class="line">	<span class="keyword">private</span> ObjectUtil objectUtil;<span class="comment">//这里为了便于拓展用接口代替抽象类</span></div><div class="line">	<span class="keyword">private</span> Object[] params;<span class="comment">//接收的参数</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SelfDefineComparator</span><span class="params">(String field, <span class="keyword">int</span> numHits, Object[] params,ObjectUtil objectUtil)</span> </span>&#123;  </div><div class="line">		values = <span class="keyword">new</span> Object[numHits];</div><div class="line">		<span class="keyword">this</span>.objectUtil = objectUtil;</div><div class="line">		<span class="keyword">this</span>.field = field;</div><div class="line">		<span class="keyword">this</span>.params = params;  </div><div class="line">	&#125;  </div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBottom</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.bottom = values[slot];</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareBottom</span><span class="params">(<span class="keyword">int</span> doc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		Object distance = getValues(doc);</div><div class="line">		<span class="keyword">return</span> (bottom.toString()).compareTo(distance.toString());</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTop</span><span class="params">(<span class="keyword">int</span> doc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		Object distance = getValues(doc);</div><div class="line">		<span class="keyword">return</span> objectUtil.compareTo(top,distance);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> slot, <span class="keyword">int</span> doc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		values[slot] = getValues(doc);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> Object <span class="title">getValues</span><span class="params">(<span class="keyword">int</span> doc)</span> </span>&#123;</div><div class="line">		Object instance = objectUtil.getValues(doc,params,binaryDocValues) ;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSetNextReader</span><span class="params">(LeafReaderContext context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException &#123;</div><div class="line">		binaryDocValues = DocValues.getBinary(context.reader(), field);<span class="comment">//context.reader().getBinaryDocValues(field);</span></div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> slot1, <span class="keyword">int</span> slot2)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> objectUtil.compareTo(values[slot1],values[slot2]);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTopValue</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.top = value;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> values[slot].toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中ObjectUtil是一个接口，定义了值处理的过程，最终是要服务于comparator的compare方法的，同时对comparator的内部compare方法进行了定义</p>
<p>ObjectUtil接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.BinaryDocValues;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObjectUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**自定义的获取处理值的方法</span></div><div class="line">	 * <span class="doctag">@param</span> doc </div><div class="line">	 * <span class="doctag">@param</span> params </div><div class="line">	 * <span class="doctag">@param</span> binaryDocValues </div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">getValues</span><span class="params">(<span class="keyword">int</span> doc, Object[] params, BinaryDocValues binaryDocValues)</span> </span>;</div><div class="line"> </div><div class="line">	<span class="comment">/**compare比较器实现</span></div><div class="line">	 * <span class="doctag">@param</span> object</div><div class="line">	 * <span class="doctag">@param</span> object2</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object object, Object object2)</span></span>;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们不仅要提供比较器和comparator，同时还要提供接收用户输入的FiledComparatorSource </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.FieldComparator;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.FieldComparatorSource;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.util.ObjectUtil;</div><div class="line"> </div><div class="line"><span class="comment">/**comparator用于接收用户原始输入，继承自FieldComparatorSource实现了自定义comparator的构建</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfDefineComparatorSource</span> <span class="keyword">extends</span> <span class="title">FieldComparatorSource</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object[] params;<span class="comment">//接收的参数</span></div><div class="line">	<span class="keyword">private</span> ObjectUtil objectUtil;<span class="comment">//这里为了便于拓展用接口代替抽象类</span></div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Object[] getParams() &#123;</div><div class="line">		<span class="keyword">return</span> params;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Object[] params)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.params = params;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> ObjectUtil <span class="title">getObjectUtil</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> objectUtil;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectUtil</span><span class="params">(ObjectUtil objectUtil)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.objectUtil = objectUtil;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SelfDefineComparatorSource</span><span class="params">(Object[] params, ObjectUtil objectUtil)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.params = params;</div><div class="line">		<span class="keyword">this</span>.objectUtil = objectUtil;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> FieldComparator&lt;?&gt; newComparator(String fieldname, <span class="keyword">int</span> numHits,</div><div class="line">			<span class="keyword">int</span> sortPos, <span class="keyword">boolean</span> reversed) <span class="keyword">throws</span> IOException &#123;</div><div class="line">		<span class="comment">//实际比较由SelfDefineComparator实现</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SelfDefineComparator(fieldname, numHits, params, objectUtil);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相关测试程序，这里我们<a href="https://www.baidu.com/s?wd=%E6%A8%A1%E6%8B%9F&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">模拟</a>一个StringComparator，对String值进行排序 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.BinaryDocValuesField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopFieldDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.RAMDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.lucene.util.CustomerUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.util.ObjectUtil;</div><div class="line"><span class="keyword">import</span> com.lucene.util.StringComparaUtil;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> 吴莹桂</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		RAMDirectory directory = <span class="keyword">new</span> RAMDirectory();  </div><div class="line">		Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">		IndexWriterConfig indexWriterConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">		indexWriterConfig.setOpenMode(OpenMode.CREATE_OR_APPEND);</div><div class="line">		IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, indexWriterConfig);</div><div class="line">        addDocument(indexWriter, <span class="string">"B"</span>);  </div><div class="line">        addDocument(indexWriter, <span class="string">"D"</span>);  </div><div class="line">        addDocument(indexWriter, <span class="string">"A"</span>);  </div><div class="line">        addDocument(indexWriter, <span class="string">"E"</span>);  </div><div class="line">        indexWriter.commit();</div><div class="line">        indexWriter.close();  </div><div class="line">        IndexReader reader = DirectoryReader.open(directory);</div><div class="line">        IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);  </div><div class="line">        Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">        ObjectUtil util = <span class="keyword">new</span> StringComparaUtil();</div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField(<span class="string">"name"</span>,<span class="keyword">new</span> SelfDefineComparatorSource(<span class="keyword">new</span> Object[]&#123;&#125;,util),<span class="keyword">true</span>));  </div><div class="line">        TopDocs topDocs = searcher.search(query, Integer.MAX_VALUE, sort);</div><div class="line">        ScoreDoc[] docs = topDocs.scoreDocs;</div><div class="line">        <span class="keyword">for</span>(ScoreDoc doc : docs)&#123;</div><div class="line">            Document document = searcher.doc(doc.doc);  </div><div class="line">            System.out.println(document.get(<span class="string">"name"</span>));</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDocument</span><span class="params">(IndexWriter writer,String name)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        Document document = <span class="keyword">new</span> Document();  </div><div class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"name"</span>,name,Field.Store.YES));  </div><div class="line">        document.add(<span class="keyword">new</span> BinaryDocValuesField(<span class="string">"name"</span>, <span class="keyword">new</span> BytesRef(name.getBytes())));  </div><div class="line">        writer.addDocument(document);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其对应的ObjectUtil实现如下： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.BinaryDocValues;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringComparaUtil</span> <span class="keyword">implements</span> <span class="title">ObjectUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getValues</span><span class="params">(<span class="keyword">int</span> doc, Object[] params,</span></span></div><div class="line">			BinaryDocValues binaryDocValues) &#123;</div><div class="line">		BytesRef bytesRef = binaryDocValues.get(doc);</div><div class="line">		String value = bytesRef.utf8ToString();</div><div class="line">		<span class="keyword">return</span> value;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object object, Object object2)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> object.toString().compareTo(object2.toString());</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之分组处理group查询]]></title>
      <url>/2019/03/16/Lucene/12%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E5%88%86%E7%BB%84%E5%A4%84%E7%90%86group%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h1 id="lucene（12）—lucene搜索之分组处理group查询"><a href="#lucene（12）—lucene搜索之分组处理group查询" class="headerlink" title="lucene（12）—lucene搜索之分组处理group查询"></a>lucene（12）—lucene搜索之分组处理group查询</h1><h2 id="grouping介绍"><a href="#grouping介绍" class="headerlink" title="grouping介绍"></a>grouping介绍</h2><p>我们在做lucene搜索的时候，可能会用到对某个条件的数据进行统计，比如统计有多少个省份，在sql查询中我们可以用distinct来完成类似的功能，也可以用group by来对查询的列进行分组查询。在lucene中我们实现类似的功能怎么做呢，比较费时的做法时我们查询出所有的结果，然后对结果里边的省份对应的field查询出来，往set里边放，显然这种做法效率低，不可取；lucene为了解决上述问题，提供了用于分组操作的模块group，group主要用户处理不同lucene中含有某个相同field值的不同document的分组统计。</p>
<a id="more"></a>
<p>Grouping可以接收如下参数：</p>
<ul>
<li>groupField：要分组的字段；比如我们对省份（province）进行分组，要传入对应的值为province，要注意的是如果groupField在document中不存在，会返回一个null的分组；</li>
<li>groupSort：分组是怎么排序的，排序字段决定了分组内容展示的先后顺序；</li>
<li>topNGroups：分组展示的数量，只计算0到topNGroup条记录；</li>
<li>groupOffset：从第几个TopGroup开始算起，举例来说groupOffset为3的话，会展示从3到topNGroup对应的记录，此数值我们可以用于分页查询；</li>
<li>withinGroupSort：每组内怎么排序；</li>
<li>maxDocsPerGroup：每组处理多少个document；</li>
<li>withinGroupOffset：每组显示的document初始位置；</li>
</ul>
<p>group的实现需要两步：</p>
<ul>
<li>第一步：利用TermFirstPassGroupingCollector来收集top groups；</li>
<li>第二步：用<code>TermSecondPassGroupingCollector处理每个group对应的documents</code></li>
</ul>
<p><code>group模块定义了group和group的采集方式；所有的grouping colletor,所有的grouping collector都是抽象类并且提供了基于term的实现；</code></p>
<p><code>实现group的前提：</code></p>
<ul>
<li><code>要group的field必须是必须是SortedDocValuesField类型的；</code></li>
<li><code>solr尽管也提供了grouping by的相关方法实现，但是对group的抽象实现还是由该模块实现；</code></li>
<li><code>暂不支持sharding,我们需要自己提供groups和每个group的documents的合并</code></li>
</ul>
<h2 id="group示例"><a href="#group示例" class="headerlink" title="group示例"></a>group示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.grouping.GroupDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.grouping.GroupingSearch;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.grouping.TopGroups;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupSearchTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		GroupingSearch groupingSearch = <span class="keyword">new</span> GroupingSearch(<span class="string">"province"</span>);</div><div class="line">		SortField sortField = <span class="keyword">new</span> SortField(<span class="string">"city"</span>, SortField.Type.STRING_VAL);</div><div class="line">		Sort sort = <span class="keyword">new</span> Sort(sortField);</div><div class="line">		groupingSearch.setGroupSort(sort);</div><div class="line">		groupingSearch.setFillSortFields(<span class="keyword">true</span>);</div><div class="line">		groupingSearch.setCachingInMB(<span class="number">4.0</span>, <span class="keyword">true</span>);</div><div class="line">		groupingSearch.setAllGroups(<span class="keyword">true</span>);</div><div class="line">		IndexSearcher searcher;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			searcher = SearchUtil.getIndexSearcherByIndexPath(<span class="string">"index"</span>, <span class="keyword">null</span>);</div><div class="line">			Query query = <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			TopGroups&lt;BytesRef&gt; result = groupingSearch.search(searcher,query, <span class="number">0</span>, searcher.getIndexReader().maxDoc());</div><div class="line">			<span class="comment">// Render groupsResult...</span></div><div class="line">			GroupDocs&lt;BytesRef&gt;[] docs = result.groups;</div><div class="line">			<span class="keyword">for</span> (GroupDocs&lt;BytesRef&gt; groupDocs : docs) &#123;</div><div class="line">				System.out.println(<span class="keyword">new</span> String(groupDocs.groupValue.bytes));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">int</span> totalGroupCount = result.totalGroupCount;</div><div class="line">			System.out.println(totalGroupCount);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"> </div><div class="line">		</div><div class="line"> </div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用BlockGroupingCollector</p>
<p>我们有时候想要在索引的时候就将group字段存入以方便search，我们可以在确保docs被索引的前提下，先查询出来每个要group的term对应的documents,然后在最后的document插入一个标记分组的field,我们可以如此做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**带group的索引创建</span></div><div class="line">  * <span class="doctag">@param</span> writer</div><div class="line">  * <span class="doctag">@param</span> docs</div><div class="line">  * <span class="doctag">@throws</span> IOException </div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexDocsWithGroup</span><span class="params">(IndexWriter writer,String groupFieldName,String groupFieldValue,List&lt;Document&gt; docs)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">   Field groupEndField = <span class="keyword">new</span> Field(groupFieldName, groupFieldValue, Field.Store.NO, Field.Index.NOT_ANALYZED);</div><div class="line">   docs.get(docs.size()-<span class="number">1</span>).add(groupEndField);</div><div class="line">   writer.updateDocuments(<span class="keyword">new</span> Term(groupFieldName, groupFieldValue),docs);</div><div class="line">   writer.commit();</div><div class="line">   writer.close();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在分组查询的时候，我们可以 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**group查询，适用于对group字段已经进行分段索引的情况</span></div><div class="line">  * <span class="doctag">@param</span> searcher</div><div class="line">  * <span class="doctag">@param</span> groupEndQuery</div><div class="line">  * <span class="doctag">@param</span> query</div><div class="line">  * <span class="doctag">@param</span> sort</div><div class="line">  * <span class="doctag">@param</span> withinGroupSort</div><div class="line">  * <span class="doctag">@param</span> groupOffset</div><div class="line">  * <span class="doctag">@param</span> topNGroups</div><div class="line">  * <span class="doctag">@param</span> needsScores</div><div class="line">  * <span class="doctag">@param</span> docOffset</div><div class="line">  * <span class="doctag">@param</span> docsPerGroup</div><div class="line">  * <span class="doctag">@param</span> fillFields</div><div class="line">  * <span class="doctag">@return</span></div><div class="line">  * <span class="doctag">@throws</span> IOException</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopGroups&lt;BytesRef&gt; <span class="title">getTopGroupsByGroupTerm</span><span class="params">(IndexSearcher searcher,Query groupEndQuery,Query query,Sort sort,Sort withinGroupSort,<span class="keyword">int</span> groupOffset,<span class="keyword">int</span> topNGroups,<span class="keyword">boolean</span> needsScores,<span class="keyword">int</span> docOffset,<span class="keyword">int</span> docsPerGroup,<span class="keyword">boolean</span> fillFields)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">  Filter groupEndDocs = <span class="keyword">new</span> CachingWrapperFilter(<span class="keyword">new</span> QueryWrapperFilter(groupEndQuery));</div><div class="line">  BlockGroupingCollector c = <span class="keyword">new</span> BlockGroupingCollector(sort, groupOffset+topNGroups, needsScores, groupEndDocs);</div><div class="line">  searcher.search(query, c);</div><div class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">  TopGroups&lt;BytesRef&gt; groupsResult = (TopGroups&lt;BytesRef&gt;) c.getTopGroups(withinGroupSort, groupOffset, docOffset, docOffset+docsPerGroup, fillFields);</div><div class="line">  <span class="keyword">return</span> groupsResult;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>我们也可以直接进行group的查询，此为通用的实现</p>
<h2 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> query</div><div class="line">	 * <span class="doctag">@param</span> groupFieldName</div><div class="line">	 * <span class="doctag">@param</span> sort</div><div class="line">	 * <span class="doctag">@param</span> maxCacheRAMMB</div><div class="line">	 * <span class="doctag">@param</span> page</div><div class="line">	 * <span class="doctag">@param</span> perPage</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopGroups&lt;BytesRef&gt; <span class="title">getTopGroups</span><span class="params">(IndexSearcher searcher,Query query,String groupFieldName,Sort sort,<span class="keyword">double</span> maxCacheRAMMB,<span class="keyword">int</span> page,<span class="keyword">int</span> perPage)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		GroupingSearch groupingSearch = <span class="keyword">new</span> GroupingSearch(groupFieldName);</div><div class="line">		groupingSearch.setGroupSort(sort);</div><div class="line">		groupingSearch.setFillSortFields(<span class="keyword">true</span>);</div><div class="line">		groupingSearch.setCachingInMB(maxCacheRAMMB, <span class="keyword">true</span>);</div><div class="line">		groupingSearch.setAllGroups(<span class="keyword">true</span>);</div><div class="line">		TopGroups&lt;BytesRef&gt; result = groupingSearch.search(searcher,query, (page-<span class="number">1</span>)*perPage, page*perPage);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>以下是查询的工具类</p>
<h2 id="查询工具类"><a href="#查询工具类" class="headerlink" title="查询工具类"></a>查询工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.ParseException;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.QueryParser;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.CachingWrapperFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Filter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.NumericRangeQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.QueryWrapperFilter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Sort;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.SortField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.grouping.BlockGroupingCollector;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.grouping.GroupDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.grouping.GroupingSearch;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.grouping.TopGroups;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.Highlighter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.InvalidTokenOffsetsException;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.QueryScorer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.SimpleFragmenter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.SimpleHTMLFormatter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="comment">/**lucene索引查询工具类</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line">	<span class="comment">/**获取IndexSearcher对象</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByParentPath</span><span class="params">(String parentPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		MultiReader reader = <span class="keyword">null</span>;</div><div class="line">		<span class="comment">//设置</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File[] files = <span class="keyword">new</span> File(parentPath).listFiles();</div><div class="line">			IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">				readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">			&#125;</div><div class="line">			reader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**多目录多线程查询</span></div><div class="line">	 * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line">	 * <span class="doctag">@param</span> service 多线程查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">		File[] files = file.listFiles();</div><div class="line">		IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">			readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">		&#125;</div><div class="line">		MultiReader multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据索引路径获取IndexReader</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DirectoryReader <span class="title">getIndexReader</span><span class="params">(String indexPath)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> DirectoryReader.open(FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据索引路径获取IndexSearcher</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByIndexPath</span><span class="params">(String indexPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		IndexReader reader = getIndexReader(indexPath);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**如果索引目录会有变更用此方法获取新的IndexSearcher这种方式会占用较少的资源</span></div><div class="line">	 * <span class="doctag">@param</span> oldSearcher</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherOpenIfChanged</span><span class="params">(IndexSearcher oldSearcher,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		DirectoryReader reader = (DirectoryReader) oldSearcher.getIndexReader();</div><div class="line">		DirectoryReader newReader = DirectoryReader.openIfChanged(reader);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(newReader, service);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多条件查询类似于sql in</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.SHOULD);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多条件查询类似于sql and</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.MUST);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**从指定配置项中查询</span></div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@param</span> analyzer 分词器</div><div class="line">	 * <span class="doctag">@param</span> field 字段</div><div class="line">	 * <span class="doctag">@param</span> fieldType	字段类型</div><div class="line">	 * <span class="doctag">@param</span> queryStr 查询条件</div><div class="line">	 * <span class="doctag">@param</span> range 是否区间查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String field,String fieldType,String queryStr,<span class="keyword">boolean</span> range)</span></span>&#123;</div><div class="line">		Query q = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(queryStr != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(queryStr))&#123;</div><div class="line">				<span class="keyword">if</span>(range)&#123;</div><div class="line">					String[] strs = queryStr.split(<span class="string">"\\|"</span>);</div><div class="line">					<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">						<span class="keyword">int</span> min = <span class="keyword">new</span> Integer(strs[<span class="number">0</span>]);</div><div class="line">						<span class="keyword">int</span> max = <span class="keyword">new</span> Integer(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newIntRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">						Double min = <span class="keyword">new</span> Double(strs[<span class="number">0</span>]);</div><div class="line">						Double max = <span class="keyword">new</span> Double(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newDoubleRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">						Float min = <span class="keyword">new</span> Float(strs[<span class="number">0</span>]);</div><div class="line">						Float max = <span class="keyword">new</span> Float(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newFloatRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"long"</span>.equals(fieldType))&#123;</div><div class="line">						Long min = <span class="keyword">new</span> Long(strs[<span class="number">0</span>]);</div><div class="line">						Long max = <span class="keyword">new</span> Long(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newLongRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">						q = NumericRangeQuery.newIntRange(field, <span class="keyword">new</span> Integer(queryStr), <span class="keyword">new</span> Integer(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">						q = NumericRangeQuery.newDoubleRange(field, <span class="keyword">new</span> Double(queryStr), <span class="keyword">new</span> Double(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">						q = NumericRangeQuery.newFloatRange(field, <span class="keyword">new</span> Float(queryStr), <span class="keyword">new</span> Float(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">						q = <span class="keyword">new</span> QueryParser(field, analyzer).parse(queryStr);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				q= <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			System.out.println(q);</div><div class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> q;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据field和值获取对应的内容</span></div><div class="line">	 * <span class="doctag">@param</span> fieldName</div><div class="line">	 * <span class="doctag">@param</span> fieldValue</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String fieldName,Object fieldValue)</span></span>&#123;</div><div class="line">		Term term = <span class="keyword">new</span> Term(fieldName, <span class="keyword">new</span> BytesRef(fieldValue.toString()));</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> TermQuery(term);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据IndexSearcher和docID获取默认的document</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> docID</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDefaultFullDocument</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.doc(docID);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据IndexSearcher和docID</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> docID</div><div class="line">	 * <span class="doctag">@param</span> listField</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocumentByListField</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID,Set&lt;String&gt; listField)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.doc(docID, listField);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**分页查询</span></div><div class="line">	 * <span class="doctag">@param</span> page 当前页数</div><div class="line">	 * <span class="doctag">@param</span> perPage 每页显示条数</div><div class="line">	 * <span class="doctag">@param</span> searcher searcher查询器</div><div class="line">	 * <span class="doctag">@param</span> query 查询条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPage</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> perPage,IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		TopDocs result = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">			System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		ScoreDoc before = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(page != <span class="number">1</span>)&#123;</div><div class="line">			TopDocs docsBefore = searcher.search(query, (page-<span class="number">1</span>)*perPage);</div><div class="line">			ScoreDoc[] scoreDocs = docsBefore.scoreDocs;</div><div class="line">			<span class="keyword">if</span>(scoreDocs.length &gt; <span class="number">0</span>)&#123;</div><div class="line">				before = scoreDocs[scoreDocs.length - <span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		result = searcher.searchAfter(before, query, perPage);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocs</span><span class="params">(IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		TopDocs docs = searcher.search(query, getMaxDocId(searcher));</div><div class="line">		<span class="keyword">return</span> docs;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**高亮显示字段</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 * <span class="doctag">@param</span> keyword</div><div class="line">	 * <span class="doctag">@param</span> preTag</div><div class="line">	 * <span class="doctag">@param</span> postTag</div><div class="line">	 * <span class="doctag">@param</span> fragmentSize</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> InvalidTokenOffsetsException </div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String[] highlighter(IndexSearcher searcher,String field,String keyword,String preTag, String postTag,<span class="keyword">int</span> fragmentSize) <span class="keyword">throws</span> IOException, InvalidTokenOffsetsException&#123;</div><div class="line">		Term term = <span class="keyword">new</span> Term(<span class="string">"content"</span>,<span class="keyword">new</span> BytesRef(<span class="string">"lucene"</span>));</div><div class="line">        TermQuery termQuery = <span class="keyword">new</span> TermQuery(term);</div><div class="line">        TopDocs docs = getScoreDocs(searcher, termQuery);</div><div class="line">        ScoreDoc[] hits = docs.scoreDocs;</div><div class="line">        QueryScorer scorer = <span class="keyword">new</span> QueryScorer(termQuery);</div><div class="line">        SimpleHTMLFormatter simpleHtmlFormatter = <span class="keyword">new</span> SimpleHTMLFormatter(preTag,postTag);<span class="comment">//设定高亮显示的格式&lt;B&gt;keyword&lt;/B&gt;,此为默认的格式  </span></div><div class="line">        Highlighter highlighter = <span class="keyword">new</span> Highlighter(simpleHtmlFormatter,scorer);   </div><div class="line">        highlighter.setTextFragmenter(<span class="keyword">new</span> SimpleFragmenter(fragmentSize));<span class="comment">//设置每次返回的字符数</span></div><div class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">        String[] result = <span class="keyword">new</span> String[hits.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length ; i++) &#123;</div><div class="line">			Document doc = searcher.doc(hits[i].doc);</div><div class="line">			result[i] = highlighter.getBestFragment(analyzer, field, doc.get(field));</div><div class="line">		&#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**统计document的数量,此方法等同于matchAllDocsQuery查询</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxDocId</span><span class="params">(IndexSearcher searcher)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.getIndexReader().maxDoc();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**group查询，适用于对group字段已经进行分段索引的情况</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> groupEndQuery</div><div class="line">	 * <span class="doctag">@param</span> query</div><div class="line">	 * <span class="doctag">@param</span> sort</div><div class="line">	 * <span class="doctag">@param</span> withinGroupSort</div><div class="line">	 * <span class="doctag">@param</span> groupOffset</div><div class="line">	 * <span class="doctag">@param</span> topNGroups</div><div class="line">	 * <span class="doctag">@param</span> needsScores</div><div class="line">	 * <span class="doctag">@param</span> docOffset</div><div class="line">	 * <span class="doctag">@param</span> docsPerGroup</div><div class="line">	 * <span class="doctag">@param</span> fillFields</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopGroups&lt;BytesRef&gt; <span class="title">getTopGroupsByGroupTerm</span><span class="params">(IndexSearcher searcher,Query groupEndQuery,Query query,Sort sort,Sort withinGroupSort,<span class="keyword">int</span> groupOffset,<span class="keyword">int</span> topNGroups,<span class="keyword">boolean</span> needsScores,<span class="keyword">int</span> docOffset,<span class="keyword">int</span> docsPerGroup,<span class="keyword">boolean</span> fillFields)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">		Filter groupEndDocs = <span class="keyword">new</span> CachingWrapperFilter(<span class="keyword">new</span> QueryWrapperFilter(groupEndQuery));</div><div class="line">		BlockGroupingCollector c = <span class="keyword">new</span> BlockGroupingCollector(sort, groupOffset+topNGroups, needsScores, groupEndDocs);</div><div class="line">		searcher.search(query, c);</div><div class="line">		<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">		TopGroups&lt;BytesRef&gt; groupsResult = (TopGroups&lt;BytesRef&gt;) c.getTopGroups(withinGroupSort, groupOffset, docOffset, docOffset+docsPerGroup, fillFields);</div><div class="line">		<span class="keyword">return</span> groupsResult;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**通用的进行group查询</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> query</div><div class="line">	 * <span class="doctag">@param</span> groupFieldName</div><div class="line">	 * <span class="doctag">@param</span> sort</div><div class="line">	 * <span class="doctag">@param</span> maxCacheRAMMB</div><div class="line">	 * <span class="doctag">@param</span> page</div><div class="line">	 * <span class="doctag">@param</span> perPage</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopGroups&lt;BytesRef&gt; <span class="title">getTopGroups</span><span class="params">(IndexSearcher searcher,Query query,String groupFieldName,Sort sort,<span class="keyword">double</span> maxCacheRAMMB,<span class="keyword">int</span> page,<span class="keyword">int</span> perPage)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		GroupingSearch groupingSearch = <span class="keyword">new</span> GroupingSearch(groupFieldName);</div><div class="line">		groupingSearch.setGroupSort(sort);</div><div class="line">		groupingSearch.setFillSortFields(<span class="keyword">true</span>);</div><div class="line">		groupingSearch.setCachingInMB(maxCacheRAMMB, <span class="keyword">true</span>);</div><div class="line">		groupingSearch.setAllGroups(<span class="keyword">true</span>);</div><div class="line">		TopGroups&lt;BytesRef&gt; result = groupingSearch.search(searcher,query, (page-<span class="number">1</span>)*perPage, page*perPage);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之高亮显示highlighter]]></title>
      <url>/2019/03/16/Lucene/11%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BAhighlighter/</url>
      <content type="html"><![CDATA[<h1 id="lucene（11）—lucene搜索之高亮显示highlighter"><a href="#lucene（11）—lucene搜索之高亮显示highlighter" class="headerlink" title="lucene（11）—lucene搜索之高亮显示highlighter"></a>lucene（11）—lucene搜索之高亮显示highlighter</h1><h2 id="highlighter介绍"><a href="#highlighter介绍" class="headerlink" title="highlighter介绍"></a>highlighter介绍</h2><p>我们在做查询的时候，希望对我们自己的搜索结果与搜索内容相近的地方进行着重显示，就如下面的效果 </p>
<a id="more"></a>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316105445-84938.jpg" alt=""></p>
<p>这里我们搜索的内容是“区块”，搜索引擎展示的结果中对用户的输入信息进行了配色方面的处理，这种区分正常文本和输入内容的效果即是高亮显示；</p>
<p>这样做的好处：</p>
<p>视觉上让人便于查找有搜索对应的文本块；<br>界面展示更友好；<br>lucene提供了highlighter插件来体现类似的效果；</p>
<p>highlighter对查询关键字高亮处理；</p>
<p>highlighter包包含了用于处理结果页查询内容高亮显示的功能，其中Highlighter类highlighter包的核心组件，借助Fragmenter, fragment Scorer, 和Formatter等类来支持用户自定义高亮展示的功能；</p>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p>这里边我利用了之前的做的目录文件索引</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.StringReader;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.Highlighter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.InvalidTokenOffsetsException;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.QueryScorer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.SimpleFragmenter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.SimpleHTMLFormatter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighlighterTest</span> </span>&#123;</div><div class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		IndexSearcher searcher;</div><div class="line">		TopDocs docs; </div><div class="line">		ExecutorService service = Executors.newCachedThreadPool();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			searcher = SearchUtil.getMultiSearcher(<span class="string">"index"</span>, service);</div><div class="line">	        Term term = <span class="keyword">new</span> Term(<span class="string">"content"</span>,<span class="keyword">new</span> BytesRef(<span class="string">"lucene"</span>));</div><div class="line">	        TermQuery termQuery = <span class="keyword">new</span> TermQuery(term);</div><div class="line">	        docs = SearchUtil.getScoreDocsByPerPage(<span class="number">1</span>, <span class="number">30</span>, searcher, termQuery);</div><div class="line">			ScoreDoc[] hits = docs.scoreDocs;</div><div class="line">	        QueryScorer scorer = <span class="keyword">new</span> QueryScorer(termQuery);</div><div class="line">	        SimpleHTMLFormatter simpleHtmlFormatter = <span class="keyword">new</span> SimpleHTMLFormatter(<span class="string">"&lt;B&gt;"</span>,<span class="string">"&lt;/B&gt;"</span>);<span class="comment">//设定高亮显示的格式&lt;B&gt;keyword&lt;/B&gt;,此为默认的格式  </span></div><div class="line">	        Highlighter highlighter = <span class="keyword">new</span> Highlighter(simpleHtmlFormatter,scorer);   </div><div class="line">	        highlighter.setTextFragmenter(<span class="keyword">new</span> SimpleFragmenter(<span class="number">20</span>));<span class="comment">//设置每次返回的字符数</span></div><div class="line">	        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hits.length;i++)&#123;   </div><div class="line">	            Document doc = searcher.doc(hits[i].doc);   </div><div class="line">	            String str = highlighter.getBestFragment(analyzer, <span class="string">"content"</span>, doc.get(<span class="string">"content"</span>)) ;</div><div class="line">	            System.out.println(str);   </div><div class="line">	        &#125;   </div><div class="line"> </div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InvalidTokenOffsetsException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			service.shutdown();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>lucene的highlighter高亮展示的原理：</p>
<p>根据Formatter和Scorer创建highlighter对象，formatter定义了高亮的显示方式，而scorer定义了高亮的评分；</p>
<p>评分的算法是先根据term的评分值获取对应的document的权重，在此基础上对文本的内容进行轮询,获取对应的文本出现的次数，和它在term对应的文本中出现的位置（便于高亮处理），评分并分词的算法为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTokenScore</span><span class="params">()</span> </span>&#123;</div><div class="line">    position += posIncAtt.getPositionIncrement();<span class="comment">//记录出现的位置</span></div><div class="line">    String termText = termAtt.toString();</div><div class="line"> </div><div class="line">    WeightedSpanTerm weightedSpanTerm;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> ((weightedSpanTerm = fieldWeightedSpanTerms.get(</div><div class="line">              termText)) == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (weightedSpanTerm.positionSensitive &amp;&amp;</div><div class="line">          !weightedSpanTerm.checkPosition(position)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">float</span> score = weightedSpanTerm.getWeight();<span class="comment">//获取权重</span></div><div class="line"> </div><div class="line">    <span class="comment">// found a query term - is it unique in this doc?</span></div><div class="line">    <span class="keyword">if</span> (!foundTerms.contains(termText)) &#123;<span class="comment">//结果排重处理</span></div><div class="line">      totalScore += score;</div><div class="line">      foundTerms.add(termText);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> score;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>formatter的原理为：对搜索的文本进行判断，如果scorer获取的totalScore不小于0，即查询内容在对应的term中存在，则按照格式拼接成preTag+查询内容+postTag的格式</p>
<p>详细算法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">highlightTerm</span><span class="params">(String originalText, TokenGroup tokenGroup)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tokenGroup.getTotalScore() &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> originalText;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// Allocate StringBuilder with the right number of characters from the</span></div><div class="line">    <span class="comment">// beginning, to avoid char[] allocations in the middle of appends.</span></div><div class="line">    StringBuilder returnBuffer = <span class="keyword">new</span> StringBuilder(preTag.length() + originalText.length() + postTag.length());</div><div class="line">    returnBuffer.append(preTag);</div><div class="line">    returnBuffer.append(originalText);</div><div class="line">    returnBuffer.append(postTag);</div><div class="line">    <span class="keyword">return</span> returnBuffer.toString();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其默认格式为“<b></b>”的形式；</p>
<p>Highlighter根据scorer和formatter，对document进行分析，查询结果调用getBestTextFragments,TokenStream tokenStream,String text,boolean mergeContiguousFragments,int maxNumFragments)，其过程为<br>scorer首先初始化查询内容对应的出现位置的下标，然后对tokenstream添加PositionIncrementAttribute，此类记录单词出现的位置；<br>对文本内容进行轮询，判断查询的文本长度是否超出限制，如果超出文本长度提示过长内容；<br>如果获取到指定的文本，先对单次查询的内容进行内容的截取（截取值根据setTextFragmenter指定的值决定），再调用formatter的highlightTerm方法对文本进行重新构建<br>在本次轮询和下次单词出现之前对文本内容进行处理</p>
<h2 id="查询工具类"><a href="#查询工具类" class="headerlink" title="查询工具类"></a>查询工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.search.util;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.MultiReader;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.ParseException;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.QueryParser;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.NumericRangeQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.Highlighter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.InvalidTokenOffsetsException;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.QueryScorer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.SimpleFragmenter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.SimpleHTMLFormatter;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="comment">/**lucene索引查询工具类</span></div><div class="line"> * <span class="doctag">@author</span> lenovo</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchUtil</span> </span>&#123;</div><div class="line">	<span class="comment">/**获取IndexSearcher对象</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByParentPath</span><span class="params">(String parentPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		MultiReader reader = <span class="keyword">null</span>;</div><div class="line">		<span class="comment">//设置</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File[] files = <span class="keyword">new</span> File(parentPath).listFiles();</div><div class="line">			IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">				readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">			&#125;</div><div class="line">			reader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**多目录多线程查询</span></div><div class="line">	 * <span class="doctag">@param</span> parentPath 父级索引目录</div><div class="line">	 * <span class="doctag">@param</span> service 多线程查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getMultiSearcher</span><span class="params">(String parentPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(parentPath);</div><div class="line">		File[] files = file.listFiles();</div><div class="line">		IndexReader[] readers = <span class="keyword">new</span> IndexReader[files.length];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; files.length ; i ++) &#123;</div><div class="line">			readers[i] = DirectoryReader.open(FSDirectory.open(Paths.get(files[i].getPath(), <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">		&#125;</div><div class="line">		MultiReader multiReader = <span class="keyword">new</span> MultiReader(readers);</div><div class="line">		IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(multiReader,service);</div><div class="line">		<span class="keyword">return</span> searcher;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据索引路径获取IndexReader</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DirectoryReader <span class="title">getIndexReader</span><span class="params">(String indexPath)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> DirectoryReader.open(FSDirectory.open(Paths.get(indexPath, <span class="keyword">new</span> String[<span class="number">0</span>])));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据索引路径获取IndexSearcher</span></div><div class="line">	 * <span class="doctag">@param</span> indexPath</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherByIndexPath</span><span class="params">(String indexPath,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		IndexReader reader = getIndexReader(indexPath);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(reader,service);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**如果索引目录会有变更用此方法获取新的IndexSearcher这种方式会占用较少的资源</span></div><div class="line">	 * <span class="doctag">@param</span> oldSearcher</div><div class="line">	 * <span class="doctag">@param</span> service</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcherOpenIfChanged</span><span class="params">(IndexSearcher oldSearcher,ExecutorService service)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		DirectoryReader reader = (DirectoryReader) oldSearcher.getIndexReader();</div><div class="line">		DirectoryReader newReader = DirectoryReader.openIfChanged(reader);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IndexSearcher(newReader, service);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多条件查询类似于sql in</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlIn</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.SHOULD);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**多条件查询类似于sql and</span></div><div class="line">	 * <span class="doctag">@param</span> querys</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getMultiQueryLikeSqlAnd</span><span class="params">(Query ... querys)</span></span>&#123;</div><div class="line">		BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</div><div class="line">		<span class="keyword">for</span> (Query subQuery : querys) &#123;</div><div class="line">			query.add(subQuery,Occur.MUST);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> query;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**从指定配置项中查询</span></div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@param</span> analyzer 分词器</div><div class="line">	 * <span class="doctag">@param</span> field 字段</div><div class="line">	 * <span class="doctag">@param</span> fieldType	字段类型</div><div class="line">	 * <span class="doctag">@param</span> queryStr 查询条件</div><div class="line">	 * <span class="doctag">@param</span> range 是否区间查询</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String field,String fieldType,String queryStr,<span class="keyword">boolean</span> range)</span></span>&#123;</div><div class="line">		Query q = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(queryStr != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(queryStr))&#123;</div><div class="line">				<span class="keyword">if</span>(range)&#123;</div><div class="line">					String[] strs = queryStr.split(<span class="string">"\\|"</span>);</div><div class="line">					<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">						<span class="keyword">int</span> min = <span class="keyword">new</span> Integer(strs[<span class="number">0</span>]);</div><div class="line">						<span class="keyword">int</span> max = <span class="keyword">new</span> Integer(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newIntRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">						Double min = <span class="keyword">new</span> Double(strs[<span class="number">0</span>]);</div><div class="line">						Double max = <span class="keyword">new</span> Double(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newDoubleRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">						Float min = <span class="keyword">new</span> Float(strs[<span class="number">0</span>]);</div><div class="line">						Float max = <span class="keyword">new</span> Float(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newFloatRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"long"</span>.equals(fieldType))&#123;</div><div class="line">						Long min = <span class="keyword">new</span> Long(strs[<span class="number">0</span>]);</div><div class="line">						Long max = <span class="keyword">new</span> Long(strs[<span class="number">1</span>]);</div><div class="line">						q = NumericRangeQuery.newLongRange(field, min, max, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					<span class="keyword">if</span>(<span class="string">"int"</span>.equals(fieldType))&#123;</div><div class="line">						q = NumericRangeQuery.newIntRange(field, <span class="keyword">new</span> Integer(queryStr), <span class="keyword">new</span> Integer(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"double"</span>.equals(fieldType))&#123;</div><div class="line">						q = NumericRangeQuery.newDoubleRange(field, <span class="keyword">new</span> Double(queryStr), <span class="keyword">new</span> Double(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"float"</span>.equals(fieldType))&#123;</div><div class="line">						q = NumericRangeQuery.newFloatRange(field, <span class="keyword">new</span> Float(queryStr), <span class="keyword">new</span> Float(queryStr), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">						q = <span class="keyword">new</span> QueryParser(field, analyzer).parse(queryStr);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				q= <span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			System.out.println(q);</div><div class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> q;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据field和值获取对应的内容</span></div><div class="line">	 * <span class="doctag">@param</span> fieldName</div><div class="line">	 * <span class="doctag">@param</span> fieldValue</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">getQuery</span><span class="params">(String fieldName,Object fieldValue)</span></span>&#123;</div><div class="line">		Term term = <span class="keyword">new</span> Term(fieldName, <span class="keyword">new</span> BytesRef(fieldValue.toString()));</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> TermQuery(term);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据IndexSearcher和docID获取默认的document</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> docID</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDefaultFullDocument</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.doc(docID);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**根据IndexSearcher和docID</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> docID</div><div class="line">	 * <span class="doctag">@param</span> listField</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocumentByListField</span><span class="params">(IndexSearcher searcher,<span class="keyword">int</span> docID,Set&lt;String&gt; listField)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.doc(docID, listField);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**分页查询</span></div><div class="line">	 * <span class="doctag">@param</span> page 当前页数</div><div class="line">	 * <span class="doctag">@param</span> perPage 每页显示条数</div><div class="line">	 * <span class="doctag">@param</span> searcher searcher查询器</div><div class="line">	 * <span class="doctag">@param</span> query 查询条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocsByPerPage</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> perPage,IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		TopDocs result = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(query == <span class="keyword">null</span>)&#123;</div><div class="line">			System.out.println(<span class="string">" Query is null return null "</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		ScoreDoc before = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(page != <span class="number">1</span>)&#123;</div><div class="line">			TopDocs docsBefore = searcher.search(query, (page-<span class="number">1</span>)*perPage);</div><div class="line">			ScoreDoc[] scoreDocs = docsBefore.scoreDocs;</div><div class="line">			<span class="keyword">if</span>(scoreDocs.length &gt; <span class="number">0</span>)&#123;</div><div class="line">				before = scoreDocs[scoreDocs.length - <span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		result = searcher.searchAfter(before, query, perPage);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopDocs <span class="title">getScoreDocs</span><span class="params">(IndexSearcher searcher,Query query)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		TopDocs docs = searcher.search(query, getMaxDocId(searcher));</div><div class="line">		<span class="keyword">return</span> docs;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**高亮显示字段</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 * <span class="doctag">@param</span> keyword</div><div class="line">	 * <span class="doctag">@param</span> preTag</div><div class="line">	 * <span class="doctag">@param</span> postTag</div><div class="line">	 * <span class="doctag">@param</span> fragmentSize</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> InvalidTokenOffsetsException </div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String[] highlighter(IndexSearcher searcher,String field,String keyword,String preTag, String postTag,<span class="keyword">int</span> fragmentSize) <span class="keyword">throws</span> IOException, InvalidTokenOffsetsException&#123;</div><div class="line">		Term term = <span class="keyword">new</span> Term(<span class="string">"content"</span>,<span class="keyword">new</span> BytesRef(<span class="string">"lucene"</span>));</div><div class="line">        TermQuery termQuery = <span class="keyword">new</span> TermQuery(term);</div><div class="line">        TopDocs docs = getScoreDocs(searcher, termQuery);</div><div class="line">        ScoreDoc[] hits = docs.scoreDocs;</div><div class="line">        QueryScorer scorer = <span class="keyword">new</span> QueryScorer(termQuery);</div><div class="line">        SimpleHTMLFormatter simpleHtmlFormatter = <span class="keyword">new</span> SimpleHTMLFormatter(preTag,postTag);<span class="comment">//设定高亮显示的格式&lt;B&gt;keyword&lt;/B&gt;,此为默认的格式  </span></div><div class="line">        Highlighter highlighter = <span class="keyword">new</span> Highlighter(simpleHtmlFormatter,scorer);   </div><div class="line">        highlighter.setTextFragmenter(<span class="keyword">new</span> SimpleFragmenter(fragmentSize));<span class="comment">//设置每次返回的字符数</span></div><div class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">        String[] result = <span class="keyword">new</span> String[hits.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length ; i++) &#123;</div><div class="line">			Document doc = searcher.doc(hits[i].doc);</div><div class="line">			result[i] = highlighter.getBestFragment(analyzer, field, doc.get(field));</div><div class="line">		&#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**统计document的数量,此方法等同于matchAllDocsQuery查询</span></div><div class="line">	 * <span class="doctag">@param</span> searcher</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxDocId</span><span class="params">(IndexSearcher searcher)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> searcher.getIndexReader().maxDoc();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h2><p><a href="http://download.csdn.net/detail/wuyinggui10000/8726407" target="_blank" rel="external">http://download.csdn.net/detail/wuyinggui10000/8726407</a></p>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lucene搜索之联想词提示之suggest原理和应用]]></title>
      <url>/2019/03/16/Lucene/10%E3%80%81lucene%E6%90%9C%E7%B4%A2%E4%B9%8B%E8%81%94%E6%83%B3%E8%AF%8D%E6%8F%90%E7%A4%BA%E4%B9%8Bsuggest%E5%8E%9F%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="lucene（10）—lucene搜索之联想词提示之suggest原理和应用"><a href="#lucene（10）—lucene搜索之联想词提示之suggest原理和应用" class="headerlink" title="lucene（10）—lucene搜索之联想词提示之suggest原理和应用"></a>lucene（10）—lucene搜索之联想词提示之suggest原理和应用</h1><p>昨天了解了suggest包中的spell相关的内容，主要是拼写检查和相似度查询提示；</p>
<p>今天准备了解下关于<a href="https://www.baidu.com/s?wd=%E8%81%94%E6%83%B3&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="external">联想</a>词的内容，lucene的联想词是在org.apache.lucene.search.suggest包下边，提供了自动补全或者联想提示功能的支持；</p>
<a id="more"></a>
<h2 id="InputIterator说明"><a href="#InputIterator说明" class="headerlink" title="InputIterator说明"></a>InputIterator说明</h2><p>InputIterator是一个支持枚举term,weight,payload三元组的供suggester使用的接口，目前仅支持AnalyzingSuggester,<code>FuzzySuggester</code> and<code>AnalyzingInfixSuggester</code> 三种suggester支持payloads；</p>
<p>InputIterator的实现类有以下几种：</p>
<p>BufferedInputIterator：对二进制类型的输入进行轮询；</p>
<p>DocumentInputIterator：从索引中被store的field中轮询；</p>
<p>FileIterator：从文件中每次读出单行的数据轮询，以\t进行间隔（且\t的个数最多为2个）；</p>
<p>HighFrequencyIterator：从索引中被store的field轮询，忽略长度小于设定值的文本；</p>
<p>InputIteratorWrapper：遍历BytesRefIterator并且返回的内容不包含payload且weight均为1；</p>
<p>SortedInputIterator：二进制类型的输入轮询且按照指定的comparator算法进行排序；</p>
<p>InputIterator提供的方法如下：</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316105126-405944.jpg" alt=""></p>
<p>weight():此方法设置某个term的权重，设置的越高suggest的优先级越高；</p>
<p>payload():每个suggestion对应的元数据的二进制表示，我们在传输对象的时候需要转换对象或对象的某个属性为BytesRef类型，相应的suggester调用lookup的时候会返回payloads信息；</p>
<p>hasPayload()：判断iterator是否有payloads；</p>
<p>contexts():获取某个term的contexts,用来过滤suggest的内容，如果suggest的列表为空，返回null</p>
<p>hasContexts():获取iterator是否有contexts;</p>
<h2 id="Suggester查询工具Lookup类说明"><a href="#Suggester查询工具Lookup类说明" class="headerlink" title="Suggester查询工具Lookup类说明"></a>Suggester查询工具Lookup类说明</h2><p>此类提供了字符串的联想查询功能</p>
<p>Lookup类提供了一个CharSequenceComparator，此comparator主要是用来对CharSequence进行排序，按字符顺序排序；</p>
<p>内置LookupResult，用于返回suggest的结果，同时也是按照CharSequenceComparator进行key的排序；</p>
<p>内置了LookupPriorityQueue，用以存储LookupResult;</p>
<h3 id="LookUp提供的方法"><a href="#LookUp提供的方法" class="headerlink" title="LookUp提供的方法"></a>LookUp提供的方法</h3><p>build(Dictionary dict)  ： 从指定directory进行build;</p>
<p>load(InputStream input) ： 将InputStream转成DataInput并执行load(DataInput)方法；</p>
<p>store(OutputStream output) ： 将OutputStream转成DataOutput并执行store(DataOutput)方法；</p>
<p>getCount() ： 获取lookup的build的项的数量；</p>
<p>build(InputIterator inputIterator) ： 根据指定的InputIterator构建Lookup对象；</p>
<p>lookup(CharSequence key, boolean onlyMorePopular, int num) ：根据key查询可能的结果返回值为List<lookupresult>;</lookupresult></p>
<p>Lookup的相关实现如下：</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316105240-25342.jpg" alt=""></p>
<h2 id="编写自己的suggest模块"><a href="#编写自己的suggest模块" class="headerlink" title="编写自己的suggest模块"></a>编写自己的suggest模块</h2><p>注意：在suggest的时候我们需要导入lucene-misc-5.1.0.jar否则系统会提示类SortedMergePolicy没有找到；</p>
<p>首先我们定义自己的实体类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.suggest;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String image;</div><div class="line">	<span class="keyword">private</span> String[] regions;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> numberSold;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String name, String image, String[] regions, <span class="keyword">int</span> numberSold)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">		<span class="keyword">this</span>.regions = regions;</div><div class="line">		<span class="keyword">this</span>.numberSold = numberSold;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="keyword">public</span> String[] getRegions() &#123;</div><div class="line">		<span class="keyword">return</span> regions;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegions</span><span class="params">(String[] regions)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.regions = regions;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberSold</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> numberSold;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumberSold</span><span class="params">(<span class="keyword">int</span> numberSold)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.numberSold = numberSold;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后定义InputIterator这里定义消费者是List<object>，并对list进行遍历放入payload中：</object></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.suggest;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.suggest.InputIterator;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductIterator</span> <span class="keyword">implements</span> <span class="title">InputIterator</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Iterator&lt;Product&gt; productIterator;</div><div class="line">    <span class="keyword">private</span> Product currentProduct;</div><div class="line"> </div><div class="line">    ProductIterator(Iterator&lt;Product&gt; productIterator) &#123;</div><div class="line">        <span class="keyword">this</span>.productIterator = productIterator;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasContexts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否有设置payload信息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPayloads</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Comparator&lt;BytesRef&gt; <span class="title">getComparator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> BytesRef <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (productIterator.hasNext()) &#123;</div><div class="line">            currentProduct = productIterator.next();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BytesRef(currentProduct.getName().getBytes(<span class="string">"UTF8"</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Couldn't convert to UTF-8"</span>,e);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> BytesRef <span class="title">payload</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(bos);</div><div class="line">            out.writeObject(currentProduct);</div><div class="line">            out.close();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BytesRef(bos.toByteArray());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Well that's unfortunate."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;BytesRef&gt; <span class="title">contexts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Set&lt;BytesRef&gt; regions = <span class="keyword">new</span> HashSet&lt;BytesRef&gt;();</div><div class="line">            <span class="keyword">for</span> (String region : currentProduct.getRegions()) &#123;</div><div class="line">                regions.add(<span class="keyword">new</span> BytesRef(region.getBytes(<span class="string">"UTF8"</span>)));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> regions;</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Couldn't convert to UTF-8"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> currentProduct.getNumberSold();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 编写测试类 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lucene.suggest;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.suggest.Lookup.LookupResult;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.util.BytesRef;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuggestProducts</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookup</span><span class="params">(AnalyzingInfixSuggester suggester, String name,</span></span></div><div class="line">			String region) <span class="keyword">throws</span> IOException &#123;</div><div class="line">		HashSet&lt;BytesRef&gt; contexts = <span class="keyword">new</span> HashSet&lt;BytesRef&gt;();</div><div class="line">		contexts.add(<span class="keyword">new</span> BytesRef(region.getBytes(<span class="string">"UTF8"</span>)));</div><div class="line">		List&lt;LookupResult&gt; results = suggester.lookup(name, contexts, <span class="number">2</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">		System.out.println(<span class="string">"-- \""</span> + name + <span class="string">"\" ("</span> + region + <span class="string">"):"</span>);</div><div class="line">		<span class="keyword">for</span> (LookupResult result : results) &#123;</div><div class="line">			System.out.println(result.key);</div><div class="line">			BytesRef bytesRef = result.payload;</div><div class="line">			ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(bytesRef.bytes));</div><div class="line">			Product product = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				product = (Product)is.readObject();</div><div class="line">			&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"product-Name:"</span> + product.getName());</div><div class="line">			System.out.println(<span class="string">"product-regions:"</span> + product.getRegions());</div><div class="line">			System.out.println(<span class="string">"product-image:"</span> + product.getImage());</div><div class="line">			System.out.println(<span class="string">"product-numberSold:"</span> + product.getNumberSold());</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Directory indexDir = FSDirectory.open(Paths.get(<span class="string">"suggestPath"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]));</div><div class="line">			StandardAnalyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">			AnalyzingInfixSuggester suggester = <span class="keyword">new</span> AnalyzingInfixSuggester(indexDir, analyzer);</div><div class="line">			ArrayList&lt;Product&gt; products = <span class="keyword">new</span> ArrayList&lt;Product&gt;();</div><div class="line">			products.add(<span class="keyword">new</span> Product(<span class="string">"Electric Guitar"</span>,</div><div class="line">					<span class="string">"http://images.example/electric-guitar.jpg"</span>, <span class="keyword">new</span> String[] &#123;</div><div class="line">							<span class="string">"US"</span>, <span class="string">"CA"</span> &#125;, <span class="number">100</span>));</div><div class="line">			products.add(<span class="keyword">new</span> Product(<span class="string">"Electric Train"</span>,</div><div class="line">					<span class="string">"http://images.example/train.jpg"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"US"</span>,</div><div class="line">							<span class="string">"CA"</span> &#125;, <span class="number">100</span>));</div><div class="line">			products.add(<span class="keyword">new</span> Product(<span class="string">"Acoustic Guitar"</span>,</div><div class="line">					<span class="string">"http://images.example/acoustic-guitar.jpg"</span>, <span class="keyword">new</span> String[] &#123;</div><div class="line">							<span class="string">"US"</span>, <span class="string">"ZA"</span> &#125;, <span class="number">80</span>));</div><div class="line">			products.add(<span class="keyword">new</span> Product(<span class="string">"Guarana Soda"</span>,</div><div class="line">					<span class="string">"http://images.example/soda.jpg"</span>,</div><div class="line">					<span class="keyword">new</span> String[] &#123; <span class="string">"ZA"</span>, <span class="string">"IE"</span> &#125;, <span class="number">130</span>));</div><div class="line"> </div><div class="line">			suggester.build(<span class="keyword">new</span> ProductIterator(products.iterator()));</div><div class="line"> </div><div class="line">			lookup(suggester, <span class="string">"Gu"</span>, <span class="string">"US"</span>);</div><div class="line">			lookup(suggester, <span class="string">"Gu"</span>, <span class="string">"ZA"</span>);</div><div class="line">			lookup(suggester, <span class="string">"Gui"</span>, <span class="string">"CA"</span>);</div><div class="line">			lookup(suggester, <span class="string">"Electric guit"</span>, <span class="string">"US"</span>);</div><div class="line">			suggester.refresh();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.err.println(<span class="string">"Error!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> lucene </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lucene </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第2章程序设计语言基础知识]]></title>
      <url>/2019/03/15/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/%E7%AC%AC2%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="第2章程序设计语言基础知识"><a href="#第2章程序设计语言基础知识" class="headerlink" title="第2章程序设计语言基础知识"></a>第2章程序设计语言基础知识</h1><h2 id="程序设计语言概述"><a href="#程序设计语言概述" class="headerlink" title="程序设计语言概述"></a>程序设计语言概述</h2><h3 id="程序设计语言的基本概念"><a href="#程序设计语言的基本概念" class="headerlink" title="程序设计语言的基本概念"></a>程序设计语言的基本概念</h3><h4 id="低级语言和高级语言"><a href="#低级语言和高级语言" class="headerlink" title="低级语言和高级语言"></a>低级语言和高级语言</h4><p>机器语言和汇编语言为高级语言。在此基础上，人们开发了功能更强、抽象级别更高的语言以支持程序设计，于是产生了面向各类应用程序的程序设计语言，称为高级语言。ge:Java、C、C++、PHP、Python等。</p>
<a id="more"></a>
<h4 id="编译程序和解释程序"><a href="#编译程序和解释程序" class="headerlink" title="编译程序和解释程序"></a>编译程序和解释程序</h4><h3 id="程序设计语言的基本成分"><a href="#程序设计语言的基本成分" class="headerlink" title="程序设计语言的基本成分"></a>程序设计语言的基本成分</h3><h2 id="语言处理程序基础"><a href="#语言处理程序基础" class="headerlink" title="语言处理程序基础"></a>语言处理程序基础</h2><h3 id="汇编程序基本原理"><a href="#汇编程序基本原理" class="headerlink" title="汇编程序基本原理"></a>汇编程序基本原理</h3><h3 id="编译程序基本原理"><a href="#编译程序基本原理" class="headerlink" title="编译程序基本原理"></a>编译程序基本原理</h3><h3 id="解释程序基本原理"><a href="#解释程序基本原理" class="headerlink" title="解释程序基本原理"></a>解释程序基本原理</h3>]]></content>
      
        <categories>
            
            <category> 软件技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 软件技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第3章数据结构]]></title>
      <url>/2019/03/13/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/%E7%AC%AC3%E7%AB%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="第3章数据结构"><a href="#第3章数据结构" class="headerlink" title="第3章数据结构"></a>第3章数据结构</h1><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><h3 id="串"><a href="#串" class="headerlink" title="串"></a>串</h3><h2 id="数组、矩阵和广义表"><a href="#数组、矩阵和广义表" class="headerlink" title="数组、矩阵和广义表"></a>数组、矩阵和广义表</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树与二叉树的定义"><a href="#树与二叉树的定义" class="headerlink" title="树与二叉树的定义"></a>树与二叉树的定义</h3><h3 id="二叉树的性质与存储结构"><a href="#二叉树的性质与存储结构" class="headerlink" title="二叉树的性质与存储结构"></a>二叉树的性质与存储结构</h3><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><h3 id="最优二叉树"><a href="#最优二叉树" class="headerlink" title="最优二叉树"></a>最优二叉树</h3><h3 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h3><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="图的定义与储存"><a href="#图的定义与储存" class="headerlink" title="图的定义与储存"></a>图的定义与储存</h3><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><h3 id="生成树与最小生成树"><a href="#生成树与最小生成树" class="headerlink" title="生成树与最小生成树"></a>生成树与最小生成树</h3><h3 id="拓扑排序和关键路径"><a href="#拓扑排序和关键路径" class="headerlink" title="拓扑排序和关键路径"></a>拓扑排序和关键路径</h3><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="查找的基本概念"><a href="#查找的基本概念" class="headerlink" title="查找的基本概念"></a>查找的基本概念</h3><h3 id="静态查找表的查找方法"><a href="#静态查找表的查找方法" class="headerlink" title="静态查找表的查找方法"></a>静态查找表的查找方法</h3><h3 id="动态查找表"><a href="#动态查找表" class="headerlink" title="动态查找表"></a>动态查找表</h3><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190316115757-374692.jpg" alt=""></p>
<p>十种常见排序算法可以分为两大类：</p>
<p><code>比较类排序</code>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</p>
<p><code>非比较类排序</code>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。</p>
<h3 id="排序的基本概念"><a href="#排序的基本概念" class="headerlink" title="排序的基本概念"></a>排序的基本概念</h3><p>假设含 n 个记录文件内容为{$R_{1}, R_{2},\ldots ,R_{n}​$}，相应的关键字{$k_{1}, k_{2},\ldots ,k_{n}​$}。经过排序确定一种排列{$R_{j_{1}},R_{j_{2}},\ldots ,R_{n}​$}，使得它们的关键字满足以下递增（或递减）关系：$k_{j_1}\leq k_{j_{2}}\leq \ldots \leq k_{j_{n}}​$（或$k_{j_{1}}\geq k_{j_{2}}\geq \ldots k_{jn}​$）。</p>
<p>若在待排序中的一个序列中，$R_{i}​$和$R_{j}​$的关键字相同，即 $k_{i}​$=$k_{j}​$，且在排序前 $R_{i}​$先于$R_{j}​$，那么在排序后，如果$R_{i}​$和$R_{j}​$的相对次序保持不变，$R_{i}​$仍领先于$R_{j}​$，则此类排序算法为稳定的。若在排序后的序列中有可能出现$R_{j}​$领先于$R_{i}​$的情形，则此类排序为不稳定的。</p>
<p><code>内部排序</code>：指待排序记录全部存放在内存中进行排序的过程。</p>
<p><code>外部排序</code>：指待排序记录的数量很大，以至于内存不能容纳全部记录，在排序过程中尚需对外存进行访问的排序过程。</p>
<h3 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h3><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>又称简单插入排序，是一种简单的排序算法。</p>
<p>具体做法：在插入第 i 个记录时，$R_{1}$、$R_{2}$、….、$R_{i-1}$ 已经安排好序，这时将 $R_{i}$的关键字 $k_{i}$一次与 $K_{i-1}$、$K_{i-2}$等进行比较，从而找到应该插入的位置并将$R_{i}$插入，插入位置及其后的记录向后移动。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/190318/jiandacharu.gif" alt=""></p>
<p>实现程序  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] arr)&#123;</div><div class="line">    <span class="keyword">int</span> len = arr.length;</div><div class="line">    <span class="keyword">int</span> preIndex,current;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;len;i++)&#123;</div><div class="line">        preIndex = i - <span class="number">1</span>;</div><div class="line">        current = arr[i];</div><div class="line">        <span class="keyword">while</span>(preIndex&gt;=<span class="number">0</span> &amp;&amp; current&lt;arr[preIndex])&#123;</div><div class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex];</div><div class="line">            preIndex--;</div><div class="line">        &#125;</div><div class="line">        arr[preIndex+<span class="number">1</span>] = current;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接排序算法在最好的情况下（待排序列已按关键码有序），每趟只需操作 1 次比较且不需要移动元素，因此n个元素排序时的总比较次数为 n-1 次，总移动次数为0。在最坏情况下（元素已经逆序排序），进行第 i 趟排序时，待插入的记录需要同前面的 i 个记录进行比较，因此，总比较次数为 $\dfrac {n\left( n-1\right) }{2}$在排序过程中，第 i 趟排序时移动记录的次数为 i+1 （包括移进、移除tmp）,总移动次数为 $\dfrac {\left( n+3\right) \left( n+2\right) }{2}$</p>
<p><code>注意</code>：是一种稳定的排序算法;时间复杂度$O\left( n^{2}\right)$;在排序过程中仅需要一个元素的辅助空间用于交换，空间复杂度为$O\left( 1\right)$</p>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>具体的做法：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/190318/maopao.gif" alt=""></p>
<p>实现程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr)&#123;</div><div class="line">    <span class="keyword">int</span> n = arr.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n - <span class="number">1</span> - i;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">int</span> temp = arr[j+<span class="number">1</span>];</div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>冒泡排序在最好情况下（待排序列已按关键码有序），只需要做一趟，元素的比较次数为 n-1 且不需要交换元素。在最坏情况下（元素已经逆序排序），在进行第 j 趟排序时，最大的 j-1 个元素已经排好序，其余的 n-(j-1) 个元素需要进行 n-j 次比较和 n-j 次交换。因此总比较次数为：$\dfrac {n\left( n-1\right) }{2}$ ，总的交换次数为：$\dfrac {n\left( n-1\right) }{2}​$</p>
<p><code>注意</code>：稳定的排序方法；时间复杂度$O\left( n^{2}\right)$;在排序过程中仅需要一个元素的辅助空间用于交换，空间复杂度为$O\left( 1\right)​$</p>
<h4 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h4><p>是一种简单直观的排序算法。工作原理：首先在末尾排序序列中找到最小（大）元素，存放到排序序列的其实位置，然后，再从剩下元素中继续寻找最小（最大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<p>具体做法：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/190318/jiandanxuanze.gif" alt=""></p>
<p>程序实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] arr)&#123;</div><div class="line">    <span class="keyword">int</span> n = arr.length;</div><div class="line">    <span class="keyword">int</span> minIndex,temp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</div><div class="line">        minIndex = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;n;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123;</div><div class="line">                minIndex = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        temp = arr[i];</div><div class="line">        arr[i] = arr[minIndex];</div><div class="line">        arr[minIndex] = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单选择排序算法在最好情况下（待排序列按关键码有序），不需要移动元素，因此 n 个元素排序时的总移动次数为 0 次。在坏情况下（元素已经逆序排序），前$\dfrac {n}{2}$趟中，每趟排序移动记录的次数都为3次（两个数组元素加交换值），其后不再移动元素，共进行 n-1 趟排序，总移动次数为$3\left( n-1\right) /2$。无论哪种情况，元素总比较次数为$\dfrac {n\left( n-1\right) }{2}$。</p>
<p><code>注意</code>：不稳定的排序方法；时间复杂度为：$O\left( n^{2}\right)$；在排序过程中仅需要一个元素的辅助空间用于数组元素的交换，空间复杂度为$O\left( 1\right)$</p>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>是第一个突破$O\left( n^{2}\right)​$的排序算法，是简单插入排序的改进版。与插入排序的不同之处在于，它会优先比较距离较远的元素，通过逐步减少间距，最终以1为间距或者进行一次常规的插入排序。希尔排序又叫缩小增量排序。    </p>
<p>具体做法：先取一个小于 n 的整数 d1 作为第一个增量，把文件的全部记录分成 d1 个组，即将所有距离为 d1 倍数序号的记录放在同一个组中，在和组内进行直接插入排序；然后取第二个增量 d2（d2&lt;d1），重复上述分组和排序工作，依次类推，直到所有的增量 d = 1，即所有的记录放在同一组进行直接插入排序为止。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/xierpaixu.gif" alt=""></p>
<p>程序实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr)&#123;</div><div class="line">    <span class="keyword">int</span> n = arr.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> gap = (<span class="keyword">int</span>)Math.floor(n/<span class="number">2</span>);gap &gt; <span class="number">0</span>;gap = (<span class="keyword">int</span>)Math.floor(gap/<span class="number">2</span>))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = gap;i &lt; n;i++)&#123;</div><div class="line">            <span class="keyword">int</span> j = i;</div><div class="line">            <span class="keyword">int</span> current = arr[i];</div><div class="line">            <span class="keyword">while</span>(j - gap &gt;= <span class="number">0</span> &amp;&amp; current &lt; arr[j - gap])&#123;</div><div class="line">                arr[j] = arr[j - gap];</div><div class="line">                j = j - gap;</div><div class="line">            &#125;</div><div class="line">            arr[j] = current;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意</code>：是一种不稳定的排序方法；时间复杂度为：$O\left( n^{1.3}\right)$；空间复杂度数为：$O\left( 1\right)​$</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基本思路：通过一趟排序将待排序的记录划分为独立的两部分，称为前半区和后半区，其中，前半区中记录的关键字均不大于后半区记录的关键字，然后再分别对这两部分进行快速排序。</p>
<p>具体做法：快速排序使用分治法把一串（list）分为两个子串（sub-lists）。</p>
<ul>
<li>从数列中挑出一个元素，称为“基准”（pivot）;</li>
<li>重新排序数列，所有元素比基准数小的摆放在基准数的前面，大的摆放在后面（相同的数可以放任意一边）。在这个分区退出之后，该基准就处于数列的中间位置。称为分区（partition）操作。</li>
<li>递归的把（recursive）把小于基准值元素的字数列和大于基准值元素的字数列排序。</li>
</ul>
<p>具体做法：先找出一个数作为基准数（pivot，这里取数组最中间的一位），定义两个变量作为”哨兵”，然后分别从后向前，从前向后两个方向区”探测”。</p>
<ol>
<li>从后向前：寻找比基准数小的数据，如果找到，停下来</li>
<li>从前向后：寻找比基准数大的数据，如果找到，停下来</li>
<li>如果两个方向的”探测”都找到了符合要求的数据，则交换数据，继续顺着方向寻找</li>
</ol>
<p><img src="https://blogimg.nos-eastchina1.126.net/190318/kuaisupaixu.gif" alt=""></p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h3 id="并归排序"><a href="#并归排序" class="headerlink" title="并归排序"></a>并归排序</h3><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h3 id="内部排序方法小结"><a href="#内部排序方法小结" class="headerlink" title="内部排序方法小结"></a>内部排序方法小结</h3><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3>]]></content>
      
        <categories>
            
            <category> 软件技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 软件技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里智能客服中心培训-1]]></title>
      <url>/2019/03/02/%E5%AE%A2%E6%9C%8D%E4%B8%AD%E5%BF%83%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<h1 id="阿里智能客服中心培训-1"><a href="#阿里智能客服中心培训-1" class="headerlink" title="阿里智能客服中心培训-1"></a>阿里智能客服中心培训-1</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>首先还是非常感谢公司给我这次的培训机会，对于我来说还是收获到很多知识和方案。在第一天的五节课里，老师们讲的内容也包含了我很感兴趣的内容，比如:机器人小蜜的技术方案、智能导航和智能质检。阿里的老师在有限的时间内还是能把内容都有序给我们将完，给我的印象也是比较深刻，也让我真正的领略到它们丰富的项目经验和产品成果。<br><a id="more"></a></p>
<p>培训提纲：</p>
<table>
<thead>
<tr>
<th>科目</th>
<th>讲师</th>
</tr>
</thead>
<tbody>
<tr>
<td>云小蜜技术方案介绍</td>
<td>王璨</td>
</tr>
<tr>
<td>智能语音技术方案介绍</td>
<td>李征</td>
</tr>
<tr>
<td>智能外呼技术方案介绍</td>
<td>梁进</td>
</tr>
<tr>
<td>智能导航技术方案介绍</td>
<td>山崎</td>
</tr>
<tr>
<td>智能质检技术方案介绍</td>
<td>镇远</td>
</tr>
<tr>
<td>知识云配置进阶及答疑</td>
<td>张瑄</td>
</tr>
<tr>
<td>对话工厂配置和脚本编程</td>
<td>北菜</td>
</tr>
<tr>
<td>OpenAPI实操介绍</td>
<td>送志</td>
</tr>
<tr>
<td>政务智能服务方案介绍</td>
<td>橙语</td>
</tr>
</tbody>
</table>
<h2 id="云小蜜技术方案"><a href="#云小蜜技术方案" class="headerlink" title="云小蜜技术方案"></a>云小蜜技术方案</h2><h3 id="产品能力大图"><a href="#产品能力大图" class="headerlink" title="产品能力大图"></a>产品能力大图</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302050627-791268.jpg" alt=""></p>
<h3 id="云小蜜技术框架"><a href="#云小蜜技术框架" class="headerlink" title="云小蜜技术框架"></a>云小蜜技术框架</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302050756-804550.jpg" alt=""></p>
<h3 id="会话管理最佳实践"><a href="#会话管理最佳实践" class="headerlink" title="会话管理最佳实践"></a>会话管理最佳实践</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109110436-638958.jpg" alt=""></p>
<h3 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h3><h4 id="问答流程"><a href="#问答流程" class="headerlink" title="问答流程"></a>问答流程</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302050920-708654.jpg" alt=""></p>
<h4 id="知识的存储结构"><a href="#知识的存储结构" class="headerlink" title="知识的存储结构"></a>知识的存储结构</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302051821-16287.jpg" alt=""></p>
<ul>
<li>一条FAQ知识/机器阅读只能归属一个目录，一个目录可以拥有多条FAQ知识/机器阅读；</li>
<li>一条FAQ知识可拥有多个答案，一个答案只能属于一个FAQ知识；</li>
<li>一条答案拥有多个视角，一个视角属于多个答案；</li>
<li>一条FAQ知识可能拥有多个相似问法；</li>
</ul>
<h3 id="对话工厂"><a href="#对话工厂" class="headerlink" title="对话工厂"></a>对话工厂</h3><h4 id="会话流程"><a href="#会话流程" class="headerlink" title="会话流程"></a>会话流程</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302051854-853169.jpg" alt=""></p>
<h3 id="机器阅读"><a href="#机器阅读" class="headerlink" title="机器阅读"></a>机器阅读</h3><p>传统思路：拆解问题与答案</p>
<ul>
<li>长篇文档拆解困难</li>
<li>活动时效性短，更新频发</li>
<li>答案粒度难以控制，解决能力差</li>
</ul>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302052447-295544.jpg" alt=""></p>
<p>让机器直接阅读文章，自动找答案</p>
<ul>
<li>减少人工阅读、拆解、配置知识点的工作量</li>
<li>提升问题理解的泛化能力，自动理解相关文法，无需穷举关键词</li>
</ul>
<p><img src="C:\Users\shenwenfang\AppData\Roaming\Typora\typora-user-images\1551519007556.png" alt="1551519007556"></p>
<h4 id="什么样的场景适合机器阅读"><a href="#什么样的场景适合机器阅读" class="headerlink" title="什么样的场景适合机器阅读"></a>什么样的场景适合机器阅读</h4><ul>
<li>拥有海量的存量业务文档</li>
<li>知识点数量多，不易整理、维护</li>
</ul>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302053211-814407.jpg" alt=""></p>
<h3 id="知识图谱问答"><a href="#知识图谱问答" class="headerlink" title="知识图谱问答"></a>知识图谱问答</h3><p>基于结构化的精准问答、多轮会话与推理</p>
<ol>
<li>知识结构化：知识图谱构建</li>
<li>知识结构化：语言表示</li>
<li>知识结构化：知识展示</li>
</ol>
<h4 id="知识图谱构建"><a href="#知识图谱构建" class="headerlink" title="知识图谱构建"></a>知识图谱构建</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302053602-828632.jpg" alt=""></p>
<h4 id="语言表示"><a href="#语言表示" class="headerlink" title="语言表示"></a>语言表示</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302053734-602034.jpg" alt=""></p>
<h4 id="知识展示"><a href="#知识展示" class="headerlink" title="知识展示"></a>知识展示</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302053944-534074.jpg" alt=""></p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul>
<li><code>可归类</code>实体数量大</li>
<li>知识点数量大</li>
</ul>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302054258-100667.jpg" alt=""></p>
<h4 id="KBQA解决方案"><a href="#KBQA解决方案" class="headerlink" title="KBQA解决方案"></a>KBQA解决方案</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302054408-371009.jpg" alt=""></p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302054421-363576.jpg" alt=""></p>
<h3 id="会话能力选型"><a href="#会话能力选型" class="headerlink" title="会话能力选型"></a>会话能力选型</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190302054639-342626.jpg" alt=""></p>
<h2 id="智能语音技术方案"><a href="#智能语音技术方案" class="headerlink" title="智能语音技术方案"></a>智能语音技术方案</h2><h3 id="整体情况"><a href="#整体情况" class="headerlink" title="整体情况"></a>整体情况</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p><code>ASR</code></p>
<p>语音识别技术，也称为自动语音识别（Automatic Speech Recognition），简称 ASR，其目标是将人类语音中的词汇内容转换为可读的文字。</p>
<p><code>TTS</code></p>
<p>语音合成技术，也称为自动语音合成（Text To Speech）,简称 TTS ,其目标是将文字转换成人的声音。</p>
<p><code>NLU</code></p>
<p>自然语言理解技术（Natural Languager Understanding），简称 NLU (ULP)，即研究如何让计算机读懂人类语言。</p>
<p><code>IVR</code></p>
<p>交互式语音应答技术（Interactive Voice Response），简称 IVR ，在这里叫呼叫中心（CallCenter,CC）统一成为 IVR。一般来说，由 IVR 通过 SDM 服务调用 ASR、TTS、NLU 能力。</p>
<p><code>SDM</code></p>
<p>语音对话管理服务（Speech Dialogue Mangerment），简称 SDM ，是 MRCP 协议的服务端实现，也即 MRCP-SERVER，对外用以和各类呼叫平台（如：华为、avaya）进行对接，对内集成了 ASR、TTS、NLU能力。</p>
<h3 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h3><h4 id="基础能力"><a href="#基础能力" class="headerlink" title="基础能力"></a>基础能力</h4><ul>
<li>支持普通话、粤语、四川话、东北话、英语识别</li>
<li>支持一句话识别</li>
<li>支持实时语音识别</li>
<li>支持 RESTful 识别</li>
<li>支持录音识别</li>
</ul>
<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p><code>BAD</code></p>
<p>语音活动检测（Voice Activity Detection ,VAD）又称语音端点检测，语音边界检测。目的是从声音信号流里识别和消除长时间的静音期。切出用户语音的开始说话时间和结束说话时间，加快语音引擎的识别速度。</p>
<p><code>声学模型</code></p>
<p>对发声的建模，它能够本语音输入转换成声学表示的输出，更准确的说是给出语音引擎的识别速度。</p>
<p><code>语言模型</code></p>
<ul>
<li>可以理解为在声学模型给出发音序列之后，从后选的的文字序列中找出概率最大的字符串序列</li>
<li>一个 ASR 引擎至少有一个声学模型和语言模型</li>
<li>阿里的 ASR 引擎有一个基础语言模型和多个定制语言模型</li>
</ul>
<h4 id="专有云架构"><a href="#专有云架构" class="headerlink" title="专有云架构"></a>专有云架构</h4><p>语音识别模块：实时语音识别</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109081546-739437.jpg" alt=""></p>
<p>语音识别模块：一句话识别</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109082357-624345.jpg" alt=""></p>
<h4 id="自学平台"><a href="#自学平台" class="headerlink" title="自学平台"></a>自学平台</h4><ol>
<li>热词</li>
<li>类热词（需要类语言模型配合）</li>
<li>定制语言模型</li>
</ol>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109083556-909425.jpg" alt=""></p>
<h4 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h4><ol>
<li>优先使用定制语言模型，效果好，不易出错</li>
<li>对于有明显数量限制（较少，比如100个左右）的人名、地名、使用类热词功能，否则使用热词功能</li>
</ol>
<h3 id="TTS"><a href="#TTS" class="headerlink" title="TTS"></a>TTS</h3><h4 id="基础能力-1"><a href="#基础能力-1" class="headerlink" title="基础能力"></a>基础能力</h4><ul>
<li>语速控制（快慢）</li>
<li>音量控制（高低）</li>
<li>音色控制（几十个定制发音人）</li>
<li>普通话、粤语、英语合成</li>
<li>中英文混读</li>
<li>数字串发音</li>
<li>合成方案（参数、拼接）</li>
</ul>
<h4 id="标签（SSML）"><a href="#标签（SSML）" class="headerlink" title="标签（SSML）"></a>标签（SSML）</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109090937-145541.jpg" alt=""></p>
<h4 id="音库建设"><a href="#音库建设" class="headerlink" title="音库建设"></a>音库建设</h4><ol>
<li>发音人</li>
<li>录音环境</li>
<li>录音文案</li>
<li>质量控制</li>
<li>数据闭环</li>
</ol>
<h4 id="Neural-TTS"><a href="#Neural-TTS" class="headerlink" title="Neural TTS"></a>Neural TTS</h4><p>效果访问:<a href="https://ai.aliyun.com/nls/tts" target="_blank" rel="external">https://ai.aliyun.com/nls/tts</a></p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109091549-989444.jpg" alt=""></p>
<h3 id="SDM-MRCP-SERVER"><a href="#SDM-MRCP-SERVER" class="headerlink" title="SDM(MRCP-SERVER)"></a>SDM(MRCP-SERVER)</h3><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109092824-742852.jpg" alt=""></p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109094716-985935.jpg" alt=""></p>
<ol>
<li>SDM = 网络层（TCP、UDP）+ 协议层（SIP、RTP、MRCP）+ 逻辑层（ASR、TTS、NLU）</li>
<li>如果是 gateway 是语音服务的网关层、那么 SDM 是客户领域中各类 AI 能力的网关</li>
<li>SDM 承上启下，对外和 IVR 基于标准协议对接；对内完成各类 AI 服务的私有协议的转换</li>
</ol>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109100747-634907.jpg" alt=""></p>
<h4 id="MRCP-协议"><a href="#MRCP-协议" class="headerlink" title="MRCP 协议"></a>MRCP 协议</h4><ul>
<li>为什么选择 MRCP 协议<ul>
<li>客服领域（比如通信、金融领域）大多有呼叫中心、设计硬件、历史悠久、升级换代很难</li>
<li>客户无法、可能没有能力、主观上也不愿意集成各个语音厂商API。<ul>
<li>集成难度大</li>
<li>有的呼叫中心设备甚至无法集成第三方 API</li>
</ul>
</li>
</ul>
</li>
<li>好处<ul>
<li>客户呼叫中心升级更简单（呼叫中心大多直接或间接支持 MRCP）</li>
<li>客户不在关注语音厂商 SDK 细节，仅仅参照 MRCP 标准</li>
</ul>
</li>
</ul>
<h4 id="和呼叫中心的对接"><a href="#和呼叫中心的对接" class="headerlink" title="和呼叫中心的对接"></a>和呼叫中心的对接</h4><p>方案1</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109101815-718048.jpg" alt=""></p>
<p>方案2</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109101838-890644.jpg" alt=""></p>
<p>方案3</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190109101905-997928.jpg" alt=""></p>
<h2 id="智能外呼技术方案"><a href="#智能外呼技术方案" class="headerlink" title="智能外呼技术方案"></a>智能外呼技术方案</h2><h3 id="智能客服"><a href="#智能客服" class="headerlink" title="智能客服"></a>智能客服</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108101002-139735.jpg" alt=""></p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108101152-332138.jpg" alt=""></p>
<h3 id="语音导航的进步"><a href="#语音导航的进步" class="headerlink" title="语音导航的进步"></a>语音导航的进步</h3><p><img src="C:\Users\SHENWE~1\AppData\Local\Temp\1546956935289.png" alt="1546956935289"></p>
<h3 id="语音导航过程"><a href="#语音导航过程" class="headerlink" title="语音导航过程"></a>语音导航过程</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108101646-555523.jpg" alt=""></p>
<h3 id="智能助手"><a href="#智能助手" class="headerlink" title="智能助手"></a>智能助手</h3><table>
<thead>
<tr>
<th>人员流动性大，培训成本高</th>
<th>V  S</th>
<th>智能辅助解决新手上岗难问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>坐席和用户一对一交互，无监督无状态</td>
<td>V  S</td>
<td>无缝融合第三方参与人人交互全过程</td>
</tr>
</tbody>
</table>
<h3 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构"></a>功能架构</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108103858-986818.jpg" alt=""></p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>金融、教育、旅游、网络推广、地产、客户回访、4s店、中国电信、联通、移动、保险、美容等行业。</p>
<h3 id="典型智能外呼客服组织网"><a href="#典型智能外呼客服组织网" class="headerlink" title="典型智能外呼客服组织网"></a>典型智能外呼客服组织网</h3><h4 id="专有云"><a href="#专有云" class="headerlink" title="专有云"></a>专有云</h4><h4 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h4><h2 id="智能导航技术方案"><a href="#智能导航技术方案" class="headerlink" title="智能导航技术方案"></a>智能导航技术方案</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>智能语音导航是什么？<ul>
<li>基于 ASR （语音识别）、NLU（自然语言理解）、TTS（语音合成）技术实现的智能语音产品/解决方案。</li>
<li>通常用于在电话端接待用户，为用户提供智能问答或功能跳转。</li>
</ul>
</li>
<li>eg: 自助查水费</li>
<li><code>不是</code><ul>
<li>不是 Sirt，无法解答未配置在 NLU 中的问题</li>
<li>不是学习机器，无法在没有人工干预的情况下自行学会新的知识或听懂方言</li>
</ul>
</li>
<li>阿里云智能语音导航依赖一下原子产品<ul>
<li>达摩院ASR/TTS/MRCP 模块</li>
<li>智能客服-云小蜜</li>
</ul>
</li>
<li>提供适配 IVR 的渠道特征性：<ul>
<li>个性化问候语</li>
<li>拒识处理</li>
<li>重听</li>
<li>访问提示</li>
<li>在多轮会话间共享上下文</li>
</ul>
</li>
</ul>
<h3 id="私有化版本集成架构"><a href="#私有化版本集成架构" class="headerlink" title="私有化版本集成架构"></a>私有化版本集成架构</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108092140-738414.jpg" alt=""></p>
<ul>
<li>IVR 与 MRCP 进行对接，通过MRCP 服务实现对 ASR 和 TTS 的调用</li>
<li>IVR 与智能导航 OpenAPI 进行对接<ul>
<li>开启会话接口</li>
<li>会话接口</li>
<li>收号完成接口</li>
<li>核身完成（可选）</li>
</ul>
</li>
</ul>
<h3 id="私有化版本部署指南"><a href="#私有化版本部署指南" class="headerlink" title="私有化版本部署指南"></a>私有化版本部署指南</h3><h4 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108094121-693139.jpg" alt=""></p>
<h4 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h4><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108095003-438848.jpg" alt=""></p>
<h4 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h4><ul>
<li>准备中间件 MySQL + Redis</li>
<li>初始化数据表</li>
<li>部署智能语义导航应用</li>
<li>初始化租户，生成调用 OpengAPI 的 AccessKey</li>
<li>在云小蜜中创建机器人</li>
<li>初始化导航实例，关联云小蜜机器人</li>
</ul>
<h3 id="云小蜜配置指南"><a href="#云小蜜配置指南" class="headerlink" title="云小蜜配置指南"></a>云小蜜配置指南</h3><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190108095659-244177.jpg" alt=""></p>
<p>具体是使用 API 以阿里提供的为准，这里只是简单的提一下。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>智能语音导航=云小蜜+ASR+TTS+MRCP+智能导航OpenAPI+IVR基础配置+回复单元定义</p>
<p>拒识语、访问提示在导航 config 中配置；话术在小蜜中配置；重听、转人工在智能 IVR 基础配置对话流中配置；</p>
<h2 id="智能质检技术方案"><a href="#智能质检技术方案" class="headerlink" title="智能质检技术方案"></a>智能质检技术方案</h2><h3 id="规则配置"><a href="#规则配置" class="headerlink" title="规则配置"></a>规则配置</h3><ul>
<li>常用算子<ul>
<li>关键词-词</li>
<li>正则-复杂关键词</li>
<li>语义-句子</li>
</ul>
</li>
<li>算子与条件<ul>
<li>条件间可以配置依赖关系</li>
<li>一个条件包含一个算子</li>
</ul>
</li>
</ul>
<h3 id="系统集成"><a href="#系统集成" class="headerlink" title="系统集成"></a>系统集成</h3><ul>
<li>通过 FTP<ul>
<li>不需要过多开发</li>
<li>适用于存量录音</li>
<li>没有客户姓名、号码、技能组等额外信息</li>
</ul>
</li>
<li>通过 API <ul>
<li>需要集成开发</li>
<li>信息全</li>
<li>uploadAudioDataWithRules</li>
</ul>
</li>
<li>实时质检</li>
</ul>
<h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><ul>
<li>转写准确率<ul>
<li>准确率：&gt;85%</li>
<li>自学习平台<ul>
<li>热词：适用于专有名词</li>
<li>语言模型：常规对话；量要多（&gt;1M）；一行一句（只需要话术，不需要角色，eg:客服：您好，请问，有什么可以帮到您？）</li>
<li>录音改造</li>
</ul>
</li>
</ul>
</li>
<li><code>分轨准确率</code><ul>
<li>错误率：8%-15%</li>
<li>严重错误率: &lt;10%</li>
<li>双轨录音：从录音源头改造</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 培训总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 培训总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第1章计算机网络概述]]></title>
      <url>/2019/02/18/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/%E7%AC%AC1%E7%AB%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h1 id="第1章计算机网络概述"><a href="#第1章计算机网络概述" class="headerlink" title="第1章计算机网络概述"></a>第1章计算机网络概述</h1><h2 id="计算机系统基础知识"><a href="#计算机系统基础知识" class="headerlink" title="计算机系统基础知识"></a>计算机系统基础知识</h2><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190315110740-590645.jpg" alt=""></p>
<h3 id="计算机系统硬件基本组成"><a href="#计算机系统硬件基本组成" class="headerlink" title="计算机系统硬件基本组成"></a>计算机系统硬件基本组成</h3><p>计算机系统是由硬件和软件组成的。基本硬件系统由 <code>运算器</code> <code>控制器</code>  <code>存储器</code> <code>输入设备</code> <code>输出设备</code>。<br><a id="more"></a></p>
<p>1、中央处理单元</p>
<p>运算器、控制器 等部件被集成在一起统称为<code>中央处理单元（CPU）</code>（硬件系统的核心）。CPU 用于数据加工处理，完成各种算术、逻辑运算及控制能力。</p>
<p>2、存储器</p>
<p><code>存储器</code> 是计算机系统中的记忆设备，分为<code>内部存储器</code>和<code>外部存储器</code> 。内部存储器速度高、容量小。一般用于临时存放程序，数据及中间结果。；外部存储器容量大、速度慢。可以长期保存程序和数据。</p>
<p>3、外部设备</p>
<p>输入和输出设备合称为 <code>外部设备</code></p>
<h3 id="中央处理单元"><a href="#中央处理单元" class="headerlink" title="中央处理单元"></a>中央处理单元</h3><p>CPU 是计算机系统的核心，负责获<code>取程序指令</code>、对指令进行<code>译码</code>并加以<code>执行</code>。</p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul>
<li>程序控制（重要功能）：通过执行指令来控制程序的顺序。</li>
<li>操作控制：生产指令操作信号–&gt;把操作信号送往对应的部件–&gt;控制相应的部件按指令的功能要求进行操作。</li>
<li>时间控制：指令执行过程中操作信号的出现时间、持续时间以及出现的时间顺序都需要进行严格控制。</li>
<li>数据处理（根本任务）：对数据进行算术运算及逻辑运算等方式对数据进行加工处理。</li>
</ul>
<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>运算器、控制器、寄存器和内部总线等部件组成。</p>
<h5 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h5><p>由<code>算术逻辑单元</code>、<code>累加寄存器</code>、<code>数据缓冲寄存器</code>、<code>状态条件寄存器</code>组成。是数据加工处理部件。</p>
<p>注意：运算器所进行的全部操作都是由控制器发出的控制信号来指挥的，so 它是执行部件。</p>
<p>1、算术逻辑单元（ALU）：负责数据处理，实现对数据的算术运算和逻辑运算。</p>
<p>2、累加寄存器（AC）:  为 ALU 提供一个工作区。例如：在执行一个减法运算前，先将被减数取出暂存在 AC 中，再从内存存储器中取出减数，然后同 AC 的内容相减，<code>将所得的结果送回 AC 中</code>。</p>
<p>注意：运算器中至少要有一个累加器寄存器。</p>
<p>3、数据缓冲寄存器（DR）：作为 CPU 和内存、外部设备之间数据传送的中转站。作为 CPU 和内存、外围设备之间在操作速度上的缓冲。</p>
<p>注意：在单累加器结构的运算器中，数据缓冲寄存器还可兼作为操作数寄存器。</p>
<p>4、状态条件寄存器（PSW）：状态条件寄存器保存由算术指令和逻辑指令运行或测试或测试的结果建立的各种条件码内容，主要分为状态标志和控制标志。</p>
<h6 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h6><p>1、执行所有的算术运算</p>
<p>2、执行所有的逻辑运算并进行逻辑测试</p>
<h5 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h5><p>用于控制整个 CPU 的工作，它决定了计算机运行过程的自动化。控制器一般包括<code>指令控制逻辑</code>、<code>时序控制逻辑</code>、<code>总线控制逻辑</code>和<code>中断控制逻辑</code>等几个部分。</p>
<p>指令控制逻辑过程：取指令–&gt;指令译码–&gt;按指令操作执行–&gt;形成下一条指令地址。</p>
<p>1、指令寄存器（IR）：当 CPU 执行一条指令时，先把它从内存储器取到缓冲寄存器中，再送入 IR 暂存，指令译码器根据 IR 的内容产生各种微操作指令，控制其他的组成部件工作，完成所有的功能。</p>
<p>2、程序计数器（PC）：具有<code>寄存信息</code>和<code>计数</code>功能，即又称<code>指令计数器</code>。程序的执行一般分为两种，一种是顺序执行，一种是转移执行。由于大多数指令都是按顺序来执行的，所以修改的过程通常只是简单地对 PC 加 1。当遇到转移指令时，后继指令的地址根据当前指令的地址加上一个向前或向后的位移的位移得到，或者根据转移指令给出直接转移的地址得到。</p>
<p>3、地址寄存器（AR）： 保存当前 CPU 所访问的内存单元的地址。</p>
<p>4、指令译码器（ID）：指令包含操作码和地址码。指令译码器是对指令中的操作码字段进行分析解析，识别该指令规定的操作，向操作控制器发出具体的控制信号，控制各部件工作，完成所需的功能。</p>
<p>时序控制逻辑–&gt;为每条指令按时间顺序提供有应有的控制信号。</p>
<p>总线逻辑–&gt;为多个功能部件服务的信息通路的控制电路。</p>
<p>中断控制逻辑–&gt;用于控制各种中断请求，并根据优先级的高低对中断请求进行排队，逐个交给 CPU 处理。</p>
<h5 id="寄存器组"><a href="#寄存器组" class="headerlink" title="寄存器组"></a>寄存器组</h5><p>分为<code>专用寄存器</code>和<code>通用寄存器</code>。运算器和控制器中的寄存器是专用寄存器，其作用是固定的。</p>
<h4 id="多核-CPU"><a href="#多核-CPU" class="headerlink" title="多核 CPU"></a>多核 CPU</h4><p>核心又称为内核，是 CPU 最重要的组成部分。CPU 所有的计算、接受/存储命令、处理数据都由核心执行。各种 CPU 核心都是具有固定的逻辑结构，一级缓存、二级缓存、执行单元、指令级单元和总线接口等逻辑单元都会有合理的布局。</p>
<p>多核即在一个单芯片上面集成两个甚至更多个处理器内核，其中每一个内核都有自己的逻辑单元、控制单元、中断处理器、运算单元，一级缓存、二级 Cache 共享独有，其中部件的完整性和单核处理器内核相比完全一样。</p>
<p>多核 CPU 最大的优点是可以满足用户同时进行多任务处理的要求。</p>
<p>要发挥 CPU 的多核性能，就需要操作系统能够及时、合理得给各个核分配任务和资源（如：缓存、总线、内存等），也需要应用软件在运行时可以把并行的线程同时交付给多个核心分别处理。</p>
<h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><p>各种数值在计算机中表示的形式称为<code>机器数</code>。</p>
<p>机器数分为：<code>无符号数</code>和 <code>带符号数</code>    </p>
<h4 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h4><p>表示正数，在机器数中没有符号位。</p>
<h4 id="带符号数"><a href="#带符号数" class="headerlink" title="带符号数"></a>带符号数</h4><p>机器数的最高位是表示正、负的符号位，其余位则表示数值。为了便于运算，带符号的机器数采用原码、反码、补码等不同的编码方法，机器数的这些编码方法称为<code>码制</code>。</p>
<h5 id="原码、反码、补码和移码"><a href="#原码、反码、补码和移码" class="headerlink" title="原码、反码、补码和移码"></a>原码、反码、补码和移码</h5><h6 id="原码表示法"><a href="#原码表示法" class="headerlink" title="原码表示法"></a>原码表示法</h6><p>n为机器字长</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310091545-303485.jpg" alt=""></p>
<p>最高位是符号位，<code>0表示正数，1表示负数</code>，<code>其余的 n-1 位表示数值的绝对值</code>。</p>
<p>例子：若机器字长为8位</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310091506-127376.jpg" alt=""></p>
<h6 id="反码表示法"><a href="#反码表示法" class="headerlink" title="反码表示法"></a>反码表示法</h6><p>n为机器字长</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310091616-543866.jpg" alt=""></p>
<p>正数的反码和<code>原码相同</code>，负数的反码则是其<code>绝对值按位求反</code>。</p>
<p>例子：若机器字长为8位</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310091649-920567.jpg" alt=""></p>
<h6 id="补码表示法"><a href="#补码表示法" class="headerlink" title="补码表示法"></a>补码表示法</h6><p>n为机器字长</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310092006-651821.jpg" alt=""></p>
<p>正数的补码与其原码和反码相同，负数的补码等于其反码的末尾加1。</p>
<p>例子：若机器字长为8位</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310092203-375413.jpg" alt=""></p>
<h6 id="移码表示法"><a href="#移码表示法" class="headerlink" title="移码表示法"></a>移码表示法</h6><p>只有将补码的符号位取反。</p>
<h5 id="定点数和浮点数"><a href="#定点数和浮点数" class="headerlink" title="定点数和浮点数"></a>定点数和浮点数</h5><h6 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h6><p>小数点的位置固定不变的数。小数点的位置通常有两种约定方式：<code>定点正数</code>、<code>定点小数</code></p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093206-38356.jpg" alt=""></p>
<h6 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h6><p>小数点的位置不确定</p>
<p>一个二进制  N 可以表示为更一般的形式 $$N=2^{E}\times F​$$ ，其中 E 称为阶码，F称为尾数。用阶码和尾数表示的数称为浮点数，表示方法称为<code>浮点表示法</code>。</p>
<p>在浮点表示法中，阶码为带符号的纯正数，尾码为带符号的纯小数。</p>
<p>浮点数的表示格式：</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093240-213346.jpg" alt=""></p>
<p>浮点数所能表示的<code>数值范围</code>有由<code>阶码</code>决定，<code>精度</code>由于<code>尾数</code>决定</p>
<p>规范化就是将位数的绝对值限定在区间[0.5,1]。</p>
<p>当尾数用补码表示时，要注意：</p>
<p>若为数 $$M\geq 0​$$ ，规格化的尾数形式为 M=0.1XXX…X ,X 可为0，也可为1，即将尾数限定在区间[0.5,1]。</p>
<p>若为数 $$M &lt;0$$，………..即将尾数限定在区间[-1,-0.5]。</p>
<p>当浮点数的阶码用 R 位的移码表示，尾数用 M 位的补码表示，浮点数表示的数值范围：</p>
<p>最大：$$+\left( 1-2^{-m+1}\right) \times 2^\left( 2^{r-1}-1\right)$$</p>
<p>最小：$$ -1 \times 2^\left( 2^{r-1}-1\right)​$$</p>
<h6 id="工业标准-IEEE754"><a href="#工业标准-IEEE754" class="headerlink" title="工业标准 IEEE754"></a>工业标准 IEEE754</h6><p>标准的表示形式为： $$\left( -1\right) ^{S}2^{E}\left( b_{0}b_{1}b_{3}\ldots b_{p-1}\right)​$$</p>
<p>其中，$$\left( -1\right) ^{S}$$ 浮点数的数符，当 S 为 0 时表示正数，S 为 1 时表示负数；E 为指数（阶码），用移码表示；</p>
<p>$$\left( b_{0}b_{1}b_{3}\ldots b_{p-1}\right)$$为尾数，长度为 p 位，用原码表示。</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093302-106776.jpg" alt=""></p>
<p>根据 IEEE754 标准，被编码的值分为 3 种不同的情况：<code>规范化的值</code>、<code>非规范化的值</code>和<code>特殊值</code>。</p>
<p>【1】、规范化的值：当阶码部分的二进制值不全为0，也不全为1时。</p>
<p>例子：利用 IEEE754 标准将数 176.0625 表示为单精度浮点数。</p>
<p>1、十进制数–&gt;转成二进制 （转换过程访问：<a href="https://www.cnblogs.com/xkfz007/articles/2590472.html）" target="_blank" rel="external">https://www.cnblogs.com/xkfz007/articles/2590472.html）</a></p>
<p>$$\left( 176.065\right) _{10}=\left( 10110000.001\right) _{2}​$$</p>
<p>2、规格化处理</p>
<p>$$10110000.001​$$ = $$1\langle \rangle 01100000001\times 2^{7}​$$</p>
<p>将 $$b_{0}​$$ 去掉并扩展为单浮点数所规定的 23 位尾数。</p>
<p>01100000010000000000000</p>
<p>3、求阶码</p>
<p>$$1\langle \rangle 01100000001\times 2^{7}$$ 的指数为 7 ，<code>单精度浮点数规定指数的偏移量为 127</code>。</p>
<p>所有 E = 7 + 127 = 134 ,求得移码为 10000110。 </p>
<p>0 10000110 01100000010000000000000</p>
<p>【2】、非规范化的值</p>
<p>阶码的二进制全为 0 。指数的真值为1–偏移量（对于单精度浮点数为-126，双精度浮点数为-1022），尾数的值就是二进制形式对应的小数，不包含隐含的1。</p>
<p>用途：①表示数值0；②表示哪些非常接近于0的数。</p>
<p>【3】、特殊值</p>
<p>阶码的二进制全为1。</p>
<p>尾数部分全为0：无穷大；符号为为0：$$+\infty$$，1：$$-\infty$$;</p>
<p>尾数部分不全为0：NaN;</p>
<h6 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h6><p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093323-644702.jpg" alt=""></p>
<p><img src="C:\Users\shenwenfang\AppData\Roaming\Typora\typora-user-images\1550984468615.png" alt="1550984468615"></p>
<h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><p>使用校验码的方法来检测传送的数据是否出错。</p>
<p><code>码距</code>指一个编码系统中任意两个合法编码之间至少有多少个二进制位不同。例如：4 位 8421 码的码距为1 ，在传输过程中，该代码的一位或多位发生错误，都将变成另一个合法的编码，因此这样编码无检错能力。</p>
<h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p>在编码中增加一位校验位来使编码中 1 的个数为奇数（奇校验）或者为偶数（偶校验），从而时码距变为2。奇校验，可以检测代码中奇数位出错的编码，但不能发现偶数位出错的情况，即当合法编码中的奇数位发生了变化，即当编码中的0变成了1或1变成了0，则该编码中1 的个数的奇偶性就发生了变化。</p>
<p>常用的奇偶检验码有：<code>水平奇偶检验码</code>、<code>垂直奇偶校验码</code>、<code>水平垂直奇偶校验</code></p>
<h4 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h4><p>构成方法是在数据位之间的特定位置上插入 k 个校验位，通过扩大码距来实现检错和纠错。</p>
<p>设数据位是 n 位， 校验位是 k 位，则 n 与 k 必须满足以下关系： $$2^{k}-1\geq n+k$$</p>
<h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><h3 id="计算机体系结构的发展"><a href="#计算机体系结构的发展" class="headerlink" title="计算机体系结构的发展"></a>计算机体系结构的发展</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><code>计算机体系结构</code>、<code>计算机组织</code>和<code>计算机实现</code>的关系：</p>
<p>体系结构：计算机的概念性结构和功能属性。</p>
<p>组织：计算机组成原理（计算机体系结构的逻辑实现，包括计算机内的数据流和控制流的组成以及逻辑设计等）。</p>
<p>实现：计算机组织的物理实现。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>1、（宏观）按处理机的数量分：<code>单处理系统</code>、<code>并行处理与多处理系统</code>、<code>分布式处理系统</code></p>
<p>2、（微观）按并行程度分：<code>Flynn 分类法</code>、<code>冯泽云分类法</code>、<code>Handler 分类法</code>、<code>Kuck分类法</code></p>
<p>指令流：机器执行的指令序列；</p>
<p>数据流：指令调用的数据序列；</p>
<p>并行度：计算机系统在单位时间内能够处理的最大二进制位数。</p>
<p>Flynn ：按指令流和数据流的多少分类（单/多指令：单/多数据流，4种）</p>
<p>冯泽云：按并行度分类（字串/并行：位串/并行，4种）</p>
<p>Handler：提出一个基于硬件并行程度计算并行度的方法。</p>
<p>Kuck：按指令流和执行流及其多重性分（单/多指令：单/多执行流，4钟）</p>
<h4 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h4><p>指令集体系结构：一个处理器的指令和指令的字节级编码；不同的处理器族支持不同的指令集体系结构。</p>
<h5 id="指令集体系结构的分类"><a href="#指令集体系结构的分类" class="headerlink" title="指令集体系结构的分类"></a>指令集体系结构的分类</h5><h6 id="从体系结构的观点分"><a href="#从体系结构的观点分" class="headerlink" title="从体系结构的观点分"></a>从体系结构的观点分</h6><p>1、操作数在 CPU 中的存储方式</p>
<p>2、显式操作数的数量</p>
<p>3、操作数的位置</p>
<p>4、指令的操作</p>
<p>5、操作数的类型与大小</p>
<h6 id="按暂存机制分"><a href="#按暂存机制分" class="headerlink" title="按暂存机制分"></a>按暂存机制分</h6><p>堆栈（Stack）、累加器（Accumulator）、寄存器组</p>
<h5 id="CISC-和-RISC"><a href="#CISC-和-RISC" class="headerlink" title="CISC 和 RISC"></a>CISC 和 RISC</h5><p>CISC（复杂 指令集）和 RISC（精简指令集）是指令集发展的两种途径。</p>
<p>CISC：用更为复杂的新指令取代原先由软件子程序完成的功能，实现软件的硬件化，导致机器的指令系统越来月庞大、复杂。</p>
<p>RISC：通过减少指令总数和简化指令功能降低硬件设计的复杂度，使用指令能够单周期执行，并通过优化编译提高指令的执行速度。采用硬布线控制逻辑优化编译程序。</p>
<p>优化：</p>
<p>提高目标程序的实现效率：对动态和静态使用频率进行优化，既可以减少程序所需的存储空间，又可以提高程序的执行速度。</p>
<p>面向高级程序语言：缩小高级语言与机器语言之间的语义差距。</p>
<p>面向操作系统：缩小操作系统与体系结构之间的语义差异。</p>
<h5 id="指令的流水处理"><a href="#指令的流水处理" class="headerlink" title="指令的流水处理"></a>指令的流水处理</h5><h6 id="指令控制方式"><a href="#指令控制方式" class="headerlink" title="指令控制方式"></a>指令控制方式</h6><p>①<code>顺序执行</code>：指各条机器指令之间顺序的执行。优点是控制简单；缺点是速度慢，各部件的利用率低。</p>
<p>②<code>重叠方式</code>：指在解释第K条指令的操作完成之间就可以开始第K+1条指令。优点是速度提高，控制简单；缺点是出现冲突、转移和相关等问题。</p>
<p>③<code>流水方式</code>：把并行性和并发性嵌入到计算机系统的一种形式，把重复的顺序处理过程分解为若干个子过程，每个子过程能在独立的模块上有效地并发工作。</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093353-850138.jpg" alt=""></p>
<h6 id="流水线的种类"><a href="#流水线的种类" class="headerlink" title="流水线的种类"></a>流水线的种类</h6><p>①级别：部件级、处理级、系统级</p>
<p>②功能：单功能、多功能</p>
<p>③连接：静态、动态</p>
<p>④是否有反馈回路：线性流水、非线性流水</p>
<p>⑤流动顺序：同步流水、异步流水</p>
<p>⑥数据表示：标准、向量</p>
<h6 id="流水的相关处理"><a href="#流水的相关处理" class="headerlink" title="流水的相关处理"></a>流水的相关处理</h6><p>1、流水线时同时处理多条指令，会出现相关。相关带来的影响是局部性的，所以称为局部性相关。解决方式：<code>推后法</code>和<code>通路法</code>。推后法：推后相关单元的读，直到写入完成。通路法：设置相关专用通路直接使用运算结果，以加快速度。</p>
<p>2、转移指令与后面的指令之间存在关联，使之不能同时解释。执行转移指令时，可能会改动指令缓冲器中预取到的指令内容，造成流水线吞吐率和效率下降，称全局性相关。解决：<code>猜测转移分支</code>、<code>加快和提前形成条形码</code>、<code>加快断循环程序的处理</code>。</p>
<p>3、RISC 采用的流水技术：</p>
<p>①<code>超流水线</code>：在所有的功能单元都采用流水，并有更高的时钟频率和更深的流水深度。</p>
<p>②<code>超标量</code>：</p>
<p>③<code>超长指令字</code>：</p>
<h6 id="吞吐率和流水建立的时间"><a href="#吞吐率和流水建立的时间" class="headerlink" title="吞吐率和流水建立的时间"></a>吞吐率和流水建立的时间</h6><p>单位时间内流水线处理机流出的结果数（对指令，单位时间内执行的指令数）。</p>
<p>当流水线的子过程所用的时间不一样，吞吐率 $$p=1/\max \left{ \Delta t_{1},\Delta t_{2},\ldots ,\Delta t_{m}\right}$$</p>
<p>若m个子过程所用的时间一样，均为 $$\Delta t_{0}$$ ,则建立时间  $$T_{0}=m\Delta t_{0}$$</p>
<h4 id="阵列、并行、多处理机"><a href="#阵列、并行、多处理机" class="headerlink" title="阵列、并行、多处理机"></a>阵列、并行、多处理机</h4><p><code>并行性</code>：同一时刻发生；<code>并发性</code>：同一时间间隔内连续发生。</p>
<p>1、阵列处理机：将重复处理的多个单元（PU）按一定方式连成阵列。是一中单指令多数据流计算机，通过资源重复实现并行。</p>
<p>2、并行处理机：SIMD（共享存储器和分布式存取器形式） 和 MIMD 是典型的并行计算机。</p>
<p>3、多处理机：由多台处理及组成的。各自独立，共享一个主存器和所有的外部设备。多指令多数据流计算机。</p>
<p>4、其他计算机：集群计算机是一种并行或分布式处理系统。主要用来解决大型计算问题。这种系统可以提供一种价格合理的且可获得所需性能和快速而可靠的服务的解决方案。</p>
<h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><h4 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h4><p>例子：CPU 内部的通用寄存器组、CPU 内的 Cache(高速缓存)、CPU 外的 Cache、主板上的主存储器等。</p>
<p>注意：Cache 和主存之间的交互功能全部由硬件实现，主存和辅存由硬件和软件结合起来实现。</p>
<h4 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h4><p>1、按位置：</p>
<table>
<thead>
<tr>
<th>内存（主存）</th>
<th>外存（辅存）</th>
</tr>
</thead>
<tbody>
<tr>
<td>主机内和主机板上</td>
<td>磁盘、磁带和光盘</td>
</tr>
<tr>
<td>容量小速度快（相对于外存）</td>
<td></td>
</tr>
<tr>
<td>存放当前运行的程序和数据，向CPU提供信息</td>
<td>存放不参与运行的信息，需要是才调入</td>
</tr>
</tbody>
</table>
<p>2、按构成材料：</p>
<p>磁存储器、半导体存储器、光存储器</p>
<p>3、按工作方式：</p>
<p>读/写存储器、只读存储器</p>
<p>4、按访问方式：</p>
<p>按地址访问存储器、按内容访问存储器</p>
<p>5、按寻址方式：</p>
<p>随机存储器、顺序存储器、直接存储器</p>
<h4 id="相连存储器"><a href="#相连存储器" class="headerlink" title="相连存储器"></a>相连存储器</h4><p>是一种按内容访问的存储器。按关键字顺序存储和读取。适合于信息的检索和更新。相连存储器可用在高速缓存存储器中，在虚拟存储器中用来作为段表、页表和快表存储器，用在数据库和知识库中。</p>
<h4 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h4><p>用来存放当前最活跃和程序和数据。<code>特点</code>：位于 CPU 与主存之间；容量 几千~~几兆字节；速度比主存快 5~10 倍，由快速半导体存储器构成；其内容是主存局部域和副本，对程序员来说是透明的。</p>
<h5 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h5><p>高速缓存（Cache）、主存（Main Memory）与 CPU。关系如下：</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093436-392776.jpg" alt=""></p>
<p>现代 CPU 的缓存分为多层，关系如下：</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093508-644025.jpg" alt=""></p>
<h5 id="地址映像方法"><a href="#地址映像方法" class="headerlink" title="地址映像方法"></a>地址映像方法</h5><p>CPU 工作时，送出去的是主存单元地址，而应从 Cache 存储器中读/写信息。需要将主存地址转化成 Cache 存储器地址，这种地址转换称为<code>地址映像</code>。</p>
<p>①<code>直接映像</code>：主存块与Cache 的对应关系是固定。</p>
<p>②<code>全相联映像</code>：主存的任一块可以调入Cache 存储器的任何一个块的空间。</p>
<p>③<code>组相联映像</code>：将 Cache 中的块再分成组。</p>
<table>
<thead>
<tr>
<th>映射名称</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>直接映像</td>
<td>地址变换很简单</td>
<td>灵活性差</td>
</tr>
<tr>
<td>全相联映像</td>
<td>主存的块调入Cache 的位置不限制，灵活</td>
<td>无法从主存块号中直接获得 Cache 的块号，变换复杂，速度比较慢</td>
</tr>
<tr>
<td>组相联映像</td>
<td>前两种方式的折中</td>
</tr>
</tbody>
</table>
<h5 id="替换算法"><a href="#替换算法" class="headerlink" title="替换算法"></a>替换算法</h5><p>目的：使 Cache 获得尽可能高的命中率。</p>
<p>①随机替换：随机产生一个要替换的块号，将该块替换出去。</p>
<p>②先进先出：将最先进入Cache的块替换出去。</p>
<p>③近期最少使用：</p>
<p>④优化替换：必须先执行一次程序，统计 Cache 的替换情况。在第二次执行该程序便可以使用做有效的方式来替换。</p>
<h5 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h5><p>设 $$H_{c}​$$ 是Cache 的命中率， $$t_{c}​$$ 是Cache 的存取时间， $$t_{m}​$$ 是主存的访问时间，则 Cache 存储器的等效加权平均访问时间 $$t_{a}​$$ 为：$$t_{a}=H_{c}t_{c}+\left( 1-H_{c}\right) t_{m}=t_{c}+\left( 1-H_{c}\right) \left( t_{m}-t_{c}\right)​$$</p>
<p>假设 Cache 访问和主存的访问是同时启动的， $$t_{c}$$ 是Cache 的存取时间，$$\left( t_{m}-t_{c}\right)$$ 为失效访问时间。如果在 Cache 不命中时才启动主内存，则 ：$$t_{a}=t_{c}+\left( 1-H_{c}\right) t_{m}$$</p>
<p>总结：降低 Cache 的失效率是提高 Cache 性能的一项重要措施。主要方法是：<code>选择恰当的块容量、提高 Cache 的容量和提高 Cache 的相联度</code>。</p>
<p>Cache 容量越大（增加 Cache 的成本和Cache 的命中时间），命中率越高，随着 Cache 容量的增加，失效率接近0%。</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093550-361073.jpg" alt=""></p>
<h5 id="多级-Cache"><a href="#多级-Cache" class="headerlink" title="多级 Cache"></a>多级 Cache</h5><p>多级，一般分为：一级（L1 Cache），二级（L2 Cache），三级（L3 Cache）等。CPU 访问首先查找 一级，若命不中就访问 二级，直到所有级别的 Cache 都命不中才访问主存。</p>
<h4 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h4><p>是一种对主存的抽象。使用虚拟地址（Virtual Address ，由 CPU 生成）的概念来访问主存，使用专门的 MMU 将虚拟地址转为物理地址后访问主存。<code>它实际上是一种逻辑存储器，实质是对物理存储设备进行逻辑化的处理</code>。</p>
<p>访问主存中的数据：CPU 给出<code>存储单元地址</code>–&gt;主存的读写控制部件定位对应的存储单元–&gt;进行读（写）操作完成访问。</p>
<h4 id="外存储器"><a href="#外存储器" class="headerlink" title="外存储器"></a>外存储器</h4><p>存放暂时不用的程序和数据，以文件的形式存储。<code>CPU 不能直接访问外存中的程序和数据，只有将其以文件为单位调入主存才可访问</code>。</p>
<h5 id="磁表面存储器"><a href="#磁表面存储器" class="headerlink" title="磁表面存储器"></a>磁表面存储器</h5><p>由<code>盘片</code>（控制数据写入和读出）、<code>驱动器</code>（寻找目标磁道位置）、<code>控制器</code>（控制驱动器的读/写操作）和<code>接口</code>（主机和磁盘存储器之间的连接逻辑）组成。</p>
<p>注意：控制器接收主机发来的命令，转化成控制命令，实现主机和驱动器之间数据格式的转换及数据传送，以控制驱动器的读/写操作。</p>
<p><code>硬盘</code>是常见的外部存储器。</p>
<p>硬盘的寻址信息由<code>硬盘驱动号</code>、<code>圆柱面号</code>、<code>磁头号</code>（记录面）、<code>数据块号</code>（或扇区号）、<code>交换量</code>组成。 </p>
<p>磁盘容量的两中指标：</p>
<p>①非格式化容量（总位数）：面数 X（磁道数/面）X 内圆周长 X 最大位密度</p>
<p>②格式化容量（各扇区中数据区容量的总和）：面数 X（磁道数/面）X（扇区数/道）X（字节数/扇区）</p>
<h5 id="光盘存储器"><a href="#光盘存储器" class="headerlink" title="光盘存储器"></a>光盘存储器</h5><p>采用聚焦激光束在盘式介质上非接触地记录高密度信息的新型存储装置。由光学、电学和机器部件组成。</p>
<p>特点是：记录密度高、存储容量大、采用非接触式读/写信息，信息可长期保存、数据传送率可超过200Mb/s、制造成本低、对机械结构的精度要求不高、存取时间较长。</p>
<p>分为：只读型光盘、只写型光盘、可擦除型光盘</p>
<h5 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h5><p>具有传统机械硬盘不具备的读写快速、质量轻、能耗低以及体积小等特定。但其价格昂贵、容量较低、一旦硬件损坏，数据较难恢复。</p>
<p>存储介质分为两种：采用<code>闪存（FLASH 芯片）</code>、采用<code>DRAM</code> 作为介质。</p>
<h4 id="磁盘阵列"><a href="#磁盘阵列" class="headerlink" title="磁盘阵列"></a>磁盘阵列</h4><p>由多台磁盘存储器组成的一个快速、大容量、高可靠的外存子系统。常见的<code>磁盘阵列称为廉价冗余磁盘阵列（RAID）</code>。</p>
<p>级别：从 RAID-0 到 RAID-6，各种类型的 RAID 可以组合起来，构成复合型的 RAID。    </p>
<h4 id="存储域网络（SAN）"><a href="#存储域网络（SAN）" class="headerlink" title="存储域网络（SAN）"></a>存储域网络（SAN）</h4><p>把一个或多个服务器与多个存储设备连接起来，每个存储设备可以是 RAID 、磁带备份系统、磁带库和 CD-ROM 库等。</p>
<p>解决了①服务器对存储容量的要求；②多个服务器之间共享文件系统和辅助存储空间；③实现分布式存储系统的集中管理，降低管理成本，提高管理效率；</p>
<p>SAN 的结构：存储域网络是连接服务器与存储设备的网络，它将多个分布在不同地点的 RAID 组织成一个逻辑存储设备，供多个服务器共同访问。</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093630-732446.jpg" alt=""></p>
<h3 id="输入-输出技术"><a href="#输入-输出技术" class="headerlink" title="输入/输出技术"></a>输入/输出技术</h3><h4 id="微型计算机中最常用的内存与接口的编址方法"><a href="#微型计算机中最常用的内存与接口的编址方法" class="headerlink" title="微型计算机中最常用的内存与接口的编址方法"></a>微型计算机中最常用的内存与接口的编址方法</h4><p>常见的两种：<code>内存与接口独立编制</code>和<code>内存与接口地址统一编址</code></p>
<table>
<thead>
<tr>
<th>说明</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>内存地址和接口地址是完全独立的两个地址空间</td>
<td>在编程序或读程序很易使用和辨认</td>
<td>接口的指令太少，功能太弱。</td>
</tr>
<tr>
<td>内存单元和接口共用地址空间</td>
<td>指令上不再区分内存指令和接口指令，增强了对接口的操作功能</td>
<td>内存地址不连续，需要参数定义表辨别</td>
</tr>
</tbody>
</table>
<h4 id="直接程序控制"><a href="#直接程序控制" class="headerlink" title="直接程序控制"></a>直接程序控制</h4><p>指外设数据的输入/输出过程是在 CPU 执行程序的控制下完成的。</p>
<p>分为：<code>无条件传送</code>(可随时向 CPU 接收或发送数据)、<code>有条件传送</code>（需要CPU查询外设状态；降低 CPU 的效率、无法实时的响应外部事件）</p>
<h4 id="中断方式"><a href="#中断方式" class="headerlink" title="中断方式"></a>中断方式</h4><p>程序控制 I/O 的方法。</p>
<p>缺点：CPU 需要定期查询 I/O 的状态，来确认传输是否完成，降低了系统的性能。</p>
<p>与程序控制方式相比，中断方式因为CPU无需等待而提高了效率。</p>
<h5 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h5><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>多中断信号线</td>
<td>中断请求信号线向 CPU 提出中断请求</td>
</tr>
<tr>
<td>中断软件查询</td>
<td>轮询每个中断源确定发出请求中断者</td>
</tr>
<tr>
<td>菊花链（硬件查询）</td>
<td>中断确认信号在 I/O 模块间传递，直达发出请求的模块，该模块把它的ID送往数据线由  CPU 读取</td>
</tr>
<tr>
<td>总线仲裁</td>
<td>在发中断前需要获取总线控制权，总线可决定谁可以发出中断请求</td>
</tr>
<tr>
<td>中断向量表</td>
<td>中断向量表保存各个中断源的中断服务程序入口地址。</td>
</tr>
</tbody>
</table>
<h5 id="优先级控制"><a href="#优先级控制" class="headerlink" title="优先级控制"></a>优先级控制</h5><p>给最紧迫的中断源分配高的优先级，给相对不紧迫的中断源分配低一些的优先级。</p>
<p>优先级控制可以解决以下情况：</p>
<p>1、当多个优先级不同的中断请求提出时，CPU 优先响应优先级最高的中断源。</p>
<p>2、执行中断嵌套。</p>
<h4 id="直接存储器存取方式"><a href="#直接存储器存取方式" class="headerlink" title="直接存储器存取方式"></a>直接存储器存取方式</h4><p>直接存储器简称 <code>DMA</code>。指在内存与I/O设备传送一个数据块的过程，不需要 CPU 的干涉（只需要在过程开启和结束）。在 DMA 传送过程中，整个系统都交给了 DMA 控制器（DMAC），由它控制系统总线完成数据传送。在 DMA 传送数据期间，CPU 不能使用总线。</p>
<h4 id="输入输出处理机"><a href="#输入输出处理机" class="headerlink" title="输入输出处理机"></a>输入输出处理机</h4><p>简称 <code>IOP</code>。IOP 也被成为通道，它分担了 CPU 的一部分功能，实现对外围设备的统一管理，完成外围设备与主存之间的数据传送，提高 CPU 的工作效率，但是它需要增加更多的硬件作为代价。</p>
<p>几步发展产品：外围处理机（PPU）、专用处理机（PPU）</p>
<h3 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h3><p>总线简称 <code>Bus</code>。指计算机设备和设备之间传输信息的公共数据通道。它的特征是由总线上的所有设备共享，可将计算机系统内的多种设备连接到总线上。</p>
<h4 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h4><p><code>数据总线</code>、<code>地址总线</code>、<code>控制总线</code>，不同型号的CPU芯片，它们也不同。</p>
<p>1、数据总线（DB）：双向、CPU通过DB从内存或输入输出设备读入数据也可以传送数据、<code>宽度决定了CPU和计算机其他设备之间每次交换数据的位数</code>。</p>
<p>2、地址总线（AB）：用于传送 CPU 发出的地址信息、单向、<code>宽度决定了 CPU 的最大寻址能力</code>。</p>
<p>3、控制总线（CB）：用来传送信号（例如：控制信号、时序信号、状态信号）、作为整体是双向的。</p>
<p>总结：总线的性能直接影响到整体系统的性能；任何系统研制和外围模块的开发都必须依从所采用的总线规范。</p>
<h4 id="常见总线"><a href="#常见总线" class="headerlink" title="常见总线"></a>常见总线</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ISA 总线（AT标准）</td>
<td>工业标准；支持16位I/O;传速16Mb/s</td>
</tr>
<tr>
<td>EISE总线</td>
<td>基于ISA起来的；32位；传输 33Mb/s</td>
</tr>
<tr>
<td>PCI总线</td>
<td>使用较广的内总线，采用并发传输方式；32/64位；PCI上的设备是即插即用；在传输时会进奇偶校验</td>
</tr>
<tr>
<td>PCI Express 总线</td>
<td>简称 <code>PCI-E</code>;采用点对点串行连接，无需向总线请求宽带，提高传输频率；PCI-E支持热拔插；双向传输，可运行全双工和双单连接工模式，连接的每个装置都可使用到做大宽度。</td>
</tr>
<tr>
<td>前端总线</td>
<td>简称 <code>FSB</code>;将CPU 连接到北桥芯片。系统需要主板和CPU都支持某个总线，才能工作；数据传输能力决定对计算机整体性能影响大；</td>
</tr>
<tr>
<td>RS-232C</td>
<td>串行外总线；至少需要三条；传输距离远；具有较好的抗干扰性</td>
</tr>
<tr>
<td>SCSI总线</td>
<td>并行外总线；广用于连接硬磁盘、光盘、扫描仪；传输距离20m（差分传送）</td>
</tr>
<tr>
<td>SATA</td>
<td>串行；主要用在主板和大量存储（硬盘、光盘）之间传输；能对传输指令进行校验并自动校正；接口优点：结构简单、支持热拔插</td>
</tr>
<tr>
<td>USB</td>
<td>串行；由四条信号线组成（两条数据传送，两条传送电源）；优点：支持热插拔、即插即用</td>
</tr>
<tr>
<td>IEEE-1394</td>
<td>最高速串行外总线；支持热拔插，可提供电源；支持同步和异步数据传输；由6条信号线组成（两条传送数据两条传送控制信号；两条传送电源）；传输可达3.2Gb/s</td>
</tr>
<tr>
<td>IEEE-488 总线</td>
<td>并行总线接口标准；总线连接方式；仪器设备（微计算机、数字电压表、数码显示器等）不需中介单元直接并行、字节串行双向异步方式传输信号；最多可连接15台设备；</td>
</tr>
</tbody>
</table>
<h2 id="安全性、可靠性与系统性能评测基础知识"><a href="#安全性、可靠性与系统性能评测基础知识" class="headerlink" title="安全性、可靠性与系统性能评测基础知识"></a>安全性、可靠性与系统性能评测基础知识</h2><h3 id="计算机安全概述"><a href="#计算机安全概述" class="headerlink" title="计算机安全概述"></a>计算机安全概述</h3><p>计算机安全包括：安全管理、通信与网络安全、密码学、安全体系及模型、容错与容灾。</p>
<h4 id="计算机的安全等级"><a href="#计算机的安全等级" class="headerlink" title="计算机的安全等级"></a>计算机的安全等级</h4><p>4组7个等级</p>
<table>
<thead>
<tr>
<th>组</th>
<th>安全级别</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>A1</td>
<td>可验证安全设计。提供B3级保护，给出形式化隐秘通道分析，非形式化代码一致性验证</td>
</tr>
<tr>
<td>2</td>
<td>B3</td>
<td>安全域。TCB必须满足访问监控的要求，提供系统恢复过程</td>
</tr>
<tr>
<td></td>
<td>B2</td>
<td>结构化安全保护。建立安全策略模型，对所有的主体和客体实施自主访问和强制访问</td>
</tr>
<tr>
<td></td>
<td>B1</td>
<td>标记安全保护。对数据进行标记，对标记的主体和客体实施强制存取控制</td>
</tr>
<tr>
<td>3</td>
<td>C2</td>
<td>受控访问控制。存取控制以用户为单位</td>
</tr>
<tr>
<td></td>
<td>C1</td>
<td>c初级的自主安全保护，实现用户和数据的分离，进行自主存取控制，以用户组为单位</td>
</tr>
<tr>
<td>4</td>
<td>D</td>
<td>最低级、保护措施很小、没有安全功能</td>
</tr>
</tbody>
</table>
<h4 id="安全威胁"><a href="#安全威胁" class="headerlink" title="安全威胁"></a>安全威胁</h4><p>分两类：<code>故意</code>（黑客渗透）和 <code>偶然</code>（信息法网错误的地址）</p>
<p>典型的安全威胁</p>
<p>授权侵犯、拒绝服务、窃听、信息泄露、截获/修改、假冒、否认、非法使用、人员疏忽、完整性破坏、媒体清理、物理入侵、资源耗尽</p>
<h4 id="影响数据安全因素"><a href="#影响数据安全因素" class="headerlink" title="影响数据安全因素"></a>影响数据安全因素</h4><p>1、内部因素：数据加密；安全规划 ；安全存储等</p>
<p>2、外部因素：设置权限；设置身份、密码、口令等多种认证；设置防火墙；</p>
<h3 id="加密认证技术和认证技术"><a href="#加密认证技术和认证技术" class="headerlink" title="加密认证技术和认证技术"></a>加密认证技术和认证技术</h3><h4 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h4><p>密钥加密技术的密码体制分为<code>对称密钥体制</code>和<code>非对称密钥体制</code>。</p>
<p>数据加密的技术分为两类，即<code>对称加密</code>（私人密钥加密）和<code>非对称加密</code>（公开密钥加密）。</p>
<h5 id="对称机密技术"><a href="#对称机密技术" class="headerlink" title="对称机密技术"></a>对称机密技术</h5><p>文件加密和解密使用相同的密钥。</p>
<p>常用的对称加密算法：</p>
<p>（1）、数据加密标准算法简称<code>DES</code>：运算速度块、密钥产生容易；适合在当前大多数计算机上用软件方法实现；适合于在专用芯片上实现。</p>
<p>（2）、三重DES（3DES或TDEA）：在 DES 的基础上采用三重DES，密钥长度加倍；发送方式，K1加密–&gt;k2解密–&gt;K1加密；接收方式，K1解密–&gt;k2加密–&gt;K1解密</p>
<p>（3）、RC-5：是在RCF2040中定义的</p>
<p>（4）、国际数据加密算法（IDEA）：密钥为 128位置；是一种据库块加密算法</p>
<p>（5）、高级加密标准（AES）算法：基于排列（对数据进行重新安排）和置换（将一个数据单元替换为另一个）运算。AES 是一个迭代的、对称密钥分组的密码，可使用 128、192和256位密钥。</p>
<h5 id="非对称加密技术"><a href="#非对称加密技术" class="headerlink" title="非对称加密技术"></a>非对称加密技术</h5><p>因为加密和解密使用的是两个不同的密钥。非对称加密算法需要两个密钥：<code>公开密钥</code>和<code>私有密钥</code>。若使用公开密钥进行加密则私有密钥才能解密；反之；</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093703-412311.jpg" alt=""></p>
<p><code>优缺点</code>：保密性好；加密和解密花费的事件长、速度慢，不适合对文件加密，适合少量数据加密。</p>
<p><code>RSA算法</code>是一种公钥加密算法；安全性是基于大素数分解的困难性能。</p>
<h5 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h5><p>包括<code>密钥生产</code>、<code>密钥备份和恢复</code>、<code>密钥更新</code>等</p>
<p><strong>密钥生产</strong>：密钥对的产生是证书申请中的一步，产生的私密由用户保留，公密由和其他信息交给CA中心进行签证，从而产生证书。普通/测试证书由浏览器或固定的终端应用产生。重要（商家证书、服务器证书）的证书，一般由专用应用或CA中心直接产生。</p>
<p><strong>密钥备份和恢复</strong>：在 PKI（公开密钥体系） 系统中，即使密钥丢失，使用 PKI 的企业和组织必须仍能得到确认，受密钥保护的重要信息也必须能够恢复。</p>
<p><strong>密钥更新</strong>：对没和由CA颁发的证书都会有有效期，密钥对生命周期的长短由签发证书的CA中心来确定，各证书的有效期都不同。</p>
<p><strong>多密钥的管理</strong>：Kerberos 建立了一个安全的、可信任的密钥中心（KDC），每个用户只要知道一个和KDC进行会话的密钥就可以了。</p>
<h4 id="认证技术"><a href="#认证技术" class="headerlink" title="认证技术"></a>认证技术</h4><p>主要解决网络通信过程中通信双方的身份认可。涉及加密（对称加密、不对称加密、两种混合）和密钥交换。认证一般有<code>账户名/口令认证</code>、<code>使用摘要算法认证</code>和<code>基于PKI认证</code>。</p>
<p>认证机构：数字证书的申请及签发机关（CA）；</p>
<p>PKI 的主要目的通过自动管理密钥和证书为用户建立一个安全的网络运行环境，是用户可以在多种环境下方便的使用加密和数字签名技术，保证网上数据的机密性、完整性和有效性。</p>
<p>KPI标准化主要有两方面：1、RSA 公司的公钥加密标准；2、一组具有互操作性的公钥基础设施协议</p>
<h5 id="Hash-函数与信息摘要"><a href="#Hash-函数与信息摘要" class="headerlink" title="Hash 函数与信息摘要"></a>Hash 函数与信息摘要</h5><p>信息摘要：简要地描述一份较长的信息或文件。用于创建数字签名（是唯一的）。</p>
<p>例子：</p>
<p>MD5（MD表示信息摘要），是被广泛应用的 Hash 函数。特点：压缩性（长度固定）、容易计算、抗修改性、强抗碰撞。</p>
<h5 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h5><p>数字签名过程：信息发送者对信息生成信息摘要–&gt;信息发送者使用私钥签名信息摘要–&gt;把信息本身和已签名的信息摘要一起发送出去–&gt;（使用同一个散列函数）接收者对信息本身生成新的信息摘要，并使用公钥对信息摘要进行验证</p>
<p>总结：数字签名是一对多的关系；可以验证数字签名的正确性；</p>
<p>数字加密过程：</p>
<p>1、信息发送者需要生成一个对称密钥，用该密钥加密要发送的报文。</p>
<p>2、信息发送者用接收者的公钥加密对称密钥。</p>
<p>3、数字信封：步骤1和步骤2结合在一起的结果。</p>
<p>4、接收者使用私钥解密被解密的对称密钥，再用对称密钥解密被加密的密文，得到原文。</p>
<p>总结：数字加密是多对一的关系；任何知道公钥的人都可向接收方发送加密信息；采用对称加密算法和非对称加密算法，保证发送信息的保密性。</p>
<h5 id="SSL-协议"><a href="#SSL-协议" class="headerlink" title="SSL 协议"></a>SSL 协议</h5><p>SSL 是安全套接层，主要用于提高应用程序之间数据的安全系数。是一个保证计算机通信安全的协议。</p>
<p>提供以下3方面的服务：    </p>
<p>1、用户和服务器的合法性认证。是它们确信数据被送到正确的客户端和服务器上。验证用户的合法性，安全套层协议要求在握交换数据时，进行数字认证。</p>
<p>2、加密数据易隐藏被发送的数据。在客户端与服务器进行数据交换之前，交换SSL初始握手信息，在 SSL 握手信息中采用了各种加密技术对其加密，保证其机密性和数据完整性，并用数字证书进行鉴别，防止破译。</p>
<p>3、保护数据的完整性。安全套接层协议采用 Hash 函数和机密共享的方法来提供信息的完整性服务，建立客户端与服务器之间的安全通道。</p>
<p>主要经过的阶段：</p>
<p>接通（服务响应）–&gt;密码交换–&gt;会谈密码–&gt;检验–&gt;结束</p>
<p>发送时，信息用对称密钥加密，对称密钥用非对称算法加密，再把两个包捆绑在一起送过去。</p>
<h5 id="数字事件戳技术"><a href="#数字事件戳技术" class="headerlink" title="数字事件戳技术"></a>数字事件戳技术</h5><p>是数字签名技术的一种变种应用。</p>
<p>数字时间戳服务（DTS）是网上电子商务安全服务项目之一，提供电子文件的日期和时间信息的安全保护。是一个经加密后形成的凭证文档。</p>
<p>包括如下3步骤：</p>
<p>文件的摘要–&gt;DTS收到文件的日期和时间–&gt;DTS的数字签名</p>
<h3 id="计算机可靠性"><a href="#计算机可靠性" class="headerlink" title="计算机可靠性"></a>计算机可靠性</h3><h4 id="计算机可靠性概述"><a href="#计算机可靠性概述" class="headerlink" title="计算机可靠性概述"></a>计算机可靠性概述</h4><p>其中，$$R\left( t\right)$$ 是正常运行的概率；$$\lambda$$ 指单位时间内失效的元件数与元件总数的比例，当它为常量时，可靠性与失效性的关系为：$$R\left( t\right) =e^{-\lambda t}$$</p>
<p>失效率特征如下图</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093721-85438.jpg" alt=""></p>
<p>平均无故障时间：$$MTBF=\dfrac {1}{\lambda }​$$</p>
<p>计算机的维修效率（MTRF）。计算机的可用性是指计算机的使用效率。它以系统在执行任务的任意时刻能正常工作的概率A表示，即：$$A=\dfrac {ETBF}{MTBF+MTRT}$$</p>
<p>计算机的 RAS 是指用可靠性 R 、可用性 A 和可维修性S这3个指衡量一个计算机系统。</p>
<h4 id="计算机可靠性模型"><a href="#计算机可靠性模型" class="headerlink" title="计算机可靠性模型"></a>计算机可靠性模型</h4><p>常见的系统可靠性数学模型有一下3种：</p>
<h5 id="串联系统"><a href="#串联系统" class="headerlink" title="串联系统"></a>串联系统</h5><p>且仅当所欲的子系统都能正常工作时。系统才正常工作。</p>
<p>可靠性公式：（$$R_{1}$$ $$R_{2}$$ 表示子系统）</p>
<p>$$R=R_{1}R_{2}\ldots R_{N}$$</p>
<p>失效公式：（$$\lambda _{1}​$$ $$\lambda _{2}​$$ 表示子系统的失效率）</p>
<p>$$\lambda =\lambda _{1}+\lambda _{2}+\ldots +\lambda _{N}​$$</p>
<h5 id="并联系统"><a href="#并联系统" class="headerlink" title="并联系统"></a>并联系统</h5><p>只要有一个子系统正常工作，系统就能正常运行</p>
<p>可靠性公式：$$R=1-\left( 1-R_{1}\right) \left( 1-R_{2}\right) \ldots \left( 1-R_{N}\right)​$$</p>
<p>失效率：$$\mu =\dfrac {1}{\dfrac {1}{\lambda }\sum ^{N}_{j=1}\dfrac {1}{j}}​$$</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190310093745-219866.jpg" alt=""></p>
<h5 id="N-模冗余系统"><a href="#N-模冗余系统" class="headerlink" title="N 模冗余系统"></a>N 模冗余系统</h5><p>由N个（N=2n+1）相同的子系统和一个表决器组成。只要有 n+1 个或 n+1 个以上的子系统能正常工作，系统就正常工作。</p>
<p><img src="http://blogimg.nos-eastchina1.126.net/shenwf20190311125807-867679.jpg" alt=""></p>
<p>公式：</p>
<p>$$R=\sum ^{N}<em>{i=n+1}\begin{pmatrix} j \ N \end{pmatrix}\times R^{i}</em>{0}\left( 1-R_{0}\right) ^{N-i}​$$</p>
<p>$$\begin{pmatrix} j \ N \end{pmatrix}$$ 表示从 N 个元素中取 i 个元素的组合数。</p>
<p>提高可靠性：提高元器件数量；发展容错技术。</p>
<h3 id="计算机系统的性能评价"><a href="#计算机系统的性能评价" class="headerlink" title="计算机系统的性能评价"></a>计算机系统的性能评价</h3><h4 id="性能测评的常用方法"><a href="#性能测评的常用方法" class="headerlink" title="性能测评的常用方法"></a>性能测评的常用方法</h4><p>（1）时钟频率。主频越高，速度越快</p>
<p>（2）指令执行速度。加法指令的运算速度衡量计算机的速度。</p>
<p>（3）等效指令法。统计各类指令在程序中所占的比例，并进行折算。</p>
<p>（4）数据处理频率法（PDR）。采用计算 PDR 值得方法来衡量机器性能，PDR 值越大，机器性能越好。注意，PDR 值只要对 CPU 和主存储器的速度进行度量，但不适合衡量机器的整体速度，因为它没有涉及到Cache、多功能部件等技术对性能的影响。</p>
<p>（5）核心程序法。把应用程序中用得最频率的那部分核心程序作为评价计算机性能的标准程序，在不同的计算机上运行，测得其执行时间。机器软/硬件结构的特点能在核心程序中的到反映，但是核心程序各部分之间的联系较小。</p>
<h4 id="基准测试程序"><a href="#基准测试程序" class="headerlink" title="基准测试程序"></a>基准测试程序</h4><p>目前测试性能较好的方法。有多种多样的基准程序。</p>
<p>（1）整数测试程序。测试编译器及CPU处理整数指令和控制功能的有效性。</p>
<p>（2）浮点测试程序。机器的浮点性能对系统的应用有很大的影响。</p>
<p>（3）SPEC基准程序。</p>
<p>（4）TPC基准程序。</p>
]]></content>
      
        <categories>
            
            <category> 软件技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 软件技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件的上传和下载]]></title>
      <url>/2018/08/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h1 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>选择 文件之后回显</p>
<a id="more"></a>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../../sunriseui.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">	</span></div><div class="line">	load(<span class="string">'ajaxfileupload'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">....</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divPreview"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"iconPic1"</span> <span class="attr">name</span>=<span class="string">"picUrl"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"imgHeadPhoto"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 320px; height: 130px; border: solid 1px #d2e2e2;"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"files"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">size</span>=<span class="string">"20"</span> <span class="attr">onchange</span>=<span class="string">"PreviewImage(this,'imgHeadPhoto','divPreview');"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">//js本地图片预览，兼容ie[6-9]、火狐、Chrome17+、Opera11+、Maxthon3</div><div class="line">function PreviewImage(fileObj, imgPreviewId, divPreviewId) &#123;</div><div class="line">    //允许上传文件的后缀名</div><div class="line">    var allowExtention = ".jpg,.bmp,.gif,.png"; </div><div class="line">    var extention = fileObj.value.substring(fileObj.value.lastIndexOf(".") + 1).toLowerCase();</div><div class="line">    var browserVersion = window.navigator.userAgent.toUpperCase();</div><div class="line">    if (allowExtention.indexOf(extention) &gt; -1) &#123;</div><div class="line">        //HTML5实现预览，兼容chrome、火狐7+等</div><div class="line">        if (fileObj.files) &#123;</div><div class="line">            if (window.FileReader) &#123;</div><div class="line">                var reader = new FileReader();</div><div class="line">                reader.onload = function (e) &#123;</div><div class="line">                    /*var pcBase64Text = e.target.result;</div><div class="line">                    var blob = dataURLtoBlob(pcBase64Text);</div><div class="line">                    console.log(e.target.result);*/</div><div class="line">                    $("#iconPic1").val(e.target.result);</div><div class="line">                    document.getElementById(imgPreviewId).setAttribute("src",e.target.result);</div><div class="line">                &#125;</div><div class="line">                //读取文件把问价转换成 Base64 格式</div><div class="line">                reader.readAsDataURL(fileObj.files[0]);</div><div class="line">            &#125;else if (browserVersion.indexOf("SAFARI") &gt; -1) &#123;</div><div class="line">                alert("不支持Safari6.0以下浏览器的图片预览!");</div><div class="line">            &#125;</div><div class="line">        &#125;else if (browserVersion.indexOf("MSIE") &gt; -1) &#123;</div><div class="line">            // 兼容 IE6 浏览器</div><div class="line">            if (browserVersion.indexOf("MSIE 6") &gt; -1) &#123;</div><div class="line">                document.getElementById(imgPreviewId).setAttribute("src", fileObj.value);</div><div class="line">            &#125;else&#123; // 兼容 IE[7-9] 浏览器</div><div class="line">                fileObj.select();</div><div class="line">                if(browserVersion.indexOf("MSIE 9") &gt; -1)&#123;</div><div class="line">                    //不加上document.selection.createRange().text在ie9会拒绝访问</div><div class="line">                    fileObj.blur();</div><div class="line">                &#125;</div><div class="line">                var newPreview = document.getElementById(divPreviewId + "New");</div><div class="line">                if(newPreview == null)&#123;</div><div class="line">                    newPreview = document.createElement("div");</div><div class="line">                    newPreview.setAttribute("id", divPreviewId + "New");</div><div class="line">                    newPreview.style.width = document.getElementById(imgPreviewId).width + "px";</div><div class="line">                    newPreview.style.height = </div><div class="line">                        document.getElementById(imgPreviewId).height + "px";</div><div class="line">                    newPreview.style.height = </div><div class="line">                        document.getElementById(imgPreviewId).height + "px";</div><div class="line">                   &#125;</div><div class="line">                newPreview.style.filter =</div><div class="line">                    "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale',</div><div class="line">                    src='" + document.selection.createRange().text + "')";</div><div class="line">                var tempDivPreview = document.getElementById(divPreviewId);</div><div class="line">                tempDivPreview.parentNode.insertBefore(newPreview, tempDivPreview);</div><div class="line">                tempDivPreview.style.display = "none";</div><div class="line">            &#125;</div><div class="line">        &#125;else if (browserVersion.indexOf("FIREFOX") &gt; -1) &#123;</div><div class="line">            var firefoxVersion =</div><div class="line">                parseFloat(browserVersion.toLowerCase().match(/firefox\/([\d.]+)/)[1]);</div><div class="line">            //firefox7以下版本</div><div class="line">            if (firefoxVersion &lt; 7) &#123;</div><div class="line">                document.getElementById(imgPreviewId).</div><div class="line">                setAttribute("src", fileObj.files[0].getAsDataURL());</div><div class="line">            &#125;else &#123;//firefox7.0+</div><div class="line">                document.getElementById(imgPreviewId).</div><div class="line">                setAttribute("src", window.URL.createObjectURL(fileObj.files[0]));</div><div class="line">            &#125;</div><div class="line">        &#125;else &#123;</div><div class="line">            document.getElementById(imgPreviewId).setAttribute("src", fileObj.value);</div><div class="line">        &#125;</div><div class="line">    &#125;else &#123;</div><div class="line">        alert("仅支持" + allowExtention + "为后缀名的文件!");</div><div class="line">        fileObj.value = ""; //清空选中文件</div><div class="line">        if (browserVersion.indexOf("MSIE") &gt; -1) &#123;</div><div class="line">            fileObj.select();</div><div class="line">            document.selection.clear();</div><div class="line">        &#125;</div><div class="line">        fileObj.outerHTML = fileObj.outerHTML;</div><div class="line">    &#125;</div><div class="line">    return fileObj.value;    //返回路径</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码里面我只用到 第一个判断 兼容chrome、火狐7+ ，使用文件内改变事件。</p>
<p>使用 ajaxfileupload.js  进行异步上传</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后台请求</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getHost(HostAddress.uomp) + <span class="string">'/uomp/keeperAdvertInfo/uploadFile'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$.ajaxFileUpload(&#123;</div><div class="line"><span class="attr">url</span>:uploadFile(),</div><div class="line"><span class="attr">type</span>:<span class="string">'post'</span>,</div><div class="line"><span class="attr">secureuri</span> : <span class="literal">false</span>, <span class="comment">// 是否需要安全协议，一般设置为false</span></div><div class="line">id : <span class="string">"filesform"</span>,</div><div class="line"><span class="attr">fileElementId</span> : <span class="string">'files'</span>, <span class="comment">// 文件上传域的ID</span></div><div class="line">dataType : <span class="string">'JSON'</span>, <span class="comment">// 返回值类型 一般设置为json</span></div><div class="line">data : &#123; <span class="comment">// 请求后台接口要带的参数</span></div><div class="line">		uploadpath:<span class="string">'keeper'</span>,</div><div class="line">		<span class="attr">fileName</span>:fn</div><div class="line">&#125;,</div><div class="line"><span class="attr">async</span> : <span class="literal">false</span>,</div><div class="line"><span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;&#125;,</div><div class="line"><span class="attr">error</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>) </span>&#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后台文件上传的上传的实现</p>
<p>文件辅助类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</div><div class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> com.eyuninfo.framework.common.SysConstant;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Log log = LogFactory.getLog(FileUtil.class);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">uploadfile</span><span class="params">(InputStream in, String filePath)</span> </span>&#123;</div><div class="line">		<span class="keyword">boolean</span> res = <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">				File file = <span class="keyword">new</span> File(filePath);</div><div class="line">				<span class="keyword">int</span> bytesRead = <span class="number">0</span>;</div><div class="line">				OutputStream os = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">				<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</div><div class="line">				<span class="keyword">while</span> ((bytesRead = in.read(buffer, <span class="number">0</span>, <span class="number">8192</span>)) != -<span class="number">1</span>) &#123;</div><div class="line">					os.write(buffer, <span class="number">0</span>, bytesRead);</div><div class="line">				&#125;</div><div class="line">				os.close();</div><div class="line">				in.close();</div><div class="line">				res = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 读取文本文件</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> txtPath 文本文件路径</div><div class="line">	 * <span class="doctag">@return</span> 文本内容</div><div class="line">	 * <span class="doctag">@author</span> michael 20161103 from kbms</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readTxt</span><span class="params">(String txtPath)</span> </span>&#123;</div><div class="line">		StringBuilder content = <span class="keyword">new</span> StringBuilder();</div><div class="line">		InputStreamReader read = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (txtPath != <span class="keyword">null</span> &amp;&amp; !txtPath.isEmpty()) &#123;</div><div class="line">				<span class="comment">// String encoding=codeString(txtPath);</span></div><div class="line">				File file = <span class="keyword">new</span> File(txtPath);</div><div class="line">				<span class="keyword">if</span> (file.isFile() &amp;&amp; file.exists()) &#123; <span class="comment">// 判断文件是否存在</span></div><div class="line">					read = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));<span class="comment">// 考虑到编码格式</span></div><div class="line">					BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(read);</div><div class="line">					String lineTxt = <span class="keyword">null</span>;</div><div class="line">					<span class="keyword">while</span> ((lineTxt = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">						content.append(lineTxt);</div><div class="line">					&#125;</div><div class="line">					read.close();</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					log.info(<span class="string">"找不到指定的文件"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				log.debug(<span class="string">"txtPath 不能为空"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			log.error(e.getMessage());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> content.toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取文件编码</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> fileName</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 * <span class="doctag">@author</span> michael 20161103 from kbms</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">codeString</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		BufferedInputStream bin = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(fileName));</div><div class="line">		<span class="keyword">int</span> p = (bin.read() &lt;&lt; <span class="number">8</span>) + bin.read();</div><div class="line">		String code = <span class="keyword">null</span>;</div><div class="line">		<span class="comment">// 其中的 0xefbb、0xfffe、0xfeff、0x5c75这些都是这个文件的前面两个字节的16进制数</span></div><div class="line">		<span class="keyword">switch</span> (p) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="number">0xefbb</span>:</div><div class="line">			code = <span class="string">"UTF-8"</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">0xfffe</span>:</div><div class="line">			code = <span class="string">"Unicode"</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">0xfeff</span>:</div><div class="line">			code = <span class="string">"UTF-16BE"</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">0x5c75</span>:</div><div class="line">			code = <span class="string">"ANSI|ASCII"</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			code = <span class="string">"GBK"</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> code;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建目录</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> dir 目录</div><div class="line">	 * <span class="doctag">@return</span> boolean 创建结果</div><div class="line">	 * <span class="doctag">@author</span> michael 20161103 from kbms</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">mkDir</span><span class="params">(File dir)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!dir.getParentFile().exists()) &#123;</div><div class="line">			mkDir(dir.getParentFile());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> dir.mkdir();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取某文件夹下的所有文件（递归,含子文件）</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> file</div><div class="line">	 * <span class="doctag">@param</span> resultFileName</div><div class="line">	 * <span class="doctag">@return</span> 文件名称列表</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getFiles</span><span class="params">(File file, List&lt;String&gt; resultFileName)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File[] files = file.listFiles();</div><div class="line">			<span class="keyword">if</span> (files == <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> resultFileName;<span class="comment">// 判断目录下是不是空的</span></div><div class="line">			<span class="keyword">for</span> (File f : files) &#123;</div><div class="line">				<span class="keyword">if</span> (f.isDirectory()) &#123;<span class="comment">// 判断是否文件夹</span></div><div class="line">					resultFileName.add(f.getPath());</div><div class="line">					getFiles(f, resultFileName);<span class="comment">// 调用自身,查找子目录</span></div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					resultFileName.add(f.getPath());</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> resultFileName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 文件复制</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> source 原文件</div><div class="line">	 * <span class="doctag">@param</span> target 目标文件</div><div class="line">	 * <span class="doctag">@author</span> michael 20161103 from kbms</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(File source, File target)</span> </span>&#123;</div><div class="line">		InputStream fis = <span class="keyword">null</span>;</div><div class="line">		OutputStream fos = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			fis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(source));</div><div class="line">			fos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(target));</div><div class="line">			<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</div><div class="line">			<span class="keyword">int</span> i;</div><div class="line">			<span class="keyword">while</span> ((i = fis.read(buf)) != -<span class="number">1</span>) &#123;</div><div class="line">				fos.write(buf, <span class="number">0</span>, i);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			log.error(e.getMessage());</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				fis.close();</div><div class="line">				fos.close();</div><div class="line">				log.info(<span class="string">"已经复制文件:"</span> + source.getPath() + <span class="string">" 到 "</span> + target.getPath());</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception ioe) &#123;</div><div class="line">				ioe.printStackTrace();</div><div class="line">				log.error(ioe.getMessage());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除文件夹里面所有内容</div><div class="line">	 * <span class="doctag">@param</span> path</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@author</span> michael 20161103 from kbms</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">delAllFile</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">		File file = <span class="keyword">new</span> File(path);</div><div class="line">		<span class="keyword">if</span> (!file.exists()) &#123;</div><div class="line">			<span class="keyword">return</span> flag;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">if</span> (!file.isDirectory()) &#123;</div><div class="line">	    	<span class="keyword">return</span> flag;</div><div class="line">	    &#125;</div><div class="line">	    String[] tempList = file.list();</div><div class="line">	    File temp = <span class="keyword">null</span>;</div><div class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempList.length; i++) &#123;</div><div class="line">	    	<span class="keyword">if</span> (path.endsWith(File.separator)) &#123;</div><div class="line">	             temp = <span class="keyword">new</span> File(path + tempList[i]);</div><div class="line">	        &#125; <span class="keyword">else</span> &#123;</div><div class="line">	        	temp = <span class="keyword">new</span> File(path + File.separator + tempList[i]);</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">if</span> (temp.isFile()) &#123;</div><div class="line">	        	temp.delete();</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">if</span> (temp.isDirectory()) &#123;</div><div class="line">                <span class="comment">//先删除文件夹里面的文件</span></div><div class="line">	        	delAllFile(path + SysConstant.FILE_SEPARATOR + tempList[i]);</div><div class="line">	        	flag = <span class="keyword">true</span>;</div><div class="line">	        	</div><div class="line">	       &#125;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> flag;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建Txt文件</div><div class="line">	 * <span class="doctag">@param</span> name 文件名</div><div class="line">	 * <span class="doctag">@param</span> text</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createTxtFile</span><span class="params">(String name,String text)</span></span>&#123;	</div><div class="line">			 <span class="keyword">try</span>&#123;</div><div class="line">				 String docPath=SysConstant.config.getProperty(<span class="string">"txtPath"</span>);</div><div class="line">				 <span class="keyword">if</span>(docPath!=<span class="keyword">null</span>)&#123;</div><div class="line">					 <span class="keyword">boolean</span> re=<span class="keyword">true</span>;</div><div class="line">				 docPath = docPath+SysConstant.FILE_SEPARATOR+DateUtil.getDate(<span class="string">""</span>);</div><div class="line">				 File docFile=<span class="keyword">new</span> File(docPath);</div><div class="line">				 <span class="keyword">if</span>(!docFile.exists())&#123;</div><div class="line">					 re= docFile.mkdirs(); </div><div class="line">				 &#125;</div><div class="line">				 <span class="keyword">if</span>(re)&#123;</div><div class="line">                  <span class="comment">//结构化数据保存为txt文档用于创建文件索引</span></div><div class="line">			     docPath+=SysConstant.FILE_SEPARATOR+name+<span class="string">".txt"</span>;</div><div class="line">				 InputStream inputStream = InputStreamUtils.StringToInputStream(text);</div><div class="line">				 <span class="keyword">if</span>(uploadDoc(inputStream,docPath)) <span class="keyword">return</span> docPath;<span class="keyword">else</span>&#123;</div><div class="line">					 <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">				 &#125;</div><div class="line">				 &#125;<span class="keyword">else</span>&#123;</div><div class="line">					 log.error(<span class="string">"docPath不存在"</span>+docPath);</div><div class="line">					 <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">				 &#125;</div><div class="line">				 &#125;<span class="keyword">else</span>&#123;</div><div class="line">					 log.error(<span class="string">"配置文件SysConstant不存在 docPath 参数"</span>);</div><div class="line">					 <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">				 &#125;</div><div class="line">			 &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">				 e.printStackTrace();</div><div class="line">				 <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			 &#125;</div><div class="line">	 &#125;</div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">uploadDoc</span><span class="params">(InputStream in,String filePath)</span></span>&#123;</div><div class="line">			<span class="keyword">boolean</span> res= <span class="keyword">false</span>;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				<span class="keyword">if</span>(in!=<span class="keyword">null</span>)&#123;</div><div class="line">					File file = <span class="keyword">new</span> File(filePath);</div><div class="line">					<span class="keyword">if</span>(file.exists())&#123;</div><div class="line">						file.createNewFile();</div><div class="line">					&#125;</div><div class="line">					log.info(<span class="string">"docPath:::&gt;&gt;"</span>+filePath);</div><div class="line">					<span class="keyword">int</span> bytesRead = <span class="number">0</span>;</div><div class="line">					OutputStream os = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">					<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</div><div class="line">					<span class="keyword">while</span> ((bytesRead = in.read(buffer, <span class="number">0</span>, <span class="number">8192</span>)) != -<span class="number">1</span>) &#123;</div><div class="line">						os.write(buffer, <span class="number">0</span>, bytesRead);</div><div class="line">					&#125;</div><div class="line">					os.close();</div><div class="line">					in.close();</div><div class="line">					res= <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">				e.printStackTrace();</div><div class="line">				log.error(e.getMessage());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> res;</div><div class="line">		&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/uploadFile"</span>, method = RequestMethod.POST,produces=<span class="string">"text/plain;charset=UTF-8"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span>  ResultBean&lt;LogImportBean&gt; <span class="title">uploadFile</span><span class="params">(Locale locale,@RequestParam(<span class="string">"uploadpath"</span>)</span> String uploadpath,</span></div><div class="line">@<span class="title">RequestParam</span><span class="params">(<span class="string">"fileName"</span>)</span> String fileName,@RequestParam MultipartFile[] files, Model model) &#123;</div><div class="line">	ResultBean&lt;LogImportBean&gt; rb=<span class="keyword">new</span> ResultBean&lt;LogImportBean&gt;();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		String rootpatch=</div><div class="line">            SysConstant.config.getProperty(<span class="string">"rootuplaodfile"</span>)+File.separator+uploadpath;</div><div class="line">		File rootfile=<span class="keyword">new</span> File(rootpatch);</div><div class="line">		<span class="keyword">if</span>(!rootfile.exists())&#123;</div><div class="line">			<span class="keyword">if</span>(rootfile.mkdirs())&#123;</div><div class="line">				log.info(<span class="string">"创建文件夹成功："</span>+rootpatch);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				log.info(<span class="string">"创建文件夹失败："</span>+rootpatch);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">new</span> File(rootpatch).exists())&#123;</div><div class="line">			String filepath=rootpatch+File.separator+fileName;</div><div class="line">			<span class="keyword">if</span>(FileUtil.uploadfile(files[<span class="number">0</span>].getInputStream(),filepath))&#123;</div><div class="line">				rb.setBean(<span class="keyword">new</span> LogImportBean(<span class="number">0</span>, <span class="string">"保存附件成功！"</span>));</div><div class="line">				rb.setReturnCode(SysConstant.SYS_RETURN_SUCCESS_CODE);</div><div class="line">				rb.setReturnMessage(SysConstant.SYS_RETURN_SUCCESS_MESSAGE);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				rb.setBean(<span class="keyword">new</span> LogImportBean(<span class="number">0</span>, <span class="string">"保存附件失败！"</span>));</div><div class="line">				rb.setReturnCode(SysConstant.SYS_RETURN_FAILED_CODE);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			rb.setReturnCode(SysConstant.SYS_RETURN_FAILED_CODE);</div><div class="line">			rb.setReturnCode(<span class="string">"rootpatch文件夹不存在："</span>+rootpatch);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> rb;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文件下载</p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/downloadFile"</span>, method = RequestMethod.GET)</div><div class="line"><span class="keyword">public</span>	ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;  downloadFile(Locale locale,</div><div class="line">		<span class="meta">@RequestParam</span>(<span class="string">"uploadpath"</span>) String uploadpath,</div><div class="line">		<span class="meta">@RequestParam</span>(<span class="string">"fileName"</span>) String fileName, Model model)&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		String rootpatch=</div><div class="line">		SysConstant.config.getProperty(<span class="string">"rootuplaodfile"</span>)+File.separator+uploadpath;</div><div class="line">		String filepath=rootpatch+File.separator+fileName;</div><div class="line">		HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line">	    MediaType mt=<span class="keyword">new</span> MediaType(<span class="string">"application"</span>,<span class="string">"octet-stream"</span>);   </div><div class="line">	    headers.setContentType(mt);</div><div class="line">	    fileName = <span class="keyword">new</span> String(fileName.getBytes(<span class="string">"UTF-8"</span>),<span class="string">"ISO8859-1"</span>);</div><div class="line">	    headers.setContentDispositionFormData(<span class="string">"attachment"</span>,fileName);</div><div class="line">	    File file=<span class="keyword">new</span> File(filepath);</div><div class="line">	    <span class="keyword">if</span>(file.exists())&#123;</div><div class="line">	    	<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(FileUtils.readFileToByteArray(file), headers,      HttpStatus.OK); </div><div class="line">	    &#125;<span class="keyword">else</span>&#123;</div><div class="line">	    	<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">null</span>, headers, HttpStatus.FAILED_DEPENDENCY); </div><div class="line">	    &#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, HttpStatus.FAILED_DEPENDENCY); </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java 高级 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java 高级 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片上传base64]]></title>
      <url>/2018/08/05/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0base64/</url>
      <content type="html"><![CDATA[<h1 id="图片上传base64"><a href="#图片上传base64" class="headerlink" title="图片上传base64"></a>图片上传base64</h1><a id="more"></a>
<h2 id="选择图片并转换"><a href="#选择图片并转换" class="headerlink" title="选择图片并转换"></a>选择图片并转换</h2><h3 id="html-页面"><a href="#html-页面" class="headerlink" title="html 页面"></a>html 页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divPreview"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"iconPic1"</span> <span class="attr">name</span>=<span class="string">"iconPic"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"imgHeadPhoto"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 120px; height: 130px; border: solid 1px #d2e2e2;"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"PreviewImage(this,'imgHeadPhoto','divPreview');"</span> <span class="attr">size</span>=<span class="string">"20"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">//js本地图片预览，兼容ie[6-9]、火狐、Chrome17+、Opera11+、Maxthon3</div><div class="line">function PreviewImage(fileObj, imgPreviewId, divPreviewId) &#123;</div><div class="line">    //允许上传文件的后缀名</div><div class="line">    var allowExtention = ".jpg,.bmp,.gif,.png"; </div><div class="line">    var extention = fileObj.value.substring(fileObj.value.lastIndexOf(".") + 1).toLowerCase();</div><div class="line">    var browserVersion = window.navigator.userAgent.toUpperCase();</div><div class="line">    if (allowExtention.indexOf(extention) &gt; -1) &#123;</div><div class="line">        //HTML5实现预览，兼容chrome、火狐7+等</div><div class="line">        if (fileObj.files) &#123;</div><div class="line">            if (window.FileReader) &#123;</div><div class="line">                var reader = new FileReader();</div><div class="line">                reader.onload = function (e) &#123;</div><div class="line">                    /*var pcBase64Text = e.target.result;</div><div class="line">                    var blob = dataURLtoBlob(pcBase64Text);</div><div class="line">                    console.log(e.target.result);*/</div><div class="line">                    $("#iconPic1").val(e.target.result);</div><div class="line">                    document.getElementById(imgPreviewId).setAttribute("src",e.target.result);</div><div class="line">                &#125;</div><div class="line">                //读取文件把问价转换成 Base64 格式</div><div class="line">                reader.readAsDataURL(fileObj.files[0]);</div><div class="line">            &#125;else if (browserVersion.indexOf("SAFARI") &gt; -1) &#123;</div><div class="line">                alert("不支持Safari6.0以下浏览器的图片预览!");</div><div class="line">            &#125;</div><div class="line">        &#125;else if (browserVersion.indexOf("MSIE") &gt; -1) &#123;</div><div class="line">            // 兼容 IE6 浏览器</div><div class="line">            if (browserVersion.indexOf("MSIE 6") &gt; -1) &#123;</div><div class="line">                document.getElementById(imgPreviewId).setAttribute("src", fileObj.value);</div><div class="line">            &#125;else&#123; // 兼容 IE[7-9] 浏览器</div><div class="line">                fileObj.select();</div><div class="line">                if(browserVersion.indexOf("MSIE 9") &gt; -1)&#123;</div><div class="line">                    //不加上document.selection.createRange().text在ie9会拒绝访问</div><div class="line">                    fileObj.blur();</div><div class="line">                &#125;</div><div class="line">                var newPreview = document.getElementById(divPreviewId + "New");</div><div class="line">                if(newPreview == null)&#123;</div><div class="line">                    newPreview = document.createElement("div");</div><div class="line">                    newPreview.setAttribute("id", divPreviewId + "New");</div><div class="line">                    newPreview.style.width = document.getElementById(imgPreviewId).width + "px";</div><div class="line">                    newPreview.style.height = </div><div class="line">                        document.getElementById(imgPreviewId).height + "px";</div><div class="line">                    newPreview.style.height = </div><div class="line">                        document.getElementById(imgPreviewId).height + "px";</div><div class="line">                   &#125;</div><div class="line">                newPreview.style.filter =</div><div class="line">                    "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale',</div><div class="line">                    src='" + document.selection.createRange().text + "')";</div><div class="line">                var tempDivPreview = document.getElementById(divPreviewId);</div><div class="line">                tempDivPreview.parentNode.insertBefore(newPreview, tempDivPreview);</div><div class="line">                tempDivPreview.style.display = "none";</div><div class="line">            &#125;</div><div class="line">        &#125;else if (browserVersion.indexOf("FIREFOX") &gt; -1) &#123;</div><div class="line">            var firefoxVersion =</div><div class="line">                parseFloat(browserVersion.toLowerCase().match(/firefox\/([\d.]+)/)[1]);</div><div class="line">            //firefox7以下版本</div><div class="line">            if (firefoxVersion &lt; 7) &#123;</div><div class="line">                document.getElementById(imgPreviewId).</div><div class="line">                setAttribute("src", fileObj.files[0].getAsDataURL());</div><div class="line">            &#125;else &#123;//firefox7.0+</div><div class="line">                document.getElementById(imgPreviewId).</div><div class="line">                setAttribute("src", window.URL.createObjectURL(fileObj.files[0]));</div><div class="line">            &#125;</div><div class="line">        &#125;else &#123;</div><div class="line">            document.getElementById(imgPreviewId).setAttribute("src", fileObj.value);</div><div class="line">        &#125;</div><div class="line">    &#125;else &#123;</div><div class="line">        alert("仅支持" + allowExtention + "为后缀名的文件!");</div><div class="line">        fileObj.value = ""; //清空选中文件</div><div class="line">        if (browserVersion.indexOf("MSIE") &gt; -1) &#123;</div><div class="line">            fileObj.select();</div><div class="line">            document.selection.clear();</div><div class="line">        &#125;</div><div class="line">        fileObj.outerHTML = fileObj.outerHTML;</div><div class="line">    &#125;</div><div class="line">    return fileObj.value;    //返回路径</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码里面我只用到 第一个判断 兼容chrome、火狐7+ ，使用文件内容改变事件。</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://blogimg.nos-eastchina1.126.net/180805/I570HKG3je.png" alt="mark"></p>
<h2 id="关于-FileReader-的几种转化"><a href="#关于-FileReader-的几种转化" class="headerlink" title="关于 FileReader 的几种转化"></a>关于 FileReader 的几种转化</h2><p>因为我保存到数据的类型是 Clob ,所以我把 FileReader 解析的 Base64 内容直接以文本的形式保存到数据库。这样的好处是，在显示图片的时候直接给 img 标签的 src 赋值就好了，不用转。</p>
<p>假如你的图片要保存在类型是 Blob 的话，那就需要把图片转成二进制（原因，reader.readAsDataURL转化的是十六进制Blob 只能保存二进制内容）。下面的两个方法可以实现，Base64  转 二进制，二进制 转 Base64 。</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoBlob</span>(<span class="params">dataurl</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</div><div class="line">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">        u8arr[n] = bstr.charCodeAt(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readBlobAsDataURL</span>(<span class="params">blob, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> FileReader();</div><div class="line">    a.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;callback(e.target.result);&#125;;</div><div class="line">    a.readAsDataURL(blob);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 测试</span></div><div class="line">readBlobAsDataURL(blob, <span class="function"><span class="keyword">function</span> (<span class="params">dataurl</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(dataurl);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="存储图片到数据库"><a href="#存储图片到数据库" class="headerlink" title="存储图片到数据库"></a>存储图片到数据库</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.eyuninfo.bean.uomp.keeperManager;</div><div class="line"><span class="keyword">import</span> javax.persistence.Basic;</div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.FetchType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Lob;</div><div class="line"><span class="keyword">import</span> com.eyuninfo.bean.EntityBean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span>:  shenwenfang</div><div class="line"> * <span class="doctag">@CreateDate</span>: 2018-06-25</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeeperManage</span> <span class="keyword">extends</span> <span class="title">EntityBean</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7125755338853860747L</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 我想办code</span></div><div class="line">    <span class="keyword">private</span> String code;</div><div class="line"></div><div class="line">    <span class="comment">// 功能名称</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="comment">// 页面跳转路径</span></div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line"></div><div class="line">    <span class="comment">// 渠道：1表示移动银行 2表示直销银行</span></div><div class="line">    <span class="keyword">private</span> String channel;</div><div class="line"></div><div class="line">	<span class="comment">// 状态：0：正常 1表示删除</span></div><div class="line">    <span class="keyword">private</span> String status;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 存放图片base64</div><div class="line">     */</div><div class="line">    <span class="meta">@Lob</span></div><div class="line">    <span class="keyword">private</span> String iconPic;</div><div class="line">    </div><div class="line">    <span class="comment">// 省略了 set 和 get 方法</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：在保存 base64 的字段加上  JPA 的 @Lob 注解。假如在查询字段报转换错误的话。</p>
<h3 id="service-层"><a href="#service-层" class="headerlink" title="service 层"></a>service 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.eyuninfo.uomp.web.keepermanager.service;</div><div class="line"><span class="keyword">import</span> com.eyuninfo.bean.uomp.keeperManager.KeeperManage;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IKeperDealManageService</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加</div><div class="line">     * <span class="doctag">@param</span> bean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addKeperDealManage</span><span class="params">(KeeperManage bean)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.eyuninfo.uomp.web.keepermanager.service;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> com.eyuninfo.bean.uomp.keeperManager.KeeperManage;</div><div class="line"><span class="keyword">import</span> com.eyuninfo.framework.base.service.impl.BaseService;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span>(<span class="string">"keperDealManageService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeperDealManageService</span> <span class="keyword">extends</span> <span class="title">BaseService</span> <span class="keyword">implements</span> <span class="title">IKeperDealManageService</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addKeperDealManage</span><span class="params">(KeeperManage bean)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.insert(<span class="string">"addKeperDealManage"</span>, bean);</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="controller-层"><a href="#controller-层" class="headerlink" title="controller 层"></a>controller 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.eyuninfo.uomp.web.keepermanager.controller;</div><div class="line"><span class="keyword">import</span> com.eyuninfo.bean.ResultBean;</div><div class="line"><span class="keyword">import</span> com.eyuninfo.bean.uomp.keeperManager.KeeperManage;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/keperDealManage"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeperDealManageController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> IKeperDealManageService keperDealManageService;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加</div><div class="line">     * <span class="doctag">@param</span> locale</div><div class="line">     * <span class="doctag">@param</span> bean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/addKeperDealManage"</span>, method = &#123; RequestMethod.POST &#125;)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ResultBean&lt;KeeperManage&gt; <span class="title">addKeperDealManage</span><span class="params">(Locale locale, @ModelAttribute(<span class="string">"KeperDealManage"</span>)</span> KeeperManage bean) </span>&#123;</div><div class="line">        ResultBean&lt;KeeperManage&gt;  rb = <span class="keyword">new</span> ResultBean&lt;KeeperManage&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">        	<span class="comment">// 生成主键</span></div><div class="line">        	bean.setCode(DateUtil.getCurDataFormat(<span class="string">"yyyyMMddHHmmssSSS"</span>));</div><div class="line">        	String date = DateUtil.getCurDataFormat(<span class="string">"yyyyMMddHHmmss"</span>);</div><div class="line">        	bean.setCreatetime(date);</div><div class="line">        	bean.setUpdateTime(date);</div><div class="line">            <span class="keyword">int</span> newKey = keperDealManageService.addKeperDealManage(bean);</div><div class="line">            <span class="keyword">if</span>(newKey &gt; <span class="number">0</span>)&#123;</div><div class="line">                rb.setReturnCode(SysConstant.SYS_RETURN_SUCCESS_CODE);</div><div class="line">                rb.setReturnMessage(SysConstant.SYS_RETURN_SUCCESS_MESSAGE);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rb.setReturnCode(SysConstant.SYS_RETURN_FAILED_CODE);</div><div class="line">                rb.setReturnMessage(SysConstant.SYS_RETURN_FAILED_MESSAGE);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            log.error(<span class="string">"异常："</span>+e.getMessage());</div><div class="line">            rb.setReturnCode(SysConstant.SYS_RETURN_EXCEPTION_CODE);</div><div class="line">            rb.setReturnMessage(<span class="string">"异常："</span>+e.getMessage());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.eyuninfo.uomp.web.keepermanager.service.IKeperDealManageService"</span>&gt;</span></div><div class="line">    insert into </div><div class="line">      keeper_deal_manage (</div><div class="line">      code, </div><div class="line">      name, </div><div class="line">      url, </div><div class="line">      channel, </div><div class="line">      creator, </div><div class="line">      createtime,</div><div class="line">      operator, </div><div class="line">      update_time, </div><div class="line">      sort, </div><div class="line">      icon_pic,</div><div class="line">      funtype</div><div class="line">      )</div><div class="line">    values (</div><div class="line">      #&#123;code,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;name,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;url,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;channel,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;creator,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;createtime,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;operator,jdbcType=VARCHAR&#125;,</div><div class="line">      #&#123;updateTime,jdbcType=VARCHAR&#125;, </div><div class="line">      #&#123;sort,jdbcType=DECIMAL&#125;, </div><div class="line">      #&#123;iconPic,jdbcType=CLOB&#125;,</div><div class="line">      #&#123;funType,jdbcType=VARCHAR&#125;</div><div class="line">      )</div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p><img src="https://blogimg.nos-eastchina1.126.net/180805/LLdfLE2H1E.png" alt="mark"></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180805/EKFEGhjL1C.png" alt="mark"></p>
<p>保存的是一段很长得字符串（十六进制），把它放到浏览器的访问就是一张图片。</p>
<h2 id="关联知识点"><a href="#关联知识点" class="headerlink" title="关联知识点"></a>关联知识点</h2><h3 id="FileList-对象和-file-对象"><a href="#FileList-对象和-file-对象" class="headerlink" title="FileList 对象和 file 对象"></a>FileList 对象和 file 对象</h3><p>HTML 中的 input[type=”file”] 标签有个 multiple 属性，允许用户选择多个文件，FileList对象则就是表示用户选择的文件列表。这个列表中的每一个文件，就是一个 file 对象。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"files"</span> multiple&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">'files'</span>);</div><div class="line">    elem.onchange = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> files = event.target.files;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</div><div class="line">            <span class="comment">// 文件类型为 image 并且文件大小小于 200kb</span></div><div class="line">            <span class="keyword">if</span>(files[i].type.indexOf(<span class="string">'image/'</span>) !== <span class="number">-1</span> &amp;&amp; files[i].size &lt; <span class="number">204800</span>)&#123;</div><div class="line">                <span class="built_in">console</span>.log(files[i].name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180805/14kH2K4I7J.png" alt="mark"></p>
<p>input 中有个 accept 属性，可以用来规定能够通过文件上传进行提交的文件类型。</p>
<p>accept=”image/*” 可以用来限制只允许上传图像格式。但是在 Webkit 浏览器下却出现了响应滞慢的问题，要等上好几秒才弹出文件选择框。</p>
<p>解决方法就是将 * 通配符改为指定的 MIME 类型。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/gif,image/jpeg,image/jpg,image/png"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Blob-对象"><a href="#Blob-对象" class="headerlink" title="Blob 对象"></a>Blob 对象</h3><p>Blob 对象相当于一个容器，可以用于存放二进制数据。它有两个属性，size 属性表示字节长度，type 属性表示 MIME 类型。</p>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="string">'hello'</span>], &#123;<span class="attr">type</span>:<span class="string">"text/plain"</span>&#125;);</div></pre></td></tr></table></figure>
<p>Blob 构造函数中的第一个参数是一个数组，可以存放 ArrayBuffer对象、ArrayBufferView 对象、Blob对象和字符串。</p>
<p>Blob 对象可以通过 slice() 方法来返回一个新的 Blob 对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newblob = blob.slice(<span class="number">0</span>,<span class="number">5</span>, &#123;<span class="attr">type</span>:<span class="string">"text/plain"</span>&#125;);</div></pre></td></tr></table></figure>
<p>slice() 方法使用三个参数，均为可选。第一个参数代表要从Blob对象中的二进制数据的起始位置开始复制，第二个参数代表复制的结束位置，第三个参数为 Blob 对象的 MIME 类型。</p>
<p>canvas.toBlob() 也可以创建 Blob 对象。toBlob() 使用三个参数，第一个为回调函数，第二个为图片类型，默认为 image/png，第三个为图片质量，值在0到1之间。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</div><div class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>)</span>&#123; <span class="built_in">console</span>.log(blob); &#125;, <span class="string">"image/jpeg"</span>, <span class="number">0.5</span>);</div></pre></td></tr></table></figure>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>Blod 对象可以通过 window.URL 对象生成一个网络地址，结合 a 标签的 download 属性来实现下载文件功能。</p>
<p>比如把 canvas 下载为一个图片文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</div><div class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>)</span>&#123;</div><div class="line">    <span class="comment">// 使用 createObjectURL 生成地址，格式为 blob:null/fd95b806-db11-4f98-b2ce-5eb16b38ba36</span></div><div class="line">    <span class="keyword">var</span> url = URL.createObjectURL(blob);</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">    a.download = <span class="string">'canvas'</span>;</div><div class="line">    a.href = url;</div><div class="line">    <span class="comment">// 模拟a标签点击进行下载</span></div><div class="line">    a.click();</div><div class="line">    <span class="comment">// 下载后告诉浏览器不再需要保持这个文件的引用了</span></div><div class="line">    URL.revokeObjectURL(url);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java 高级 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java 高级 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现 xls 数据的导入]]></title>
      <url>/2018/08/05/%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="实现-xls-数据的导入"><a href="#实现-xls-数据的导入" class="headerlink" title="实现 xls 数据的导入"></a>实现 xls 数据的导入</h1><a id="more"></a>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-add',plain:true"</span> </span></div><div class="line"><span class="attr">onclick</span>=<span class="string">"batchAddClient()"</span>&gt;导入信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 导入框 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"importCheckWin"</span> <span class="attr">class</span>=<span class="string">"easyui-dialog"</span> <span class="attr">data-options</span>=<span class="string">"onBeforeOpen:getDialogCheckUrl,</span></span></div><div class="line">closed:true" <span class="attr">style</span>=<span class="string">"width:489px; height:268px;"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">id</span> = <span class="string">"impIframeCheck"</span> <span class="attr">width</span>=<span class="string">"100%"</span> </span></div><div class="line">	<span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="js-方法"><a href="#js-方法" class="headerlink" title="js 方法"></a>js 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDialogCheckUrl</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url = getHost(HostAddress.uomp)+<span class="string">'/uomp/cdaBaseDataRemarks/importCheckWin'</span>;</div><div class="line">	$(<span class="string">'#impIframeCheck'</span>).attr(<span class="string">'src'</span>,url);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/cdaBaseDataRemarks"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CdaBaseDataRemarksController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 打开批量检查导入窗口</div><div class="line">	 * <span class="doctag">@param</span> locale</div><div class="line">	 * <span class="doctag">@param</span> model</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"/importCheckWin"</span>, method = RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">importCheckWin</span><span class="params">(Locale locale, Model model)</span> </span>&#123;</div><div class="line">		model.addAttribute(<span class="string">"uihost"</span>, SysConstant.config.getProperty(<span class="string">"uihost"</span>));</div><div class="line">		<span class="keyword">return</span> <span class="string">"importBatchRemarksCheck"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="jsp-页面"><a href="#jsp-页面" class="headerlink" title="jsp 页面"></a>jsp 页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;批量检查客户窗口&lt;/title&gt;</div><div class="line">&lt;script type="text/javascript"</div><div class="line">	src="$&#123;uihost&#125;/sunriseui/sunriseui.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">	load('ajaxfileupload')</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">	var map;var index=0; var mapLenght=0;/*map长度 */  </div><div class="line">    var successNum=0;/*成功条数*/ </div><div class="line">    var failNum='';/*错误行号*/</div><div class="line">	//存在跨域问题 不能够获取到返回值 -- 批量检查提交</div><div class="line">	function coreSelect() &#123;</div><div class="line">				$('#tipgrid').empty();</div><div class="line">				$.ajaxFileUpload(&#123;</div><div class="line">					url : getHost(HostAddress.uomp) +                                                               '/uomp/cdaBaseDataRemarks/importBatchClientCheckData',</div><div class="line">					secureuri : false, // 是否需要安全协议，一般设置为false</div><div class="line">					id : "filesform",</div><div class="line">					fileElementId : 'files', // 文件上传域的ID</div><div class="line">					dataType : 'json', // 返回值类型 一般设置为json</div><div class="line">					data : &#123;</div><div class="line">					&#125;,</div><div class="line">					async : false,</div><div class="line">					success : function(data)&#123;// 服务器成功响应处理函数</div><div class="line">						if(data.returnCode==ReturnCode.success)&#123;</div><div class="line">							$('#importRotaff').form('reset');</div><div class="line">							 $('#tipgrid').datagrid(&#123;</div><div class="line">								data:data,</div><div class="line">								title:'导入结果',</div><div class="line">								fitColumns:false,</div><div class="line">								border:false,</div><div class="line">							    columns:[[</div><div class="line">							        &#123;field:'relustMsg',title:'备注信息导入结果',width:500&#125;</div><div class="line">							    ]]</div><div class="line">							&#125;); </div><div class="line">							 $('#tipgrid').append("&lt;span&gt;"+data.returnMessage+'&lt;/span&gt;');</div><div class="line">						&#125;else&#123;</div><div class="line">							 $.messager.alert('警告', data.returnMessage,'warning');</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	function fileChange(target)&#123;</div><div class="line">		var fileSize = 0;</div><div class="line">		if(!target.files)&#123;</div><div class="line">			var filePath = target.value;</div><div class="line">			var fileSystem = new ActiveXObject("Scriting.FileSystemObject");</div><div class="line">			var file = fileSystem.GetFile(filePath);</div><div class="line">			fileSize = file.Size;</div><div class="line">		&#125;else&#123;</div><div class="line">			fileSize = target.files[0].size;</div><div class="line">		&#125;</div><div class="line">		var size = fileSize/1024;</div><div class="line">		if(size&gt;3000)&#123;</div><div class="line">			 $.messager.alert('警告','导入数据超过3M，请分批导入!','warning');</div><div class="line">			 $('#subBtn').attr('disable');</div><div class="line">			 return;</div><div class="line">		&#125;else&#123;</div><div class="line">			$('#subBtn').linkbutton('enable');</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body class="easyui-layout" data-options="fit:true"&gt;</div><div class="line">	&lt;div data-options="region:'center'" style="background: #eee;"&gt;</div><div class="line">		&lt;form id="importRotaff" action="" enctype="multipart/form-data"&gt;</div><div class="line">			&lt;table style="width: 100%"&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td colspan="2"&gt;</div><div class="line">							&lt;input  type="file" name="files" onchange="fileChange(this)"                                    id="files" style="width: 200px"&gt;</div><div class="line">							&lt;a id="subBtn" href="#" </div><div class="line">                               class="easyui-linkbutton" iconCls="icon-search"                                                  onclick="coreSelect()"&gt;导入信息&lt;/a&gt;</div><div class="line">						&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">					 &lt;td align="center" id="thistd"&gt;&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">			&lt;/table&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">		&lt;div id="tipgrid"&gt;&lt;/div&gt;	</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="数据导入-controller"><a href="#数据导入-controller" class="headerlink" title="数据导入 controller"></a>数据导入 controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/cdaBaseDataRemarks"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CdaBaseDataRemarksController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 读取批量检查Excel导入</div><div class="line">	 * <span class="doctag">@param</span> locale</div><div class="line">	 * <span class="doctag">@param</span> model</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"/importBatchClientCheckData"</span>, method = RequestMethod.POST)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResultBean&lt;LogImportBean&gt; <span class="title">importBatchClientCheckData</span><span class="params">(Locale locale,</span></span></div><div class="line">	@RequestParam MultipartFile[] files,@ModelAttribute(<span class="string">"CdaBaseDataRemarks"</span>) </div><div class="line">	CdaBaseDataRemarks bean) <span class="keyword">throws</span> Exception&#123;</div><div class="line">		</div><div class="line">			ResultBean&lt;LogImportBean&gt; rb = <span class="keyword">new</span> ResultBean&lt;LogImportBean&gt;();</div><div class="line">			</div><div class="line">			<span class="comment">//返回导入结果明细信息列表</span></div><div class="line">			List&lt;LogImportBean&gt; logs = <span class="keyword">new</span> ArrayList&lt;LogImportBean&gt;();</div><div class="line">			rb.setRows(logs);</div><div class="line">		</div><div class="line">			<span class="keyword">if</span>(files[<span class="number">0</span>].getSize()==<span class="number">0</span>)&#123;</div><div class="line">				rb.setReturnCode(SysConstant.SYS_RETURN_FAILED_CODE);</div><div class="line">				rb.setReturnMessage(<span class="string">"未选择文件，请选择您要导入的execl文件"</span>);</div><div class="line">				<span class="keyword">return</span> rb;</div><div class="line">			&#125;</div><div class="line">			InputStream is = files[<span class="number">0</span>].getInputStream();</div><div class="line">			Workbook book = Workbook.getWorkbook(is);</div><div class="line">			Sheet sheet = book.getSheet(<span class="number">0</span>);</div><div class="line">			<span class="keyword">int</span> rownum = sheet.getRows();</div><div class="line">			</div><div class="line">			<span class="comment">// 解析到表格中的数量，判断是否超过导入个数限制</span></div><div class="line">			<span class="keyword">if</span> (rownum &gt; <span class="number">1</span>) &#123;</div><div class="line">				rb.setReturnCode(SysConstant.SYS_RETURN_SUCCESS_CODE);</div><div class="line">				rb.setReturnMessage(SysConstant.SYS_RETURN_SUCCESS_MESSAGE);</div><div class="line">					</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rownum; i++) &#123;</div><div class="line">					<span class="comment">//第一个参数是列，第二个参数是行</span></div><div class="line">					String custId = sheet.getCell(<span class="number">0</span>, i).getContents();</div><div class="line">					String certNo = sheet.getCell(<span class="number">1</span>, i).getContents();</div><div class="line">					String certType = sheet.getCell(<span class="number">2</span>, i).getContents();</div><div class="line">					String remarks = sheet.getCell(<span class="number">3</span>, i).getContents();	</div><div class="line">					<span class="comment">// 判断字符串是否在大于20</span></div><div class="line">        			<span class="keyword">if</span>(remarks.length()&gt;<span class="number">20</span>)&#123;</div><div class="line">        				logs.add(<span class="keyword">new</span> LogImportBean(<span class="string">"备注内容不能大于20个字"</span>));</div><div class="line">        			&#125;</div><div class="line">                     <span class="comment">// 新增自己的业务代码</span></div><div class="line">					</div><div class="line">				&#125;<span class="comment">// for 循环结束</span></div><div class="line">												</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				rb.setReturnCode(SysConstant.SYS_RETURN_FAILED_CODE);</div><div class="line">				rb.setReturnMessage(<span class="string">"表格不能为空！"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> rb;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java 高级 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java 高级 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webstorm 配置 Apache 服务器]]></title>
      <url>/2018/08/05/webstorm%E9%85%8D%E7%BD%AEApache%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="webstorm配置Apache服务器"><a href="#webstorm配置Apache服务器" class="headerlink" title="webstorm配置Apache服务器"></a>webstorm配置Apache服务器</h1><p>今天尝试了在 apache 上部署静态工程，顺便记录一下，希望能帮到需要的同学！<br><a id="more"></a></p>
<h2 id="添加-apache-服务"><a href="#添加-apache-服务" class="headerlink" title="添加 apache 服务"></a>添加 apache 服务</h2><p><img src="https://blogimg.nos-eastchina1.126.net/180805/e4DLdAjEf3.png" alt="mark"></p>
<p>​    服务的类型选择 Local or mounted folder 。</p>
<h2 id="配置-Connection"><a href="#配置-Connection" class="headerlink" title="配置 Connection"></a>配置 Connection</h2><p><img src="https://blogimg.nos-eastchina1.126.net/180805/mDCbB44e4f.png" alt="mark"></p>
<h2 id="配置-Mappings"><a href="#配置-Mappings" class="headerlink" title="配置 Mappings"></a>配置 Mappings</h2><p><img src="https://blogimg.nos-eastchina1.126.net/180805/Ah1JILhi5B.png" alt="mark"></p>
<p>1处，选择你工程所在的位置，选择到工程直接访问的文件夹。（我的工程名称是 com.eyuninfo.web,但是我所有的页面都在 WebContent 的目录下）。</p>
<p>2处，htdocs 是你安装的 Apache 的目录下的一个目录，在这个目录下面放的是你在 webstorm 的 Tools-&gt;Deployment-&gt;Upload to Default Server 的所上传的文件，也就是部署到服务器路径下面的目录，如下：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180805/8mm36mckJ1.png" alt="mark"></p>
<p>3处，sunriseui 是工程的上下文。 访问的时候就是 <a href="http://127.0.0.1/sunriseui/sunrise/pages/home/tophome_w.html" target="_blank" rel="external">http://127.0.0.1/sunriseui/sunrise/pages/home/tophome_w.html</a> 这样了。</p>
<h2 id="保存，完成。"><a href="#保存，完成。" class="headerlink" title="保存，完成。"></a>保存，完成。</h2>]]></content>
      
        <categories>
            
            <category> webstorm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你的面试题]]></title>
      <url>/2018/06/21/%E4%BD%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="你的面试题"><a href="#你的面试题" class="headerlink" title="你的面试题"></a>你的面试题</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>找工作对于每个人来说对都都意味着你将接受企业对你的考验。在接受考验之前我们应该做好准备，才能提高自己的信心进而坦然的迎接每一次考验。不断的积累经验，不气馁、不抱怨、不放弃直到找到属于自己的岗位，并为之努力。</p>
<h2 id="java中有哪些集合，主要方法有哪些"><a href="#java中有哪些集合，主要方法有哪些" class="headerlink" title="java中有哪些集合，主要方法有哪些"></a>java中有哪些集合，主要方法有哪些</h2><p>主要有LinkedList，ArrayList，Vector等。下面是详细：<br>Collection<br>├List<br>│├LinkedList<br>│├ArrayList<br>│└Vector<br>│ └Stack<br>└Set<br>Map<br>├Hashtable<br>├HashMap<br>└WeakHashMap<br>List 的具体实现包括 ArrayList 和 Vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象的元素列表。 List 适用于按数值索引访问元素的情形。</p>
<p> Map 提供了一个更通用的元素存储方法。 Map 集合类用于存储元素对（称作“键”和“值”）其中每个键映射到一个值。</p>
<h2 id="List、Set、Map是否继承自Collection接口"><a href="#List、Set、Map是否继承自Collection接口" class="headerlink" title="List、Set、Map是否继承自Collection接口"></a>List、Set、Map是否继承自Collection接口</h2><p>List、Set 是，Map 不是。Map是键值对映射容器，与List和Set有明显的区别，而Set存储的零散的元素且不允许有重复元素，List是线性结构的容器，适用于按数值索引访问元素的情形。</p>
<h2 id="List、Map、Set接口，存取元素时各自特点"><a href="#List、Map、Set接口，存取元素时各自特点" class="headerlink" title="List、Map、Set接口，存取元素时各自特点"></a>List、Map、Set接口，存取元素时各自特点</h2><p>List 以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存key-value值，value可多值。<br>  List的遍历： List接口有size()和get()方法，用这两个方法可以实现对List的遍历。size()方法得到List中的元素个数。get()方法取得某个位置上的元素</p>
<h2 id="List-和-set"><a href="#List-和-set" class="headerlink" title="List 和 set"></a>List 和 set</h2><p>List：元素是有序的，元素可以重复，因为该集合体系有索引<br>Set：元素是无序的，元素不可以重复（存入和取出的顺序不一定一致）</p>
<h2 id="List中常见的三个子类"><a href="#List中常见的三个子类" class="headerlink" title="List中常见的三个子类"></a>List中常见的三个子类</h2><ol>
<li>ArrayList ：底层的数据使用的是数组结构。 特点：查询速度很快，但是增删稍慢。线程不同步，效率高 。可变长度数组，默认容量为10的空列表，如果超过了，则50%的增加</li>
<li>LinkedList ：底层的数据使用的是链表数据结构。 特点：增删数度很快，但是查询稍慢。</li>
<li>Vector：底层使用的是数组结构。枚举是Vector特有的取出方式是同步的，效率较低，被ArrayList替代。最早出现的。默认容量为10的空列表，如果超过了，则100%的增加.</li>
</ol>
<h2 id="ArrayList-与-LinkedList-的区别"><a href="#ArrayList-与-LinkedList-的区别" class="headerlink" title="ArrayList 与 LinkedList 的区别"></a>ArrayList 与 LinkedList 的区别</h2><p>最明显的区别是 ArrrayList 底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。<br>1.LinkedList内部存储的是Node<e>，不仅要维护数据域，还要维护prev和next，如果LinkedList中的结点特别多，则LinkedList比ArrayList更占内存。<br>插入删除操作效率：<br>2.LinkedList在做插入和删除操作时，插入或删除头部或尾部时是高效的，操作越靠近中间位置的元素时，需要遍历查找，速度相对慢一些，如果在数据量较大时，每次插入或删除时遍历查找比较费时。所以LinkedList插入与删除，慢在遍历查找，快在只需要更改相关结点的引用地址。<br>ArrayList在做插入和删除操作时，插入或删除尾部时也一样是高效的，操作其他位置，则需要批量移动元素，所以ArrayList插入与删除，快在遍历查找，慢在需要批量移动元素。<br>3.循环遍历效率：<br>由于ArrayList实现了RandomAccess随机访问接口，所以使用for(int i = 0; i &lt; size; i++)遍历会比使用Iterator迭代器来遍历快<br>而由于LinkedList未实现RandomAccess接口，所以推荐使用Iterator迭代器来遍历数据。<br>因此，如果我们需要频繁在列表的中部改变插入或删除元素时，建议使用LinkedList，否则，建议使用ArrayList，因为ArrayList遍历查找元素较快，并且只需存储元素的数据域，不需要额外记录其他数据的位置信息，可以节省内存空间。</e></p>
<h2 id="Java-中的-LinkedList-是单向链表还是双向链表"><a href="#Java-中的-LinkedList-是单向链表还是双向链表" class="headerlink" title="Java 中的 LinkedList 是单向链表还是双向链表"></a>Java 中的 LinkedList 是单向链表还是双向链表</h2><p>是双向链表。</p>
<h2 id="Vector和ArrayList的区别"><a href="#Vector和ArrayList的区别" class="headerlink" title="Vector和ArrayList的区别"></a>Vector和ArrayList的区别</h2><p>  首先看这两类都实现List接口，而List接口一共有三个实现类，分别是 ArrayList、Vector 和 LinkedList 。List 用于存放多个元素，能够维护元素的次序，并且允许元素的重复。3个具体实现类的相关区别如下：</p>
<p>1.ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。<br>2.Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。<br>3.LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</p>
<h2 id="HashMap与HashTable的区别"><a href="#HashMap与HashTable的区别" class="headerlink" title="HashMap与HashTable的区别"></a>HashMap与HashTable的区别</h2><p>1、HashMap 是非线程安全的，HashTable 是线程安全的。</p>
<p>2、HashMap 的键和值都允许有 null 值存在，而 HashTable 则不行。</p>
<p>3、因为线程安全的问题，HashMap 效率比 HashTable 的要高。<br>HashMap 的实现机制：<br>维护一个每个元素是一个链表的数组，而且链表中的每个节点是一个 Entry[] 键值对的数据结构。<br>实现了 数组+链表 的特性，查找快，插入删除也快。<br>对于每个 key , 他对应的数组索引下标是 int i = hash(key.hashcode)&amp;(len-1);<br>每个新加入的节点放在链表首，然后该新加入的节点指向原链表首</p>
<h2 id="HashMap，ConcurrentHashMap与LinkedHashMap的区别"><a href="#HashMap，ConcurrentHashMap与LinkedHashMap的区别" class="headerlink" title="HashMap，ConcurrentHashMap与LinkedHashMap的区别"></a>HashMap，ConcurrentHashMap与LinkedHashMap的区别</h2><p>ConcurrentHashMap是使用了锁分段技术技术来保证线程安全的，锁分段技术：首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问<br>ConcurrentHashMap 是在每个段（segment）中线程安全的<br>LinkedHashMap维护一个双链表，可以将里面的数据按写入的顺序读出</p>
<p>ConcurrentHashMap应用场景<br>1：ConcurrentHashMap 的应用场景是高并发，但是并不能保证线程安全，而同步的 HashMap 和 HashMap 的是锁住整个容器，而加锁之后 ConcurrentHashMap 不需要锁住整个容器，只需要锁住对应的 Segment 就好了，所以可以保证高并发同步访问，提升了效率。<br>2：可以多线程写。<br>ConcurrentHashMap把HashMap分成若干个Segmenet<br>1.get时，不加锁，先定位到segment然后在找到头结点进行读取操作。而value是volatile变量，所以可以保证在竞争条件时保证读取最新的值，如果读到的value是null，则可能正在修改，那么久调用ReadValueUnderLock函数，加锁保证读到的数据是正确的。</p>
<p>2.Put时会加锁，一律添加到hash链的头部。</p>
<p>3.Remove时也会加锁，由于next是final类型不可改变，所以必须把删除的节点之前的节点都复制一遍。</p>
<p>4.ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对Hash表的不同Segment进行的修改。<br>ConcurrentHashMap的应用场景是高并发，但是并不能保证线程安全，而同步的HashMap和HashTable的是锁住整个容器，而加锁之后ConcurrentHashMap不需要锁住整个容器，只需要锁住对应的segment就好了，所以可以保证高并发同步访问，提升了效率。</p>
<h2 id="HashSet-和-HashMap-区别"><a href="#HashSet-和-HashMap-区别" class="headerlink" title="HashSet 和 HashMap 区别"></a>HashSet 和 HashMap 区别</h2><p> <strong>HashSet：</strong></p>
<p>HashSet实现了Set接口，它不允许集合中出现重复元素。当我们提到HashSet时，第一件事就是在将对象存储在</p>
<p>HashSet之前，要确保重写hashCode（）方法和equals（）方法，这样才能比较对象的值是否相等，确保集合中没有储存相同的对象。如果不重写上述两个方法，那么将使用下面方法默认实现：</p>
<p>public boolean add(Object obj)方法用在Set添加元素时，如果元素值重复时返回 “false”，如果添加成功则返回”true”</p>
<p><strong>HashMap：</strong></p>
<p>HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许出现重复的键（Key）。Map接口有两个基本的实现TreeMap和HashMap。TreeMap保存了对象的排列次序，而HashMap不能。HashMap可以有空的键值对（Key（null）-Value（null））HashMap是非线程安全的（非Synchronize），要想实现线程安全，那么需要调用collections类的静态方法synchronizeMap（）实现。</p>
<p>public Object put(Object Key,Object value)方法用来将元素添加到map中。</p>
<p>总结：</p>
<p>HashMap 实现了 Map 接口；存储键值对；调用put（）向map中添加元素；HashMap使用键（Key）计算Hashcode；HashMap相对于HashSet较快，因为它是使用唯一的键获取对象。</p>
<p>HashSet 实现了 Set 接口；仅存储对象；调用add（）方法向Set中添加元素；HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false；HashSet较HashMap来说比较慢。</p>
<h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><ul>
<li>重载：允许存在一个以上的同名函数，只要它们的参数个数或参数类型不同即可。</li>
<li>重写：当子类继承父类，沿袭了父类的功能到子类中，子类虽具备该功能，但功能内容不一致，这是使用覆盖特性，保留父类的功能定义，并重写功能内容。</li>
</ul>
<h2 id="forward-和redirect的区别"><a href="#forward-和redirect的区别" class="headerlink" title="forward 和redirect的区别"></a>forward 和redirect的区别</h2><p>forward是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。</p>
<p>redirect就是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求，所以session,request参数都可以获取。</p>
<h2 id="int-和-Integer-有什么区别"><a href="#int-和-Integer-有什么区别" class="headerlink" title="int 和 Integer 有什么区别"></a>int 和 Integer 有什么区别</h2><p>Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。Int 是 java 的原始数据类型，Integer 是 java为int提供的封装类。Java为每个原始类型提供了封装类。<br>原始类型封装类，booleanBoolean,charCharacter,byteByte,shortShort,intInteger,longLong,floatFloat,doubleDouble<br>引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关</p>
<h2 id="error和exception有什么区别"><a href="#error和exception有什么区别" class="headerlink" title="error和exception有什么区别"></a>error和exception有什么区别</h2><p>Error和Exception都是java错误处理机制的一部分，都继承了Throwable类。</p>
<p>Exception表示的异常，异常可以通过程序来捕捉，或者优化程序来避免。</p>
<p>Error表示的是系统错误，不能通过程序来进行错误处理</p>
<h2 id="throw-和-throws-的区别"><a href="#throw-和-throws-的区别" class="headerlink" title="throw 和 throws 的区别"></a>throw 和 throws 的区别</h2><p>throw 用于抛出 java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：throw new IllegalArgumentException(“size must be multiple of 2″) ；而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。</p>
<p><strong>简单回答：</strong></p>
<p>Throw写在代码块内，throw后面跟的是一个具体的异常实例<br>Throws写在方法前面后面，throws后面跟的是异常类，异常类可以出现多个</p>
<h2 id="常见Runtime异常"><a href="#常见Runtime异常" class="headerlink" title="常见Runtime异常"></a>常见Runtime异常</h2><ul>
<li>ArithmeticException：算术异常</li>
<li>InstantiationException：对象初始化异常</li>
<li>IllegalArgumentException：参数不匹配异常</li>
<li>ArrayIndexOutOfBoundsException：数组下标越界</li>
<li>NullPointerException：空指针异常</li>
<li>NumberFormatException：数字转换异常</li>
</ul>
<h2 id="java-属性的可见性有那些"><a href="#java-属性的可见性有那些" class="headerlink" title="java 属性的可见性有那些"></a>java 属性的可见性有那些</h2><p>属性的可见性有：公有的（public） 保护的（protected） 默认的（default）私有的（private）</p>
<h2 id="属性的访问权限"><a href="#属性的访问权限" class="headerlink" title="属性的访问权限"></a>属性的访问权限</h2><table>
<thead>
<tr>
<th>权限</th>
<th>public</th>
<th>protected</th>
<th>defalut</th>
<th>private</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个类中</td>
<td>OK</td>
<td>OK</td>
<td>OK</td>
<td>OK</td>
</tr>
<tr>
<td>同一个包中</td>
<td>OK</td>
<td>OK</td>
<td>OK</td>
<td></td>
</tr>
<tr>
<td>子类（不同包）</td>
<td>OK</td>
<td>OK</td>
<td></td>
<td></td>
</tr>
<tr>
<td>不同包中</td>
<td>OK</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2><p>进程是系统进行资源分配和调度的一个独立单位，线程是CPU调度和分派的基本单位</p>
<p>进程和线程的关系：</p>
<ol>
<li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</li>
<li>资源分配给进程，同一进程的所有线程共享该进程的所有资源。</li>
<li>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</li>
<li>线程是指进程内的一个执行单元，也是进程内的可调度实体。</li>
</ol>
<p>线程与进程的区别：</p>
<ol>
<li>调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位。</li>
<li>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可以并发执行。</li>
<li>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</li>
<li>系统开销：在创建或撤销进程的时候，由于系统都要为之分配和回收资源，导致系统的明显大于创建或撤销线程时的开销。但进程有独立的地址空间，进程崩溃后，在保护模式下不会对其他的进程产生影响，而线程只是一个进程中的不同的执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但是在进程切换时，耗费的资源较大，效率要差些。</li>
</ol>
<h2 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h2><ol>
<li>继承Thread类。<ul>
<li>定义类继承Thread；</li>
<li>复写父类中的方法；目的：将自定义代码存储在run方法中，让线程运行。</li>
<li>调用线程的start方法，该方法有两个作用：启动线程，调用run方法</li>
</ul>
</li>
<li>实现Runnable接口<ol>
<li>定义类实现Runnable接口。</li>
<li>覆盖Runnable接口中的run方法。</li>
<li>通过Thread类建立线程对象。</li>
<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。</li>
<li>调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。</li>
</ol>
</li>
</ol>
<h2 id="创建线程的实现方式和继承方式有什么区别"><a href="#创建线程的实现方式和继承方式有什么区别" class="headerlink" title="创建线程的实现方式和继承方式有什么区别"></a>创建线程的实现方式和继承方式有什么区别</h2><ol>
<li>实现方式相比继承方式的好处： 避免了单继承的局限性（单继承只能继承一个父类）。在定义线程时，建议使用实现方式。</li>
<li>存放代码的位置不一样：<ul>
<li>继承Thread：线程代码存放Thread子类的run方法中</li>
<li>实现Runnable，线程代码存在接口的子类的run方法。</li>
</ul>
</li>
</ol>
<h2 id="实现Runnable接口的好处"><a href="#实现Runnable接口的好处" class="headerlink" title="实现Runnable接口的好处"></a>实现Runnable接口的好处</h2><ol>
<li>将线程的任务从线程的子类中分离出来，进行了单独的封装。 按照面向对象的思想将任务的封装成对象。</li>
<li>避免了java单继承的局限性。</li>
</ol>
<h2 id="Runnable接口和Callable接口的区别"><a href="#Runnable接口和Callable接口的区别" class="headerlink" title="Runnable接口和Callable接口的区别"></a>Runnable接口和Callable接口的区别</h2><p>这是一个优点深度的问题。</p>
<p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p>
<p>这其实是很有用的一个特性，因为<strong>多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性</strong>，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p>
<h2 id="线程同步的方法"><a href="#线程同步的方法" class="headerlink" title="线程同步的方法"></a>线程同步的方法</h2><ol>
<li>wait():让线程等待。将线程存储到一个线程池中。</li>
<li>notify()：唤醒被等待的线程。通常都唤醒线程池中的第一个。让被唤醒的线程处于临时阻塞状态。</li>
<li>notifyAll(): 唤醒所有的等待线程。将线程池中的所有线程都唤醒。</li>
</ol>
<h2 id="启动一个线程是用run-还是start"><a href="#启动一个线程是用run-还是start" class="headerlink" title="启动一个线程是用run()还是start()"></a>启动一个线程是用run()还是start()</h2><p>启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。run()方法可以产生必须退出的标志来停止一个线程。</p>
<h2 id="Java的数据结构有那些"><a href="#Java的数据结构有那些" class="headerlink" title="Java的数据结构有那些"></a>Java的数据结构有那些</h2><ul>
<li>线性表（ArrayList）</li>
<li>链表（LinkedList）</li>
<li>栈（Stack）</li>
<li>队列（Queue）</li>
<li>图（Map）</li>
<li>树（Tree）</li>
</ul>
<h2 id="Java中有几种数据类型"><a href="#Java中有几种数据类型" class="headerlink" title="Java中有几种数据类型"></a>Java中有几种数据类型</h2><ol>
<li>整型：byte,short,int,long</li>
<li>浮点型：float,double</li>
<li>字符型：char</li>
<li>布尔型：boolean</li>
</ol>
<h2 id="Java中的包装类都是那些"><a href="#Java中的包装类都是那些" class="headerlink" title="Java中的包装类都是那些"></a>Java中的包装类都是那些</h2><ol>
<li>byte：<strong>Byte</strong></li>
<li>short：<strong>Short</strong></li>
<li>int：<strong>Integer</strong></li>
<li>long：<strong>Long</strong></li>
<li>float：<strong>Float</strong></li>
<li>double：<strong>Double</strong></li>
<li>char：<strong>Character</strong></li>
<li>boolean：<strong>Boolean</strong></li>
</ol>
<h2 id="Java最顶级的父类是哪个"><a href="#Java最顶级的父类是哪个" class="headerlink" title="Java最顶级的父类是哪个"></a>Java最顶级的父类是哪个</h2><p>Object</p>
<h2 id="Object-的常用方有哪些"><a href="#Object-的常用方有哪些" class="headerlink" title="Object 的常用方有哪些"></a>Object 的常用方有哪些</h2><p>clone()、equals()、hashCode()、notify()、notifyAll()、toString()、wait()、finalize()</p>
<h2 id="数组实例化有几种方式"><a href="#数组实例化有几种方式" class="headerlink" title="数组实例化有几种方式"></a>数组实例化有几种方式</h2><p>静态实例化：创建数组的时候已经指定数组中的元素,int[] a=new int[]{1,3,3}</p>
<p>动态实例化：实例化数组的时候，只指定了数组程度，数组中所有元素都是数组类型的默认值</p>
<h2 id="实例化数组后，能不能改变数组长度呢"><a href="#实例化数组后，能不能改变数组长度呢" class="headerlink" title="实例化数组后，能不能改变数组长度呢"></a>实例化数组后，能不能改变数组长度呢</h2><p>不能，数组一旦实例化，它的长度就是固定的</p>
<h2 id="String是最基本的数据类型吗"><a href="#String是最基本的数据类型吗" class="headerlink" title="String是最基本的数据类型吗"></a>String是最基本的数据类型吗</h2><p>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类。</p>
<h2 id="是否可以继承String类"><a href="#是否可以继承String类" class="headerlink" title="是否可以继承String类"></a>是否可以继承String类</h2><p>String 类是final类，不可以被继承。</p>
<p><strong>补充：</strong>继承String本身就是一个错误的行为，对String类型最好的重用方式是关联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）</p>
<h2 id="String类的常用方法有那些"><a href="#String类的常用方法有那些" class="headerlink" title="String类的常用方法有那些"></a>String类的常用方法有那些</h2><p>charAt：返回指定索引处的字符<br>indexOf()：返回指定字符的索引<br>replace()：字符串替换<br>trim()：去除字符串两端空白<br>split()：分割字符串，返回一个分割后的字符串数组<br>getBytes()：返回字符串的byte类型数组<br>length()：返回字符串长度<br>toLowerCase()：将字符串转成小写字母<br>toUpperCase()：将字符串转成大写字符<br>substring()：截取字符串<br>format()：格式化字符串<br>equals()：字符串比较</p>
<h2 id="与equlas有什么区别"><a href="#与equlas有什么区别" class="headerlink" title="==与equlas有什么区别"></a>==与equlas有什么区别</h2><p>==可以判断基本数据类型值是否相等，也可以判断两个对象指向的内存地址是否相同，也就是说判断两个对象是否是同一个对象，Equlas通常用来做字符串比较。</p>
<h2 id="final关键字的作用"><a href="#final关键字的作用" class="headerlink" title="final关键字的作用"></a>final关键字的作用</h2><ol>
<li>可以修饰类、函数、变量；</li>
<li>被final修饰的类不可以被继承。为了避免被继承，被子类复写。final class Demo { }</li>
<li>被final修饰的方法不可以被复写。final void show () { }</li>
<li>被final 修饰的变量是一个常量，只能赋值一次。</li>
<li>内部类定义在类中的局部位置上时，只能访问该局部被final修饰的局部变量。</li>
</ol>
<h2 id="static关键字有哪些作用"><a href="#static关键字有哪些作用" class="headerlink" title="static关键字有哪些作用"></a>static关键字有哪些作用</h2><p>static 修饰变量、修饰方法;静态块;静态内部类;静态导包;</p>
<h2 id="abstract-class和interface有什么区别"><a href="#abstract-class和interface有什么区别" class="headerlink" title="abstract class和interface有什么区别"></a>abstract class和interface有什么区别</h2><p>抽象类与接口的区别：<br>1.接口可以多重继承 ，抽象类不可以<br>2.接口定义方法，不给实现；而抽象类可以实现部分方法<br>3.接口中基本数据类型的数据成员，都默认为static和final，抽象类则不是<br>如果事先知道某种东西会成为基础类，那么第一个选择就是把它变成一个接口。<br>只有在必须使用方法定义或者成员变量的时候，才应考虑采用抽象类。</p>
<h2 id="final-finally-finalize的区别"><a href="#final-finally-finalize的区别" class="headerlink" title="final,finally,finalize的区别"></a>final,finally,finalize的区别</h2><p>final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重写。<br>　　finally—再异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会执行，然后控制就会进入 finally 块（如果有的话）。<br>　　finalize—方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。 </p>
<h2 id="HTTP请求方法get和post有什么区别"><a href="#HTTP请求方法get和post有什么区别" class="headerlink" title="HTTP请求方法get和post有什么区别"></a>HTTP请求方法get和post有什么区别</h2><ol>
<li>Post传输数据时，不需要在URL中显示出来，而Get方法要在URL中显示。</li>
<li>Post传输的数据量大，可以达到2M，而Get方法由于受到URL长度限制,只能传递大约1024字节.</li>
<li>Post就是为了将数据传送到服务器段,Get就是为了从服务器段取得数据.而Get之所以也能传送数据,只是用来设计告诉服务器,你到底需要什么样的数据.Post的信息作为http请求的内容，而Get是在Http头部传输的。</li>
<li>其他 HTTP 请求方法</li>
</ol>
<ul>
<li>HEAD 与 GET 相同，但只返回 HTTP 报头，不返回文档主体。</li>
<li>PUT上传指定的 URI 表示。<br>DELETE    删除指定资源。</li>
<li>OPTIONS 返回服务器支持的 HTTP 方法</li>
<li>CONNECT 把请求连接转换到透明的 TCP/IP 通道。</li>
</ul>
<h2 id="session-与-cookie-区别"><a href="#session-与-cookie-区别" class="headerlink" title="session 与 cookie 区别"></a>session 与 cookie 区别</h2><ol>
<li>cookie数据存放在客户的浏览器上，session数据放在服务器上。</li>
<li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。</li>
<li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用COOKIE。</li>
<li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</li>
<li>所以个人建议： 将登陆信息等重要信息存放为SESSION 其他信息如果需要保留，可以放在COOKIE中</li>
</ol>
<h2 id="Mysql-的分页-SQL-语句"><a href="#Mysql-的分页-SQL-语句" class="headerlink" title="Mysql 的分页 SQL 语句"></a>Mysql 的分页 SQL 语句</h2><p>select * from tablename limit m,n(n是指从第m+1条开始，取n条)</p>
<h2 id="Mysql-优化"><a href="#Mysql-优化" class="headerlink" title="Mysql 优化"></a>Mysql 优化</h2><p>1.如果明确知道只有一条结果返回，limit1能够提高效率</p>
<p>2.把计算放在业务层而不是数据库层，除了节省数据的 CPU ,还有意想不到的查询缓存优化效果。</p>
<p>3.强制类型转换会全表扫描</p>
<p>4.在属性上进行计算不能命中索引 </p>
<p>5.使用 ENUM 而不是字符串</p>
<p>6.数据分区度不大的字段不宜使用索引</p>
<p>7.负向查询和前导模糊查询不能使用索引</p>
<p>8.用TRUNCATE替代DELETE</p>
<p>9.删除重复记录</p>
<p>10.用Where子句替换HAVING子句</p>
<p>11.用EXISTS替代IN、用NOT EXISTS替代NOT IN</p>
<p>12.用索引提高效率</p>
<p>13.用EXISTS替换DISTINCT</p>
<p>14.用&gt;=替代&gt;</p>
<p>15.用IN来替换OR</p>
<h2 id="String-s-new-String-“xyz”-创建了几个字符串对象"><a href="#String-s-new-String-“xyz”-创建了几个字符串对象" class="headerlink" title="String s = new String(“xyz”);创建了几个字符串对象"></a>String s = new String(“xyz”);创建了几个字符串对象</h2><p>两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。</p>
<h2 id="用Java写一个单例类"><a href="#用Java写一个单例类" class="headerlink" title="用Java写一个单例类"></a>用Java写一个单例类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">饿汉式单例:</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">懒汉式单例（线程安全）:</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) instance ＝ <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用Java写一个冒泡排序"><a href="#用Java写一个冒泡排序" class="headerlink" title="用Java写一个冒泡排序"></a>用Java写一个冒泡排序</h2><p>冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 排序器接口(策略模式: 将算法封装到具有共同接口的独立的类中使得它们可以相互替换)</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 排序</div><div class="line">    * <span class="doctag">@param</span> list 待排序的数组</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list)</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 排序</div><div class="line">    * <span class="doctag">@param</span> list 待排序的数组</div><div class="line">    * <span class="doctag">@param</span> comp 比较两个对象的比较器</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list, Comparator&lt;T&gt; comp)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒泡排序</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> swapped = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = list.length; i &lt; len &amp;&amp; swapped; ++i) &#123;</div><div class="line">            swapped = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i; ++j) &#123;</div><div class="line">                <span class="keyword">if</span> (list[j].compareTo(list[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    T temp = list[j];</div><div class="line">                    list[j] = list[j + <span class="number">1</span>];</div><div class="line">                    list[j + <span class="number">1</span>] = temp;</div><div class="line">                    swapped = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list, Comparator&lt;T&gt; comp)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> swapped = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = list.length; i &lt; len &amp;&amp; swapped; ++i) &#123;</div><div class="line">            swapped = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i; ++j) &#123;</div><div class="line">                <span class="keyword">if</span> (comp.compare(list[j], list[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    T temp = list[j];</div><div class="line">                    list[j] = list[j + <span class="number">1</span>];</div><div class="line">                    list[j + <span class="number">1</span>] = temp;</div><div class="line">                    swapped = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java解析XML的四种方法"><a href="#Java解析XML的四种方法" class="headerlink" title="Java解析XML的四种方法"></a>Java解析XML的四种方法</h2><ol>
<li>DOM4J生成和解析XML文档</li>
<li>DOM生成和解析XML文档</li>
<li>SAX生成和解析XML文档</li>
<li>JDOM生成和解析XML</li>
</ol>
<h2 id="Maven有哪些优点"><a href="#Maven有哪些优点" class="headerlink" title="Maven有哪些优点"></a>Maven有哪些优点</h2><p>优点如下：<br>简化了项目依赖管理：<br>易于上手，对于新手可能一个”mvn clean package”命令就可能满足他的工作<br>便于与持续集成工具（jenkins）整合<br>便于项目升级，无论是项目本身升级还是项目使用的依赖升级。<br>有助于多模块项目的开发，一个模块开发好后，发布到仓库，依赖该模块时可以直接从仓库更新，而不用自己去编译。<br>maven有很多插件，便于功能扩展，比如生产站点，自动发布版本等</p>
<h2 id="Spring有哪些优点"><a href="#Spring有哪些优点" class="headerlink" title="Spring有哪些优点"></a>Spring有哪些优点</h2><p>1.轻量级：Spring在大小和透明性方面绝对属于轻量级的，基础版本的Spring框架大约只有2MB。<br>2.控制反转(IOC)：Spring使用控制反转技术实现了松耦合。依赖被注入到对象，而不是创建或寻找依赖对象。<br>3.面向切面编程(AOP)： Spring支持面向切面编程，同时把应用的业务逻辑与系统的服务分离开来。<br>4.容器：Spring包含并管理应用程序对象的配置及生命周期。<br>5.MVC框架：Spring的web框架是一个设计优良的web MVC框架，很好的取代了一些web框架。<br>6.事务管理：Spring对下至本地业务上至全局业务(JAT)提供了统一的事务管理接口。<br>7.异常处理：Spring提供一个方便的API将特定技术的异常(由JDBC, Hibernate, 或JDO抛出)转化为一致的、Unchecked异常。</p>
<h2 id="spring-主要使用了哪些-，IOC和AOP实现原理是什么"><a href="#spring-主要使用了哪些-，IOC和AOP实现原理是什么" class="headerlink" title="spring 主要使用了哪些 ，IOC和AOP实现原理是什么"></a>spring 主要使用了哪些 ，IOC和AOP实现原理是什么</h2><p>spring主要功能有IOC，AOP，MVC等，IOC实现原理：先反射生成实例，然后调用时主动注入。AOP原理：主要使用java动态代理。</p>
<h2 id="什么是IOC容器其优点"><a href="#什么是IOC容器其优点" class="headerlink" title="什么是IOC容器其优点"></a>什么是IOC容器其优点</h2><p>Spring IOC负责创建对象、管理对象(通过依赖注入)、整合对象、配置对象以及管理这些对象的生命周期。<br>优点:<br>IOC或依赖注入减少了应用程序的代码量。它使得应用程序的测试很简单，因为在单元测试中不再需要单例或JNDI查找机制。简单的实现以及较少的干扰机制使得松耦合得以实现。IOC容器支持勤性单例及延迟加载服务。</p>
<h2 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h2><p><strong>Spring 面向切面编程（AOP）,利用AOP可以对业务逻辑的各个部分隔离，从而使的业务逻辑各部分的耦合性降低，提高程序的可重用性，踢开开发效率，主要功能：日志记录，性能统计，安全控制，事务处理，异常处理等。</strong>AOP实现原理是java动态代理，但是jdk的动态代理必须实现接口，所以 Spring 的 AOP 是用 cglib 这个库实现的，cglis 使用里 asm 这个直接操纵字节码的框架，所以可以做到不使用接口的情况下实现动态代理。</p>
<h2 id="AOP与OOP的区别"><a href="#AOP与OOP的区别" class="headerlink" title="AOP与OOP的区别"></a>AOP与OOP的区别</h2><p>OOP 面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程的某个步骤或阶段，以获得逻辑过程的中各部分之间低耦合的隔离效果。这两种设计思想在目标上有着本质的差异。</p>
<p>举例：</p>
<p>对于“雇员”这样一个业务实体进行封装，自然是OOP的任务，我们可以建立一个“Employee”类，并将“雇员”相关的属性和行为封装其中。而用AOP 设计思想对“雇员”进行封装则无从谈起。</p>
<p>同样，对于“权限检查”这一动作片段进行划分，则是AOP的目标领域。</p>
<p>OOP面向名次领域，AOP面向动词领域。</p>
<p>总之AOP可以通过预编译方式和运行期动态代理实现在不修改源码的情况下，给程序动态同意添加功能的一项技术。</p>
<h2 id="Spring-的依赖注入方式有哪一些"><a href="#Spring-的依赖注入方式有哪一些" class="headerlink" title="Spring 的依赖注入方式有哪一些"></a>Spring 的依赖注入方式有哪一些</h2><p>Spring 的依赖注入可以有两种方式来完成:setter 方法注入和构造方法注入。<br>构造器依赖注入：构造器依赖注入在容器触发构造器的时候完成，该构造器有一系列的参数，每个参数代表注入的对象。<br>Setter方法依赖注入：首先容器会触发一个无参构造函数或无参静态工厂方法实例化对象，之后容器调用bean中的setter方法完成Setter方法依赖注入。</p>
<h2 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h2><ol>
<li>客户端请求提交到DispatcherServlet</li>
<li>由DispatcherServlet控制器查询HandlerMapping，找到并分发到指定的Controller中。</li>
<li>Controller调用业务逻辑处理后，返回ModelAndView</li>
<li>DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图</li>
<li>视图负责将结果显示到客户端</li>
</ol>
<h2 id="关于职业规划"><a href="#关于职业规划" class="headerlink" title="关于职业规划"></a>关于职业规划</h2><p>关于我的职业规划，我把它分成三个阶段：</p>
<p>第一个阶段是三年，在这三年里，我要学会快速融入到公司的团队中，知道如何团结协作、如何使用项目管理工具、项目版本如何控制、自己写的代码如何测试如何在线上运行、如何去优化自己的代码。能够快速的理解项目相关的业务，对于复杂的业务能够考虑到可能会出现的多种情况以及解决方案。积累一定的开发经验。除了完成工作以外，在空余的时间里，研究各种技术实现细节， 对JDK 的源码和用到的框架进行深入的研究并且多做总结，写一些博客，在 Github 上分享技术。多看书，系统的学习。</p>
<p>第二个阶段是五年，也就是又过了两年，我在要具备在技术上独挡一面的能力并且清楚自己未来的方向，从一个写代码逐步走向系统分析师或是架构师，成为项目组中不可或缺的人物。</p>
<p>第三个阶段是十年，成为一名对行业有着深入认识、对技术有着深入认识、能从零开始对一个产品进行分析。</p>
<h2 id="离职原因"><a href="#离职原因" class="headerlink" title="离职原因"></a>离职原因</h2><p>个人发展原因。因为目前的工作太安逸，没有挑战，公司整体上都很稳定，也没有什么发展空间，我希望有一份比较有挑战的工作，毕竟我现在还年轻，是拼搏的年华，也需要成长。</p>
]]></content>
      
        <categories>
            
            <category> 基础面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面试感悟：工作经验java程序员应有的技能]]></title>
      <url>/2018/06/03/%E9%9D%A2%E8%AF%95%E6%84%9F%E6%82%9F%EF%BC%9A%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8Cjava%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E6%9C%89%E7%9A%84%E6%8A%80%E8%83%BD/</url>
      <content type="html"><![CDATA[<h1 id="面试感悟：工作经验java程序员应有的技能"><a href="#面试感悟：工作经验java程序员应有的技能" class="headerlink" title="面试感悟：工作经验java程序员应有的技能"></a>面试感悟：工作经验java程序员应有的技能</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为和同事有约定再加上LZ自己也喜欢做完一件事之后进行总结，因此有了这篇文章。这篇文章大部分内容都是面向整个<a href="http://www.codeceo.com/" target="_blank" rel="external">程序员</a>群体的，当然因为LZ本身是做Java开发的，因此有一部分内容也是专门面向咱们Java程序员的。</p>
<p>简单先说一下，LZ坐标杭州，13届本科毕业，算上年前在阿里巴巴B2B事业部的面试，一共有面试了有6家公司（因为LZ不想请假，因此只是每个晚上去其他公司面试，所以面试的公司比较少），其中成功的有4家，另外两家失败的原因在于：</p>
<p>1、阿里巴巴B2B事业部的面试，两轮技术面试都过了，最后一轮面试是对方的主管，由于听说技术面试过了基本上90%都面试成功了，所以LZ在和主管的交谈中也是毫无顾忌，说得天花乱坠，很多自己介于知道和不知道的东西都直接脱口而出了，结果多次被对方一反问就问得哑口无言。事后想来，模棱两可的答案是面试中最忌讳的，这次的失败也让LZ认真地对待后面的每一次面试</p>
<p>2、另外一家失败的是一家小公司，也就20来个人吧，整个团队是支付宝出来创业的，非常厉害。面试完LZ多方了解了一下，对方认为我基本功什么的都不错，但是实际项目经验还是欠缺一些，因为对方是创业型公司，需要人上手就能干活，因此我在这个时候还不是特别适合他们团队</p>
<p>至于其他成功的四家公司，给LZ的面试评价都挺高的貌似，但LZ也不想记流水账，因此就不一一列举每家公司的面试过程了，下面LZ主要谈谈作为一名工作三年左右的Java程序员应该具备的一些技能以及个人的一些其他感悟。</p>
<h2 id="关于程序员的几个阶段"><a href="#关于程序员的几个阶段" class="headerlink" title="关于程序员的几个阶段"></a>关于程序员的几个阶段</h2><p>每个程序员、或者说每个工作者都应该有自己的职业规划，如果看到这里的朋友没有自己的职业规划，希望你可以思考一下自己的将来。</p>
<p>LZ常常思考自己的未来，也从自己的思考中总结出了一些东西，作为第一部分来谈谈。LZ认为一名程序员应该有几个阶段（以下时间都算上实习期）：</p>
<p>第一阶段：三年</p>
<p>我认为三年对于程序员来说是第一个门槛，这个阶段将会淘汰掉一批不适合写代码的人。这一阶段，我们走出校园，迈入社会，成为一名程序员，正式从书本上的内容迈向真正的企业级开发。我们知道如何团队协作、如何使用项目管理工具、项目版本如何控制、我们写的代码如何测试如何在线上运行等等，积累了一定的开发经验，也对代码有了一定深入的认识，是一个比较纯粹的Coder的阶段</p>
<p>第二阶段：五年</p>
<p>五年又是区分程序员的第二个门槛。有些人在三年里，除了完成工作，在空余时间基本不会研究别的东西，这些人永远就是个Coder，年纪大一些势必被更年轻的人给顶替；有些人在三年里，除了写代码之外，还热衷于研究各种技术实现细节、看了N多好书、写一些博客、在Github上分享技术，这些人在五年后必然具备在技术上独当一面的能力并且清楚自己未来的发展方向，从一个Coder逐步走向系统分析师或是架构师，成为项目组中不可或缺的人物</p>
<p>第三阶段：十年</p>
<p>十年又是另一个门槛了，转行或是继续做一名程序员就在这个节点上。如果在前几年就抱定不转行的思路并且为之努力的话，那么在十年的这个节点上，有些人必然成长为一名对行业有着深入认识、对技术有着深入认识、能从零开始对一个产品进行分析的程序员，这样的人在公司基本担任的都是CTO、技术专家、首席架构师等最关键的职位，这对于自己绝对是一件荣耀的事，当然老板在经济上也绝不会亏待你</p>
<p>第一部分总结一下，我认为，随着你工作年限的增长、对生活对生命认识的深入，应当不断思考三个问题：</p>
<p>1、我到底适不适合当一名程序员？</p>
<p>2、我到底应不应该一辈子以程序员为职业？</p>
<p>3、我对编程到底持有的是一种什么样的态度，是够用就好呢还是不断研究？</p>
<p>最终，明确自己的职业规划，对自己的规划负责并为之努力。</p>
<h2 id="关于项目经验"><a href="#关于项目经验" class="headerlink" title="关于项目经验"></a>关于项目经验</h2><p>LZ在网上经常看到一些别的朋友有提出项目经验的问题，依照LZ面试的感觉来说，面试主要看几点：项目经验+基本技术+个人潜力（也就是值不值得培养）。</p>
<p>关于项目经验，我认为并发编程网的创始人方腾飞老师讲的一段话非常好：</p>
<blockquote>
<p>介绍产品时面试官会考察应聘者的沟通能力和思考能力，我们大部分情况都是做产品的一个功能或一个模块，但是即使是这样，自己有没有把整个系统架构或产品搞清楚，并能介绍清楚，为什么做这个系统？这个系统的价值是什么？这个系统有哪些功能？优缺点有哪些？如果让你重新设计这个系统你会如何设计？</p>
</blockquote>
<p>我觉得这就已经足以概括了。也许你仅仅工作一年，也许你做的是项目中微不足道的模块，当然这些一定是你的劣势且无法改变，但是如何弥补这个劣势，从方老师的话中我总结几点：</p>
<p>1、明确你的项目到底是做什么的，有哪些功能</p>
<p>2、明确你的项目的整体架构，在面试的时候能够清楚地画给面试官看并且清楚地指出从哪里调用到哪里、使用什么方式调用</p>
<p>3、明确你的模块在整个项目中所处的位置及作用</p>
<p>4、明确你的模块用到了哪些技术，更好一些的可以再了解一下整个项目用到了哪些技术</p>
<p>在你无法改变自己的工作年限、自己的不那么有说服力的项目经验的情况下（这一定是扣分项），可以通过这种方式来一定程度上地弥补并且增进面试官对你的好感度。</p>
<h2 id="关于专业技能"><a href="#关于专业技能" class="headerlink" title="关于专业技能"></a>关于专业技能</h2><p>写完项目接着写写一名3年工作经验的Java程序员应该具备的技能，这可能是Java程序员们比较关心的内容。我这里要说明一下，以下列举的内容不是都要会的东西—-但是如果你掌握得越多，最终能得到的评价、拿到的薪水势必也越高。</p>
<p>1、基本语法</p>
<p>这包括static、final、transient等关键字的作用，foreach循环的原理等等。今天面试我问你static关键字有哪些作用，如果你答出static修饰变量、修饰方法我会认为你合格，答出静态块，我会认为你不错，答出静态内部类我会认为你很好，答出静态导包我会对你很满意，因为能看出你非常热衷研究技术。</p>
<p>最深入的一次，LZ记得面试官直接问到了我<a href="http://www.codeceo.com/article/java-volatile-var.html" target="_blank" rel="external">Volatile</a>关键字的底层实现原理（顺便插一句，面试和被面试本身就是相对的，面试官能问这个问题同时也让面试者感觉到面试官也是一个喜爱研究技术的人，增加了面试者对公司的好感，LZ最终选择的就是问了这个问题的公司），不要觉得这太吹毛求疵了—-越简单的问题越能看出一个人的水平，别人对你技术的考量绝大多数都是以深度优先、广度次之为标准的，切记。</p>
<p>2、集合</p>
<p>非常重要，也是必问的内容。基本上就是List、Map、Set，问的是各种实现类的底层实现原理，实现类的优缺点。</p>
<p>集合要掌握的是ArrayList、LinkedList、Hashtable、HashMap、ConcurrentHashMap、HashSet的实现原理，能流利作答，当然能掌握CopyOnWrite容器和Queue是再好不过的了。另外多说一句，ConcurrentHashMap的问题在面试中问得特别多，大概是因为这个类可以衍生出非常多的问题，关于ConcurrentHashMap，我给网友朋友们提供三点回答或者是研究方向：</p>
<p>（1）ConcurrentHashMap的锁分段技术</p>
<p>（2）ConcurrentHashMap的读是否要加锁，为什么</p>
<p>（3）ConcurrentHashMap的迭代器是强一致性的迭代器还是弱一致性的迭代器</p>
<p>3、<a href="http://www.codeceo.com/article/category/develop/design-patterns" target="_blank" rel="external">设计模式</a></p>
<p>本来以为蛮重要的一块内容，结果只在阿里巴巴B2B事业部面试的时候被问了一次，当时问的是装饰器模式。</p>
<p>当然咱们不能这么功利，为了面试而学习，设计模式在工作中还是非常重要、非常有用的，23种设计模式中重点研究常用的十来种就可以了，面试中关于设计模式的问答主要是三个方向：</p>
<p>（1）你的项目中用到了哪些设计模式，如何使用</p>
<p>（2）知道常用设计模式的优缺点</p>
<p>（3）能画出常用设计模式的UML图</p>
<p>4、多线程</p>
<p>这也是必问的一块了。因为三年工作经验，所以基本上不会再问你怎么实现多线程了，会问得深入一些比如说Thread和Runnable的区别和联系、多次start一个线程会怎么样、线程有哪些状态。当然这只是最基本的，出乎意料地，几次面试几乎都被同时问到了一个问题，问法不尽相同，总结起来是这么一个意思：</p>
<blockquote>
<p>假如有Thread1、Thread2、Threa<a href="http://www.codeceo.com/article/javascript-d3-js.html" target="_blank" rel="external">D3</a>、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？</p>
</blockquote>
<p>聪明的网友们对这个问题是否有答案呢？不难，java.util.concurrent下就有现成的类可以使用。</p>
<p>另外，线程池也是比较常问的一块，常用的线程池有几种？这几种线程池之间有什么区别和联系？线程池的实现原理是怎么样的？实际一些的，会给你一些具体的场景，让你回答这种场景该使用什么样的线程池比较合适。</p>
<p>最后，虽然这次面试问得不多，但是多线程同步、锁这块也是重点。synchronized和ReentrantLock的区别、synchronized锁普通方法和锁静态方法、死锁的原理及排查方法等等，关于多线程，我在之前有些过文章总结过多线程的40个问题，可以参看<a href="http://www.codeceo.com/article/40-java-thread-problems.html" target="_blank" rel="external">40个Java多线程问题总结</a>。</p>
<p>5、JDK源码</p>
<p>要想拿高工资，JDK源码不可不读。上面的内容可能还和具体场景联系起来，JDK源码就是实打实地看你平时是不是爱钻研了。LZ面试过程中被问了不少JDK源码的问题，其中最刁钻的一个问了LZ，String的hashCode()方法是怎么实现的，幸好LZ平时String源代码看得多，答了个大概。JDK源码其实没什么好总结的，纯粹看个人，总结一下比较重要的源码：</p>
<p>（1）List、Map、Set实现类的源代码</p>
<p>（2）ReentrantLock、AQS的源代码</p>
<p>（3）AtomicInteger的实现原理，主要能说清楚CAS机制并且AtomicInteger是如何利用CAS机制实现的</p>
<p>（4）线程池的实现原理</p>
<p>（5）Object类中的方法以及每个方法的作用</p>
<p>这些其实要求蛮高的，LZ去年一整年基本把JDK中重要类的源代码研究了个遍，真的花费时间、花费精力，当然回头看，是值得的—-不仅仅是为了应付面试。</p>
<p>6、框架</p>
<p>老生常谈，面试必问的东西。一般来说会问你一下你们项目中使用的框架，然后给你一些场景问你用框架怎么做，比如我想要在Spring初始化bean的时候做一些事情该怎么做、想要在bean销毁的时候做一些事情该怎么做、MyBatis中$和#的区别等等，这些都比较实际了，平时积累得好、有多学习框架的使用细节自然都不成问题。</p>
<p>如果上面你的问题答得好，面试官往往会深入地问一些框架的实现原理。问得最多的就是Spring AOP的实现原理，当然这个很简单啦，两句话就搞定的的事儿，即使你不会准备一下就好了。LZ遇到的最变态的是让LZ画一下Spring的Bean工厂实现的UML图，当然面对这样一个有深度的问题，LZ是绝对答不出来的/(ㄒoㄒ)/~~</p>
<p>7、数据库</p>
<p>数据库十有八九也都会问到。一些基本的像union和union all的区别、left join、几种索引及其区别就不谈了，比较重要的就是数据库性能的优化，如果对于数据库的性能优化一窍不通，那么有时间，还是建议你在面试前花一两天专门把SQL基础和SQL优化的内容准备一下。</p>
<p>不过数据库倒是不用担心，一家公司往往有很多部门，如果你对数据库不熟悉而基本技术又非常好，九成都是会要你的，估计会先把你放到对数据库使用不是要求非常高的部门锻炼一下。</p>
<p>8、数据结构和算法分析</p>
<p>数据结构和算法分析，对于一名程序员来说，会比不会好而且在工作中绝对能派上用场。数组、链表是基础，栈和队列深入一些但也不难，树挺重要的，比较重要的树AVL树、红黑树，可以不了解它们的具体实现，但是要知道什么是二叉查找树、什么是平衡树，AVL树和红黑树的区别。记得某次面试，某个面试官和我聊到了数据库的索引，他问我：</p>
<blockquote>
<p>你知道索引使用的是哪种数据结构实现吗？</p>
</blockquote>
<p>LZ答到用的Hash表吧，答错。他又问，你知道为什么要使用树吗？LZ答到因为Hash表可能会出现比较多的冲突，在千万甚至是上亿级别的数据面前，会大大增加查找的时间复杂度。而树比较稳定，基本保证最多二三十次就能找到想要的数据，对方说不完全对，最后我们还是交流了一下这个问题，我也明白了为什么要使用树，这里不说，网友朋友们觉得索引为什么要使用树来实现呢？</p>
<p>至于算法分析，不会、不想研究就算了，记得某次面试对方问我，Collections.sort方法使用的是哪种排序方法，额，吐血三升。当然为了显示LZ的博学，对算法分析也有一定的研究(⊙﹏⊙)b，LZ还是硬着头皮说了一句可能是冒泡排序吧。当然答案肯定不是，有兴趣的网友朋友们可以去看一下Collections.sort方法的源代码，用的是一种叫做TimSort的排序法，也就是增强型的归并排序法。</p>
<p>9、Java虚拟机</p>
<p>出乎LZ的意料，Java虚拟机应该是很重要的一块内容，结果在这几家公司中被问到的概率几乎为0。要知道，LZ去年可是花了大量的时间去研究Java虚拟机的，光周志明老师的《深入理解Java虚拟机：JVM高级特性与最佳实践》，LZ就读了不下五遍。</p>
<p>言归正传，虽然Java虚拟机没问到，但我觉得还是有必要研究的，LZ就简单地列一个提纲吧，谈谈Java虚拟机中比较重要的内容：</p>
<p>（1）Java虚拟机的内存布局</p>
<p>（2）GC算法及几种垃圾收集器</p>
<p>（3）类加载机制，也就是双亲委派模型</p>
<p>（4）Java内存模型</p>
<p>（5）happens-before规则</p>
<p>（6）volatile关键字使用规则</p>
<p>也许面试无用，但在走向大牛的路上，不可不会。</p>
<p>10、Web方面的一些问题</p>
<p>Java主要面向Web端，因此Web的一些问题也是必问的。LZ碰到过问得最多的两个问题是：</p>
<blockquote>
<p>谈谈分布式Session的几种实现方式</p>
</blockquote>
<p>常用的四种能答出来自然是让面试官非常满意的，另外一个常问的问题是：</p>
<blockquote>
<p>讲一下Session和Cookie的区别和联系以及Session的实现原理</p>
</blockquote>
<p>这两个问题之外，web.xml里面的内容是重点，Filter、Servlet、Listener，不说对它们的实现原理一清二楚吧，至少能对它们的使用知根知底。另外，一些细节的方面比如get/post的区别、forward/重定向的区别、HTTPS的实现原理也都可能会被考察到。</p>
<p>噢，想起来了，一致性Hash算法貌似也被问到了几次，这个LZ以前专门深入研究过并且写了两篇博文，因此问到这个问题LZ自然是答得毫不费力。文章是<a href="http://www.codeceo.com/article/memcache-usage-learn.html" target="_blank" rel="external">MemCache超详细解读</a>和对<a href="http://www.cnblogs.com/xrq730/p/5186728.html" target="_blank" rel="external">一致性Hash算法，Java代码实现的深入研究</a>，特别说明，LZ真的不是在为自已以前写的文章打广告啊啊啊啊啊啊。</p>
<p>最后，如果有兴趣有时间，建议学习、研究一下SOA和RPC，面向服务体系，大型分布式架构必备，救命良方、包治百病、屡试不爽。</p>
<h2 id="关于HR面试"><a href="#关于HR面试" class="headerlink" title="关于HR面试"></a>关于HR面试</h2><p>如果你过五关斩六将，成功地通过了所有的技术面，那么恭喜你，你离升职加薪、出任CEO、迎娶白富美、走向人生巅峰又进了一步。但是还没有到谈薪资待遇的时候，最后还有一个考验：HR面试。基本所有的大公司都有这一轮的面试，不要小看HR面试，很多公司的HR对于面试者都有一票否决权的—-即使前面的面试对你的评价再高。</p>
<p>所以，这轮的面试也必须重视起来，HR面试主要问的是几点：</p>
<p>1、简历中写的过去工作经历的离职原因</p>
<p>2、当前公司薪资待遇</p>
<p>3、期望能到怎样的一家公司</p>
<p>4、个人未来的发展方向</p>
<p>我专门提一下第2点。可能有人比较排斥也不想说这个，我个人倒是持开放状态，问了就说了，当然一些的夸大还是必要的，当前公司薪资待遇多报个一千块钱完全没问题（毕竟是一家互联网公司总多多少少有些补贴啊什么的嘛）。因为这和你在新公司能拿到的薪水关系不大，新公司能拿到的薪水的决定因素是整个公司的薪资情况以及根据你的面试情况在公司的定位，都是有固定的薪资范围的。HR问这个主要也就是心里有个数并且看你是否诚信—-有些公司入职时会要求你提供最近一家单位的银行流水号。</p>
<p>HR面试就说到这里了，总结起来其实就是四个字：滴水不漏。整个面试过程态度积极向上，不要有任何悲观消极的态度（尤其在谈到以前公司情况的时候，即使有再多的不满），就不会有问题。</p>
<h2 id="关于面试心态"><a href="#关于面试心态" class="headerlink" title="关于面试心态"></a>关于面试心态</h2><p>这个嘛，LZ其实在公司也面试过几个人，一半以上的面试者回答问题的时候都属于那种双腿发抖、声音颤抖的类型。在LZ看来这大可不必并且这还是扣分项，回答问题的时候最最基本的两个要求：</p>
<p>1、不紧不慢，平心静气</p>
<p>2、条理清晰</p>
<p>表达能力绝对是面试的时候重要的考察项目。咱们做的是程序员这一行，讲究的是团队协作，不是写作、画画，一支笔、一个人就行了，一个表达能力不行的程序员，要来又有什么用呢？</p>
<p>除此之外，就是保持良好的心态。古语说得好，只要功夫深，铁杵磨成针，面试的成功与否，在于平时的积累，临时抱抱佛脚，看两道面试题是没有用的，只要平时足够努力，成功是水到渠成的事情，平时不怎么研究技术的，那也就是个听天由命的事情，只要充分地展示平时自己的所学就可以了。</p>
<p>因此在我看来，不要把面试当作面试，当做一次技术交流，把面试的心态从我要找到一份工作转变为我要通过面试去发现不足、提升自己，这样就会平和多了，即使失败也不会有太多失望的感觉。</p>
<p>另外，如果平时自己热衷于研究技术的朋友，真的要有自信，不要觉得别人面试你别人就比你厉害。面试官未必比你优秀，他问的问题往往都是他平时研究得比较多的问题，你一样有很多自己的研究面试官未必知道。</p>
<h2 id="关于Java"><a href="#关于Java" class="headerlink" title="关于Java"></a>关于Java</h2><p>网上常看到一种说法：Java比较简单。某种程度上这会打击Java程序员的信心—-原来咱们平时用的是这种小儿科的玩意儿啊，在我看来这种想法大可不必，这一部分我来讲讲对于这个话题的看法。</p>
<p>这种说法有些片面，得分开两部分来看，我用四个自总结一下就是：易学难精。</p>
<p>1、易学部分</p>
<p>Java易学我认为有两部分的原因：</p>
<p>（1）很多培训公司包括大四的学生找工作都会学习Java，绝大多数是因为易学。Java从C/C++发展而来，感谢前人的智慧，它消除了C/C++中最复杂和让人困惑的语法、它消除了平台的差异性、它不需要用户手动释放内存空间、它避免了Java程序员和本地语言的交互，让程序员只需要专注于语法层面和应用层面。</p>
<p>（2）Java作为一门面向对象的语言，在企业级开发中体现出了它无与伦比的特性，整个开发流程比较固定化、模块化，需求分析起来也相对容易。我举个自己以前的例子吧，我在大一学习C语言的时候，用C语言写了一个图书管理系统写了2000+的代码，大四学了C++之后，用面向对象的语言C++取代面向过程的语言C语言重新写了一个功能相似的图书管理系统，只写了1100行的样子，这就是面向对象的优势。</p>
<p>2、难精部分</p>
<p>接着咱们聊聊难精的部分。</p>
<p>Java语言的设计者帮助Java程序员做了这么多事情，这有利也有弊。有利的部分前面已经说过了，让Java易学，不过有弊的部分同样明显。假如在应用运行过程中遇到了语法层面和应用层面之外的错误，应当如何处理？比如线上环境出现内存溢出怎么办？GC时间过长怎么办？IO长时间没反应怎么办？方法抛出莫名其妙的异常怎么办？</p>
<p>凡此种种，绝不是一名只会写几个if…else…的Java程序员就可以解决的，这需要大量的经历、大量的实践、大量对Java底层实现细节的研究，而这往往是最难、最考验Java程序员的部分，一些人根本就不想往深去研究，另外一些人研究了一点点就研究不下去了。</p>
<p>Java为什么难精？就是这个原因。除非你水平特别高，否则五年工作经验以下的Java程序员在简历上写”精通Java”绝对是一件非常愚蠢的事情。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>文章写到这里，感觉有点像鸡汤文了，那就以最后的鸡汤作为结尾吧。</p>
<p>在以前博客园的一篇文章中，讲到了奔三程序员的困惑，大致说的是三十岁之后程序员要转行之类的云云，LZ在博文中留下了如下的评论：</p>
<p><img src="http://static.codeceo.com/images/2016/03/0eada6b2dcac3a6a274b0196c277cea5.png" alt="img"></p>
<p>就以这段话自勉、共勉吧。越努力、越幸运，如果你不是官二代、富二代、红二代，那么请记住：勤奋才是改变你命运的唯一捷径。</p>
]]></content>
      
        <categories>
            
            <category> 基础面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[节点操作]]></title>
      <url>/2018/06/03/%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h2><h3 id="children-方法"><a href="#children-方法" class="headerlink" title="children()方法"></a>children()方法</h3><a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'div'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).children().css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">        <span class="comment">// div 的直接子元素为 teshu 变红</span></div><div class="line">        <span class="comment">//$(this).children('.teshu').css('background-color','red');</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/6D1lfFK78c.png" alt="mark"></p>
<h3 id="find-方法"><a href="#find-方法" class="headerlink" title="find()方法"></a>find()方法</h3><p>由于children()只能查找子元素，如果是孙子元素是找不到的。所以jQuery提供了find()”寻找”的方法。</p>
<p>作用：在某个节点中查找符合选择器要求的后代节点</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'div'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">'p'</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">        <span class="comment">//$(this).find('.teshu').css('background-color','red');</span></div><div class="line">        <span class="comment">// $(this).find('span').css('background-color','red');</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="parent-方法"><a href="#parent-方法" class="headerlink" title="parent()方法"></a>parent()方法</h3><p>作用：表示查找当前节点的直属父节点</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">   $(<span class="string">'p'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="comment">//$(this).parent('.div3').css('border','10px solid orange');</span></div><div class="line">       $(<span class="keyword">this</span>).parent().css(<span class="string">'border'</span>,<span class="string">'10px solid orange'</span>);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="parents-方法"><a href="#parents-方法" class="headerlink" title="parents()方法"></a>parents()方法</h3><p>作用：表示查找当前节点的所有祖先节点，直到html节点为止。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">   $(<span class="string">'p'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="comment">// $(this).parents('body').css('border','10px solid orange');</span></div><div class="line">       $(<span class="keyword">this</span>).parents().css(<span class="string">'border'</span>,<span class="string">'10px solid orange'</span>);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/akJ8e16jif.png" alt="mark"></p>
<h3 id="siblings-方法"><a href="#siblings-方法" class="headerlink" title="siblings()方法"></a>siblings()方法</h3><p>作用：访问当前节点的所有兄弟节点（除本身之外）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="comment">// $('p').click(function () &#123;</span></div><div class="line">    <span class="comment">//     $(this).css('background-color','yellow').siblings().css('background-color','pink');</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    <span class="comment">// 方法1：</span></div><div class="line">    <span class="comment">// $('p').mouseenter(function () &#123;</span></div><div class="line">    <span class="comment">//     $(this).css('background-color','yellow').siblings().css('background-color','pink');</span></div><div class="line">    <span class="comment">// &#125;).mouseleave(function () &#123;</span></div><div class="line">    <span class="comment">//     $(this).css('background-color','pink');</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    $(<span class="string">'p'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'yellow'</span>).siblings().css(<span class="string">'background-color'</span>,<span class="string">'pink'</span>);</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'pink'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="next-、prev-、nextAll-和prevAll-方法"><a href="#next-、prev-、nextAll-和prevAll-方法" class="headerlink" title="next()、prev()、nextAll()和prevAll()方法"></a>next()、prev()、nextAll()和prevAll()方法</h3><p>next() 后一个亲兄弟</p>
<p>prev() 前一个亲兄弟</p>
<p>nextAll() 后所有亲兄弟</p>
<p>prevAll() 前所有亲兄弟</p>
<h3 id="手风琴效果例子"><a href="#手风琴效果例子" class="headerlink" title="手风琴效果例子"></a>手风琴效果例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">        *&#123;</div><div class="line">            margin: 0;</div><div class="line">            padding: 0;</div><div class="line">        &#125;</div><div class="line">        .sfq&#123;</div><div class="line">            width: 500px;</div><div class="line">            border: 1px solid black;</div><div class="line">            margin: 80px auto;</div><div class="line">        &#125;</div><div class="line">        .sfq ul&#123;</div><div class="line">            list-style: none;</div><div class="line">        &#125;</div><div class="line">        .sfq ul li&#123;</div><div class="line">            border-bottom: 1px dotted #333;</div><div class="line">        &#125;</div><div class="line">        .sfq ul li div&#123;</div><div class="line">            display: none;</div><div class="line">            border: 1px dotted lightgray;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sfq"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">                这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">                这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">                这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'h2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// :visible 表示可见的</span></div><div class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).siblings().is(<span class="string">':visible'</span>))&#123;</div><div class="line">            $(<span class="keyword">this</span>).siblings().slideUp();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//在当前这个点击的h2的兄弟展开之前，先将所有的收起</span></div><div class="line">            $(<span class="string">'.info'</span>).slideUp();</div><div class="line">            $(<span class="keyword">this</span>).siblings().slideDown();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180415/27mE9I9kHF.png" alt="mark"></p>
<h3 id="节点关系综合查找"><a href="#节点关系综合查找" class="headerlink" title="节点关系综合查找"></a>节点关系综合查找</h3><p>在jQuery中可以通过连续打点来调用节点的关系方法。但是这个操作必须存在一个前提，那就是：一定要知道当前正在操作的元素是谁。</p>
<h2 id="节点顺序和遍历"><a href="#节点顺序和遍历" class="headerlink" title="节点顺序和遍历"></a>节点顺序和遍历</h2><h3 id="index-方法"><a href="#index-方法" class="headerlink" title="index()方法"></a>index()方法</h3><p>index()方法用来获取当前元素在其兄弟节点中的排名，从0开始。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'.teshu'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert($(<span class="keyword">this</span>).index());</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="对应"><a href="#对应" class="headerlink" title="对应"></a>对应</h3><p>jquery中的对应实际上指的是eq()函数，他的作用是获取集合中指定序号的节点    需要说明的一点就是序号是从0开始。        </p>
<p>语法：$(‘selector’).eq(index)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'.div1 p'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div2 p'</span>).eq($(<span class="keyword">this</span>).index()).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180415/d39cFmEdig.png" alt="mark"></p>
<h3 id="选项卡例子"><a href="#选项卡例子" class="headerlink" title="选项卡例子"></a>选项卡例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        *&#123;</div><div class="line">            margin: 0;</div><div class="line">            padding: 0;</div><div class="line">        &#125;</div><div class="line">        .xxk&#123;</div><div class="line">            width: 300px;</div><div class="line">            height: 150px;</div><div class="line">            border: 1px solid black;</div><div class="line">            margin: 100px auto;</div><div class="line">        &#125;</div><div class="line">        .xxk .up&#123;</div><div class="line">            width: 100%;</div><div class="line">            height: 50px;</div><div class="line">            border: 1px solid black;</div><div class="line">        &#125;</div><div class="line">        .xxk .up ul&#123;</div><div class="line">            list-style: none;</div><div class="line">        &#125;</div><div class="line">        .up ul li&#123;</div><div class="line">            float:left;</div><div class="line">            width: 100px;</div><div class="line">            height: 100%;</div><div class="line">            text-align: center;</div><div class="line">            line-height: 50px;</div><div class="line">        &#125;</div><div class="line">        /*鼠标移动到哪里改变颜色*/</div><div class="line">        /*.up ul li:hover&#123;*/</div><div class="line">            /*background-color: orange;*/</div><div class="line">        /*&#125;*/</div><div class="line">        .up ul .show&#123;</div><div class="line">            background-color:orange;</div><div class="line">        &#125;</div><div class="line">        .xxk .down&#123;</div><div class="line">            width: 100%;</div><div class="line">            height: 100px;</div><div class="line">        &#125;</div><div class="line">        .xxk .down ul&#123;</div><div class="line">            list-style: none;</div><div class="line">        &#125;</div><div class="line">        .down ul li&#123;</div><div class="line">            width: 300px;</div><div class="line">            height: 100px;</div><div class="line">            display: none;</div><div class="line">        &#125;</div><div class="line">        /*选择器的有限级 id&gt;class&gt;标签*/</div><div class="line">        .down ul .show-li&#123;</div><div class="line">            display: block;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xxk"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"show-li"</span>&gt;</span>首页首页首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>视频视频视频<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>游戏游戏游戏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'.up li'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//控制 标题</span></div><div class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'show'</span>).siblings().removeClass(<span class="string">'show'</span>);</div><div class="line">        <span class="comment">// 控制内容部分</span></div><div class="line">        $(<span class="string">'.down li'</span>).eq($(<span class="keyword">this</span>).index()).addClass(<span class="string">'show-li'</span>).siblings().removeClass(<span class="string">'show-li'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180415/dH4hdKjgig.png" alt="mark"></p>
<h3 id="each-方法"><a href="#each-方法" class="headerlink" title="each()方法"></a>each()方法</h3><p>作用：遍历每个节点，然后执行里面的回调函数。</p>
<p>注意：回调函数中如果存在$(this)，那么它指的是【遍历中当前这一次的这个节点】。</p>
<p>语法：$(‘selector’).each(func)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    &lt;!--谁访问就谁的子元素修改--&gt;</div><div class="line">    <span class="comment">// $('div').each(function (index) &#123;</span></div><div class="line">    <span class="comment">//     $(this).children().eq(1).css('background-color','red');</span></div><div class="line">    <span class="comment">//     console.log(index);</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    <span class="comment">// 单击遍历</span></div><div class="line">    <span class="comment">// $('div').each(function (index) &#123;</span></div><div class="line">    <span class="comment">//     $(this).children().eq(1).click(function () &#123;</span></div><div class="line">    <span class="comment">//         console.log(index);</span></div><div class="line">    <span class="comment">//     &#125;);</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">    $(<span class="string">'div'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,ele</span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).children().eq(<span class="number">1</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">        <span class="built_in">console</span>.log(index);</div><div class="line">        <span class="built_in">console</span>.log(ele);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>补充：delay()函数表示延迟：**</p>
<p>$().delay(600).animate();</p>
<p>$().delay(600).fadeOut(); </p>
<p>$().delay(600).show(400); //均表示动画延迟600ms执行</p>
<h3 id="360特效例子："><a href="#360特效例子：" class="headerlink" title="360特效例子："></a>360特效例子：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .cont&#123;</div><div class="line">            width: 1200px;  height: 300px; border: 1px solid black;</div><div class="line">            position: relative;</div><div class="line">        &#125;</div><div class="line">        .cont img&#123;  position: absolute; display: none;  &#125;</div><div class="line">        img:nth-child(2)&#123;  left: 100px; top: 50px;  &#125;</div><div class="line">        img:nth-child(3)&#123;  left: 300px; top: 50px;  &#125;</div><div class="line">        img:nth-child(4)&#123;  left: 500px; top: 50px;  &#125;</div><div class="line">        img:nth-child(5)&#123;  left: 800px; top: 50px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cont"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/360_1.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/360_2.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/360_3.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/360_4.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/360_5.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</div><div class="line">        <span class="comment">// $(this).fadeIn(100).fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);</span></div><div class="line">        $(<span class="keyword">this</span>).delay(<span class="number">500</span>*index).fadeIn(<span class="number">100</span>).fadeOut(<span class="number">100</span>).fadeIn(<span class="number">100</span>).fadeOut(<span class="number">100</span>).fadeIn(<span class="number">100</span>);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180415/5KdaAA4hKc.png" alt="mark"></p>
<h3 id="表格列变色例子"><a href="#表格列变色例子" class="headerlink" title="表格列变色例子"></a>表格列变色例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 让表格的列变色 --&gt;</span></div><div class="line">    $('tr').each(function () &#123;</div><div class="line">       $(this).children().eq(2).css('background-color','red');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="节点操作-1"><a href="#节点操作-1" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="内部插入append-、appendTo-、prepend-、prependTo-方法"><a href="#内部插入append-、appendTo-、prepend-、prependTo-方法" class="headerlink" title="内部插入append()、appendTo()、prepend()、prependTo()方法"></a>内部插入append()、appendTo()、prepend()、prependTo()方法</h3><p>作用：这四个方法都用来在某个节点内部插入新内容</p>
<p>语法：</p>
<p>A.append(B);        //向【A节点内部现有内容之后】追加【B节点】</p>
<p>B.appendTo(A);    //将【B节点】追加到【A节点内部现有内容之后】</p>
<p>A.prepend(B);    //向【A节点内部现有内容之前】追加【B节点】</p>
<p>B.prependTo(A);    //将【B节点】追加到【A节点内部的现有内容之前】</p>
<p>说明：四个方法所表达的含义大致相同，只不过在语法上略有出入。其中AB均为节点。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson6<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'div'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).append($(<span class="string">'&lt;p&gt;新添加的&lt;/p&gt;'</span>));</div><div class="line">    &#125;);</div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="外部插入after-、before-、insertAfter-、insertBefore"><a href="#外部插入after-、before-、insertAfter-、insertBefore" class="headerlink" title="外部插入after()、before()、insertAfter()、insertBefore()"></a>外部插入after()、before()、insertAfter()、insertBefore()</h3><p>作用：相比于前面的四个方法的作用，这四个方法可以认为是给当前节点添加兄弟</p>
<p>语法：</p>
<p>A.after(B);//在【A节点之后】添加【同级节点B】</p>
<p>A.before(B);//在【A节点之前】添加【同级节点B】</p>
<p>A.insertAfter(B);//把【A节点】添加到【B节点之后】</p>
<p>A.insertBefore(B);    //将【A节点】添加到【B节点之前】</p>
<p>说明：四个方法所表达的含义大致相同，只不过在语法上略有出入。其中AB均为节点。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson6<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'div'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).after($(<span class="string">'&lt;h2&gt;这是新添加的兄弟节点&lt;/h2&gt;'</span>))</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180415/HkmabjH3Lb.png" alt="mark"></p>
<h3 id="改变节点位置"><a href="#改变节点位置" class="headerlink" title="改变节点位置"></a>改变节点位置</h3><p>对于jq来说操作的实际上要么是节点，要么是节点组。那么有一条原则在操作节点的时候我们就必须遵守：</p>
<p>通过搜索获得的节点在页面中只能同一时刻出现在一个位置</p>
<p>这就是frank总结的‘节点守恒定律’。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">假设存在HTML结构：</div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span>	</div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"xiaoming"</span>&gt;</span>我是小明<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">现在执行命令：</div><div class="line">		$("#box2").append($(".xiaoming"));</div><div class="line">则HTML页面将变为：</div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"xiaoming"</span>&gt;</span>我是小明<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>特别需要说明的是，在jq中并没有提供所谓的change之类的方法。因此改变节点的位置还是需要通过append这种方法来实现。</p>
<h3 id="包裹wrap"><a href="#包裹wrap" class="headerlink" title="包裹wrap()"></a>包裹wrap()</h3><p>作用：给自己增加一个父类(开发中基本没啥用)</p>
<p>语法：A.warp(B)</p>
<h3 id="删除节点empty-、remove"><a href="#删除节点empty-、remove" class="headerlink" title="删除节点empty()、remove()"></a>删除节点empty()、remove()</h3><p>作用：empty()表示删除指定节点中的内容，而remove()则表示移除自己</p>
<p>语法：</p>
<p> A.empty() 等价于 A.html(‘’);</p>
<p> A.remove();</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson6<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">  $(<span class="string">'div'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">//$(this).empty();</span></div><div class="line">      $(<span class="keyword">this</span>).remove();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="克隆clone"><a href="#克隆clone" class="headerlink" title="克隆clone()"></a>克隆clone()</h3><p>作用：相当于js中的cloneNode操作，即克隆的节点在页面中没有自己的位置。需要通过append等操作才能够追加到页面当中。</p>
<p>语法：A.append(B.clone)     </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson6<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1,.div2,.div3&#123;</div><div class="line">            width: 500px;  height: 150px;  border: 1px solid black;  margin: 20px;  &#125;</div><div class="line">        div p&#123;</div><div class="line">            width: 100px;  height: 100px;  background-color: skyblue;</div><div class="line">            float: left; margin: 5px;  &#125;</div><div class="line">        div .teshu&#123;</div><div class="line">            background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"teshu"</span>&gt;</span>teshu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="string">'div'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'body'</span>).append($(<span class="keyword">this</span>).clone());</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="节点移动例子"><a href="#节点移动例子" class="headerlink" title="节点移动例子"></a>节点移动例子</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang="en"&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;title&gt;lesson6&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        .leftDiv,.rightDiv&#123;  width: 150px; height: 400px;</div><div class="line">            float: left; border: 1px solid black;  &#125;</div><div class="line">        .menu&#123;  float: left; margin: 0 30px;  &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div class="leftDiv"&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;大狮子&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;大老虎&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;梅花鹿&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;小松鼠&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;大象&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;黄河&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;长江&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;高山&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;水杯&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;麦克风&lt;/span&gt;&lt;input type="checkbox"/&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class="menu"&gt;</div><div class="line">    &lt;button&gt; ----&gt; &lt;/button&gt;</div><div class="line">    &lt;button&gt; &lt;---- &lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class="rightDiv"&gt;&lt;/div&gt;</div><div class="line">&lt;script src="js/jquery-1.12.3.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">   $('.menu button').eq(0).click(function () &#123;</div><div class="line">       $('.rightDiv').append($('.leftDiv input:checked').parent());</div><div class="line">       $('.rightDiv input:checked').attr('checked',false);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180415/8jkI8LBjK7.png" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建 vue 框架的使用环境]]></title>
      <url>/2018/06/03/%E6%90%AD%E5%BB%BA%20vue%20%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="搭建-vue-框架的使用环境"><a href="#搭建-vue-框架的使用环境" class="headerlink" title="搭建 vue 框架的使用环境"></a>搭建 vue 框架的使用环境</h1><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><p>node 附带了 npm 指令。</p>
<p>查询是否安装了 nodejs ,输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/3C85DheJcl.png" alt="mark"></p>
<p>这里我们是需要 npm 命令才安装的 nodejs 。</p>
<h2 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h2><p>webpack：自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。</p>
<p>webpack 可以通过 <a href="https://webpack.js.org/" target="_blank" rel="external">https://webpack.js.org/</a> 中的 <a href="https://webpack.js.org/concepts/" target="_blank" rel="external">DOCUMENTATION</a> 来学习它。</p>
<h3 id="安装-淘宝-NPM-镜像"><a href="#安装-淘宝-NPM-镜像" class="headerlink" title="安装 淘宝 NPM 镜像"></a>安装 淘宝 NPM 镜像</h3><p>注意：我们不使用 npm ，因为 npm 在国外速度非常慢，所以我们使用 cnpm (淘宝的镜像代替)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/CcgLK07dHe.png" alt="mark"></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/69b3mleHlf.png" alt="mark"></p>
<p>命令安装 淘宝 NPM 镜像</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/03E38F0gjj.png" alt="mark"></p>
<p>查看淘宝 NPM 镜像是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/Ll7mc8cEIE.png" alt="mark"></p>
<p>说明安装成功。</p>
<h3 id="安装-webpack-1"><a href="#安装-webpack-1" class="headerlink" title="安装 webpack"></a>安装 webpack</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g webpack</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/H5CGLJhm3j.png" alt="mark"></p>
<p>测试 webpack  是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/Eg4dhkjAka.png" alt="mark"></p>
<h2 id="全局安装-vue-cli"><a href="#全局安装-vue-cli" class="headerlink" title="全局安装 vue-cli"></a>全局安装 vue-cli</h2><p><img src="https://blogimg.nos-eastchina1.126.net/180312/d03gDH0GhL.png" alt="mark"></p>
<p>这是 vue 提供的一种创建项目架构的方式，使用命令就可以生成。</p>
<p>安装 vue-cli 使用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install --global vue-cli</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/dIc4Lc7dCD.png" alt="mark"></p>
<p>安装会出现此结果。</p>
<p>判断是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/d7FHm3jhAL.png" alt="mark"></p>
<p>说明安装成功。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个基于 webpack 模板的新项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init webpack my-project</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/a1GaHF4J90.png" alt="mark"></p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>生成  package.json 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/7351m030Ig.png" alt="mark"></p>
<p>创建完成可以在我们的项目目录下看到 package.json 文件：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/KJEKblihLi.png" alt="mark"></p>
<p>完整的项目结构</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/cB469ALikF.png" alt="mark"></p>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm run dev</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/h9fFk3L9gd.png" alt="mark"></p>
<p>访问：<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180312/44AKB0iA5I.png" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见方法]]></title>
      <url>/2018/06/03/%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><ol>
<li>css()方法 </li>
<li>show()和hide()方法</li>
<li>slideDown()和slideUp()方法</li>
<li>fadeIn()和fadeOut()方法</li>
<li>addClass()和removeClass()方法</li>
<li>attr()方法</li>
<li>html()方法</li>
</ol>
<a id="more"></a>
<h2 id="css-方法"><a href="#css-方法" class="headerlink" title="css()方法"></a>css()方法</h2><p>(1).jq 对象.css(‘属性名’,’属性值’);</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 1.css()</div><div class="line">     * 描述：本方法提供给 jq 对象，用来读写 jq 对象的 css 属性。相当于 js 中的 style 属性</div><div class="line">     * 语法：</div><div class="line">     * (1).jq 对象.css('属性名','属性值');</div><div class="line">     * 说明：第二个参数为可选的参数，如果不写代表读取当前属性的值</div><div class="line">     * 注意：使用 css() 方法读写属性的时候，css 属性不需要改写</div><div class="line">     */</div><div class="line">    $(<span class="string">'.div1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'.div2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log($(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>));</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/33KDjIkLBa.png" alt="mark"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 1.css()</div><div class="line">     * 描述：本方法提供给 jq 对象，用来读写 jq 对象的 css 属性。相当于 js 中的 style 属性</div><div class="line">     * 语法：</div><div class="line">     * (1).jq 对象.css('属性名','属性值');</div><div class="line">     * 说明：第二个参数为可选的参数，如果不写代表读取当前属性的值</div><div class="line">     * 注意：使用 css() 方法读写属性的时候，css 属性不需要改写</div><div class="line">     */</div><div class="line">    $(<span class="string">'.div1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">        <span class="comment">// 宽度变长</span></div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'width'</span>,<span class="string">'300px'</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'.div2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 可以拿到属性样式</span></div><div class="line">        <span class="built_in">console</span>.log($(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>));</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/D6d6Bbb4eb.png" alt="mark"></p>
<p>（2）JSON样式参数就是设置样式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 1.css()</div><div class="line">     * 描述：本方法提供给 jq 对象，用来读写 jq 对象的 css 属性。相当于 js 中的 style 属性</div><div class="line">     * 语法：</div><div class="line">     * (2).jq对象.css(&#123;'css属性1':'属性值1','css属性2':'属性值2',...&#125;)</div><div class="line">     * 说明：参数是 JSON 格式的时候，css() 方法允许一次性修改多个样式。</div><div class="line">     * 注意：JSON 参数理论上属性可以不写引号，但是如果 css 属性存在 - 等特殊字符，则必须添加。</div><div class="line">     */</div><div class="line">    $(<span class="string">'.div1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(&#123;</div><div class="line">            <span class="comment">// 注意：样式名称要加上 单引号引上</span></div><div class="line">            <span class="string">'background-color'</span>:<span class="string">'red'</span>,</div><div class="line">            <span class="string">'width'</span>:<span class="string">'300px'</span></div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'.div2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log($(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>));</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="直接在原值上累加"><a href="#直接在原值上累加" class="headerlink" title="直接在原值上累加"></a>直接在原值上累加</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="comment">// 第一种写法</span></div><div class="line">    <span class="comment">// $('.div1').click(function () &#123;</span></div><div class="line">    <span class="comment">//     var oldWidth = parseInt($(this).css('width'));</span></div><div class="line">    <span class="comment">//     var newWidth = oldWidth+50+'px';</span></div><div class="line">    <span class="comment">//     $(this).css('width',newWidth);</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line"></div><div class="line">    <span class="comment">// 第二种写法</span></div><div class="line">    $(<span class="string">'.div1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'width'</span>,<span class="string">'+=50px'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="show-amp-amp-hide"><a href="#show-amp-amp-hide" class="headerlink" title="show() &amp;&amp; hide()"></a>show() &amp;&amp; hide()</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>show()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>hide()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>show(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>hide(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--&lt;script src="js/jquery-1.12.3.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 1. 常见方法 show()&amp;hide()</div><div class="line">     * 描述：show() 和 hide() 方法表示设置 jq 对象的显示和隐藏</div><div class="line">     * 语法：jq对象.show(animationTime); / jq对象.hide(animationTime);</div><div class="line">     * 说明：show() / hide() 方法实际上允许添加单位为 ms 的动画时间.</div><div class="line">     *       如果添加参数，则动画是宽高渐变，透明度渐变。</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="comment">// eq():通过下标获取</span></div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).show();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).hide();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).show(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).hide(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>案例：某网站品牌</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/eA3h3e84hb.png" alt="mark"></p>
<p>方法1：使用 1.7.2/jquery.min.js 版本来实现</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .cont&#123;</div><div class="line">            border:1px solid black;</div><div class="line">            width: 600px;</div><div class="line">            height: 350px;</div><div class="line">            margin: 0 auto;</div><div class="line">        &#125;</div><div class="line">        .cont ul&#123;</div><div class="line">            list-style: none;</div><div class="line">            padding: 0px;</div><div class="line">            margin: 0px;</div><div class="line">        &#125;</div><div class="line">        .cont ul li&#123;</div><div class="line">            display: inline-block;</div><div class="line">            width: 193px;</div><div class="line">            height: 50px;</div><div class="line">            line-height:30px;</div><div class="line">            text-align: center;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .cont div&#123;</div><div class="line">            border: 1px solid #333;</div><div class="line">            width: 50%;</div><div class="line">            height: 35px;</div><div class="line">            text-align: center;</div><div class="line">            line-height: 35px;</div><div class="line">            margin: 10px auto;</div><div class="line">            cursor: pointer;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--完成的主要功能选中的留下--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cont"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>佳能<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>富士康<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>索尼<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>松下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>奥林巴斯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>三星<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>htc<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>水杯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>鼠标<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>工牌<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>键盘<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>头盔<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>手套<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>显示精简品牌<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">// 点击选中消失</span></div><div class="line">    <span class="keyword">var</span> $hideItems = $(<span class="string">'.cont .hd'</span>);</div><div class="line">    <span class="comment">// 单击按钮事件</span></div><div class="line">    <span class="comment">// 切换方法（允许你写多个方法）</span></div><div class="line">    <span class="comment">// 此方法在 1.12 中被废弃了</span></div><div class="line">    $(<span class="string">'.cont div'</span>).toggle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 第一次点击按钮品牌消失</span></div><div class="line">        $hideItems.hide();</div><div class="line">        $(<span class="keyword">this</span>).html(<span class="string">'显示全部品牌'</span>);</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 再次点击按钮品牌出现</span></div><div class="line">        $hideItems.show();</div><div class="line">        $(<span class="keyword">this</span>).html(<span class="string">'显示精简品牌'</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="slideDown-和-slideUp-方法"><a href="#slideDown-和-slideUp-方法" class="headerlink" title="slideDown() 和 slideUp() 方法"></a>slideDown() 和 slideUp() 方法</h2><p>下拉显示和上滑隐藏</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 300px; height: 300px; background-color: orange;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideUp()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideDown()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideUp(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideDown(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 1. slideUp() 和 slideDown()</div><div class="line">     * 描述：本方法用来设置 jq 对象上拉收起和下滑显示</div><div class="line">     * 语法：jq对象.slideUp(动画事件ms)/jq对象.slideDown(动画时间ms)</div><div class="line">     * 注意：slideUp 和 slideDown 方法存在隐形的属性，叫“边界”</div><div class="line">     *      边界是一个可以设置的属性，通过定位属性 top 或 bottom 设置</div><div class="line">     */</div><div class="line"></div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideUp();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideDown();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideUp(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideDown(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180413/LImEGBIejd.png" alt="mark"></p>
<p>slideUp 和 slideDown 方法存在隐形的属性，叫“边界”</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 300px; height: 300px; background-color: orange;</div><div class="line">            position: absolute;</div><div class="line">            /*控制距离页面低部多远开始伸缩*/</div><div class="line">            bottom: 150px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideUp()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideDown()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideUp(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>slideDown(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 1. slideUp() 和 slideDown()</div><div class="line">     * 描述：本方法用来设置 jq 对象上拉收起和下滑显示</div><div class="line">     * 语法：jq对象.slideUp(动画事件ms)/jq对象.slideDown(动画时间ms)</div><div class="line">     * 注意：slideUp 和 slideDown 方法存在隐形的属性，叫“边界”</div><div class="line">     *      边界是一个可以设置的属性，通过定位属性 top 或 bottom 设置（只有在上下没有在左右）</div><div class="line">     */</div><div class="line"></div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideUp();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideDown();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideUp(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).slideDown(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180413/ma1f4Gl1jJ.png" alt="mark"></p>
<p>常用的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .xiaomi&#123;</div><div class="line">            width: 120px;height: 300px;border: 1px solid black;</div><div class="line">            position: absolute;margin:100px auto;margin: 100px 50%;</div><div class="line">        &#125;</div><div class="line">        .xiaomi .innerChuangkou&#123;</div><div class="line">            width: 100%;</div><div class="line">            height: 200px;</div><div class="line">            position: absolute;</div><div class="line">            bottom: 0;</div><div class="line">            background-color: rgba(10,10,10,0.5);</div><div class="line">            /*一开进来不可见*/</div><div class="line">            display: none;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xiaomi"</span>&gt;</span></div><div class="line">    正常的商品正常的商品</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"innerChuangkou"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="comment">// 进来出现，出去消失</span></div><div class="line">    <span class="keyword">var</span> $innerChuangkou = $(<span class="string">'.innerChuangkou'</span>);</div><div class="line">    $(<span class="string">'.xiaomi'</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $innerChuangkou.stop().slideDown();</div><div class="line">    &#125;).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $innerChuangkou.stop().slideUp();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180413/GbGbaHmH4j.png" alt="mark"></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180413/9hcKk4mF6G.png" alt="mark"></p>
<h2 id="fadeIn-和fadeOut-方法"><a href="#fadeIn-和fadeOut-方法" class="headerlink" title="fadeIn()和fadeOut()方法"></a>fadeIn()和fadeOut()方法</h2><p>淡入、淡出</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height: 200px; background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>fadeIn()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>fadeOut()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>fadeIn(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>fadeOut(5000)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).fadeIn();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).fadeOut();</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).fadeIn(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).fadeOut(<span class="number">5000</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要注意的是：</p>
<p>fadeIn()的起点是display:none; 而不是opacity:0;</p>
<p>fadeOut()的终点是display:none;也不是opacity:0;</p>
<p>也就是说一个元素如果想淡入，一定要给这个元素加上display:none;属性，而不要给他加上opacity:0;的属性。    同样的fadeIn()和fadeOut()的函数括号里面可以加数字，表示动画的时间。fadeIn(4000);就是用4000毫秒进行淡入。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180413/FEkegeAFaE.png" alt="mark"></p>
<h2 id="addClass-和removeClass-方法"><a href="#addClass-和removeClass-方法" class="headerlink" title="addClass()和removeClass()方法"></a>addClass()和removeClass()方法</h2><p>追加类和移除类。add就是添加，remove就是移除。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height: 200px;border: 1px solid black;</div><div class="line">        &#125;</div><div class="line">        .red&#123;</div><div class="line">            background-color: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>添加red类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除red类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).addClass(<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).removeClass(<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="attr-方法"><a href="#attr-方法" class="headerlink" title="attr()方法"></a>attr()方法</h2><p>attr是英语attribute属性的简写，用来更改HTML元素的属性。之前我们在原生JS中学习过，一个元素可以”有什么属性就点什么”。</p>
<p>例如：document.getElementById(“tutu”).src = “2.jpg”;    实际上就是更改这个HTML元素的属性。现在在jQuery中就是用attr()方法,来更改HTML元素的属性。    </p>
<p>语法：$(“div”).attr(“key”,”value”);    </p>
<p>例如：$(“img”).mouseenter(function(){$(this).attr(“src”,”images/longlong.jpg”);});            </p>
<p>鼠标进入的时候，换图，就是换图的src属性attr()也可以读属性，当只有一个参数的时候，表示读取这个东西的属性。</p>
<p>例如：var s = $(“img”).attr(“src”);</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height: 200px;border: 1px solid black;</div><div class="line">        &#125;</div><div class="line">        .red&#123;</div><div class="line">            background-color: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>添加red类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除red类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).attr(<span class="string">'class'</span>,<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.div1'</span>).removeClass(<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/F2EB11eCaB.png" alt="mark"></p>
<p>单击（覆盖属性）</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/elkjmEe3Jm.png" alt="mark"></p>
<h3 id="交叉淡入淡出轮播图"><a href="#交叉淡入淡出轮播图" class="headerlink" title="交叉淡入淡出轮播图"></a>交叉淡入淡出轮播图</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang="en"&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;title&gt;lesson6&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        *&#123;margin: 0;padding: 0;&#125;</div><div class="line">        .lunbotu&#123;</div><div class="line">            width: 560px; height: 300px;margin: 50px auto;</div><div class="line">            border: 1px solid black;</div><div class="line">            position: relative;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .imgUL&#123;</div><div class="line">            /*去掉li标签的点*/</div><div class="line">            list-style: none;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .imgUL li&#123;</div><div class="line">            position: absolute;</div><div class="line">            /*初始话的时候为不可见*/</div><div class="line">            display: none;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .imgUL .selected&#123;</div><div class="line">            display: block;</div><div class="line">        &#125;</div><div class="line">        .rightBtn,.leftBtn&#123;</div><div class="line">            width: 30px;</div><div class="line">            height: 60px;</div><div class="line">            background-color: rgba(10,150,10,0.5);</div><div class="line">            position: absolute;</div><div class="line">            font-size: 35px;</div><div class="line">            /*top代表*/</div><div class="line">            top: 40%;</div><div class="line">            color: white;</div><div class="line">            text-align: center;</div><div class="line">            line-height: 60px;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .rightBtn&#123;</div><div class="line">            right: 0;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div class="lunbotu"&gt;</div><div class="line">    &lt;ul class="imgUL"&gt;</div><div class="line">        &lt;li class="selected"&gt;&lt;a href="#"&gt;&lt;img src="img/0.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/1.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/2.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/3.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/4.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;div class="leftBtn"&gt; &lt; &lt;/div&gt;</div><div class="line">    &lt;div class="rightBtn"&gt; &gt; &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src="js/jquery-1.12.3.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">        var $lis = $('.lunbotu li');</div><div class="line">        // index 是当前正在加载的图片的序号，默认从 0 开始加载</div><div class="line">        var index = 0;</div><div class="line">        $('.rightBtn').click(function () &#123;</div><div class="line">            // 防止动画积累</div><div class="line">            if($lis.is(':animated'))&#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            //旧的怎么样</div><div class="line">            $lis.eq(index).fadeOut();</div><div class="line">            index++;</div><div class="line">            //设置边界</div><div class="line">            if(index == 5)&#123;</div><div class="line">                index = 0;</div><div class="line">            &#125;</div><div class="line">            //新的怎么样</div><div class="line">            $lis.eq(index).fadeIn();</div><div class="line">        &#125;);</div><div class="line">        $('.leftBtn').click(function () &#123;</div><div class="line">            // 防止动画积累</div><div class="line">            if($lis.is(':animated'))&#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            $lis.eq(index).fadeOut();</div><div class="line">            index--;</div><div class="line">            if(index == -1)&#123;</div><div class="line">                index = 4;</div><div class="line">            &#125;</div><div class="line">            $lis.eq(index).fadeIn();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="交叉淡入淡出轮播图锚点"><a href="#交叉淡入淡出轮播图锚点" class="headerlink" title="交叉淡入淡出轮播图锚点"></a>交叉淡入淡出轮播图锚点</h3><h3 id="风格1"><a href="#风格1" class="headerlink" title="风格1"></a>风格1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang="en"&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;title&gt;lesson6&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        *&#123;margin: 0;padding: 0;&#125;</div><div class="line">        .lunbotu&#123;</div><div class="line">            width: 560px; height: 300px;margin: 50px auto;</div><div class="line">            border: 1px solid black;</div><div class="line">            position: relative;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .imgUL&#123;</div><div class="line">            /*去掉li标签的点*/</div><div class="line">            list-style: none;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .imgUL li&#123;</div><div class="line">            position: absolute;</div><div class="line">            /*初始话的时候为不可见*/</div><div class="line">            display: none;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .imgUL .selected&#123;</div><div class="line">            display: block;</div><div class="line">        &#125;</div><div class="line">        .rightBtn,.leftBtn&#123;</div><div class="line">            width: 30px;</div><div class="line">            height: 60px;</div><div class="line">            background-color: rgba(10,150,10,0.5);</div><div class="line">            position: absolute;</div><div class="line">            font-size: 35px;</div><div class="line">            /*top代表*/</div><div class="line">            top: 40%;</div><div class="line">            color: white;</div><div class="line">            text-align: center;</div><div class="line">            line-height: 60px;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .rightBtn&#123;</div><div class="line">            right: 0;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .maodainUL&#123;</div><div class="line">            list-style: none;</div><div class="line">            position: absolute;</div><div class="line">            /*下面的距离为10px*/</div><div class="line">            bottom: 10px;</div><div class="line">            /*左右为 35%*/</div><div class="line">            left: 35%;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .maodainUL li&#123;</div><div class="line">            width: 25px;</div><div class="line">            height: 25px;</div><div class="line">            border-radius: 50%;</div><div class="line">            text-align: center;</div><div class="line">            line-height: 25px;</div><div class="line">            display: inline-block;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">        .maodainUL li a&#123;</div><div class="line">            /*去掉下划线*/</div><div class="line">            text-decoration: none;</div><div class="line">            color: white;</div><div class="line">            font-size: 20px;</div><div class="line">        &#125;</div><div class="line">        .lunbotu .maodainUL .selected-li&#123;</div><div class="line">            background-color: skyblue;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div class="lunbotu"&gt;</div><div class="line">    &lt;ul class="imgUL"&gt;</div><div class="line">        &lt;li class="selected"&gt;&lt;a href="#"&gt;&lt;img src="img/0.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/1.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/2.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/3.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="img/4.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;div class="leftBtn"&gt; &lt; &lt;/div&gt;</div><div class="line">    &lt;div class="rightBtn"&gt; &gt; &lt;/div&gt;</div><div class="line">    &lt;ul class="maodainUL"&gt;</div><div class="line">        &lt;li class="selected-li"&gt;&lt;a href="#"&gt;0&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;1&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;2&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;3&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href="#"&gt;4&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src="js/jquery-1.12.3.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">        // 获取图片的li</div><div class="line">        var $lis = $('.imgUL li');</div><div class="line">        // 获取锚点的li</div><div class="line">        var $maodians = $('.maodainUL li')</div><div class="line">        // index 是当前正在加载的图片的序号，默认从 0 开始加载</div><div class="line">        var index = 0;</div><div class="line">        $('.rightBtn').click(function () &#123;</div><div class="line">            // 防止动画积累</div><div class="line">            if($lis.is(':animated'))&#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            //旧的怎么样</div><div class="line">            $lis.eq(index).fadeOut();</div><div class="line">            $maodians.eq(index).removeClass('selected-li');</div><div class="line">            index++;</div><div class="line">            //设置边界</div><div class="line">            if(index == 5)&#123;</div><div class="line">                index = 0;</div><div class="line">            &#125;</div><div class="line">            //新的怎么样</div><div class="line">            $lis.eq(index).fadeIn();</div><div class="line">            $maodians.eq(index).addClass('selected-li')</div><div class="line">        &#125;);</div><div class="line">        $('.leftBtn').click(function () &#123;</div><div class="line">            // 防止动画积累</div><div class="line">            if($lis.is(':animated'))&#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            $lis.eq(index).fadeOut();</div><div class="line">            $maodians.eq(index).removeClass('selected-li')</div><div class="line">            index--;</div><div class="line">            if(index == -1)&#123;</div><div class="line">                index = 4;</div><div class="line">            &#125;</div><div class="line">            $lis.eq(index).fadeIn();</div><div class="line">            $maodians.eq(index).addClass('selected-li');</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 锚点的点击事件</div><div class="line">        $maodians.click(function () &#123;</div><div class="line">            // 防止动画积累</div><div class="line">            if($lis.is(':animated'))&#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            // 旧的怎么样</div><div class="line">            $lis.eq(index).fadeOut();</div><div class="line">            $maodians.eq(index).removeClass('selected-li');</div><div class="line">            // 设置 index 为点击的 li 对应的 index</div><div class="line">            // 获取当前元素在兄弟中的序号：jq对象.index()</div><div class="line">            index = $(this).index();</div><div class="line">            // 新的怎么样</div><div class="line">            $lis.eq(index).fadeIn();</div><div class="line">            $maodians.eq(index).addClass('selected-li');</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/j45G13CdCH.png" alt="mark"></p>
<h3 id="风格2"><a href="#风格2" class="headerlink" title="风格2"></a>风格2</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>三位置法轮播图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">		*&#123;</div><div class="line">			margin: 0;</div><div class="line">			padding: 0;</div><div class="line">		&#125;</div><div class="line">		.carousel&#123;</div><div class="line">			width: 560px;</div><div class="line">			height: 300px;</div><div class="line">			margin: 50px auto;</div><div class="line">			position: relative;</div><div class="line">			border: 10px solid #ccc;</div><div class="line">		&#125;</div><div class="line">		.carousel .btns span&#123;</div><div class="line">			position: absolute;</div><div class="line">			width: 40px;</div><div class="line">			height: 40px;</div><div class="line">			top: 50%;</div><div class="line">			margin-top: -20px;</div><div class="line">			background-color: orange;</div><div class="line">			cursor: pointer;</div><div class="line">		&#125;</div><div class="line">		.carousel .btns span.leftBtn&#123;</div><div class="line">			left: 10px;</div><div class="line">		&#125;</div><div class="line">		.carousel .btns span.rightBtn&#123;</div><div class="line">			right:10px;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		.carousel ul&#123;</div><div class="line">			list-style: none;</div><div class="line">		&#125;</div><div class="line">		.carousel ul li&#123;</div><div class="line">			position: absolute;</div><div class="line">			left: 560px;</div><div class="line">			top: 0;</div><div class="line">		&#125;</div><div class="line">		.carousel ul li.first&#123;</div><div class="line">			left: 0;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/0.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"leftBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"rightBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="comment">//信号量</span></div><div class="line">		<span class="keyword">var</span> idx = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="comment">//右按钮的事件监听</span></div><div class="line">		$(<span class="string">".rightBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//改变之前，老图往-560移动</span></div><div class="line">			$(<span class="string">"li"</span>).eq(idx).animate(&#123;<span class="string">"left"</span>:<span class="number">-560</span>&#125;,<span class="number">600</span>);</div><div class="line"></div><div class="line">			<span class="comment">//信号量改变</span></div><div class="line">			idx++;</div><div class="line">			<span class="keyword">if</span>(idx &gt; <span class="number">4</span>)&#123;</div><div class="line">				idx = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">//信号量改变之后，新图先瞬间移动到560，然后往0移动</span></div><div class="line">			$(<span class="string">"li"</span>).eq(idx).css(<span class="string">"left"</span>,<span class="number">560</span>).animate(&#123;<span class="string">"left"</span>:<span class="number">0</span>&#125;,<span class="number">600</span>);</div><div class="line"></div><div class="line">		&#125;);</div><div class="line"></div><div class="line">		<span class="comment">//左按钮的事件监听</span></div><div class="line">		$(<span class="string">".leftBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//改变之前，老图往560移动</span></div><div class="line">			$(<span class="string">"li"</span>).eq(idx).animate(&#123;<span class="string">"left"</span>:<span class="number">560</span>&#125;,<span class="number">600</span>);</div><div class="line">			</div><div class="line">			<span class="comment">//信号量改变</span></div><div class="line">			idx--;</div><div class="line">			<span class="keyword">if</span>(idx &lt; <span class="number">0</span>)&#123;</div><div class="line">				idx = <span class="number">4</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">//信号量改变之后，新图先瞬间移动到-560，然后往0移动</span></div><div class="line">			$(<span class="string">"li"</span>).eq(idx).css(<span class="string">"left"</span>,<span class="number">-560</span>).animate(&#123;<span class="string">"left"</span>:<span class="number">0</span>&#125;,<span class="number">600</span>);</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/fLIKlg6Ff3.png" alt="mark"></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/LiCcFealhh.png" alt="mark"></p>
<h3 id="风格3"><a href="#风格3" class="headerlink" title="风格3"></a>风格3</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>火车法轮播图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">		*&#123;</div><div class="line">			margin: 0;</div><div class="line">			padding: 0;</div><div class="line">		&#125;</div><div class="line">		.carousel&#123;</div><div class="line">			width: 560px;</div><div class="line">			height: 300px;</div><div class="line">			margin: 50px auto;</div><div class="line">			position: relative;</div><div class="line">			border: 10px solid #ccc;</div><div class="line">			/*ovh*/</div><div class="line">		&#125;</div><div class="line">		.carousel .btns span&#123;</div><div class="line">			position: absolute;</div><div class="line">			width: 40px;</div><div class="line">			height: 40px;</div><div class="line">			top: 50%;</div><div class="line">			margin-top: -20px;</div><div class="line">			background-color: orange;</div><div class="line">			cursor: pointer;</div><div class="line">		&#125;</div><div class="line">		.carousel .btns span.leftBtn&#123;</div><div class="line">			left: 10px;</div><div class="line">		&#125;</div><div class="line">		.carousel .btns span.rightBtn&#123;</div><div class="line">			right:10px;</div><div class="line">		&#125;</div><div class="line">		.carousel ul&#123;</div><div class="line">			list-style: none;</div><div class="line">			/*布局的难点，一定要记住ul要宽一点，否则li不能并排*/</div><div class="line">			width: 8000px;</div><div class="line">			position: absolute;</div><div class="line">			top: 0;</div><div class="line">			left: 0;</div><div class="line">		&#125;</div><div class="line">		.carousel ul li&#123;</div><div class="line">			float: left;</div><div class="line">			width: 560px;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/0.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"leftBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"rightBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="comment">//得到ul</span></div><div class="line">		<span class="keyword">var</span> $ul = $(<span class="string">".carousel ul"</span>);</div><div class="line">		<span class="comment">//克隆第一张图片，追加到图片列表末尾</span></div><div class="line">		<span class="comment">//clone()就是克隆，就是复制一下，然后apeendTo就是把克隆的这张图片追加到ul末尾。</span></div><div class="line">		$(<span class="string">".carousel ul li:first"</span>).clone().appendTo(<span class="string">".carousel ul"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//信号量，表示当前是第几张图片</span></div><div class="line">		<span class="keyword">var</span> idx = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="comment">//点击右按钮，做的事情</span></div><div class="line">		$(<span class="string">".rightBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//防止流氓</span></div><div class="line">			<span class="keyword">if</span>($ul.is(<span class="string">":animated"</span>))&#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//信号量增加</span></div><div class="line">			idx++;   <span class="comment">//我们允许信号量临时等于5一下。</span></div><div class="line">			<span class="comment">//先拉动，后瞬移</span></div><div class="line">			$ul.animate(&#123;<span class="string">"left"</span>:<span class="number">-560</span> * idx&#125;,<span class="number">600</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//如果idx大于了4，那么就瞬间移动回来：</span></div><div class="line">				<span class="keyword">if</span>(idx &gt; <span class="number">4</span>)&#123;</div><div class="line">					idx = <span class="number">0</span>;</div><div class="line">					$(<span class="keyword">this</span>).css(<span class="string">"left"</span>,<span class="number">0</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">		$(<span class="string">".leftBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//防止流氓</span></div><div class="line">			<span class="keyword">if</span>($ul.is(<span class="string">":animated"</span>))&#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//信号量变化</span></div><div class="line">			idx--;</div><div class="line">			<span class="comment">//先瞬移再拉，如果信号量小于了0，那么信号量为4。</span></div><div class="line">			<span class="keyword">if</span>(idx == <span class="number">0</span>)&#123;</div><div class="line">				idx = <span class="number">4</span>;</div><div class="line">				<span class="comment">//往下标为5的，就是猫腻那张图片瞬移</span></div><div class="line">				$ul.css(<span class="string">"left"</span>,<span class="number">-560</span> * <span class="number">5</span>);</div><div class="line">			&#125;</div><div class="line">			$ul.animate(&#123;<span class="string">"left"</span>:<span class="number">-560</span> * idx&#125; , <span class="number">600</span>);</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/E9439CAkcd.png" alt="mark"></p>
<h2 id="animate-方法"><a href="#animate-方法" class="headerlink" title="animate() 方法"></a>animate() 方法</h2><p>自定义动画。</p>
<h3 id="最简单的形态-amp-不能够变化的属性"><a href="#最简单的形态-amp-不能够变化的属性" class="headerlink" title="最简单的形态&amp;不能够变化的属性"></a>最简单的形态&amp;不能够变化的属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">       .div1&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: orange;</div><div class="line">       &#125;</div><div class="line">       .div2&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: skyblue;</div><div class="line">           border: 1px solid black;</div><div class="line">       &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.color.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> $div1 = $(<span class="string">'.div1'</span>);</div><div class="line">    <span class="keyword">var</span> $div2 = $(<span class="string">'.div2'</span>);</div><div class="line"></div><div class="line">    $div1.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="string">'width'</span>:<span class="string">'500px'</span>&#125;,<span class="number">1500</span>);</div><div class="line">    &#125;);</div><div class="line">    $div2.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="string">'width'</span>:<span class="string">'500px'</span>,<span class="string">'height'</span>:<span class="string">'200px'</span>,<span class="string">'background-color'</span>:<span class="string">'red'</span>&#125;,<span class="number">1500</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * animate() 方法</div><div class="line">     * 描述：jq提供了一个用来自定义动画的方法</div><div class="line">     * 语法：jq.animate（动画结束状态JSON，动画时间 ms，动画线性运动，回掉函数function）;</div><div class="line">     * 说明：</div><div class="line">     * 【1】前面两个参数为必要参数，后面两个参数为可选参数</div><div class="line">     * 【2】第一个参数格是 json 格式，哪怕只有一个属性</div><div class="line">     * 【3】</div><div class="line">     * 【4】</div><div class="line">     * 局限：jquery 框架中提供的 animate() 方法只能够修改可以量化的属性，对于颜色&amp;display 等无法量化的属性则不能够生效</div><div class="line">     * 如果想要颜色的改变，则需要引入 jquery.color.js 插件</div><div class="line">     */</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="动画顺序"><a href="#动画顺序" class="headerlink" title="动画顺序"></a>动画顺序</h3><p>jq中动画的执行遵循两大原则：</p>
<p>同步原则：同一个元素如果存在多个animate命令，则按照添加顺序执行。</p>
<p>异步原则：不同元素如果存在多个animate命令，则他们同时执行。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">       .div1&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: orange;</div><div class="line">       &#125;</div><div class="line">       .div2&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: skyblue;</div><div class="line">           border: 1px solid black;</div><div class="line">       &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.color.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> $div1 = $(<span class="string">'.div1'</span>);</div><div class="line">    <span class="keyword">var</span> $div2 = $(<span class="string">'.div2'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 同步执行</span></div><div class="line">    <span class="comment">// $div1.click(function () &#123;</span></div><div class="line">    <span class="comment">//     $(this).animate(&#123;'width':'500px'&#125;,1500)</span></div><div class="line">    <span class="comment">//            .animate(&#123;'height':300&#125;,1500);</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    $div1.animate(&#123;<span class="string">'width'</span>:<span class="string">'500px'</span>&#125;,<span class="number">1500</span>).animate(&#123;<span class="string">'height'</span>:<span class="number">300</span>&#125;,<span class="number">1500</span>);</div><div class="line">    $div2.animate(&#123;<span class="string">'width'</span>:<span class="string">'300px'</span>&#125;,<span class="number">3000</span>);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * animate() 方法</div><div class="line">     * 描述：jq提供了一个用来自定义动画的方法</div><div class="line">     * 语法：jq.animate（动画结束状态JSON，动画时间 ms，动画线性运动，回掉函数function）;</div><div class="line">     * 说明：</div><div class="line">     * 【1】前面两个参数为必要参数，后面两个参数为可选参数</div><div class="line">     * 【2】第一个参数格是 json 格式，哪怕只有一个属性</div><div class="line">     * 局限：jquery 框架中提供的 animate() 方法只能够修改可以量化的属性，对于颜色&amp;display 等无法量化的属性则不能够生效</div><div class="line">     * 如果想要颜色的改变，则需要引入 jquery.color.js 插件</div><div class="line">     * 动画顺序</div><div class="line">     * 原则：</div><div class="line">     * 同步原则:同一个元素如果存在多个 animate 命令，则按照添加顺序执行</div><div class="line">     * 异步原则:不同元素如果存在多个 animate 命令，则他们同时执行</div><div class="line">     */</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">       .div1&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: orange;</div><div class="line">       &#125;</div><div class="line">       .div2&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: skyblue;</div><div class="line">           border: 1px solid black;</div><div class="line">       &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.color.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> $div1 = $(<span class="string">'.div1'</span>);</div><div class="line">    <span class="keyword">var</span> $div2 = $(<span class="string">'.div2'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 同步执行</span></div><div class="line">    <span class="comment">// $div1.click(function () &#123;</span></div><div class="line">    <span class="comment">//     $(this).animate(&#123;'width':'500px'&#125;,1500)</span></div><div class="line">    <span class="comment">//            .animate(&#123;'height':300&#125;,1500);</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    $div1.animate(&#123;<span class="string">'width'</span>:<span class="string">'500px'</span>&#125;,<span class="number">1500</span>).animate(&#123;<span class="string">'height'</span>:<span class="number">300</span>&#125;,<span class="number">1500</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line">    $div2.animate(&#123;<span class="string">'width'</span>:<span class="string">'300px'</span>&#125;,<span class="number">3000</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * animate() 方法</div><div class="line">     * 描述：jq提供了一个用来自定义动画的方法</div><div class="line">     * 语法：jq.animate（动画结束状态JSON，动画时间 ms，动画线性运动，回掉函数function）;</div><div class="line">     * 说明：</div><div class="line">     * 【1】前面两个参数为必要参数，后面两个参数为可选参数</div><div class="line">     * 【2】第一个参数格是 json 格式，哪怕只有一个属性</div><div class="line">     * 【3】第三个参数如果写出 'linear' ,则表示线性运动，否则为加快在再减速</div><div class="line">     * 【4】回调函数</div><div class="line">     * 局限：jquery 框架中提供的 animate() 方法只能够修改可以量化的属性，对于颜色&amp;display 等无法量化的属性则不能够生效</div><div class="line">     * 如果想要颜色的改变，则需要引入 jquery.color.js 插件</div><div class="line">     * 动画顺序</div><div class="line">     * 原则：</div><div class="line">     * 同步原则:同一个元素如果存在多个 animate 命令，则按照添加顺序执行</div><div class="line">     * 异步原则:不同元素如果存在多个 animate 命令，则他们同时执行</div><div class="line">     */</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="匀速运动"><a href="#匀速运动" class="headerlink" title="匀速运动"></a>匀速运动</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">       .div1&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: orange;</div><div class="line">           position: absolute;</div><div class="line">       &#125;</div><div class="line">       .div2&#123;</div><div class="line">           width: 100px;</div><div class="line">           height: 100px;</div><div class="line">           background-color: skyblue;</div><div class="line">           border: 1px solid black;</div><div class="line">           position: absolute;</div><div class="line">           top: 150px;</div><div class="line">       &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.color.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> $div1 = $(<span class="string">'.div1'</span>);</div><div class="line">    <span class="keyword">var</span> $div2 = $(<span class="string">'.div2'</span>);</div><div class="line"></div><div class="line">    $div1.animate(&#123;<span class="string">'left'</span>:<span class="string">'500px'</span>&#125;,<span class="number">2500</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line">    $div2.animate(&#123;<span class="string">'left'</span>:<span class="string">'500px'</span>&#125;,<span class="number">2500</span>,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * animate() 方法</div><div class="line">     * 描述：jq提供了一个用来自定义动画的方法</div><div class="line">     * 语法：jq.animate（动画结束状态JSON，动画时间 ms，动画线性运动，回掉函数function）;</div><div class="line">     * 说明：</div><div class="line">     * 【1】前面两个参数为必要参数，后面两个参数为可选参数</div><div class="line">     * 【2】第一个参数格是 json 格式，哪怕只有一个属性</div><div class="line">     * 【3】第三个参数如果写出 'linear' ,则表示线性运动，否则为加快在再减速</div><div class="line">     * 【4】回调函数</div><div class="line">     * 局限：jquery 框架中提供的 animate() 方法只能够修改可以量化的属性，对于颜色&amp;display 等无法量化的属性则不能够生效</div><div class="line">     * 如果想要颜色的改变，则需要引入 jquery.color.js 插件</div><div class="line">     * 动画顺序</div><div class="line">     * 原则：</div><div class="line">     * 同步原则:同一个元素如果存在多个 animate 命令，则按照添加顺序执行</div><div class="line">     * 异步原则:不同元素如果存在多个 animate 命令，则他们同时执行</div><div class="line">     */</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="stop-方法"><a href="#stop-方法" class="headerlink" title="stop()方法"></a>stop()方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 100px;height: 100px;background-color: orange;position: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>stop()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>stop(false,false)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>stop(false,true)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>stop(true,false)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>stop(true,true)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $div1 =  $(<span class="string">'.div1'</span>);</div><div class="line">    $btns = $(<span class="string">'button'</span>);</div><div class="line">    $btns.eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $div1.stop();</div><div class="line">    &#125;);</div><div class="line">    $btns.eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $div1.stop(<span class="literal">false</span>,<span class="literal">false</span>);</div><div class="line">    &#125;);</div><div class="line">    $btns.eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $div1.stop(<span class="literal">false</span>,<span class="literal">true</span>);</div><div class="line">    &#125;);</div><div class="line">    $btns.eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $div1.stop(<span class="literal">false</span>,<span class="literal">true</span>);</div><div class="line">    &#125;);</div><div class="line">    $btns.eq(<span class="number">4</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $div1.stop(<span class="literal">true</span>,<span class="literal">true</span>);</div><div class="line">    &#125;);</div><div class="line">    $div1.animate(&#123;<span class="string">'left'</span>:<span class="number">800</span>&#125;,<span class="number">5000</span>)</div><div class="line">        .animate(&#123;<span class="string">'top'</span>:<span class="number">400</span>&#125;,<span class="number">5000</span>)</div><div class="line">        .animate(&#123;<span class="string">'left'</span>:<span class="number">50</span>&#125;,<span class="number">5000</span>)</div><div class="line">        .animate(&#123;<span class="string">'top'</span>:<span class="number">50</span>&#125;,<span class="number">5000</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * stop() 方法</div><div class="line">     * 描述：stop() 方法的作用用于停止jq对象的动画</div><div class="line">     * 语法：jq对象.stop(clearAllAnimation,gotoEnd)</div><div class="line">     * 说明：</div><div class="line">     * 【1】stop 方法的两个语法都是布尔值类型，并且都是可选参数，默认为 false</div><div class="line">     * 【2】第一个参数代表是否清空jq对象动画队列中所有未完成的动画。false表示不清空所有未完成的动画，</div><div class="line">     *      只清空当前正在执行的动画</div><div class="line">     * 【3】第二个参数代表是否立即完成当前动画（去到动画的终点）。false表示不去终点位置，而是停留在清除瞬间所在的这个位置。</div><div class="line">     */</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="动画积累的防止"><a href="#动画积累的防止" class="headerlink" title="动画积累的防止"></a>动画积累的防止</h3><p>animate()方法中的防止动画积累的策略就是如下的实现方式。    </p>
<p>策略1：立即结束当前动画，执行新的命令：$().stop(true).animate();    </p>
<p>策略2：如果当前正在运动，那么不接收新的命令：if($(“div”).is(“:animated”)){    return;}    新的动画命令</p>
<p>百叶窗例子</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        *&#123;</div><div class="line">            margin: 0;</div><div class="line">            padding: 0;</div><div class="line">        &#125;</div><div class="line">        .byc&#123;</div><div class="line">            width: 800px;</div><div class="line">            height: 300px;</div><div class="line">            position: relative;</div><div class="line">            margin: 80px auto;</div><div class="line">            /*把多余的隐藏起来*/</div><div class="line">            overflow: hidden;</div><div class="line">        &#125;</div><div class="line">        .byc ul&#123;</div><div class="line">            list-style: none;</div><div class="line">        &#125;</div><div class="line">        .byc ul li&#123;</div><div class="line">            /*绝对定位*/</div><div class="line">            position: absolute;</div><div class="line">        &#125;</div><div class="line">        .li1&#123;</div><div class="line">            left:160px;</div><div class="line">        &#125;</div><div class="line">        .li2&#123;</div><div class="line">            left:320px;</div><div class="line">        &#125;</div><div class="line">        .li3&#123;</div><div class="line">            left:480px;</div><div class="line">        &#125;</div><div class="line">        .li4&#123;</div><div class="line">            left:640px;</div><div class="line">        &#125;</div><div class="line">        .byc ul li .cover&#123;</div><div class="line">            position: absolute;</div><div class="line">            width: 100%;</div><div class="line">            height: 100%;</div><div class="line">            background-color: rgba(0,0,0,0.5);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"byc"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li0"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/0.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li4"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> $lis = $(<span class="string">'.byc li'</span>);</div><div class="line">    $lis.mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">'.cover'</span>).stop(<span class="literal">true</span>).fadeOut();</div><div class="line">    &#125;).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">'.cover'</span>).stop(<span class="literal">true</span>).fadeIn();</div><div class="line">        $lis.stop(<span class="literal">true</span>);</div><div class="line">        $lis.eq(<span class="number">1</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">160</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">2</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">320</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">3</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">480</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">4</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">640</span>&#125;,<span class="number">500</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $lis.eq(<span class="number">0</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $lis.stop(<span class="literal">true</span>);</div><div class="line">        $lis.eq(<span class="number">1</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">560</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">2</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">620</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">3</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">680</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">4</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">740</span>&#125;,<span class="number">500</span>);</div><div class="line">    &#125;);</div><div class="line">    $lis.eq(<span class="number">1</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $lis.stop(<span class="literal">true</span>);</div><div class="line">        $lis.eq(<span class="number">1</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">60</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">2</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">620</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">3</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">680</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">4</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">740</span>&#125;,<span class="number">500</span>);</div><div class="line">    &#125;);</div><div class="line">    $lis.eq(<span class="number">2</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $lis.stop(<span class="literal">true</span>);</div><div class="line">        $lis.eq(<span class="number">1</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">60</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">2</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">120</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">3</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">680</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">4</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">740</span>&#125;,<span class="number">500</span>);</div><div class="line">    &#125;);</div><div class="line">    $lis.eq(<span class="number">3</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $lis.stop(<span class="literal">true</span>);</div><div class="line">        $lis.eq(<span class="number">1</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">60</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">2</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">120</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">3</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">180</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">4</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">740</span>&#125;,<span class="number">500</span>);</div><div class="line">    &#125;);</div><div class="line">    $lis.eq(<span class="number">4</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $lis.stop(<span class="literal">true</span>);</div><div class="line">        $lis.eq(<span class="number">1</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">60</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">2</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">120</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">3</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">180</span>&#125;,<span class="number">500</span>);</div><div class="line">        $lis.eq(<span class="number">4</span>).animate(&#123;<span class="string">'left'</span>:<span class="number">240</span>&#125;,<span class="number">500</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180414/8l7hdbcF75.png" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 常用的内置（BIF）函数]]></title>
      <url>/2018/06/03/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="Python-常用的内置函数"><a href="#Python-常用的内置函数" class="headerlink" title="Python 常用的内置函数"></a>Python 常用的内置函数</h1><p>如果你遇到一个需求，且你认为这个需求很普遍，先想想有没有什么内置函数可以使用（BIF）。另外要记住：Python 3 包含 70 多个 BIF ，所以有大量现成的功能等着你来发现。</p>
<a id="more"></a>
<h2 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h2><p>这是一个工厂函数，创建一个新的空列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line">aTuole = (<span class="number">123</span>,<span class="string">'xyz'</span>,<span class="string">'zare'</span>,<span class="string">'abc'</span>);</div><div class="line">aList = list(aTuole);</div><div class="line">print(<span class="string">"列表元素："</span>,aList);</div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/8b4kC2eae9.png" alt="mark"></p>
<h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><p><strong>range() BIF 迭代固定次数。</strong></p>
<p>可以提供你需要的控制来迭代指定的次数，而且可以用来生成一个从 0 直到（但不包含）某个数的数字列表。</p>
<p>一下是这个 BIF 的用法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line"><span class="comment"># num 是目标标识符，会琢个赋值为 "range()" 生成的各个数字</span></div><div class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">4</span>); </div><div class="line">print(num);</div></pre></td></tr></table></figure>
<p>F5 运行程序</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171228/mmHDibgjKc.png" alt="mark"></p>
<h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p>创建成对数据的一个编码列表，从 0 开始</p>
<p><strong>先来做一个对比:</strong></p>
<p>法1: 使用 range() 和 len() 来实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line">aTuole = (<span class="string">'xyz'</span>,<span class="string">'zare'</span>,<span class="string">'abc'</span>);</div><div class="line">	print(i,aTuole[i]);</div></pre></td></tr></table></figure>
<p>法2:使用enumerate () 来实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line">aTuole = (<span class="string">'xyz'</span>,<span class="string">'zare'</span>,<span class="string">'abc'</span>);</div><div class="line"><span class="keyword">for</span> index,text <span class="keyword">in</span> enumerate(aTuole):</div><div class="line">	print(index,text);</div></pre></td></tr></table></figure>
<p>enumerate会将数组或列表组成一个索引序列。使我们再获取索引和索引内容的时候更加方便。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/B9fKi2g1j6.png" alt="mark"></p>
<h2 id="int"><a href="#int" class="headerlink" title="int()"></a>int()</h2><p>int()函数的作用是将一个数字或base类型的字符串转换成整数。</p>
<p>函数原型 int(x, base=10)，base缺省值为10，也就是说不指定base的值时，函数将x按十进制处理。</p>
<p><strong>注意：</strong></p>
<ul>
<li>x 可以是数字或字符串，但是base被赋值后 x 只能是字符串</li>
<li>x 作为字符串时必须是 base 类型，也就是说 x 变成数字时必须能用 base 进制表示</li>
</ul>
<p>【1】 x 是数字的情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int(<span class="number">2.345</span>)         <span class="comment"># 2</span></div><div class="line">int(<span class="number">2e2</span>)           <span class="comment"># 200</span></div><div class="line">int(<span class="number">23</span>, <span class="number">2</span>)         <span class="comment"># 出错，base 被赋值后函数只接收字符串</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/djc6e8BJEk.png" alt="mark"></p>
<p>【2】x 是字符串的情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int(<span class="string">'23'</span>, <span class="number">16</span>)      <span class="comment"># 35</span></div><div class="line">int(<span class="string">'HI'</span>, <span class="number">16</span>)      <span class="comment"># 出错，HI不是个16进制数</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/L8glIeA3J4.png" alt="mark"></p>
<p>【3】 base 可取值范围是 2~36，囊括了所有的英文字母(不区分大小写)，十六进制中F表示15，那么G将在二十进制中表示16，依此类推….Z在三十六进制中表示35</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int(<span class="string">'FZ'</span>, <span class="number">16</span>)      <span class="comment"># 出错，FZ不能用十六进制表示</span></div><div class="line">int(<span class="string">'FZ'</span>, <span class="number">36</span>)      <span class="comment"># 575</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/14Fh4KLmBL.png" alt="mark"></p>
<p>【4】字符串 0x 可以出现在十六进制中，视作十六进制的符号，同理 0b 可以出现在二进制中，除此之外视作数字 0 和字母 x</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int(<span class="string">'0x10'</span>, <span class="number">16</span>)  <span class="comment"># 16，0x是十六进制的符号</span></div><div class="line">int(<span class="string">'0x10'</span>, <span class="number">17</span>)  <span class="comment"># 出错，'0x10'中的 x 被视作英文字母 x</span></div><div class="line">int(<span class="string">'0x10'</span>, <span class="number">36</span>)  <span class="comment"># 42804，36进制包含字母 x</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/0lCmkdBd14.png" alt="mark"></p>
<h2 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h2><p>id(object)函数是返回对象object在其生命周期内位于内存中的地址，id函数的参数类型是一个对象。</p>
<p><strong>注意：</strong></p>
<p>我们需要明确一点就是在Python中一切皆<strong>对象</strong>，变量中存放的是对象的引用。这个确实有点难以理解，“一切皆对象”？对，在Python中确实是这样，包括我们之前经常用到的字符串常量，整型常量都是对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line">print(id(<span class="number">5</span>));</div><div class="line">print( id(<span class="string">'python'</span>));</div><div class="line">x=<span class="number">2</span></div><div class="line">print(id(x));</div><div class="line">y=<span class="string">'hello'</span></div><div class="line">print(id(y));</div></pre></td></tr></table></figure>
<p>这段代码的运行结果:</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/kgjH35eHAd.png" alt="mark"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line">x=<span class="number">2</span></div><div class="line">print(id(<span class="number">2</span>));</div><div class="line">print(id(x)); </div><div class="line">y=<span class="string">'hello'</span></div><div class="line">print(id(<span class="string">'hello'</span>)); </div><div class="line">print(id(y));</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/B89BAdgEGe.png" alt="mark"></p>
<p><strong>结果说明:</strong>对于这个语句id(2)没有报错，就可以知道2在这里是一个对象。id(x)和id(2)的值是一样的，id(y)和id(‘hello’)的值也是一样的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">x=<span class="number">2</span>;</div><div class="line">print(id(x));</div><div class="line">y=<span class="number">2</span>;</div><div class="line">print(id(y));</div><div class="line">s=<span class="string">'hello'</span>;</div><div class="line">print(id(s));</div><div class="line">t=s;</div><div class="line">print(id(t));</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/d9i27aEKKg.png" alt="mark"></p>
<p><strong>结果说明:</strong>id(x)和id(y)的结果是相同的，id(s)和id(t)的结果也是相同的。这说明x和y指向的是同一对象，而t和s也是指向的同一对象。x=2这句让变量x指向了int类型的对象2，而y=2这句执行时，并不重新为2分配空间，而是<strong>让y直接指向了已经存在的int类型的对象2</strong>.这个很好理解，因为本身只是想给y赋一个值2，而在内存中已经存在了这样一个int类型对象2，所以就直接让y指向了已经存在的对象。这样一来<strong>不仅能达到目的，还能节约内存空间</strong>。t=s这句变量互相赋值，也相当于是让t指向了已经存在的字符串类型的对象’hello’。</p>
<p><strong>看这幅图就理解了：</strong></p>
<p>　　<img src="http://images.cnitblog.com/blog/288799/201303/15155442-4f2d077a181e4c37bc8691c2739a911f.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">x=<span class="number">2</span>;</div><div class="line">print(id(<span class="number">2</span>)); </div><div class="line">print(id(x)); </div><div class="line">x=<span class="number">3</span>;</div><div class="line">print(id(<span class="number">3</span>)); </div><div class="line">print(id(x)); </div><div class="line">L=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">M=L;</div><div class="line">print(id(L));</div><div class="line">print(id(M)); </div><div class="line">print(id(L[<span class="number">2</span>])); </div><div class="line">L[<span class="number">0</span>]=<span class="number">2</span>;</div><div class="line">print(id(L)); </div><div class="line">print(M);</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/HDCKE684L4.png" alt="mark"></p>
<p><strong>结果分析:</strong>两次的id(x)的值不同，这个可能让人有点难以理解。注意，<strong>在Python中，单一元素的对象是不允许更改的，比如整型数据、字符串、浮点数等。</strong>x=3这句的执行过程并不是先获取x原来指向的对象的地址，再把内存中的值更改为3，而是新申请一段内存来存储对象3，再让x去指向对象3，所以两次id(x)的值不同。然而为何改变了L中的某个子元素的值后，id(L)的值没有发生改变？<strong>在Python中，复杂元素的对象是允许更改的，</strong>比如列表、字典、元组等。Python中变量存储的是对象的引用，对于列表，其id()值返回的是列表第一个子元素L[0]的存储地址。就像上面的例子，L=[1,2,3]，这里的L有三个子元素L[0]，L[1]，L[2]，L[0]、L[1]、L[2]分别指向对象1、2、3，id(L)值和对象3的存储地址相同.</p>
<p><strong>看下面这个图就明白了:</strong></p>
<p>　　<img src="http://images.cnitblog.com/blog/288799/201303/15162702-c783bec88969421ebc16950714812a06.jpg" alt="img"></p>
<p>因为L和M指向的是同一对象，所以在更改了L中子元素的值后，M也相应改变了，但是id(L)值并没有改变，因为这句L[0]=2只是让L[0]重新指向了对象2，而L[0]本身的存储地址并没有发生改变，所以id(L)的值没有改变（ id(L)的值实际等于L[0]本身的存储地址）。</p>
<h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><p>next()函数返回迭代器的下一个元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">it = iter([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        x = next(it)</div><div class="line">        print(x); <span class="comment"># 或者 x = it.next()</span></div><div class="line">    <span class="keyword">except</span> StopIteration:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171229/m4DBDAJ72h.png" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> 常用的内置（BIF）函数 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础面试题]]></title>
      <url>/2018/06/03/%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="基础面试题"><a href="#基础面试题" class="headerlink" title="基础面试题"></a>基础面试题</h1><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>以下各方面知识点的面试题，是为了将要出来工作的小师妹和小师弟而精心整理的。希望对你们都帮助。这些面试题都是很基础的，希望你们能够好好利用起来。有问题，或者不对的地方欢迎给我留言哈！</p>
<a id="more"></a>
<h2 id="forward-和redirect的区别"><a href="#forward-和redirect的区别" class="headerlink" title="forward 和redirect的区别"></a>forward 和redirect的区别</h2><p>forward是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。</p>
<p>redirect就是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求，所以session,request参数都可以获取。</p>
<h2 id="int-和-Integer-有什么区别"><a href="#int-和-Integer-有什么区别" class="headerlink" title="int 和 Integer 有什么区别"></a>int 和 Integer 有什么区别</h2><p>Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。Int 是 java 的原始数据类型，Integer 是 java为int提供的封装类。Java为每个原始类型提供了封装类。<br>原始类型封装类，booleanBoolean,charCharacter,byteByte,shortShort,intInteger,longLong,floatFloat,doubleDouble<br>引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关</p>
<h2 id="error和exception有什么区别"><a href="#error和exception有什么区别" class="headerlink" title="error和exception有什么区别"></a>error和exception有什么区别</h2><p>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。</p>
<h2 id="最常见到的runtime-exception"><a href="#最常见到的runtime-exception" class="headerlink" title="最常见到的runtime exception"></a>最常见到的runtime exception</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ArithmeticException, ArrayStoreException, </div><div class="line">BufferOverflowException, BufferUnderflowException, </div><div class="line">CannotRedoException, CannotUndoException, </div><div class="line">ClassCastException, CMMException, </div><div class="line">ConcurrentModificationException, DOMException, </div><div class="line">EmptyStackException, IllegalArgumentException, </div><div class="line">IllegalMonitorStateException, IllegalPathStateException, </div><div class="line">IllegalStateException, ImagingOpException, </div><div class="line">IndexOutOfBoundsException, MissingResourceException, </div><div class="line">NegativeArraySizeException, NoSuchElementException, </div><div class="line">NullPointerException, ProfileDataException, </div><div class="line">ProviderException, RasterFormatException, SecurityException, </div><div class="line">SystemException, UndeclaredThrowableException, </div><div class="line">UnmodifiableSetException, UnsupportedOperationException</div></pre></td></tr></table></figure>
<h2 id="Overload和Override区别，Overloaded方法可以改变返回值的类型吗"><a href="#Overload和Override区别，Overloaded方法可以改变返回值的类型吗" class="headerlink" title="Overload和Override区别，Overloaded方法可以改变返回值的类型吗"></a>Overload和Override区别，Overloaded方法可以改变返回值的类型吗</h2><p>方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被”屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。</p>
<h2 id="OOP是什么"><a href="#OOP是什么" class="headerlink" title="OOP是什么"></a>OOP是什么</h2><p>OOP面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。</p>
<h2 id="java中有哪些集合，主要方法有哪些"><a href="#java中有哪些集合，主要方法有哪些" class="headerlink" title="java中有哪些集合，主要方法有哪些"></a>java中有哪些集合，主要方法有哪些</h2><p>主要有LinkedList，ArrayList，Vector等。下面是详细：<br>Collection<br>├List<br>│├LinkedList<br>│├ArrayList<br>│└Vector<br>│ └Stack<br>└Set<br>Map<br>├Hashtable<br>├HashMap<br>└WeakHashMap<br>最常用的集合类是 List 和 Map。 List 的具体实现包括 ArrayList 和 Vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象的元素列表。 List 适用于按数值索引访问元素的情形。 Map 提供了一个更通用的元素存储方法。 Map 集合类用于存储元素对（称作“键”和“值”）其中每个键映射到一个值。</p>
<h2 id="List、Map、Set接口，存取元素时各自特点"><a href="#List、Map、Set接口，存取元素时各自特点" class="headerlink" title="List、Map、Set接口，存取元素时各自特点"></a>List、Map、Set接口，存取元素时各自特点</h2><p>List 以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存key-value值，value可多值。<br>  List的遍历： List接口有size()和get()方法，用这两个方法可以实现对List的遍历。size()方法得到List中的元素个数。get()方法取得某个位置上的元素</p>
<h2 id="HashMap与HashTable的区别"><a href="#HashMap与HashTable的区别" class="headerlink" title="HashMap与HashTable的区别"></a>HashMap与HashTable的区别</h2><p>1、HashMap 是非线程安全的，HashTable 是线程安全的。</p>
<p>2、HashMap 的键和值都允许有 null 值存在，而 HashTable 则不行。</p>
<p>3、因为线程安全的问题，HashMap 效率比 HashTable 的要高。<br>HashMap 的实现机制：<br>维护一个每个元素是一个链表的数组，而且链表中的每个节点是一个 Entry[] 键值对的数据结构。<br>实现了 数组+链表 的特性，查找快，插入删除也快。<br>对于每个 key , 他对应的数组索引下标是 int i = hash(key.hashcode)&amp;(len-1);<br>每个新加入的节点放在链表首，然后该新加入的节点指向原链表首</p>
<h2 id="Hashcode的作用"><a href="#Hashcode的作用" class="headerlink" title="Hashcode的作用"></a>Hashcode的作用</h2><p>Java中的集合有两类，一类是<strong>List</strong>，再有一类<strong>是Set</strong>。前者集合内的元素是有序的，元素可以重复；后者元素无序，但元素<strong>不可重复</strong>。</p>
<p><strong>equals方法可用于保证元素不重复</strong>，但如果每增加一个元素就检查一次，若集合中现在已经有1000个元素，那么第1001个元素加入集合时，就要调用1000次equals方法。这显然会大大降低效率。?于是，Java采用了<strong>哈希表的原理</strong>。</p>
<p>哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上。</p>
<p>这样一来，当集合要<strong>添加新的元素时</strong>，先调用这个<strong>元素的HashCode方法</strong>，就一下子能<strong>定位到它应该放置的物理位置上</strong>。</p>
<p>（1）如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了。</p>
<p>（2）如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了。</p>
<p>（3）不相同的话，也就是发生了Hash key相同导致<strong>冲突的情况</strong>，那么就在这个Hash key的地方产生一个链表，将所有产生相同HashCode的对象放到这个单链表上去，串在一起（很少出现）。</p>
<p>这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。</p>
<p><strong>如何理解HashCode的作用：</strong></p>
<p>从Object角度看，JVM每new一个Object，它都会将这个Object丢到一个Hash表中去，这样的话，下次做Object的<strong>比较或者取</strong>这个对象的时候（读取过程），它会根据对象的HashCode再从Hash表中取这个对象。这样做的目的是<strong>提高取对象的效率</strong>。若HashCode相同再去调用equal。</p>
<h2 id="HashMap，ConcurrentHashMap与LinkedHashMap的区别"><a href="#HashMap，ConcurrentHashMap与LinkedHashMap的区别" class="headerlink" title="HashMap，ConcurrentHashMap与LinkedHashMap的区别"></a>HashMap，ConcurrentHashMap与LinkedHashMap的区别</h2><p>ConcurrentHashMap是使用了锁分段技术技术来保证线程安全的，锁分段技术：首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问<br>ConcurrentHashMap 是在每个段（segment）中线程安全的<br>LinkedHashMap维护一个双链表，可以将里面的数据按写入的顺序读出</p>
<p>ConcurrentHashMap应用场景<br>1：ConcurrentHashMap 的应用场景是高并发，但是并不能保证线程安全，而同步的 HashMap 和 HashMap 的是锁住整个容器，而加锁之后 ConcurrentHashMap 不需要锁住整个容器，只需要锁住对应的 Segment 就好了，所以可以保证高并发同步访问，提升了效率。<br>2：可以多线程写。<br>ConcurrentHashMap把HashMap分成若干个Segmenet<br>1.get时，不加锁，先定位到segment然后在找到头结点进行读取操作。而value是volatile变量，所以可以保证在竞争条件时保证读取最新的值，如果读到的value是null，则可能正在修改，那么久调用ReadValueUnderLock函数，加锁保证读到的数据是正确的。</p>
<p>2.Put时会加锁，一律添加到hash链的头部。</p>
<p>3.Remove时也会加锁，由于next是final类型不可改变，所以必须把删除的节点之前的节点都复制一遍。</p>
<p>4.ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对Hash表的不同Segment进行的修改。<br>ConcurrentHashMap的应用场景是高并发，但是并不能保证线程安全，而同步的HashMap和HashTable的是锁住整个容器，而加锁之后ConcurrentHashMap不需要锁住整个容器，只需要锁住对应的segment就好了，所以可以保证高并发同步访问，提升了效率。</p>
<h2 id="HashMap的hashcode的作用"><a href="#HashMap的hashcode的作用" class="headerlink" title="HashMap的hashcode的作用"></a>HashMap的hashcode的作用</h2><p><strong>hashCode的存在主要是用于查找的快捷性</strong>，如Hashtable，HashMap等，hashCode是用来在散列存储结构中<strong>确定对象的存储地址</strong>的。</p>
<p>如果两个对象相同，就是适用于equals(java.lang.Object) 方法，那么这两个对象的hashCode一定要相同。</p>
<p>如果对象的<strong>equals方法被重写</strong>，那么对象<strong>的hashCode也尽量重写</strong>，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点。</p>
<p><strong>两个对象的hashCode相同，并不一定表示两个对象就相同</strong>，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”。</p>
<p><strong>什么时候需要重写？</strong></p>
<p>一般的地方不需要重载hashCode，只有当类需要放在HashTable、HashMap、HashSet等等hash结构的集合时才会重载hashCode，那么为什么要重载hashCode呢？</p>
<p>要比较两个类的内容属性值，是否相同时候，根据hashCode 重写规则，重写类的 指定字段的hashCode()，equals()方法。</p>
<h2 id="Vector和ArrayList的区别"><a href="#Vector和ArrayList的区别" class="headerlink" title="Vector和ArrayList的区别"></a>Vector和ArrayList的区别</h2><p>  首先看这两类都实现List接口，而List接口一共有三个实现类，分别是 ArrayList、Vector 和 LinkedList 。List 用于存放多个元素，能够维护元素的次序，并且允许元素的重复。3个具体实现类的相关区别如下：</p>
<p>1.ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。<br>2.Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。<br>3.LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</p>
<h2 id="ArrayList-与-LinkedList-的区别"><a href="#ArrayList-与-LinkedList-的区别" class="headerlink" title="ArrayList 与 LinkedList 的区别"></a>ArrayList 与 LinkedList 的区别</h2><p>最明显的区别是 ArrrayList 底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。<br>1.LinkedList内部存储的是Node<e>，不仅要维护数据域，还要维护prev和next，如果LinkedList中的结点特别多，则LinkedList比ArrayList更占内存。<br>插入删除操作效率：<br>2.LinkedList在做插入和删除操作时，插入或删除头部或尾部时是高效的，操作越靠近中间位置的元素时，需要遍历查找，速度相对慢一些，如果在数据量较大时，每次插入或删除时遍历查找比较费时。所以LinkedList插入与删除，慢在遍历查找，快在只需要更改相关结点的引用地址。<br>ArrayList在做插入和删除操作时，插入或删除尾部时也一样是高效的，操作其他位置，则需要批量移动元素，所以ArrayList插入与删除，快在遍历查找，慢在需要批量移动元素。<br>3.循环遍历效率：<br>由于ArrayList实现了RandomAccess随机访问接口，所以使用for(int i = 0; i &lt; size; i++)遍历会比使用Iterator迭代器来遍历快<br>而由于LinkedList未实现RandomAccess接口，所以推荐使用Iterator迭代器来遍历数据。<br>因此，如果我们需要频繁在列表的中部改变插入或删除元素时，建议使用LinkedList，否则，建议使用ArrayList，因为ArrayList遍历查找元素较快，并且只需存储元素的数据域，不需要额外记录其他数据的位置信息，可以节省内存空间。</e></p>
<h2 id="Java-中的-LinkedList-是单向链表还是双向链表"><a href="#Java-中的-LinkedList-是单向链表还是双向链表" class="headerlink" title="Java 中的 LinkedList 是单向链表还是双向链表"></a>Java 中的 LinkedList 是单向链表还是双向链表</h2><p>是双向链表。</p>
<h2 id="String、StringBuffer、StringBuilder之间区别"><a href="#String、StringBuffer、StringBuilder之间区别" class="headerlink" title="String、StringBuffer、StringBuilder之间区别"></a>String、StringBuffer、StringBuilder之间区别</h2><p>1.三者在执行速度方面的比较：StringBuilder &gt;  StringBuffer  &gt;  String<br>2.在线程方面：StringBuilder是线程非安全的;StringBuffer是线程安全的</p>
<p>3.对于三者的使用：如果要操作少量的数据用 = String；单线程操作字符串缓冲区 下操作大量数据 = StringBuilder；多线程操作字符串缓冲区 下操作大量数据 = StringBuffer；</p>
<h2 id="Object-的常用方有哪些"><a href="#Object-的常用方有哪些" class="headerlink" title="Object 的常用方有哪些"></a>Object 的常用方有哪些</h2><p>clone()、equals()、hashCode()、notify()、notifyAll()、toString()、wait()、finalize()</p>
<h2 id="Java序列化的方式"><a href="#Java序列化的方式" class="headerlink" title="Java序列化的方式"></a>Java序列化的方式</h2><p>(1).Java原生以流的方法进行的序列化</p>
<p>(2).Json序列化</p>
<p>(3).FastJson序列化</p>
<p>(4).Protobuff序列化</p>
<h2 id="传值和传引用的区别，Java是怎么样的，有没有传值引用"><a href="#传值和传引用的区别，Java是怎么样的，有没有传值引用" class="headerlink" title="传值和传引用的区别，Java是怎么样的，有没有传值引用"></a>传值和传引用的区别，Java是怎么样的，有没有传值引用</h2><p><strong>定义：</strong></p>
<p>传值：传递的是值的副本。方法中对副本的修改，不会影响到调用方</p>
<p>传引用：传递的是引用的副本，共用一个内存，会影响到调用方。此时，形参和实参指向同一个内存地址。<br>对引用副本本身（对象地址）的修改，如设置为null，重新指向其他对象，不会影响到调用方。</p>
<p><strong>总结：</strong></p>
<p>1.基本类型（byte,short,int,long,double,float,char,boolean）为传值</p>
<p>2.对象类型（Object,数组，容器）为传引用</p>
<p>3.String、Integer、Double等immutable类型因为类的变量设为final属性，无法被修改，只能重新赋值或生成对象。<br>当Integer作为方法参数传递时，对其赋值会导致原有的引用被指向了方法内的栈地址，失去原有的的地址指向，所以对赋值后的Integer做任何操作都不会影响原有值。</p>
<p><strong>补充：</strong></p>
<p><strong>值传递和引用传递，属于函数调用时参数的求值策略(</strong><a href="https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Evaluation_strategy" target="_blank" rel="external">Evaluation Strategy</a><strong>)，这是对调用函数时，求值和传值的方式的描述，而非传递的内容的类型</strong>（内容指：是值类型还是引用类型，是值还是指针）。值类型/引用类型，是用于区分两种内存分配方式，值类型在调用栈上分配，引用类型在堆上分配。（不要问我引用类型里定义个值类型成员或反之会发生什么，这不在这个本文的讨论范畴内，而且你看完之后，你应该可以自己想明白）。一个描述内存分配方式，一个描述参数求值策略，两者之间无任何依赖或约束关系。</p>
<h2 id="一个ArrayList在循环过程中删除，会不会出问题"><a href="#一个ArrayList在循环过程中删除，会不会出问题" class="headerlink" title="一个ArrayList在循环过程中删除，会不会出问题"></a>一个ArrayList在循环过程中删除，会不会出问题</h2><p>会，发报出并发修改异常Java.util.ConcurrentModificationException。</p>
<p>错误原因都是ArrayList集合中remove方法底层的源码中有一个fastRemove(index)方法，然后会有一个modCount++的操作，然后在ArratList内部的迭代器中有一个checkForComodification操作，也就是检查modCount是否改变，如果改变了，就抛出并发修改错误。<br>同样的在For each增强for循环中，也是利用了ArrayList自身的Iterator迭代器，也是会出现这样的错误。</p>
<p>对于一般的for遍历，可能并没有删除要修改的数，可以采用倒序删除的写法改正这个错误。<br>对于增强for循环中的遍历，会抛出并发修改异常，使用Iterator自己的remove方法。</p>
<p>要避免这种情况的出现，则在使用迭代器迭代时(显式或for each的隐式)不要使用ArrayList的remove，改用Iterator的remove即可。</p>
<h2 id="transactional注解在什么情况下会失效"><a href="#transactional注解在什么情况下会失效" class="headerlink" title="@transactional注解在什么情况下会失效"></a>@transactional注解在什么情况下会失效</h2><p>1.@Transactional 注解只能应用到 public 可见度的方法上。 如果应用在protected、private或者 package可见度的方法上，也不会报错，不过事务设置不会起作用。</p>
<p>2.默认情况下，Spring会对unchecked异常进行事务回滚；如果是checked异常则不回滚。<br>辣么什么是checked异常，什么是unchecked异常。</p>
<p>3.只读事务：<br>@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)<br>只读标志只在事务启动时应用，否则即使配置也会被忽略。<br>启动事务会增加线程开销，数据库因共享读取而锁定(具体跟数据库类型和事务隔离级别有关)。通常情况下，仅是读取数据时，不必设置只读事务而增加额外的系统开销。</p>
<h2 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h2><p>主要分为6个区域：</p>
<p><strong>程序计数器：</strong>可看做是当前线程执行的字节码的行号指示器，字节码解释器就是通过改变这个计数器的值来获取下一条需要执行的字节码指令，完成分支、循环、跳转和异常处理等功能。</p>
<p><strong>虚拟机栈：</strong>每创建一个线程时，JVM就会为这个线程创建一个对应的栈，所以栈是线程私有的。方法执行的时候还会创建一个栈帧在虚拟机栈上，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。局部变量表所需的空间在编译期间就完成了分配。</p>
<p><strong>本地方法栈：</strong>基本同虚拟机栈，只不过本地方法栈是为本地方法服务。</p>
<p><strong>java堆：</strong>JVM管理的内存最大的部分，线程共享，用于存放对象实例。java堆可以处于物理上不连续的内存空间上。用-Xms表示堆起始内存大小，-Xmx表示堆最大内存大小。当堆内存大小大于-Xmx时抛出OutOfMemoryError异常。</p>
<p><strong>方法区：</strong>存储已被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。在Hotspot实现中，它位于java堆上。可称为永久代(PermGen)，使用-XX:MaxPermGen参数配置永久代最大内存。</p>
<p><strong>运行时常量池：</strong>方法区的一部分。在class文件被JVM加载后，其常量池中的字面量和符号引用将被保存到这里。</p>
<p><strong>补充了解：逃逸分析</strong></p>
<p>常用的对象堆外存储技术需要基于<strong>逃逸分析</strong>(Escape Analysis)技术实现。其目标就是分析出对象的作用域。比如当一个对象定义在方法体内部时，它的受访范围就在方法体内，jvm会在栈帧中为其分配内存空间。但一旦被外部成员引用后，这个对象就发生了逃逸。</p>
<p>在JDK 6u23后，HotSpot就默认开启了逃逸分析，早期版本可用-XX:+DoEscapeAnalysis参数开启，-XX:+PrintEscapeAnalysis查看。</p>
<h2 id="Mysql-的分页-SQL-语句"><a href="#Mysql-的分页-SQL-语句" class="headerlink" title="Mysql 的分页 SQL 语句"></a>Mysql 的分页 SQL 语句</h2><p>select * from tablename limit m,n(n是指从第m+1条开始，取n条)</p>
<h2 id="Hibernate与MyBatis的异同"><a href="#Hibernate与MyBatis的异同" class="headerlink" title="Hibernate与MyBatis的异同"></a>Hibernate与MyBatis的异同</h2><p>相同点：<br>Hibernate与MyBatis都可以是通过SessionFactoryBuider由XML配置文件生成SessionFactory，然后由SessionFactory 生成Session，最后由Session来开启执行事务和SQL语句。其中SessionFactoryBuider，SessionFactory，Session的生命周期都是差不多的。Hibernate和MyBatis都支持JDBC和JTA事务处理。<br>Mybatis优势：<br>MyBatis可以进行更为细致的SQL优化，可以减少查询字段。<br>MyBatis容易掌握，而Hibernate门槛较高。<br>Hibernate优势：<br>Hibernate的DAO层开发比MyBatis简单，Mybatis需要维护SQL和结果映射。<br>Hibernate对对象的维护和缓存要比MyBatis好，对增删改查的对象的维护要方便。<br>Hibernate数据库移植性很好，MyBatis的数据库移植性不好，不同的数据库需要写不同SQL。<br>Hibernate有更好的二级缓存机制，可以使用第三方缓存。MyBatis本身提供的缓存机制不佳。</p>
<h2 id="Hibernate与MyBatis在sql优化方面异同"><a href="#Hibernate与MyBatis在sql优化方面异同" class="headerlink" title="Hibernate与MyBatis在sql优化方面异同"></a>Hibernate与MyBatis在sql优化方面异同</h2><p>Hibernate的查询会将表中的所有字段查询出来，这一点会有性能消耗。Hibernate也可以自己写SQL来指定需要查询的字段，但这样就破坏了Hibernate开发的简洁性。<br>而Mybatis的SQL是手动编写的，所以可以按需求指定查询的字段。<br>Hibernate HQL语句的调优需要将SQL打印出来，而Hibernate的SQL被很多人嫌弃因为太丑了。<br>MyBatis的SQL是自己手动写的所以调整方便。但Hibernate具有自己的日志统计。Mybatis本身不带日志统计，使用Log4j进行日志记录。</p>
<h2 id="Hibernate与MyBatis对象管理对比"><a href="#Hibernate与MyBatis对象管理对比" class="headerlink" title="Hibernate与MyBatis对象管理对比"></a>Hibernate与MyBatis对象管理对比</h2><p>Hibernate 是完整的对象/关系映射解决方案，它提供了对象状态管理（state management）的功能，使开发者不再需要理会底层数据库系统的细节。也就是说，相对于常见的 JDBC/SQL 持久层方案中需要管理 SQL 语句，Hibernate采用了更自然的面向对象的视角来持久化 Java 应用中的数据。<br>换句话说，使用 Hibernate 的开发者应该总是关注对象的状态（state），不必考虑 SQL 语句的执行。这部分细节已经由 Hibernate 掌管妥当，只有开发者在进行系统性能调优的时候才需要进行了解。而MyBatis在这一块没有文档说明，用户需要对对象自己进行详细的管理。</p>
<h2 id="Jsp九大内置对象"><a href="#Jsp九大内置对象" class="headerlink" title="Jsp九大内置对象"></a>Jsp九大内置对象</h2><p>1.Request:   request对象主要用于客户端请求处理<br>2.Response:   response对象提供了多个方法用来处理HTTP响应，可以调用response中的方法修改ContentType中的MIME类型以及实现页面的跳转等等，<br>3.Page:  page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。page是java.lang.Object类的对象。<br>4.Session:  session是与请求有关的会话期，它是java.servlet.http.HttpSession类的对象，用来表示和存储当前页面的请求信息。<br>5.Application:  application是javax.servlet.ServletContext类对象的一个实例，用于实现用户之间的数据共享<br>6.Out:<br>7.Exception:  exception内置对象是用来处理页面出现的异常错误<br>8.Config:  config内置对象是ServletConfig类的一个实例。在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名/值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。<br>9.pageContext:  pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象</p>
<h2 id="Comparator-与-Comparable-有什么不同"><a href="#Comparator-与-Comparable-有什么不同" class="headerlink" title="Comparator 与 Comparable 有什么不同"></a>Comparator 与 Comparable 有什么不同</h2><p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p>
<h2 id="Collection-和-Collections的区别"><a href="#Collection-和-Collections的区别" class="headerlink" title="Collection 和 Collections的区别"></a>Collection 和 Collections的区别</h2><p>Collection是集合类的上级接口，继承与他的接口主要有Set 和List.<br>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p>
<h2 id="String-s-new-String-“xyz”-创建了几个String-Object"><a href="#String-s-new-String-“xyz”-创建了几个String-Object" class="headerlink" title="String s = new String(“xyz”);创建了几个String Object"></a>String s = new String(“xyz”);创建了几个String Object</h2><p>两个对象，一个是“xyx”,一个是指向“xyx”的引用对象s。</p>
<h2 id="线程同步的方法"><a href="#线程同步的方法" class="headerlink" title="线程同步的方法"></a>线程同步的方法</h2><p>wait():使一个线程处于等待状态，并且释放所持有的对象的lock。<br>sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。<br>notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。<br>Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。</p>
<h2 id="Volatile和Synchronized四个不同点"><a href="#Volatile和Synchronized四个不同点" class="headerlink" title="Volatile和Synchronized四个不同点"></a>Volatile和Synchronized四个不同点</h2><ol>
<li>粒度不同，前者锁对象和类，后者针对变量</li>
<li>syn阻塞，volatile线程不阻塞</li>
<li>syn保证三大特性，volatile不保证原子性</li>
<li>syn编译器优化，volatile不优化<br>volatile具备两种特性：<br>保证此变量对所有线程的可见性，指一条线程修改了这个变量的值，新值对于其他线程来说是可见的，但并不是多线程安全的。<br>禁止指令重排序优化。<br>Volatile如何保证内存可见性:<br>1.当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存。<br>2.当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。<br>同步：就是一个任务的完成需要依赖另外一个任务，只有等待被依赖的任务完成后，依赖任务才能完成。<br>异步：不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，只要自己任务完成了就算完成了，被依赖的任务是否完成会通知回来。（异步的特点就是通知）。<br>打电话和发短信来比喻同步和异步操作。<br>阻塞：CPU停下来等一个慢的操作完成以后，才会接着完成其他的工作。<br>非阻塞：非阻塞就是在这个慢的执行时，CPU去做其他工作，等这个慢的完成后，CPU才会接着完成后续的操作。<br>非阻塞会造成线程切换增加，增加CPU的使用时间能不能补偿系统的切换成本需要考虑。</li>
</ol>
<h2 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h2><ol>
<li>客户端请求提交到DispatcherServlet</li>
<li>由DispatcherServlet控制器查询HandlerMapping，找到并分发到指定的Controller中。</li>
<li>Controller调用业务逻辑处理后，返回ModelAndView</li>
<li>DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图</li>
<li>视图负责将结果显示到客户端</li>
</ol>
<h2 id="SpringMVC与Struts2区别与比较总结"><a href="#SpringMVC与Struts2区别与比较总结" class="headerlink" title="SpringMVC与Struts2区别与比较总结"></a>SpringMVC与Struts2区别与比较总结</h2><p>1、Struts2是类级别的拦截， 一个类对应一个request上下文，SpringMVC是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应,所以说从架构本身上SpringMVC就容易实现restful url,而struts2的架构实现起来要费劲，因为Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。</p>
<p>2、由上边原因，SpringMVC的方法之间基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架，方法之间不共享变量，而Struts2搞的就比较乱，虽然方法之间也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我们编码 读程序时带来麻烦，每次来了请求就创建一个Action，一个Action对象对应一个request上下文。<br>3、由于Struts2需要针对每个request进行封装，把request，session等servlet生命周期的变量封装成一个一个Map，供给每个Action使用，并保证线程安全，所以在原则上，是比较耗费内存的。</p>
<p>4、 拦截器实现机制上，Struts2有以自己的interceptor机制，SpringMVC用的是独立的AOP方式，这样导致Struts2的配置文件量还是比SpringMVC大。</p>
<p>5、SpringMVC的入口是servlet，而Struts2是filter（这里要指出，filter和servlet是不同的。以前认为filter是servlet的一种特殊），这就导致了二者的机制不同，这里就牵涉到servlet和filter的区别了。</p>
<p>6、SpringMVC集成了Ajax，使用非常方便，只需一个注解@ResponseBody就可以实现，然后直接返回响应文本即可，而Struts2拦截器集成了Ajax，在Action中处理时一般必须安装插件或者自己写代码集成进去，使用起来也相对不方便。</p>
<p>7、SpringMVC验证支持JSR303，处理起来相对更加灵活方便，而Struts2验证比较繁琐，感觉太烦乱。</p>
<p>8、Spring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高（当然Struts2也可以通过不同的目录结构和相关配置做到SpringMVC一样的效果，但是需要xml配置的地方不少）。</p>
<p>9、 设计思想上，Struts2更加符合OOP的编程思想， SpringMVC就比较谨慎，在servlet上扩展。</p>
<p>10、SpringMVC开发效率和性能高于Struts2。<br>11、SpringMVC可以认为已经100%零配置。</p>
<h2 id="简单总结springMVC和struts2的区别"><a href="#简单总结springMVC和struts2的区别" class="headerlink" title="简单总结springMVC和struts2的区别"></a>简单总结springMVC和struts2的区别</h2><ol>
<li>springmvc的入口是一个servlet即前端控制器，而struts2入口是一个filter过虑器。</li>
<li>springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</li>
<li>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据， springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</li>
</ol>
<h2 id="SpringMvc怎么和AJAX相互调用的"><a href="#SpringMvc怎么和AJAX相互调用的" class="headerlink" title="SpringMvc怎么和AJAX相互调用的"></a>SpringMvc怎么和AJAX相互调用的</h2><p>通过Jackson框架就可以把Java里面的对象直接转化成Js可以识别的Json对象<br>具体步骤如下<br>1.加入Jackson.jar<br>2.在配置文件中配置json的映射<br>3.在接受Ajax方法里面可以直接返回Object,List等,但方法前面要加上@ResponseBody注解</p>
<h2 id="Spring有哪些优点"><a href="#Spring有哪些优点" class="headerlink" title="Spring有哪些优点"></a>Spring有哪些优点</h2><p>1.轻量级：Spring在大小和透明性方面绝对属于轻量级的，基础版本的Spring框架大约只有2MB。<br>2.控制反转(IOC)：Spring使用控制反转技术实现了松耦合。依赖被注入到对象，而不是创建或寻找依赖对象。<br>3.面向切面编程(AOP)： Spring支持面向切面编程，同时把应用的业务逻辑与系统的服务分离开来。<br>4.容器：Spring包含并管理应用程序对象的配置及生命周期。<br>5.MVC框架：Spring的web框架是一个设计优良的web MVC框架，很好的取代了一些web框架。<br>6.事务管理：Spring对下至本地业务上至全局业务(JAT)提供了统一的事务管理接口。<br>7.异常处理：Spring提供一个方便的API将特定技术的异常(由JDBC, Hibernate, 或JDO抛出)转化为一致的、Unchecked异常。</p>
<h2 id="spring-主要使用了哪些-，IOC和AOP实现原理是什么"><a href="#spring-主要使用了哪些-，IOC和AOP实现原理是什么" class="headerlink" title="spring 主要使用了哪些 ，IOC和AOP实现原理是什么"></a>spring 主要使用了哪些 ，IOC和AOP实现原理是什么</h2><p>spring主要功能有IOC，AOP，MVC等，IOC实现原理：先反射生成实例，然后调用时主动注入。AOP原理：主要使用java动态代理。</p>
<h2 id="解释AOP模块"><a href="#解释AOP模块" class="headerlink" title="解释AOP模块"></a>解释AOP模块</h2><p>AOP(Aspect Oriented Programming) 面向切面编程，是目前软件开发中的一个热点，是Spring框架内容，利用AOP可以对业务逻辑的各个部分隔离，从而使的业务逻辑各部分的耦合性降低，提高程序的可重用性，踢开开发效率，主要功能：日志记录，性能统计，安全控制，事务处理，异常处理等。</p>
<p>AOP实现原理是java动态代理，但是jdk的动态代理必须实现接口，所以spring的aop是用cglib这个库实现的，cglis使用里asm这个直接操纵字节码的框架，所以可以做到不使用接口的情况下实现动态代理。</p>
<h2 id="AOP与OOP的区别"><a href="#AOP与OOP的区别" class="headerlink" title="AOP与OOP的区别"></a>AOP与OOP的区别</h2><p>OOP面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程的某个步骤或阶段，以获得逻辑过程的中各部分之间低耦合的隔离效果。这两种设计思想在目标上有着本质的差异。</p>
<p>举例：</p>
<p>对于“雇员”这样一个业务实体进行封装，自然是OOP的任务，我们可以建立一个“Employee”类，并将“雇员”相关的属性和行为封装其中。而用AOP 设计思想对“雇员”进行封装则无从谈起。</p>
<p>同样，对于“权限检查”这一动作片段进行划分，则是AOP的目标领域。</p>
<p>OOP面向名次领域，AOP面向动词领域。</p>
<p>总之AOP可以通过预编译方式和运行期动态代理实现在不修改源码的情况下，给程序动态同意添加功能的一项技术。</p>
<h2 id="IoC容器是什么其优点"><a href="#IoC容器是什么其优点" class="headerlink" title="IoC容器是什么其优点"></a>IoC容器是什么其优点</h2><p>Spring IOC负责创建对象、管理对象(通过依赖注入)、整合对象、配置对象以及管理这些对象的生命周期。<br>优点:<br>IOC或依赖注入减少了应用程序的代码量。它使得应用程序的测试很简单，因为在单元测试中不再需要单例或JNDI查找机制。简单的实现以及较少的干扰机制使得松耦合得以实现。IOC容器支持勤性单例及延迟加载服务。</p>
<h2 id="Spring-的依赖注入方式有哪一些"><a href="#Spring-的依赖注入方式有哪一些" class="headerlink" title="Spring 的依赖注入方式有哪一些"></a>Spring 的依赖注入方式有哪一些</h2><p>Spring 的依赖注入可以有两种方式来完成:setter 方法注入和构造方法注入。<br>构造器依赖注入：构造器依赖注入在容器触发构造器的时候完成，该构造器有一系列的参数，每个参数代表注入的对象。<br>Setter方法依赖注入：首先容器会触发一个无参构造函数或无参静态工厂方法实例化对象，之后容器调用bean中的setter方法完成Setter方法依赖注入。</p>
<h2 id="Spring支持的事务管理类型"><a href="#Spring支持的事务管理类型" class="headerlink" title="Spring支持的事务管理类型"></a>Spring支持的事务管理类型</h2><p>Spring支持如下两种方式的事务管理：<br>编程式事务管理：这意味着你可以通过编程的方式管理事务，这种方式带来了很大的灵活性，但很难维护。<br>声明式事务管理：这种方式意味着你可以将事务管理和业务代码分离。你只需要通过注解或者XML配置管理事务。</p>
<h2 id="ThreadLocal-线程变量副本"><a href="#ThreadLocal-线程变量副本" class="headerlink" title="ThreadLocal(线程变量副本)"></a>ThreadLocal(线程变量副本)</h2><p>Synchronized实现内存共享，ThreadLocal为每个线程维护一个本地变量。</p>
<p>采用空间换时间，它用于线程间的数据隔离，为每一个使用该变量的线程提供一个副本，每个线程都可以独立地改变自己的副本，而不会和其他线程的副本冲突。</p>
<p>ThreadLocal类中维护一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值为对应线程的变量副本。</p>
<p>ThreadLocal在Spring中发挥着巨大的作用，在管理Request作用域中的Bean、事务管理、任务调度、AOP等模块都出现了它的身影。</p>
<p>Spring中绝大部分Bean都可以声明成Singleton作用域，采用ThreadLocal进行封装，因此有状态的Bean就能够以singleton的方式在多线程中正常工作了。</p>
<h2 id="throw-和-throws-的区别"><a href="#throw-和-throws-的区别" class="headerlink" title="throw 和 throws 的区别"></a>throw 和 throws 的区别</h2><p>throw 用于抛出 java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：</p>
<p>throw new IllegalArgumentException(“size must be multiple of 2″)</p>
<p>而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。</p>
<h2 id="final关键字的作用"><a href="#final关键字的作用" class="headerlink" title="final关键字的作用"></a>final关键字的作用</h2><p>final class    表示此类不允许有子类。<br>final virable  表示一个常量。<br>final method   表示一个方法不能被重写</p>
<h2 id="static关键字有哪些作用"><a href="#static关键字有哪些作用" class="headerlink" title="static关键字有哪些作用"></a>static关键字有哪些作用</h2><p>static 修饰变量、修饰方法;静态块;静态内部类;静态导包;</p>
<h2 id="String是最基本的数据类型吗"><a href="#String是最基本的数据类型吗" class="headerlink" title="String是最基本的数据类型吗"></a>String是最基本的数据类型吗</h2><p>基本数据类型包括byte、int、char、long、float、double、boolean和short。java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类。</p>
<h2 id="synchronized和java-util-concurrent-locks-Lock的异同"><a href="#synchronized和java-util-concurrent-locks-Lock的异同" class="headerlink" title="synchronized和java.util.concurrent.locks.Lock的异同"></a>synchronized和java.util.concurrent.locks.Lock的异同</h2><p>主要相同点:<br>Lock 能完成 synchronized 所实现的所有功能.<br>主要不同点:<br>Lock 有比 synchronized 更精确的线程语义和更好的性能(在相同点中回答此点也行)<br>synchronized 会自动释放锁. 而 Lock 一定要求程序员手工释放.并且必须在 finally 从句<br>中释放,如果没有答出在 finally 中释放不得分.就如 Connection 没有在 finally 中关闭一<br>样.连最基本的资源释放都做不好,还谈什么多线程编程.</p>
<h2 id="spring的事务有几种它的隔离级别和传播行为"><a href="#spring的事务有几种它的隔离级别和传播行为" class="headerlink" title="spring的事务有几种它的隔离级别和传播行为"></a>spring的事务有几种它的隔离级别和传播行为</h2><p>声明式事务和编程式事务<br>隔离级别：</p>
<ul>
<li>DEFAULT使用数据库默认的隔离级别</li>
<li>READ_UNCOMMITTED会出现脏读，不可重复读和幻影读问题</li>
<li>READ_COMMITTED会出现重复读和幻影读</li>
<li>REPEATABLE_READ会出现幻影读</li>
<li>SERIALIZABLE最安全，但是代价最大，性能影响极其严重<br>和传播行：</li>
<li>REQUIRED存在事务就融入该事务，不存在就创建事务</li>
<li>SUPPORTS存在事务就融入事务，不存在则不创建事务</li>
<li>MANDATORY存在事务则融入该事务，不存在，抛异常</li>
<li>REQUIRES_NEW总是创建新事务</li>
<li>NOT_SUPPORTED存在事务则挂起，一直执行非事务操作</li>
<li>NEVER总是执行非事务，如果当前存在事务则抛异常</li>
<li>NESTED嵌入式事务</li>
</ul>
<h2 id="sleep-和-wait-有什么区别"><a href="#sleep-和-wait-有什么区别" class="headerlink" title="sleep() 和 wait() 有什么区别"></a>sleep() 和 wait() 有什么区别</h2><p>最大区别是等待时wait会释放锁，而sleep会一直持有锁，wait通常用于线程时交互，sleep通常被用于暂停执行。</p>
<p>sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。<br>wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</p>
<h2 id="多线程和同步有几种实现方法"><a href="#多线程和同步有几种实现方法" class="headerlink" title="多线程和同步有几种实现方法"></a>多线程和同步有几种实现方法</h2><p>多线程有两种实现方法，分别是继承Thread类与实现Runnable接口<br>同步的实现方面有两种，分别是synchronized,wait与notify</p>
<h2 id="启动一个线程是用run-还是start"><a href="#启动一个线程是用run-还是start" class="headerlink" title="启动一个线程是用run()还是start()"></a>启动一个线程是用run()还是start()</h2><p>启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。run()方法可以产生必须退出的标志来停止一个线程。 </p>
<h2 id="final-finally-finalize的区别"><a href="#final-finally-finalize的区别" class="headerlink" title="final,finally,finalize的区别"></a>final,finally,finalize的区别</h2><p>final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重载。<br>　　finally—再异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会执行，然后控制就会进入 finally 块（如果有的话）。<br>　　finalize—方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。 </p>
<h2 id="abstract-class和interface有什么区别"><a href="#abstract-class和interface有什么区别" class="headerlink" title="abstract class和interface有什么区别"></a>abstract class和interface有什么区别</h2><p>抽象类与接口的区别：<br>1.接口可以多重继承 ，抽象类不可以<br>2.接口定义方法，不给实现；而抽象类可以实现部分方法<br>3.接口中基本数据类型的数据成员，都默认为static和final，抽象类则不是<br>如果事先知道某种东西会成为基础类，那么第一个选择就是把它变成一个接口。<br>只有在必须使用方法定义或者成员变量的时候，才应考虑采用抽象类。</p>
<h2 id="Set里的元素不能重复，用-还是equals-判断"><a href="#Set里的元素不能重复，用-还是equals-判断" class="headerlink" title="Set里的元素不能重复，用==还是equals ()判断"></a>Set里的元素不能重复，用==还是equals ()判断</h2><p>Set里的元素是不能重复的，那么用iterator()方法来区分重复与否。equals()是判读两个Set是否相等。<br>equals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。</p>
<h2 id="struts-框架是如何体现MVC模式"><a href="#struts-框架是如何体现MVC模式" class="headerlink" title="struts 框架是如何体现MVC模式"></a>struts 框架是如何体现MVC模式</h2><p>struts 框架为开发者提供了MVC 的3个逻辑组成部分，主要由ActionServlet、Action和strust-config.xml配置文件组成控制层，由ActionForm 来承担模型层的功能，而struts 下的视图由JSP来完成。<br>处理请求：由ActionServlet接收请求，然后根据 struts-config.xml 中的配置，类判断由于哪个Action来处理请求和由哪个ActionForm来保存数据，在通过Action的返回值来判断应该由哪个JSP来负责页面的展示，最后由 JSP 来完成结果响应。</p>
<h2 id="Hibernate-的实体存在哪几种状态"><a href="#Hibernate-的实体存在哪几种状态" class="headerlink" title="Hibernate 的实体存在哪几种状态"></a>Hibernate 的实体存在哪几种状态</h2><p>Hibernate 中的实体在它的生命周期里面，存在 3 中状态。<br>瞬时：new语句创建的实体类对象是就是瞬时状态，它一般没有id。<br>持久：存放在 Session 中的实体对象就属于持久状态，一般通过 save() 或 saveOrUpdate()等等，方法转换而来。<br>托管：实体中Session中脱离出来的时候，它的状态就属于托管状态了，尽管它具有 id 值，但已经不存在Session 中了，即使 实体中的数据发生变化也不能同步到数据库中。通过 close()、evict()等方法转化而来。</p>
<h2 id="Hibernate-的get-和load-的区别"><a href="#Hibernate-的get-和load-的区别" class="headerlink" title="Hibernate 的get()和load()的区别"></a>Hibernate 的get()和load()的区别</h2><p>Hibernate 对于 load() 方法该方法认为数据一定存在于数据，可以放心的代理来延迟加载，如果在使用过程中发现了问题，只能抛出异常，而get()方法可以不存在。</p>
<h2 id="为什么wait和notify方法要在同步块中调用"><a href="#为什么wait和notify方法要在同步块中调用" class="headerlink" title="为什么wait和notify方法要在同步块中调用"></a>为什么wait和notify方法要在同步块中调用</h2><p>主要是因为Java API强制要求这样做，如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。还有一个原因是为了避免wait和notify之间产生竞态条件。</p>
<h2 id="线程有几种状态"><a href="#线程有几种状态" class="headerlink" title="线程有几种状态"></a>线程有几种状态</h2><p>在Java当中，线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。</p>
<p>第一是创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态；</p>
<p>第二是就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态</p>
<p>第三是运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。</p>
<p>第四是阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生（比如说某项资源就绪）之后再继续运行。sleep,suspend等方法都可以导致线程阻塞。</p>
<p>第五是死亡状态。如果一个线程的run方法执行结束，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪状态。</p>
<h2 id="有A、B、C线程，A线程输出A-B线程输出B-C线程输出C要求-同时启动线程-按顺序输出ABC"><a href="#有A、B、C线程，A线程输出A-B线程输出B-C线程输出C要求-同时启动线程-按顺序输出ABC" class="headerlink" title="有A、B、C线程，A线程输出A, B线程输出B, C线程输出C要求, 同时启动线程, 按顺序输出ABC"></a>有A、B、C线程，A线程输出A, B线程输出B, C线程输出C要求, 同时启动线程, 按顺序输出ABC</h2><p>主要通过join方法来实现顺序输出ABC。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="comment">// 线程A  </span></div><div class="line">        <span class="keyword">final</span> Thread a = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                System.out.println(<span class="string">"A"</span>);  </div><div class="line">  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">        <span class="comment">// 线程B  </span></div><div class="line">        <span class="keyword">final</span> Thread b = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    <span class="comment">// 执行b线程之前，加入a线程,让a线程执行  </span></div><div class="line">                    a.join();  </div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">                System.out.println(<span class="string">"B"</span>);  </div><div class="line">  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">        <span class="comment">// 线程C  </span></div><div class="line">        <span class="keyword">final</span> Thread c = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    <span class="comment">// 执行c线程之前，加入b线程,让b线程执行  </span></div><div class="line">                    b.join();  </div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">                System.out.println(<span class="string">"C"</span>);  </div><div class="line">  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">        <span class="comment">// 线程D  </span></div><div class="line">        Thread d = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    <span class="comment">// 执行d线程之前，加入c线程,让c线程执行  </span></div><div class="line">                    c.join();  </div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">                System.out.println(<span class="string">"D"</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">        <span class="comment">// 启动四个线程  </span></div><div class="line">        a.start();  </div><div class="line">        b.start();  </div><div class="line">        c.start();  </div><div class="line">        d.start();  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="什么是ThreadLocal变量"><a href="#什么是ThreadLocal变量" class="headerlink" title="什么是ThreadLocal变量"></a>什么是ThreadLocal变量</h2><p>ThreadLocal是Java里一种特殊的变量。每个线程都有一个ThreadLocal就是每个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。它是为创建代价高昂的对象获取线程安全的好方法，比如你可以用ThreadLocal让SimpleDateFormat变成线程安全的，因为那个类创建代价高昂且每次调用都需要创建不同的实例所以不值得在局部范围使用它，如果为每个线程提供一个自己独有的变量拷贝，将大大提高效率。首先，通过复用减少了代价高昂的对象的创建个数。其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。线程局部变量的另一个不错的例子是ThreadLocalRandom类，它在多线程环境中减少了创建代价高昂的Random对象的个数。</p>
<p>从使用场景的角度出发来介绍对ReentrantLock的使用，相对来说容易理解一些。</p>
<h2 id="可重入锁的用处及实现原理"><a href="#可重入锁的用处及实现原理" class="headerlink" title="可重入锁的用处及实现原理"></a>可重入锁的用处及实现原理</h2><p><strong>场景1：如果已加锁，则不再重复加锁</strong></p>
<p>a、忽略重复加锁。<br>b、用在界面交互时点击执行较长时间请求操作时，防止多次点击导致后台重复执行（忽略重复触发）。</p>
<p>以上两种情况多用于进行非重要任务防止重复执行，（如：清除无用临时文件，检查某些资源的可用性，数据备份操作等）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (lock.tryLock()) &#123;  <span class="comment">//如果已经被lock，则立即返回false不会等待，达到忽略操作的效果 </span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//操作</span></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>场景2：如果发现该操作已经在执行，则尝试等待一段时间，等待超时则不执行（尝试等待执行）</strong></p>
<p>这种其实属于场景2的改进，等待获得锁的操作有一个时间的限制，如果超时则放弃执行。<br>用来防止由于资源处理不当长时间占用导致死锁情况（大家都在等待资源，导致线程队列溢出）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS)) &#123;  <span class="comment">//如果已经被lock，尝试等待5s，看是否可以获得锁，如果5s后仍然无法获得锁则返回false继续执行</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//操作</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          lock.unlock();</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">   e.printStackTrace(); <span class="comment">//当前线程被中断时(interrupt)，会抛InterruptedException                 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>场景3：如果发现该操作已经加锁，则等待一个一个加锁（同步执行，类似synchronized）</strong></p>
<p>这种比较常见大家也都在用，主要是防止资源使用冲突，保证同一时间内只有一个操作可以使用该资源。<br>但与synchronized的明显区别是性能优势（伴随jvm的优化这个差距在减小）。同时Lock有更灵活的锁定方式，公平锁与不公平锁，而synchronized永远是公平的。</p>
<p>这种情况主要用于对资源的争抢（如：文件操作，同步消息发送，有状态的操作等）</p>
<p>ReentrantLock默认情况下为不公平锁</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">//参数默认false，不公平锁</span></div><div class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>); <span class="comment">//公平锁</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    lock.lock(); <span class="comment">//如果被其它资源锁定，会在此等待锁释放，达到暂停的效果</span></div><div class="line">   <span class="comment">//操作</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    lock.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不公平锁与公平锁的区别：</p>
<p>公平情况下，操作会排一个队按顺序执行，来保证执行顺序。（会消耗更多的时间来排队）<br>不公平情况下，是无序状态允许插队，jvm会自动计算如何处理更快速来调度插队。（如果不关心顺序，这个速度会更快）</p>
<p><strong>场景4：可中断锁</strong></p>
<p>synchronized与Lock在默认情况下是不会响应中断(interrupt)操作，会继续执行完。lockInterruptibly()提供了可中断锁来解决此问题。（场景3的另一种改进，没有超时，只能等待中断或执行完毕）</p>
<p>这种情况主要用于取消某些操作对资源的占用。如：（取消正在同步运行的操作，来防止不正常操作长时间占用造成的阻塞）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    lock.lockInterruptibly();</div><div class="line">    <span class="comment">//操作</span></div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    lock.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>可重入概念:</strong>若一个程序或子程序可以“安全的被并行执行(Parallel computing)”，则称其为可重入（reentrant或re-entrant）的。即当该子程序正在运行时，可以再次进入并执行它（并行执行时，个别的执行结果，都符合设计时的预期）。可重入概念是在单线程操作系统的时代提出的。</p>
<h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><p>Java多线程中的死锁<br>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起无法完成任务，死锁的发生必须满足以下四个条件：<br>互斥条件：一个资源每次只能被一个进程使用。<br>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。<br>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。<br>避免死锁最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁。</p>
<h2 id="Java中活锁和死锁有什么区别"><a href="#Java中活锁和死锁有什么区别" class="headerlink" title="Java中活锁和死锁有什么区别"></a>Java中活锁和死锁有什么区别</h2><p>这是上题的扩展，活锁和死锁类似，不同之处在于处于活锁的线程或进程的状态是不断改变的，活锁可以认为是一种特殊的饥饿。一个现实的活锁例子是两个人在狭小的走廊碰到，两个人都试着避让对方好让彼此通过，但是因为避让的方向都一样导致最后谁都不能通过走廊。简单的说就是，活锁和死锁的主要区别是前者进程的状态可以改变但是却不能继续执行。</p>
<h2 id="怎么检测一个线程是否拥有锁"><a href="#怎么检测一个线程是否拥有锁" class="headerlink" title="怎么检测一个线程是否拥有锁"></a>怎么检测一个线程是否拥有锁</h2><p>我一直不知道我们竟然可以检测一个线程是否拥有锁，直到我参加了一次电话面试。在java.lang.Thread中有一个方法叫holdsLock()，它返回true如果当且仅当当前线程拥有某个具体对象的锁。</p>
<h2 id="Maven有哪些优点"><a href="#Maven有哪些优点" class="headerlink" title="Maven有哪些优点"></a>Maven有哪些优点</h2><p>优点如下：<br>简化了项目依赖管理：<br>易于上手，对于新手可能一个”mvn clean package”命令就可能满足他的工作<br>便于与持续集成工具（jenkins）整合<br>便于项目升级，无论是项目本身升级还是项目使用的依赖升级。<br>有助于多模块项目的开发，一个模块开发好后，发布到仓库，依赖该模块时可以直接从仓库更新，而不用自己去编译。<br>maven有很多插件，便于功能扩展，比如生产站点，自动发布版本等</p>
<h2 id="Maven常见的依赖范围有哪些"><a href="#Maven常见的依赖范围有哪些" class="headerlink" title="Maven常见的依赖范围有哪些"></a>Maven常见的依赖范围有哪些</h2><p>1.compile:编译依赖，默认的依赖方式，在编译（编译项目和编译测试用例），运行测试用例，运行（项目实际运行）三个阶段都有效，典型地有spring-core等jar。<br>2.test:测试依赖，只在编译测试用例和运行测试用例有效，典型地有JUnit。<br>provided:对于编译和测试有效，不会打包进发布包中，典型的例子为servlet-api,一般的web工程运行时都使用容器的servlet-api。<br>3.runtime:只在运行测试用例和实际运行时有效，典型地是jdbc驱动jar包。<br>4.system: 不从maven仓库获取该jar,而是通过systemPath指定该jar的路径。<br>5.import: 用于一个dependencyManagement对另一个dependencyManagement的继承。</p>
<h2 id="使用“Mvn-Clean-Package”进行项目打包-其过程执行了哪些动作"><a href="#使用“Mvn-Clean-Package”进行项目打包-其过程执行了哪些动作" class="headerlink" title="使用“Mvn Clean Package”进行项目打包,其过程执行了哪些动作"></a>使用“Mvn Clean Package”进行项目打包,其过程执行了哪些动作</h2><p>在这个命令中我们调用了maven的clean周期的clean阶段绑定的插件任务，以及default周期的package阶段绑定的插件任务<br>默认执行的任务有（maven的术语叫goal, 也有人翻译成目标，我这里用任务啦）：</p>
<p>maven-clean-plugin:clean-&gt;<br>maven-resources-plugin:resources-&gt;<br>maven-compile-plugin:compile-&gt;<br>mavne-resources-plugin:testResources-&gt;<br>maven-compile-plugin:testCompile-&gt;<br>maven-jar-plugin:jar</p>
<h2 id="Maven-多模块如何聚合"><a href="#Maven-多模块如何聚合" class="headerlink" title="Maven 多模块如何聚合"></a>Maven 多模块如何聚合</h2><p>配置一个打包类型为pom的聚合模块，然后在该pom中使用<module>元素声明要聚合的模块</module></p>
<h2 id="缓存框架memcache和redis的区别？项目中，怎么去选择？"><a href="#缓存框架memcache和redis的区别？项目中，怎么去选择？" class="headerlink" title="缓存框架memcache和redis的区别？项目中，怎么去选择？"></a>缓存框架memcache和redis的区别？项目中，怎么去选择？</h2><p>ehcache,memcache和redis等。</p>
<p>区别：</p>
<ol>
<li>Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等。</li>
<li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。</li>
<li>虚拟内存–Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘。</li>
<li>过期策略–memcache在set时就指定，例如set key1 0 0 8,即永不过期。Redis可以通 过例如expire 设定，例如expire name 10。</li>
<li>分布式–设定memcache集群，利用magent做一主多从;redis可以做一主多从。都 可以一主一从。</li>
<li>存储数据安全–memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）。</li>
<li>灾难恢复–memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ol>
<h2 id="java的原子类，实现原理是什么"><a href="#java的原子类，实现原理是什么" class="headerlink" title="java的原子类，实现原理是什么"></a>java的原子类，实现原理是什么</h2><p>采用硬件提供原子操作指令实现的，即CAS。每次调用都会先判断预期的值是否符合，才进行写操作，保证数据安全。</p>
<h2 id="数据库性能优化有哪些方法"><a href="#数据库性能优化有哪些方法" class="headerlink" title="数据库性能优化有哪些方法"></a>数据库性能优化有哪些方法</h2><p>使用explain进行优化，查看sql是否充分使用索引。避免使用in,用exist替代，字段值尽可能使用更小的值，任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。使用连接查询(join)代替子查询。</p>
<p>在表的多列字段上建立一个索引，但只有在查询这些字段的第一个字段时，索引才会被使用。</p>
<h2 id="HTTP请求方法get和post有什么区别"><a href="#HTTP请求方法get和post有什么区别" class="headerlink" title="HTTP请求方法get和post有什么区别"></a>HTTP请求方法get和post有什么区别</h2><ol>
<li>Post传输数据时，不需要在URL中显示出来，而Get方法要在URL中显示。</li>
<li>Post传输的数据量大，可以达到2M，而Get方法由于受到URL长度限制,只能传递大约1024字节.</li>
<li>Post就是为了将数据传送到服务器段,Get就是为了从服务器段取得数据.而Get之所以也能传送数据,只是用来设计告诉服务器,你到底需要什么样的数据.Post的信息作为http请求的内容，而Get是在Http头部传输的。</li>
<li>其他 HTTP 请求方法</li>
</ol>
<ul>
<li>HEAD 与 GET 相同，但只返回 HTTP 报头，不返回文档主体。</li>
<li>PUT上传指定的 URI 表示。<br> DELETE    删除指定资源。</li>
<li>OPTIONS 返回服务器支持的 HTTP 方法</li>
<li>CONNECT 把请求连接转换到透明的 TCP/IP 通道。</li>
</ul>
<h2 id="linux命令，查看某个线程，整个机器负载和文件内容快速查找的命令"><a href="#linux命令，查看某个线程，整个机器负载和文件内容快速查找的命令" class="headerlink" title="linux命令，查看某个线程，整个机器负载和文件内容快速查找的命令"></a>linux命令，查看某个线程，整个机器负载和文件内容快速查找的命令</h2><p>查看线程：ps -ef|greptomcat</p>
<p>查看负载：top</p>
<p>文件内容查找：vi  /aa test.txt 或者先打开文件，再查找: vi test.txt   /aa</p>
<h2 id="JVM内存的模型，垃圾回收的机制，如何对JVM进行调优"><a href="#JVM内存的模型，垃圾回收的机制，如何对JVM进行调优" class="headerlink" title="JVM内存的模型，垃圾回收的机制，如何对JVM进行调优"></a>JVM内存的模型，垃圾回收的机制，如何对JVM进行调优</h2><p>由栈和堆组成，栈是运行时单位，堆内存则分为年轻代、年老代、持久代等，年轻代中的对象经过几次的回收，仍然存在则被移到年老代；持久代主要是保存class,method,filed等对象。</p>
<p>sun回收机制：主要对年轻代和年老代中的存活对象进行回收，分为以下：</p>
<p>年轻代串行（Serial Copying）、年轻代并行（ParNew）、年老代串行（SerialMSC），年老代并行（Parallel Mark Sweep），年老代并发（Concurrent Mark-Sweep GC，即CMS）等等,目前CMS回收算法使用最广泛。</p>
<p>JVM调优主要是对堆内容和回收算法进行配置，需要对jdk产生的回收日志进行观察，同时通过工具（Jconsole，jProfile，VisualVM）对堆内存不断分析，这些优化是一个过程，需要不断地进行观察和维护。</p>
<h2 id="高并发时，又如何保证性能和数据正确"><a href="#高并发时，又如何保证性能和数据正确" class="headerlink" title="高并发时，又如何保证性能和数据正确"></a>高并发时，又如何保证性能和数据正确</h2><p>如果是单机内完成这些操作，那使用数据库的事务，即可轻松实现。</p>
<h2 id="分布式事务如何实现"><a href="#分布式事务如何实现" class="headerlink" title="分布式事务如何实现"></a>分布式事务如何实现</h2><p>分布式事务可以采用分布式锁进行实现，目前zookeeper就提供此锁；分布式锁需要牺牲一定性能去实现，若业务支付最终一致性，那此方法是最佳方案。如在京东下订单，过一会才会告诉你订单审核通过，而不是马上响应订单结果。</p>
<h2 id="抽象类和接口的区别，项目中如何使用它们"><a href="#抽象类和接口的区别，项目中如何使用它们" class="headerlink" title="抽象类和接口的区别，项目中如何使用它们"></a>抽象类和接口的区别，项目中如何使用它们</h2><p> 相同点：</p>
<ol>
<li>两者都是抽象类，都不能实例化。</li>
<li>interface实现类及abstractclass的子类都必须要实现已经声明的抽象方法。</li>
</ol>
<p>不同点：</p>
<ol>
<li>interface需要实现，要用implements，而abstractclass需要继承，要用extends。</li>
<li>一个类可以实现多个interface，但一个类只能继承一个abstractclass。</li>
<li>interface强调特定功能的实现，而abstractclass强调所属关系。</li>
<li>尽管interface实现类及abstrctclass的子类都必须要实现相应的抽象方法，但实现的形式不同。interface中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体)，实现类必须要实现。而abstractclass的子类可以有选择地实现。</li>
</ol>
<p>使用：</p>
<ol>
<li>abstract：在既需要统一的接口，又需要实例变量或缺省的方法的情况下，使用abstract;</li>
<li>​ interface：类与类之前需要特定的接口进行协调，而不在乎其如何实现。 作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。        </li>
</ol>
<h2 id="TCP通讯有几次握手，有使用过哪些socket框架"><a href="#TCP通讯有几次握手，有使用过哪些socket框架" class="headerlink" title="TCP通讯有几次握手，有使用过哪些socket框架"></a>TCP通讯有几次握手，有使用过哪些socket框架</h2><p>​         3次握手，客户端–&gt;服务端，服务端–&gt;客户端，客户端–&gt;服务端，当这些过程完成之后，才真正建立起通信。java中比较有名的socket框架有：mina,netty,都是韩国小棒子写的。</p>
<h2 id="反射的作用与原理"><a href="#反射的作用与原理" class="headerlink" title="反射的作用与原理"></a>反射的作用与原理</h2><p><strong>反射概念：</strong>Java 反射是可以让我们在运行时，通过一个类的Class对象来获取它获取类的方法、属性、父类、接口等类的内部信息的机制。这种动态获取信息以及动态调用对象的方法的功能称为JAVA的反射。</p>
<p><strong>作用：</strong>在任意一个方法里，</p>
<p>1.如果我知道一个类的名称/或者它的一个实例对象， 我就能把这个类的所有方法和变量的信息找出来(方法名，变量名，方法，修饰符，类型，方法参数等等所有信息)</p>
<p>2.如果我还明确知道这个类里某个变量的名称，我还能得到这个变量当前的值。</p>
<p>3.当然，如果我明确知道这个类里的某个方法名+参数个数类型，我还能通过传递参数来运行那个类里的那个方法。</p>
<p><strong>反射机制主要提供了以下功能：</strong></p>
<ul>
<li>在运行时判断任意一个对象所属的类。</li>
<li>在运行时构造任意一个类的对象。</li>
<li>在运行时判断任意一个类所具有的成员变量和方法。</li>
<li>在运行时调用任意一个对象的方法。</li>
<li>生成动态代理。</li>
</ul>
<p><strong>反射的原理：</strong>JAVA语言编译之后会生成一个.class文件，反射就是通过字节码文件找到某一个类、类中的方法以及属性等。</p>
<p><strong>反射的实现API：</strong>反射的实现主要借助以下四个类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Class：类的对象</div><div class="line">Constructor：类的构造方法</div><div class="line">Field：类中的属性对象</div><div class="line">Method：类中的方法对象</div></pre></td></tr></table></figure>
<h2 id="java反射机制，反射生成类，可否访问私有变量"><a href="#java反射机制，反射生成类，可否访问私有变量" class="headerlink" title="java反射机制，反射生成类，可否访问私有变量"></a>java反射机制，反射生成类，可否访问私有变量</h2><p>即动态生成java的实例，可以。</p>
<p>Java反射机制是一个非常强大的功能，在很多的项目比如Spring，Mybatis都都可以看到反射的身影。通过反射机制，我们可以在运行期间获取对象的类型信息。利用这一点我们可以实现工厂模式和代理模式等设计模式，同时也可以解决java泛型擦除等令人苦恼的问题。</p>
<p>获取一个对象对应的反射类，在Java中有三种方法可以获取一个对象的反射类，</p>
<ul>
<li>通过getClass()方法</li>
<li>通过Class.forName()方法</li>
<li>使用类.class</li>
<li>通过类加载器实现，getClassLoader()</li>
</ul>
<h2 id="RPC是什么，有使用过哪些RPC框架"><a href="#RPC是什么，有使用过哪些RPC框架" class="headerlink" title="RPC是什么，有使用过哪些RPC框架"></a>RPC是什么，有使用过哪些RPC框架</h2><p>​     远程进程调用，本地机器调用远程的服务，在项目规模大到一定程度，需要使用RPC相关框架进行服务化部署。如：hessian 、webservice等</p>
<h2 id="jquery如何绑定页面某元素的点击事件"><a href="#jquery如何绑定页面某元素的点击事件" class="headerlink" title="jquery如何绑定页面某元素的点击事件"></a>jquery如何绑定页面某元素的点击事件</h2><p>​    $(“#btn”).click(function(){ …. })</p>
<h2 id="volatile实现原理"><a href="#volatile实现原理" class="headerlink" title="volatile实现原理"></a>volatile实现原理</h2><p>volatile如何保证可见性和禁止指令重排序的：</p>
<p>观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令，lock前缀指令实际上相当于一个 <strong>内存屏障</strong>（也成内存栅栏），内存屏障会提供3个功能：</p>
<ul>
<li><p>它 <strong>确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面</strong>；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</p>
</li>
<li><p>它会 强制将对缓存的修改操作立即写入主存；</p>
</li>
<li><p>如果是写操作，它会导致其他CPU中对应的缓存行无效。</p>
</li>
</ul>
<h2 id="session-与-cookie-区别"><a href="#session-与-cookie-区别" class="headerlink" title="session 与 cookie 区别"></a>session 与 cookie 区别</h2><ol>
<li>cookie数据存放在客户的浏览器上，session数据放在服务器上。</li>
<li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。</li>
<li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用COOKIE。</li>
<li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</li>
<li>所以个人建议： 将登陆信息等重要信息存放为SESSION 其他信息如果需要保留，可以放在COOKIE中</li>
</ol>
<h2 id="session-分布式处理"><a href="#session-分布式处理" class="headerlink" title="session 分布式处理"></a>session 分布式处理</h2><p>第一种：粘性session</p>
<p>粘性Session是指将用户锁定到某一个服务器上，比如上面说的例子，用户第一次请求时，负载均衡器将用户的请求转发到了A服务器上，如果负载均衡器设置了粘性Session的话，那么用户以后的每次请求都会转发到A服务器上，相当于把用户和A服务器粘到了一块，这就是粘性Session机制。</p>
<p>第二种：服务器session复制</p>
<p>原理：任何一个服务器上的session发生改变（增删改），该节点会把这个 session的所有内容序列化，然后广播给所有其它节点，不管其他服务器需不需要session，以此来保证Session同步。</p>
<p>第三种：session共享机制</p>
<p>使用分布式缓存方案比如memcached、Redis，但是要求Memcached或Redis必须是集群。</p>
<p>原理：不同的 tomcat指定访问不同的主memcached。多个Memcached之间信息是同步的，能主从备份和高可用。用户访问时首先在tomcat中创建session，然后将session复制一份放到它对应的memcahed上</p>
<p>第四种：session持久化到数据库</p>
<p>原理：就不用多说了吧，拿出一个数据库，专门用来存储session信息。保证session的持久化。 优点：服务器出现问题，session不会丢失 缺点：如果网站的访问量很大，把session存储到数据库中，会对数据库造成很大压力，还需要增加额外的开销维护数据库。</p>
<p>第五种terracotta实现session复制</p>
<p>原理：就不用多说了吧，拿出一个数据库，专门用来存储session信息。保证session的持久化。 优点：服务器出现问题，session不会丢失 缺点：如果网站的访问量很大，把session存储到数据库中，会对数据库造成很大压力，还需要增加额外的开销维护数据库。</p>
<h2 id="说说自定义注解的场景及实现"><a href="#说说自定义注解的场景及实现" class="headerlink" title="说说自定义注解的场景及实现"></a>说说自定义注解的场景及实现</h2><p>跟踪代码的依赖性，实现代替配置文件的功能。比较常见的是Spring等框架中的基于注解配置。</p>
<p>还可以生成文档常见的@See@param@return等。如@override放在方法签名，如果这个方法 并不是覆盖了超类方法，则编译时就能检查出。</p>
<p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节，在定义注解时，不能继承其他注解或接口。</p>
<h2 id="HashSet-和-HashMap-区别"><a href="#HashSet-和-HashMap-区别" class="headerlink" title="HashSet 和 HashMap 区别"></a>HashSet 和 HashMap 区别</h2><p> <strong>HashSet：</strong></p>
<p>HashSet实现了Set接口，它不允许集合中出现重复元素。当我们提到HashSet时，第一件事就是在将对象存储在</p>
<p>HashSet之前，要确保重写hashCode（）方法和equals（）方法，这样才能比较对象的值是否相等，确保集合中没有储存相同的对象。如果不重写上述两个方法，那么将使用下面方法默认实现：</p>
<p>public boolean add(Object obj)方法用在Set添加元素时，如果元素值重复时返回 “false”，如果添加成功则返回”true”</p>
<p><strong>HashMap：</strong></p>
<p>HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许出现重复的键（Key）。Map接口有两个基本的实现TreeMap和HashMap。TreeMap保存了对象的排列次序，而HashMap不能。HashMap可以有空的键值对（Key（null）-Value（null））HashMap是非线程安全的（非Synchronize），要想实现线程安全，那么需要调用collections类的静态方法synchronizeMap（）实现。</p>
<p>public Object put(Object Key,Object value)方法用来将元素添加到map中。</p>
<p>总结：</p>
<p>HashMap 实现了 Map 接口；存储键值对；调用put（）向map中添加元素；HashMap使用键（Key）计算Hashcode；HashMap相对于HashSet较快，因为它是使用唯一的键获取对象。</p>
<p>HashSet 实现了 Set 接口；仅存储对象；调用add（）方法向Set中添加元素；HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false；HashSet较HashMap来说比较慢。</p>
<h2 id="HashMap-的工作原理及代码实现"><a href="#HashMap-的工作原理及代码实现" class="headerlink" title="HashMap 的工作原理及代码实现"></a>HashMap 的工作原理及代码实现</h2><ol>
<li>HashMap是基于哈希表的Map接口的非同步实现，允许使用null值和null键，但不保证映射的顺序。</li>
<li>底层使用数组实现，数组中每一项是个单向链表，即数组和链表的结合体；当链表长度大于一定阈值时，链表转换为红黑树，这样减少链表查询时间。</li>
<li>HashMap在底层将key-value当成一个整体进行处理，这个整体就是一个Node对象。HashMap底层采用一个Node[]数组来保存所有的key-value对，当需要存储一个Node对象时，会根据key的hash算法来决定其在数组中的存储位置，在根据equals方法决定其在该数组位置上的链表中的存储位置；当需要取出一个Node时，也会根据key的hash算法找到其在数组中的存储位置，再根据equals方法从该位置上的链表中取出该Node。</li>
<li>HashMap进行数组扩容需要重新计算扩容后每个元素在数组中的位置，很耗性能</li>
<li>采用了Fail-Fast机制，通过一个modCount值记录修改次数，对HashMap内容的修改都将增加这个值。迭代器初始化过程中会将这个值赋给迭代器的expectedModCount，在迭代过程中，判断modCount跟expectedModCount是否相等，如果不相等就表示已经有其他线程修改了Map，马上抛出异常</li>
</ol>
<h2 id="ConcurrentHashMap-的工作原理及代码实现"><a href="#ConcurrentHashMap-的工作原理及代码实现" class="headerlink" title="ConcurrentHashMap 的工作原理及代码实现"></a>ConcurrentHashMap 的工作原理及代码实现</h2><ol>
<li>ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。</li>
<li>它使用了多个锁来控制对hash表的不同段进行的修改，每个段其实就是一个小的hashtable，它们有自己的锁。只要多个并发发生在不同的段上，它们就可以并发进行。</li>
<li>ConcurrentHashMap在底层将key-value当成一个整体进行处理，这个整体就是一个Entry对象。Hashtable底层采用一个Entry[]数组来保存所有的key-value对，当需要存储一个Entry对象时，会根据key的hash算法来决定其在数组中的存储位置，在根据equals方法决定其在该数组位置上的链表中的存储位置；当需要取出一个Entry时，也会根据key的hash算法找到其在数组中的存储位置，再根据equals方法从该位置上的链表中取出该Entry。</li>
<li>与HashMap不同的是，ConcurrentHashMap使用多个子Hash表，也就是段(Segment)</li>
<li>ConcurrentHashMap完全允许多个读操作并发进行，读操作并不需要加锁。如果使用传统的技术，如HashMap中的实现，如果允许可以在hash链的中间添加或删除元素，读操作不加锁将得到不一致的数据。ConcurrentHashMap实现技术是保证HashEntry几乎是不可变的。</li>
</ol>
<h2 id="ConcurrentHashMap能完全替代HashTable吗"><a href="#ConcurrentHashMap能完全替代HashTable吗" class="headerlink" title="ConcurrentHashMap能完全替代HashTable吗"></a>ConcurrentHashMap能完全替代HashTable吗</h2><p>HashTable虽然性能上不如ConcurrentHashMap，但并不能完全被取代，<strong>两者的迭代器的一致性不同的，HashTable的迭代器是强一致性的，而ConcurrentHashMap是弱一致的</strong>。<br>ConcurrentHashMap的get，clear，iterator 都是弱一致性的。 Doug Lea 也将这个判断留给用户自己决定是否使用ConcurrentHashMap。</p>
<h2 id="什么是强一致性和弱一致性"><a href="#什么是强一致性和弱一致性" class="headerlink" title="什么是强一致性和弱一致性"></a>什么是强一致性和弱一致性</h2><p>get方法是弱一致的，是什么含义？可能你期望往ConcurrentHashMap底层数据结构中加入一个元素后，立马能对get可见，但ConcurrentHashMap并不能如你所愿。换句话说，put操作将一个元素加入到底层数据结构后，get可能在某段时间内还看不到这个元素，若不考虑内存模型，单从代码逻辑上来看，却是应该可以看得到的。</p>
<p>下面将结合代码和java内存模型相关内容来分析下put/get方法。put方法我们只需关注Segment#put，get方法只需关注Segment#get，在继续之前，先要说明一下Segment里有两个volatile变量：count和table；HashEntry里有一个volatile变量：value。</p>
<p><strong>总结：</strong>ConcurrentHashMap的弱一致性主要是为了提升效率，是一致性与效率之间的一种权衡。要成为强一致性，就得到处使用锁，甚至是全局锁，这就与Hashtable和同步的HashMap一样了。</p>
<h2 id="ThreadLocal-原理分析"><a href="#ThreadLocal-原理分析" class="headerlink" title="ThreadLocal 原理分析"></a>ThreadLocal 原理分析</h2><p>ThreadLocal 为解决多线程程序的并发问题提供了一种新的思路。使用这个工具类可以很简洁地编写出优美的多线程程序。当使用 ThreadLocal 维护变量时，ThreadLocal 为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p>
<p>每个线程中都保有一个 ThreadLocalMap 的成员变量，ThreadLocalMap 内部采用 WeakReference 数组保存，数组的key即为 ThreadLocal 内部的Hash值。</p>
<h2 id="创建线程的方式及实现"><a href="#创建线程的方式及实现" class="headerlink" title="创建线程的方式及实现"></a>创建线程的方式及实现</h2><p>Java使用Thread类代表线程，所有的线程对象都必须是Thread类或其子类的实例。Java可以用三种方式来创建线程，如下所示：</p>
<ol>
<li>继承Thread类创建线程</li>
<li>实现Runnable接口创建线程</li>
<li><p>使用Callable和Future创建线程</p>
<p><strong>继承Thread类创建线程</strong></p>
</li>
</ol>
<p>通过继承Thread类来创建并启动多线程的一般步骤如下</p>
<p>1】d定义Thread类的子类，并重写该类的<strong>run()</strong>方法，该方法的方法体就是线程需要完成的任务，run()方法也称为线程执行体。</p>
<p>2】创建Thread子类的实例，也就是创建了线程对象</p>
<p>3】启动线程，即调用线程的<strong>start()</strong>方法</p>
<p>代码实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;<span class="comment">//继承Thread类</span></div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">　　<span class="comment">//重写run方法</span></div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">　　　　<span class="keyword">new</span> MyThread().start();<span class="comment">//创建并启动线程</span></div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>实现Runnable接口创建线程</strong></p>
<p>通过实现Runnable接口创建并启动线程一般步骤如下：</p>
<p>1】定义Runnable接口的实现类，一样要重写run()方法，这个run（）方法和Thread中的run()方法一样是线程的执行体</p>
<p>2】创建Runnable实现类的实例，并用这个实例作为Thread的target来创建Thread对象，这个Thread对象才是真正的线程对象</p>
<p>3】第三部依然是通过调用线程对象的start()方法来启动线程</p>
<p>代码实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;<span class="comment">//实现Runnable接口</span></div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">　　<span class="comment">//重写run方法</span></div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">　　　　<span class="comment">//创建并启动线程</span></div><div class="line">　　　　MyThread2 myThread=<span class="keyword">new</span> MyThread2();</div><div class="line">　　　　Thread thread=<span class="keyword">new</span> Thread(myThread);</div><div class="line">　　　　thread().start();</div><div class="line">　　　　<span class="comment">//或者    new Thread(new MyThread2()).start();</span></div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用Callable和Future创建线程</strong></p>
<p>和Runnable接口不一样，Callable接口提供了一个call（）方法作为线程执行体，call()方法比run()方法<em>**</em>功能要强大。</p>
<p>》call()方法可以有返回值</p>
<p>》call()方法可以声明抛出异常</p>
<p>Java5提供了Future接口来代表Callable接口里call()方法的返回值，并且为Future接口提供了一个实现类FutureTask，这个实现类既实现了Future接口，还实现了Runnable接口，因此可以作为Thread类的target。在Future接口里定义了几个公共方法来控制它关联的Callable任务。</p>
<p>>boolean cancel(boolean mayInterruptIfRunning)：视图取消该Future里面关联的Callable任务</p>
<p>>V get()：返回Callable里call（）方法的返回值，调用这个方法会导致程序阻塞，必须等到子线程结束后才会得到返回值</p>
<p>>V get(long timeout,TimeUnit unit)：返回Callable里call（）方法的返回值，最多阻塞timeout时间，经过指定时间没有返回抛出TimeoutException</p>
<p>>boolean isDone()：若Callable任务完成，返回True</p>
<p>>boolean isCancelled()：如果在Callable任务正常完成前被取消，返回True</p>
<p>介绍了相关的概念之后，创建并启动有返回值的线程的步骤如下：</p>
<p>1】创建Callable接口的实现类，并实现call()方法，然后创建该实现类的实例（从java8开始可以直接使用Lambda表达式创建Callable对象）。</p>
<p>2】使用FutureTask类来包装Callable对象，该FutureTask对象封装了Callable对象的call()方法的返回值</p>
<p>3】使用FutureTask对象作为Thread对象的target创建并启动线程（因为FutureTask实现了Runnable接口）</p>
<p>4】调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</p>
<p>代码实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">　　　MyThread3 th=<span class="keyword">new</span> MyThread3();</div><div class="line"></div><div class="line">　　　<span class="comment">//使用Lambda表达式创建Callable对象</span></div><div class="line"></div><div class="line">　　   <span class="comment">//使用FutureTask类来包装Callable对象</span></div><div class="line"></div><div class="line">　　　FutureTask&lt;Integer&gt; future=<span class="keyword">new</span> FutureTask&lt;Integer&gt;(</div><div class="line"></div><div class="line">　　　　(Callable&lt;Integer&gt;)()-&gt;&#123;</div><div class="line"></div><div class="line">　　　　　　<span class="keyword">return</span> <span class="number">5</span>;</div><div class="line"></div><div class="line">　　　　&#125;</div><div class="line"></div><div class="line">　　  );</div><div class="line"></div><div class="line">　　　<span class="keyword">new</span> Thread(task,<span class="string">"有返回值的线程"</span>).start();<span class="comment">//实质上还是以Callable对象来创建并启动线程</span></div><div class="line"></div><div class="line">　　  <span class="keyword">try</span>&#123;</div><div class="line">　　　　System.out.println(<span class="string">"子线程的返回值："</span>+future.get());</div><div class="line">       <span class="comment">//get()方法会阻塞，直到子线程执行结束才返回</span></div><div class="line"></div><div class="line"> 　　 &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">　　　　ex.printStackTrace();</div><div class="line">　　　&#125;</div><div class="line"></div><div class="line">　　&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>————————————–三种创建线程方法对比————————————–</strong></p>
<p>实现Runnable和实现Callable接口的方式基本相同，不过是后者执行call()方法有返回值，后者线程执行体run()方法无返回值，因此可以把这两种方式归为一种这种方式与继承Thread类的方法之间的差别如下：</p>
<p>1、线程只是实现Runnable或实现Callable接口，还可以继承其他类。</p>
<p>2、这种方式下，多个线程可以共享一个target对象，非常适合多线程处理同一份资源的情形。</p>
<p>3、但是编程稍微复杂，如果需要访问当前线程，必须调用Thread.currentThread()方法。</p>
<p>4、继承Thread类的线程类不能再继承其他父类（Java单继承决定）。</p>
<p>注：一般推荐采用实现接口的方式来创建多线程</p>
<h2 id="sleep-、join（）、yield（）有什么区别"><a href="#sleep-、join（）、yield（）有什么区别" class="headerlink" title="sleep() 、join（）、yield（）有什么区别"></a>sleep() 、join（）、yield（）有什么区别</h2><p>sleep():方法导致了程序暂停执行指定的时间，让出cpu给其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态，但不会释放“锁标志”，不推荐使用。</p>
<p>wait():在其他线程调用对象的notify或notifyAll方法前，导致当前线程等待。线程会释放掉它所占有的“锁标志”，从而使别的线程有机会抢占该锁。</p>
<p>yield():暂停当前正在执行的线程对象。yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。yield()只能使同优先级或更高优先级的线程有执行的机会。</p>
<p>join():等待调用join方法的线程结束，再继续执行。</p>
<p>sleep是针对于thread对象，wait是针对于Object对象。</p>
<h2 id="ConcurrentHashMap如何保证线程安全"><a href="#ConcurrentHashMap如何保证线程安全" class="headerlink" title="ConcurrentHashMap如何保证线程安全"></a>ConcurrentHashMap如何保证线程安全</h2><p>JDK 1.7及以前：</p>
<p>ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对hash表的不同部分进行的修改。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的hash table，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。</p>
<p>JDK 1.8：</p>
<p>Segment虽保留，但已经简化属性，仅仅是为了兼容旧版本。</p>
<p>插入时使用CAS算法：unsafe.compareAndSwapInt(this, valueOffset, expect, update)。 CAS(Compare And Swap)意思是如果valueOffset位置包含的值与expect值相同，则更新valueOffset位置的值为update，并返回true，否则不更新，返回false。插入时不允许key或value为null</p>
<p>与Java8的HashMap有相通之处，底层依然由“数组”+链表+红黑树；</p>
<p>底层结构存放的是TreeBin对象，而不是TreeNode对象；</p>
<p>CAS作为知名无锁算法，那ConcurrentHashMap就没用锁了么？当然不是，当hash值与链表的头结点相同还是会synchronized上锁，锁链表。</p>
<h2 id="new与newInstance-的区别"><a href="#new与newInstance-的区别" class="headerlink" title="new与newInstance()的区别"></a>new与newInstance()的区别</h2><ul>
<li>new是一个关键字，它是调用new指令创建一个对象，然后调用构造方法来初始化这个对象，可以使用带参数的构造器</li>
<li>newInstance()是Class的一个方法，在这个过程中，是先取了这个类的不带参数的构造器Constructor，然后调用构造器的newInstance方法来创建对象。</li>
<li>Class.newInstance不能带参数，如果要带参数需要取得对应的构造器，然后调用该构造器的Constructor.newInstance(Object … initargs)方法</li>
</ul>
<h2 id="JDK中用到的设计模式"><a href="#JDK中用到的设计模式" class="headerlink" title="JDK中用到的设计模式"></a>JDK中用到的设计模式</h2><ul>
<li>装饰模式：java.io</li>
<li>单例模式：Runtime类</li>
<li>简单工厂模式：Integer.valueOf方法</li>
<li>享元模式：String常量池、Integer.valueOf(int i)、Character.valueOf(char c)</li>
<li>迭代器模式：Iterator</li>
<li>职责链模式：ClassLoader的双亲委派模型</li>
<li>解释器模式：正则表达式java.util.regex.Pattern</li>
</ul>
<h2 id="hashCode-amp-amp-equals"><a href="#hashCode-amp-amp-equals" class="headerlink" title="hashCode() &amp;&amp; equals()"></a>hashCode() &amp;&amp; equals()</h2><p><code>hashcode()</code> 返回该对象的哈希码值，支持该方法是为哈希表提供一些优点，例如，<code>java.util.Hashtable</code> 提供的哈希表。</p>
<p>在 Java 应用程序执行期间，在同一对象上多次调用 <code>hashCode</code> 方法时，必须一致地返回相同的整数，前提是对象上 <code>equals</code> 比较中所用的信息没有被修改（<code>equals</code>默认返回对象地址是否相等）。如果根据 <code>equals(Object)</code>方法，两个对象是相等的，那么在两个对象中的每个对象上调用 <code>hashCode</code> 方法都必须生成相同的整数结果。</p>
<p>以下情况不是必需的：如果根据 <code>equals(java.lang.Object)</code> 方法，两个对象不相等，那么在两个对象中的任一对象上调用 <code>hashCode</code> 方法必定会生成不同的整数结果。但是，<strong>程序员应该知道，为不相等的对象生成不同整数结果可以提高哈希表的性能</strong>。</p>
<p>实际上，由 <code>Object</code> 类定义的 <code>hashCode</code> 方法确实会针对不同的对象返回不同的整数。（<strong>这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 JavaTM 编程语言不需要这种实现技巧I</strong>。）</p>
<ul>
<li><strong>hashCode的存在主要是用于查找的快捷性</strong>，如 Hashtable，HashMap等，hashCode 是用来在散列存储结构中确定对象的存储地址的；</li>
<li>如果两个对象相同，就是适用于 <code>equals(java.lang.Object)</code> 方法，那么这两个对象的 <code>hashCode</code> 一定要相同；</li>
<li>如果对象的 <code>equals</code> 方法被重写，那么对象的 <code>hashCode</code> 也尽量重写，并且产生 <code>hashCode</code>使用的对象，一定要和 <code>equals</code> 方法中使用的一致，否则就会违反上面提到的第2点；</li>
<li><strong>两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”</strong>。</li>
</ul>
<h2 id="Object类的finalize方法的实现原理"><a href="#Object类的finalize方法的实现原理" class="headerlink" title="Object类的finalize方法的实现原理"></a>Object类的finalize方法的实现原理</h2><p>Object 类提供的实现不Finalize方法和垃圾回收器将派生的类型不标记Object终止除非它们将覆盖Finalize方法。</p>
<p>如果类型未重写Finalize方法，则垃圾回收器会将类型的每个实例的条目添加到调用终止队列中的内部结构。 终止队列中包含垃圾回收器才能回收其内存之前，必须运行其终止代码托管堆中的所有对象的条目。 然后，垃圾回收器调用Finalize在以下情况下自动的方法︰</p>
<ul>
<li>垃圾回收器发现，一个对象不可访问，除非您通过调用从终止豁免已对象后 GC.SuppressFinalize 方法。</li>
<li>在关闭应用程序域中，除非该对象是免于终止的对象。 在关闭期间，终止甚至仍是可访问的对象。</li>
</ul>
<p>Finalize将自动调用一次在给定实例中，除非的对象重新注册通过使用一种机制，如GC.ReRegisterForFinalize和GC.SuppressFinalize尚未随后调用方法。</p>
<p>Finalize操作具有以下限制︰</p>
<ul>
<li>终结器执行时的确切时间不确定。 若要确保确定性释放资源，对你的类的实例实现<strong>Close</strong>方法，或者提供IDisposable.Dispose实现。</li>
<li>两个对象的终结器不保证任何特定顺序运行即使另一个对象引用。 也就是说，如果对象 A 具有对对象 B 的引用，并且二者的终结器，对象 B 可能已经被终结的对象 A 终结器启动时。</li>
<li>终结器运行的线程未指定。</li>
</ul>
<p>Finalize方法可能无法运行完成，或可能根本不运行下列异常情况下︰</p>
<ul>
<li>如果另一个终结器会无限期阻止 （进入无限循环，尝试获取的锁，它可以永远不会获取，等等）。 运行时尝试运行终结器来完成，因为其他终结器可能不会调用终结器块如果无限期。</li>
<li>如果不提供机会清理的运行时，进程将终止。 在这种情况下，运行时的第一个通知的进程是终止的一个 DLL_PROCESS_DETACH 通知。</li>
</ul>
<p>运行时将继续完成在关闭过程的对象，仅当可终结对象数目继续减少。</p>
<p>如果Finalize或的重写Finalize引发异常，并且运行时不承载的应用程序将替代默认策略，运行时终止进程，且无活动<strong>try</strong>/<strong>finally</strong>执行块或终结器。如果终结器无法释放或销毁资源，则此行为确保处理完整性。</p>
<p><strong>实施者注意事项</strong></p>
<p>应重写Finalize类使用非托管的资源，如文件句柄或数据库必须在垃圾回收期间放弃使用它们的托管的对象时释放的连接。</p>
<p>Lock是Java 5以后引入的新的API，和关键字synchronized相比主要相同点：Lock 能完成synchronized所实现的所有功能；主要不同点：Lock有比synchronized更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且最好在finally 块中释放（这是释放外部资源的最好的地方）。</p>
<h2 id="CAS-乐观锁"><a href="#CAS-乐观锁" class="headerlink" title="CAS 乐观锁"></a>CAS 乐观锁</h2><p>CAS是通过unsafe类的compareAndSwap方法实现的；方法参数作用，第一个参数是要修改的对象，第二个参数是对象中要修改变量的偏移量，第三个参数是修改之前的值，第四个参数是预想修改后的值；CAS指令有缺点，存在ABA问题。</p>
<h2 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h2><p>就是一个变量V，如果变量V初次读取的时候是A，并且在准备赋值的时候检查到它仍然是A，那能说明它的值没有被其他线程修改过了吗？如果在这段期间它的值曾经被改成了B，然后又改回A，那CAS操作就会误认为它从来没有被修改过。解决：针对这种情况，java并发包中提供了一个带有标记的原子引类”AtomicStampedReference”，它可以通过控制变量值的版本来保证CAS的正确性。</p>
<h2 id="CAS有什么缺陷，该如何解决"><a href="#CAS有什么缺陷，该如何解决" class="headerlink" title="CAS有什么缺陷，该如何解决"></a>CAS有什么缺陷，该如何解决</h2><p>CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作</p>
<ol>
<li><strong>ABA问题</strong>。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。<strong>从Java1</strong>.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值</li>
<li><strong>循环时间长开销大</strong>。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</li>
<li><strong>只能保证一个共享变量的原子操作</strong>。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了<strong>AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</strong></li>
</ol>
<h2 id="乐观锁的业务场景及实现方式"><a href="#乐观锁的业务场景及实现方式" class="headerlink" title="乐观锁的业务场景及实现方式"></a>乐观锁的业务场景及实现方式</h2><p>1.我们经常会在访问数据库的时候用到锁，怎么实现乐观锁和悲观锁呢？以Hibernate为例，可以通过为记录添加版本或时间戳字段来实现乐观锁。可以用session.Lock()锁定对象来实现悲观锁（本质上就是执行了SELECT * FROM t FOR UPDATE语句）。</p>
<p>2.如果把乐观锁看作是关于冲突检测的，那么悲观锁就是关于冲突避免的。在实际应用的源代码控制系统中，</p>
<p>这两种策略都可以被使用，但是现在大多数源代码开发者更倾向于使用乐观锁策略。（有一种很有道理的说法：乐观锁并不是真正的锁定，但是这种叫法很方便并且广泛流传，以至于不容忽略。）</p>
<p>在乐观锁和悲观锁之间进行选择的标准是：冲突的频率与严重性。如果冲突很少，或者冲突的后果不会很严重，那么通常情况下应该选择乐观锁，因为它能得到更好的并发性，而且更容易实现。但是，如果冲突的结果对于用户来说痛苦的，那么就需要使用悲观策略。</p>
<h2 id="访问修饰符public-private-protected-以及不写时的区别"><a href="#访问修饰符public-private-protected-以及不写时的区别" class="headerlink" title="访问修饰符public,private,protected,以及不写时的区别"></a>访问修饰符public,private,protected,以及不写时的区别</h2><table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同 包</th>
<th>子 类</th>
<th>其他包</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>default</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>类的成员不写访问修饰时默认为default。默认对于同一个包中的其他类相当于公开（public），对于不是同一个包中的其他类相当于私有（private）。受保护（protected）对子类相当于公开，对不是同一包中的没有父子关系的类相当于私有。Java中，外部类的修饰符只能是public或默认，类的成员（包括内部类）的修饰符可以是以上四种。</p>
<h2 id="String-是不是最基本的数据类型"><a href="#String-是不是最基本的数据类型" class="headerlink" title="String 是不是最基本的数据类型"></a>String 是不是最基本的数据类型</h2><p>不是。Java中的基本数据类型只有8个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type），Java 5以后引入的枚举类型也算是一种比较特殊的引用类型。</p>
<h2 id="short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗"><a href="#short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗" class="headerlink" title="short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗"></a>short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗</h2><p>对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型可修改为s1 =(short)(s1 + 1)。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p>
<h2 id="是否可以继承String类"><a href="#是否可以继承String类" class="headerlink" title="是否可以继承String类"></a>是否可以继承String类</h2><p>String 类是final类，不可以被继承。</p>
<p><strong>补充：</strong>继承String本身就是一个错误的行为，对String类型最好的重用方式是关联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）</p>
<h2 id="JVM加载class文件的原理机制"><a href="#JVM加载class文件的原理机制" class="headerlink" title="JVM加载class文件的原理机制"></a>JVM加载class文件的原理机制</h2><p>JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。<br>由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。<br>类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明：</p>
<ul>
<li>Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；</li>
<li>Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；</li>
<li>System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。</li>
</ul>
<h2 id="静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同"><a href="#静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同" class="headerlink" title="静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同"></a>静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同</h2><p>Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化，其语法看起来挺诡异的，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 扑克类（一副扑克）</div><div class="line"> * <span class="doctag">@author</span> 骆昊</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] suites = &#123;<span class="string">"黑桃"</span>, <span class="string">"红桃"</span>, <span class="string">"草花"</span>, <span class="string">"方块"</span>&#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] faces = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Card[] cards;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造器</div><div class="line">     * </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Poker</span><span class="params">()</span> </span>&#123;</div><div class="line">        cards = <span class="keyword">new</span> Card[<span class="number">52</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; suites.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; faces.length; j++) &#123;</div><div class="line">                cards[i * <span class="number">13</span> + j] = <span class="keyword">new</span> Card(suites[i], faces[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 洗牌 （随机乱序）</div><div class="line">     * </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, len = cards.length; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">int</span> index = (<span class="keyword">int</span>) (Math.random() * len);</div><div class="line">            Card temp = cards[index];</div><div class="line">            cards[index] = cards[i];</div><div class="line">            cards[i] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发牌</div><div class="line">     * <span class="doctag">@param</span> index 发牌的位置</div><div class="line">     * </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Card <span class="title">deal</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cards[index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 卡片类（一张扑克）</div><div class="line">     * [内部类]</div><div class="line">     * <span class="doctag">@author</span> 骆昊</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String suite;   <span class="comment">// 花色</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> face;       <span class="comment">// 点数</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">(String suite, <span class="keyword">int</span> face)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.suite = suite;</div><div class="line">            <span class="keyword">this</span>.face = face;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            String faceStr = <span class="string">""</span>;</div><div class="line">            <span class="keyword">switch</span>(face) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>: faceStr = <span class="string">"A"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">11</span>: faceStr = <span class="string">"J"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">12</span>: faceStr = <span class="string">"Q"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">13</span>: faceStr = <span class="string">"K"</span>; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: faceStr = String.valueOf(face);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> suite + faceStr;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​ 测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PokerTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Poker poker = <span class="keyword">new</span> Poker();</div><div class="line">        poker.shuffle();                <span class="comment">// 洗牌</span></div><div class="line">        Poker.Card c1 = poker.deal(<span class="number">0</span>);  <span class="comment">// 发第一张牌</span></div><div class="line">        <span class="comment">// 对于非静态内部类Card</span></div><div class="line">        <span class="comment">// 只有通过其外部类Poker对象才能创建Card对象</span></div><div class="line">        Poker.Card c2 = poker.new Card(<span class="string">"红心"</span>, <span class="number">1</span>);    <span class="comment">// 自己创建一张牌</span></div><div class="line"></div><div class="line">        System.out.println(c1);     <span class="comment">// 洗牌后的第一张</span></div><div class="line">        System.out.println(c2);     <span class="comment">// 打印: 红心A</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GC是什么？为什么要有GC？"><a href="#GC是什么？为什么要有GC？" class="headerlink" title="GC是什么？为什么要有GC？"></a>GC是什么？为什么要有GC？</h2><p>GC是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。Java程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：System.gc() 或Runtime.getRuntime().gc() ，但JVM可以屏蔽掉显示的垃圾回收调用。<br>垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低优先级的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。在Java诞生初期，垃圾回收是Java最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过境迁，如今Java的垃圾回收机制已经成为被诟病的东西。移动智能终端用户通常觉得iOS的系统比Android系统有更好的用户体验，其中一个深层次的原因就在于Android系统中垃圾回收的不可预知性。</p>
<p><strong>补充：</strong>垃圾回收机制有很多种，包括：分代复制垃圾回收、标记垃圾回收、增量垃圾回收等方式。标准的Java进程既有栈又有堆。栈保存了原始型局部变量，堆保存了要创建的对象。Java平台对堆内存回收和再利用的基本算法被称为标记和清除，但是Java对其进行了改进，采用“分代式垃圾收集”。这种方法会跟Java对象的生命周期将堆内存划分为不同的区域，在垃圾收集过程中，可能会将对象移动到不同区域： </p>
<p>伊甸园（Eden）：这是对象最初诞生的区域，并且对大多数对象来说，这里是它们唯一存在过的区域。 </p>
<p>幸存者乐园（Survivor）：从伊甸园幸存下来的对象会被挪到这里。 </p>
<p>终身颐养园（Tenured）：这是足够老的幸存对象的归宿。年轻代收集（Minor-GC）过程是不会触及这个地方的。当年轻代收集不能把对象放进终身颐养园时，就会触发一次完全收集（Major-GC），这里可能还会牵扯到压缩，以便为大对象腾出足够的空间。</p>
<h2 id="String-s-new-String-“xyz”-创建了几个字符串对象"><a href="#String-s-new-String-“xyz”-创建了几个字符串对象" class="headerlink" title="String s = new String(“xyz”);创建了几个字符串对象"></a>String s = new String(“xyz”);创建了几个字符串对象</h2><p>两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。</p>
<h2 id="如何实现字符串的反转及替换"><a href="#如何实现字符串的反转及替换" class="headerlink" title="如何实现字符串的反转及替换"></a>如何实现字符串的反转及替换</h2><p>方法很多，可以自己写实现也可以使用String或StringBuffer/StringBuilder中的方法。有一道很常见的面试题是用递归实现字符串反转，代码如下所示：</p>
<p>public static String reverse(String originStr) {<br>​        if(originStr == null || originStr.length() &lt;= 1)<br>​            return originStr;<br>​        return reverse(originStr.substring(1)) + originStr.charAt(0);<br>​    }</p>
<h2 id="List、Set、Map是否继承自Collection接口"><a href="#List、Set、Map是否继承自Collection接口" class="headerlink" title="List、Set、Map是否继承自Collection接口"></a>List、Set、Map是否继承自Collection接口</h2><p>List、Set 是，Map 不是。Map是键值对映射容器，与List和Set有明显的区别，而Set存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List是线性结构的容器，适用于按数值索引访问元素的情形。</p>
<h2 id="List、Map、Set三个接口存取元素时，各有什么特点"><a href="#List、Map、Set三个接口存取元素时，各有什么特点" class="headerlink" title="List、Map、Set三个接口存取元素时，各有什么特点"></a>List、Map、Set三个接口存取元素时，各有什么特点</h2><p>List以特定索引来存取元素，可以有重复元素。Set不能存放重复元素（用对象的equals()方法来区分元素是否重复）。Map保存键值对（key-value pair）映射，映射关系可以是一对一或多对一。Set和Map容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为O(1)，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达到排序和去重的效果。</p>
<h2 id="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B"><a href="#当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B" class="headerlink" title="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B"></a>当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B</h2><p>不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的synchronized修饰符要求执行方法时要获得对象的锁，如果已经进入A方法说明对象锁已经被取走，那么试图进入B方法的线程就只能在等锁池（<strong>注意不是等待池哦</strong>）中等待对象的锁。</p>
<h2 id="线程同步以及线程调度相关的方法"><a href="#线程同步以及线程调度相关的方法" class="headerlink" title="线程同步以及线程调度相关的方法"></a>线程同步以及线程调度相关的方法</h2><ul>
<li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁； </li>
<li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常； </li>
<li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关； </li>
<li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</li>
</ul>
<h2 id="启动一个线程是调用run-还是start-方法"><a href="#启动一个线程是调用run-还是start-方法" class="headerlink" title="启动一个线程是调用run()还是start()方法"></a>启动一个线程是调用run()还是start()方法</h2><p>启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。</p>
<h2 id="Java中有几种类型的流"><a href="#Java中有几种类型的流" class="headerlink" title="Java中有几种类型的流"></a>Java中有几种类型的流</h2><p>字节流和字符流。字节流继承于InputStream、OutputStream，字符流继承于Reader、Writer。在java.io 包中还有许多其他的流，主要是为了提高性能和使用方便。关于Java的I/O需要注意的有两点：一是两种对称性（输入和输出的对称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢模式）。另外Java中的流不同于C#的是它只有一个维度一个方向。</p>
<h2 id="在项目中哪些地方用到了XML"><a href="#在项目中哪些地方用到了XML" class="headerlink" title="在项目中哪些地方用到了XML"></a>在项目中哪些地方用到了XML</h2><p>XML的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML将数据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再从XML文件中还原相关信息进行处理，XML曾经是异构系统间交换数据的事实标准，但此项功能几乎已经被JSON（JavaScript Object Notation）取而代之。当然，目前很多软件仍然使用XML来存储配置信息，我们在很多项目中通常也会将作为配置信息的硬代码写在XML文件中，Java的很多框架也是这么做的，而且这些框架都选择了<a href="http://www.dom4j.org/" target="_blank" rel="external">dom4j</a>作为处理XML的工具，因为Sun公司的官方API实在不怎么好用。</p>
<h2 id="vector、ArrayList、LinkedList-的区别是什么"><a href="#vector、ArrayList、LinkedList-的区别是什么" class="headerlink" title="vector、ArrayList、LinkedList 的区别是什么"></a>vector、ArrayList、LinkedList 的区别是什么</h2><p>vector是同步的，arraylist和linkedlist不是同步的。底层方面，vector与arraylist都是基于object[]array实现的，但考虑vector线程安全，所以arraylist效率上回比vector较快。元素随机访问上，vector与arraylist是基本相同的，时间复杂度是O(1)，linkedlist的随机访问元素的复杂度为O(n)。但在插入删除数据上，linkedlist则比arraylist要快很多。linkedlist比arraylist更占内存，因为linkedlist每个节点上还要存储对前后两个节点的引用。</p>
<h2 id="NIO和传统的IO有什么区别"><a href="#NIO和传统的IO有什么区别" class="headerlink" title="NIO和传统的IO有什么区别"></a>NIO和传统的IO有什么区别</h2><p><strong>IO是面向流的，NIO是面向块（缓冲区）的。</strong></p>
<p>IO面向流的操作一次一个字节地处理数据。一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。，导致了数据的读取和写入效率不佳。</p>
<p>NIO面向块的操作在一步中产生或者消费一个数据块。按块处理数据比按(流式的)字节处理数据要快得多，同时数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。通俗来说，NIO采取了“预读”的方式，当你读取某一部分数据时，他就会猜测你下一步可能会读取的数据而预先缓冲下来。</p>
<p><strong>IO是阻塞的，NIO是非阻塞的</strong></p>
<p>对于传统的IO，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。</p>
<p>而对于NIO，使用一个线程发送读取数据请求，没有得到响应之前，线程是空闲的，此时线程可以去执行别的任务，而不是像IO中那样只能等待响应完成。</p>
<p><strong>NIO和IO适用场景</strong></p>
<p>NIO是为弥补传统IO的不足而诞生的，但是尺有所短寸有所长，NIO也有缺点，因为NIO是面向缓冲区的操作，每一次的数据处理都是对缓冲区进行的，那么就会有一个问题，在数据处理之前必须要判断缓冲区的数据是否完整或者已经读取完毕，如果没有，假设数据只读取了一部分，那么对不完整的数据处理没有任何意义。所以每次数据处理之前都要检测缓冲区数据。</p>
<p><strong>那么NIO和IO各适用的场景是什么呢？</strong></p>
<p>如果需要管理同时打开的成千上万个连接，这些连接每次只是发送少量的数据，例如聊天服务器，这时候用NIO处理数据可能是个很好的选择。</p>
<p>而如果只有少量的连接，而这些连接每次要发送大量的数据，这时候传统的IO更合适。使用哪种处理数据，需要在数据的响应等待时间和检查缓冲区数据的时间上作比较来权衡选择。</p>
<p><strong>通俗解释，最后，对于NIO和传统IO</strong></p>
<p>有一个网友讲的生动的例子：</p>
<p>以前的流总是堵塞的，一个线程只要对它进行操作，其它操作就会被堵塞，也就相当于水管没有阀门，你伸手接水的时候，不管水到了没有，你就都只能耗在接水（流）上。</p>
<p>nio的Channel的加入，相当于增加了水龙头（有阀门），虽然一个时刻也只能接一个水管的水，但依赖轮换策略，在水量不大的时候，各个水管里流出来的水，都可以得到妥</p>
<p>善接纳，这个关键之处就是增加了一个接水工，也就是Selector，他负责协调，也就是看哪根水管有水了的话，在当前水管的水接到一定程度的时候，就切换一下：临时关上当</p>
<p>前水龙头，试着打开另一个水龙头（看看有没有水）。</p>
<p>当其他人需要用水的时候，不是直接去接水，而是事前提了一个水桶给接水工，这个水桶就是Buffer。也就是，其他人虽然也可能要等，但不会在现场等，而是回家等，可以做</p>
<p>其它事去，水接满了，接水工会通知他们。</p>
<p>这其实也是非常接近当前社会分工细化的现实，也是统分利用现有资源达到并发效果的一种很经济的手段，而不是动不动就来个并行处理，虽然那样是最简单的，但也是最浪费资源的方式</p>
<h2 id="如何通过反射创建对象"><a href="#如何通过反射创建对象" class="headerlink" title="如何通过反射创建对象"></a>如何通过反射创建对象</h2><ul>
<li>方法1：通过类对象调用newInstance()方法，例如：String.class.newInstance() </li>
<li>方法2：通过类对象的getConstructor()或getDeclaredConstructor()方法获得构造器（Constructor）对象并调用其newInstance()方法创建对象，例如：String.class.getConstructor(String.class).newInstance(“Hello”);</li>
</ul>
<h2 id="Statement与PreparedStatement的区别-什么是SQL注入，如何防止SQL注入"><a href="#Statement与PreparedStatement的区别-什么是SQL注入，如何防止SQL注入" class="headerlink" title="Statement与PreparedStatement的区别,什么是SQL注入，如何防止SQL注入"></a>Statement与PreparedStatement的区别,什么是SQL注入，如何防止SQL注入</h2><p>使用PreparedStatement可以提升代码的可读性和可维护性，可以尽最大可能提高性能。因为Statement每次执行一个SQL命令都会对其编译，但PreparedStatement则只编译一次。PreparedStatement就类似于流水线生产。另一方面PreparedStatement可以极大提高安全性：它对传递过来的参数进行了强制参数类型转换，确保插入或查询数据时，与底层数据库格式匹配。<br>SQL注入：就是通过将sql命令插入到web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意SQL命令。如sql命令：select id from test where name=’1’ or 1=1; drop table test,但用PreparedStatement就可以避免这种问题。</p>
<h2 id="用Java写一个单例类"><a href="#用Java写一个单例类" class="headerlink" title="用Java写一个单例类"></a>用Java写一个单例类</h2><p>饿汉式单例:</p>
<p>public class Singleton {<br>​    private Singleton(){}<br>​    private static Singleton instance = new Singleton();<br>​    public static Singleton getInstance(){<br>​        return instance;<br>​    }<br>}</p>
<p>懒汉式单例:</p>
<p>public class Singleton {<br>​    private static Singleton instance = null;<br>​    private Singleton() {}<br>​    public static synchronized Singleton getInstance(){<br>​        if (instance == null) instance ＝ new Singleton();<br>​        return instance;<br>​    }<br>}</p>
<h2 id="用Java写一个冒泡排序"><a href="#用Java写一个冒泡排序" class="headerlink" title="用Java写一个冒泡排序"></a>用Java写一个冒泡排序</h2><p>冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 排序器接口(策略模式: 将算法封装到具有共同接口的独立的类中使得它们可以相互替换)</div><div class="line"> * <span class="doctag">@author</span>骆昊</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 排序</div><div class="line">    * <span class="doctag">@param</span> list 待排序的数组</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list)</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 排序</div><div class="line">    * <span class="doctag">@param</span> list 待排序的数组</div><div class="line">    * <span class="doctag">@param</span> comp 比较两个对象的比较器</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list, Comparator&lt;T&gt; comp)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒泡排序</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span>骆昊</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> swapped = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = list.length; i &lt; len &amp;&amp; swapped; ++i) &#123;</div><div class="line">            swapped = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i; ++j) &#123;</div><div class="line">                <span class="keyword">if</span> (list[j].compareTo(list[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    T temp = list[j];</div><div class="line">                    list[j] = list[j + <span class="number">1</span>];</div><div class="line">                    list[j + <span class="number">1</span>] = temp;</div><div class="line">                    swapped = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] list, Comparator&lt;T&gt; comp)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> swapped = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = list.length; i &lt; len &amp;&amp; swapped; ++i) &#123;</div><div class="line">            swapped = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i; ++j) &#123;</div><div class="line">                <span class="keyword">if</span> (comp.compare(list[j], list[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    T temp = list[j];</div><div class="line">                    list[j] = list[j + <span class="number">1</span>];</div><div class="line">                    list[j + <span class="number">1</span>] = temp;</div><div class="line">                    swapped = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="char型变量中能不能存贮一个中文汉字"><a href="#char型变量中能不能存贮一个中文汉字" class="headerlink" title="char型变量中能不能存贮一个中文汉字"></a>char型变量中能不能存贮一个中文汉字</h2><p>char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</p>
<h2 id="用最有效率的方法算出2乘以8等于几"><a href="#用最有效率的方法算出2乘以8等于几" class="headerlink" title="用最有效率的方法算出2乘以8等于几"></a>用最有效率的方法算出2乘以8等于几</h2><p>2&lt;&lt; 3，(左移三位)因为将一个数左移n位，就相当于乘以了2的n次方，那么，一个数乘以8只要将其左移3位即可，而位运算cpu直接支持的，效率最高，所以，2乘以8等於几的最效率的方法是2&lt;&lt; 3。</p>
<h2 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h2><p>在语法定义上的区别：静态变量前要加 static 关键字，而实例变量前则不加。</p>
<p>在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。</p>
<p>例如，对于下面的程序，无论创建多少个实例对象，永远都只分配了一个staticVar变量，并且每创建一个实例对象，这个staticVar就会加1；但是，每创建一个实例对象，就会分配一个instanceVar，即可能分配多个instanceVar，并且每个instanceVar的值都只自加了1次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariantTest</span></span>&#123;</div><div class="line"></div><div class="line">        publicstatic <span class="keyword">int</span> staticVar = <span class="number">0</span>;</div><div class="line"></div><div class="line">        publicint instanceVar = <span class="number">0</span>;</div><div class="line"></div><div class="line">        publicVariantTest()&#123;</div><div class="line"></div><div class="line">              staticVar++;</div><div class="line"></div><div class="line">              instanceVar++;</div><div class="line"></div><div class="line">              System.out.println(staticVar +instanceVar);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="switch语句能否作用在-byte-、-long-和String-上"><a href="#switch语句能否作用在-byte-、-long-和String-上" class="headerlink" title="switch语句能否作用在 byte 、 long 和String 上"></a>switch语句能否作用在 byte 、 long 和String 上</h2><p>在switch（e）中，e只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long和String类型都不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。</p>
<p>switch语句能否作用在String上说错了，Java1.7之后已经支持这种写法了！</p>
<h2 id="如何跳出当前的多重嵌套循环"><a href="#如何跳出当前的多重嵌套循环" class="headerlink" title="如何跳出当前的多重嵌套循环"></a>如何跳出当前的多重嵌套循环</h2><p>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break语句，即可跳出外层循环。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">   <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</div><div class="line">       System.out.println(“i=” + i + “,j=” + j);</div><div class="line">       <span class="keyword">if</span>(j == <span class="number">5</span>) <span class="keyword">break</span> ok;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 另外，我个人通常并不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制，例如，要在二维数组中查找到某个数字。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[][] =&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">boolean</span> found = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length&amp;&amp;!found;i++)       &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</div><div class="line"></div><div class="line">              System.out.println(“i=” + i + “,j=” + j);</div><div class="line"></div><div class="line">              <span class="keyword">if</span>(arr[i][j] ==<span class="number">5</span>) &#123;</div><div class="line"></div><div class="line">                      found =<span class="keyword">true</span>;</div><div class="line"></div><div class="line">                      <span class="keyword">break</span>;</div><div class="line"></div><div class="line">              &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="说说-amp-和-amp-amp-的区别"><a href="#说说-amp-和-amp-amp-的区别" class="headerlink" title="说说&amp;和&amp;&amp;的区别"></a>说说&amp;和&amp;&amp;的区别</h2><p> &amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。</p>
<p>​        &amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str!= null&amp;&amp; !str.equals(s))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&amp;&amp;改为&amp;，则会抛出NullPointerException异常。If(x==33 &amp;++y&gt;0) y会增长，If(x==33 &amp;&amp; ++y&gt;0)不会增长</p>
<p>​        &amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如，0x31 &amp; 0x0f的结果为0x01。</p>
<h2 id="一个”-java”源文件中是否可以包括多个类（不是内部类）有什么限制"><a href="#一个”-java”源文件中是否可以包括多个类（不是内部类）有什么限制" class="headerlink" title="一个”.java”源文件中是否可以包括多个类（不是内部类）有什么限制"></a>一个”.java”源文件中是否可以包括多个类（不是内部类）有什么限制</h2><p>  可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。</p>
<h2 id="可以从一个static方法内部发出对非static方法的调用吗"><a href="#可以从一个static方法内部发出对非static方法的调用吗" class="headerlink" title="可以从一个static方法内部发出对非static方法的调用吗"></a>可以从一个static方法内部发出对非static方法的调用吗</h2><p>不可以。因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个static方法内部发出对非static方法的调用。</p>
<h2 id="Hibernate中怎样实现类之间的关系"><a href="#Hibernate中怎样实现类之间的关系" class="headerlink" title="Hibernate中怎样实现类之间的关系"></a>Hibernate中怎样实现类之间的关系</h2><p>  类与类之间的关系主要体现在表与表之间的关系进行操作，它们都是对对象进行操作，我们在程序中把所有的表与类都映射在一起，它们通过配置文件中的many-to-one、one-to-many、many-to-many进行操作。</p>
<h2 id="Hibernate中的update-和saveOrUpdate-的区别"><a href="#Hibernate中的update-和saveOrUpdate-的区别" class="headerlink" title="Hibernate中的update()和saveOrUpdate()的区别"></a>Hibernate中的update()和saveOrUpdate()的区别</h2><p>saveOrUpdate()：</p>
<p>​    1、如果对象已经在本session中持久化了，不做任何事</p>
<p>​    2、如果另一个与本session关联的对象拥有相同的持久化标识(identifier)，抛出一个异常</p>
<p>​    3、如果对象没有持久化标识(identifier)属性，对其调用save()</p>
<p>​    4、如果对象的持久标识(identifier)表明其是一个新实例化的对象，对其调用save()</p>
<p>​    5、如果对象是附带版本信息的（通过<version>或 <timestamp>）并且版本属性的值表明其是一个新实例化的    对象，调用save()。否则update() 这个对象。</timestamp></version></p>
<p>update() ：是将一个游离状态的实体对象直接更新。</p>
<h2 id="Hibernate的缓存机制"><a href="#Hibernate的缓存机制" class="headerlink" title="Hibernate的缓存机制"></a>Hibernate的缓存机制</h2><ol>
<li>一级缓存：内部缓存存在Hibernate中，属于应用事物级缓存。</li>
<li>二级缓存：应用级缓存、 分布式缓存。使用场景：数据不会被第三方修改、数据大小在可接受范围、数据更新频率低、同一数据被系统频繁使用、非关键数据</li>
<li>引入第三方缓存（如ehcache等）。</li>
</ol>
<h2 id="如何优化Hibernate"><a href="#如何优化Hibernate" class="headerlink" title="如何优化Hibernate"></a>如何优化Hibernate</h2><p>1.使用双向一对多关联，不使用单向一对多</p>
<p>2.灵活使用单向一对多关联</p>
<p>3.不用一对一，用多对一取代</p>
<p>4.配置对象缓存，不使用集合缓存</p>
<p>5.一对多集合使用Bag,多对多集合使用Set</p>
<p>6.继承类使用显式多态</p>
<p>7.表字段要少，表关联不要怕多，有二级缓存撑腰</p>
<h2 id="hibernate的延迟加载和openSessionInView"><a href="#hibernate的延迟加载和openSessionInView" class="headerlink" title="hibernate的延迟加载和openSessionInView"></a>hibernate的延迟加载和openSessionInView</h2><p>延迟加载要在session范围内，用到的时候再加载；</p>
<p>opensessioninview是在web层写了一个filter来打开和关闭session，这样就表示在一次request过程中session一直开着，保证了延迟加载在session中的这个前提。</p>
<h2 id="Mysql-优化"><a href="#Mysql-优化" class="headerlink" title="Mysql 优化"></a>Mysql 优化</h2><p>1.如果明确知道只有一条结果返回，limit1能够提高效率</p>
<p>2.把计算放在业务层而不是数据库层，除了节省数据的 CPU ,还有意想不到的查询缓存优化效果。</p>
<p>3.强制类型转换会全表扫描</p>
<p>4.在属性上进行计算不能命中索引 </p>
<p>5.使用 ENUM 而不是字符串</p>
<p>6.数据分区度不大的字段不宜使用索引</p>
<p>7.负向查询和前导模糊查询不能使用索引</p>
<p>8.用TRUNCATE替代DELETE</p>
<p>9.删除重复记录</p>
<p>10.用Where子句替换HAVING子句</p>
<p>11.用EXISTS替代IN、用NOT EXISTS替代NOT IN</p>
<p>12.用索引提高效率</p>
<p>13.用EXISTS替换DISTINCT</p>
<p>14.用&gt;=替代&gt;</p>
<p>15.用IN来替换OR</p>
<h2 id="Mysql-的交集、差集、并集"><a href="#Mysql-的交集、差集、并集" class="headerlink" title="Mysql 的交集、差集、并集"></a>Mysql 的交集、差集、并集</h2><p>只有并集没有交集差集的关键字。</p>
<p>1.并集</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- UNION  不包含重复数据</span></div><div class="line"><span class="comment">-- UNION ALL  包含重复数据</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>  <span class="keyword">FROM</span> a <span class="keyword">UNION</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>  <span class="keyword">FROM</span> b;</div></pre></td></tr></table></figure>
<p>2.差集</p>
<p>找出在a表中存在的id 但是在b表中不存在的id</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 利用 union</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> (</div><div class="line"><span class="comment">-- 并集</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a.id <span class="keyword">AS</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> a  </div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> B.ID <span class="keyword">AS</span> <span class="keyword">ID</span> <span class="keyword">FROM</span>  b</div><div class="line">)TEMP <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">ID</span> <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">ID</span>) = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 子查询 not in</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> a <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> b);</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 子查询 not exists</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> a <span class="keyword">WHERE</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> b <span class="keyword">WHERE</span> a.id = b.id);</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 左连接判断右表IS NULL</span></div><div class="line"><span class="keyword">SELECT</span> a.id <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span>  b <span class="keyword">ON</span> a.id = b.id <span class="keyword">WHERE</span> b.id <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.id</div></pre></td></tr></table></figure>
<p>3.交集 INTERSECT</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> (</div><div class="line"><span class="comment">-- 并集 </span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a.id <span class="keyword">AS</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> a  </div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> B.ID <span class="keyword">AS</span> <span class="keyword">ID</span> <span class="keyword">FROM</span>  b</div><div class="line">)TEMP <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">ID</span> <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">ID</span>) != <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h2 id="Java内存模型是什么"><a href="#Java内存模型是什么" class="headerlink" title="Java内存模型是什么"></a>Java内存模型是什么</h2><p> Java内存模型规定和指引Java程序在不同的内存架构、CPU和操作系统间有确定性地行为。它在多线程的情况下尤其重要。Java内存模型对一个线程所做的变动能被其它线程可见提供了保证，它们之间是先行发生关系。这个关系定义了一些规则让程序员在并发编程时思路更清晰。比如，先行发生关系确保了：</p>
<p>​        线程内的代码能够按先后顺序执行，这被称为程序次序规则。</p>
<p>​        对于同一个锁，一个解锁操作一定要发生在时间上后发生的另一个锁定操作之前，也叫做管程锁定规则。</p>
<p>​        前一个对volatile的写操作在后一个volatile的读操作之前，也叫volatile变量规则。</p>
<p>​        一个线程内的任何操作必需在这个线程的start()调用之后，也叫作线程启动规则。</p>
<p>​        一个线程的所有操作都会在线程终止之前，线程终止规则。</p>
<p>​        一个对象的终结操作必需在这个对象构造完成之后，也叫对象终结规则。</p>
<p>可传递性</p>
<h2 id="Thread接口和Runnable接口的区别"><a href="#Thread接口和Runnable接口的区别" class="headerlink" title="Thread接口和Runnable接口的区别"></a>Thread接口和Runnable接口的区别</h2><ol>
<li>可以避免由于Java的单继承特性而带来的局限.</li>
<li>使用Runnable实现多线程可以达到资源共享目的。</li>
</ol>
<h2 id="Runnable接口和Callable接口的区别"><a href="#Runnable接口和Callable接口的区别" class="headerlink" title="Runnable接口和Callable接口的区别"></a>Runnable接口和Callable接口的区别</h2><p>Runnable应该是比较熟悉的接口，它只有一个run()函数，用于将耗时操作写在其中，该函数没有返回值，不能将结果返回给客户程序。然后使用某个线程去执行runnable即可实现多线程，Thread类在调用start()函数后就是执行的是Runnable的run()函数。Runnable的声明如下 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Callable与Runnable的功能大致相似，Callable中有一个call()函数，但是call()函数有返回值。</p>
<p>Callable的声明如下 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;  </div><div class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这是一个泛型接口，call()函数返回的类型就是客户程序传递进来的V类型。<br><strong>不同之处：</strong><br>1.Callable可以返回一个类型V，而Runnable不可以；<br>2.Callable能够抛出checked exception,而Runnable不可以；<br>3.Runnable是自从java1.1就有了，而Callable是1.5之后才加上去的；<br>4.Callable和Runnable都可以应用于executors。而Thread类只支持Runnable；<br>Callable与executors联合在一起，在任务完成时可立刻获得一个更新了的Future；而Runable却要自己处理。 </p>
<p>5.加入线程池运行，Runnable使用ExecutorService的execute方法，Callable使用submit方法。</p>
<h2 id="线程池的实现原理"><a href="#线程池的实现原理" class="headerlink" title="线程池的实现原理"></a>线程池的实现原理</h2><p>先启动若干数量的线程，并让这些线程都处于睡眠状态，当客户端有一个新请求时，就会唤醒线程池中的某一个睡眠线程，让它来处理客户端的这个请求，当处理完这个请求后，线程又处于睡眠状态。</p>
<p>节约大量的的系统资源，使得更多的CPU时间和内存用来处理实际的商业应用，而不是频繁的线程创建与销毁。</p>
<h2 id="线程池的几种方式"><a href="#线程池的几种方式" class="headerlink" title="线程池的几种方式"></a>线程池的几种方式</h2><p>Java通过Executors提供四种线程池，分别为：</p>
<ul>
<li>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>
<li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li>
<li>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</li>
<li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>
<li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li>
<li>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</li>
<li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li>
</ul>
<p><strong>(1).newCacheThreadPool</strong></p>
<p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Thread.sleep(index * <span class="number">1000</span>);</div><div class="line">    &#125; </div><div class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">cachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(index);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p>
<p><strong>(2). newFixedThreadPool：</strong></p>
<p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> index = i;</div><div class="line"></div><div class="line">    fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    System.out.println(index);</div><div class="line">    Thread.sleep(<span class="number">2000</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。</p>
<p>定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。可参考PreloadDataCache。</p>
<p><strong>(3).newScheduledThreadPool:</strong></p>
<p>创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</div><div class="line"> scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"delay 3 seconds"</span>);</div><div class="line">&#125;</div><div class="line">&#125;, <span class="number">3</span>, TimeUnit.SECONDS);</div></pre></td></tr></table></figure>
<p>表示延迟3秒执行。</p>
<p>定期执行示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"delay 1 seconds, and excute every 3 seconds"</span>);</div><div class="line">&#125;</div><div class="line">&#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);</div></pre></td></tr></table></figure>
<p>表示延迟1秒后每3秒执行一次。</p>
<p>ScheduledExecutorService比Timer更安全，功能更强大</p>
<p><strong>(4).newSingleThreadExecutor:</strong></p>
<p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</div><div class="line">singleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        System.out.println(index);</div><div class="line">    Thread.sleep(<span class="number">2000</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果依次输出，相当于顺序执行各个任务。</p>
<p>现行大多数GUI程序都是单线程的。Android中单线程可用于数据库操作，文件操作，应用批量安装，应用批量删除等不适合并发但可能IO阻塞性及影响UI线程响应的操作。</p>
<h2 id="线程池的作用"><a href="#线程池的作用" class="headerlink" title="线程池的作用"></a>线程池的作用</h2><p>线程池作用就是限制系统中执行线程的数量。<br>根 据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；少了浪费了系统资源，多了造成系统拥挤效率不高。用线程池控制线程数量，其他线程排 队等候。一个任务执行完毕，再从队列的中取最前面的任务开始执行。若队列中没有等待进程，线程池的这一资源处于等待。当一个新任务需要运行时，如果线程池 中有等待的工作线程，就可以开始运行了；否则进入等待队列。</p>
<h2 id="为什么要使用线程池"><a href="#为什么要使用线程池" class="headerlink" title="为什么要使用线程池"></a>为什么要使用线程池</h2><p>1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</p>
<p>2.可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</p>
<p>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。</p>
<p><strong>比较重要的几个类：</strong></p>
<p>ExecutorService： 真正的线程池接口。</p>
<p>ScheduledExecutorService： 能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。</p>
<p>ThreadPoolExecutor： ExecutorService的默认实现。</p>
<p>ScheduledThreadPoolExecutor： 继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</p>
<p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。</p>
<table>
<thead>
<tr>
<th><strong>newSingleThreadExecutor</strong></th>
<th>创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>newFixedThreadPool</strong></td>
<td>创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</td>
</tr>
<tr>
<td><strong>newCachedThreadPool</strong></td>
<td>创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</td>
</tr>
<tr>
<td><strong>newScheduledThreadPool</strong></td>
<td>创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</td>
</tr>
</tbody>
</table>
<h2 id="synchronized关键字的用法，优缺点"><a href="#synchronized关键字的用法，优缺点" class="headerlink" title="synchronized关键字的用法，优缺点"></a>synchronized关键字的用法，优缺点</h2><p><strong>用法：</strong></p>
<p>指定对象加锁:对给定的对象进行加锁,进入同步代码块要获得给定对象的锁</p>
<p>直接作用于实例方法:相当于对当前实例加锁,进入同步代码块要获得当前实例的锁(这要求创建Thread的时候,要用同一个Runnable的实例才可以)</p>
<p>直接作用于静态方法:相当于给当前类加锁,进入同步代码块前要获得当前类的锁</p>
<p><strong>优缺点：</strong></p>
<p>使用synchronized，当多个线程尝试获取锁时，未获取到锁的线程会不断的尝试获取锁，而不会发生中断，这样会造成性能消耗。而ReentranLock的lockInterruptibly()可以优先相应中断。举例：两个线程A，B，A获得了锁（A.lockInterruptibly（）），B在请求锁的时候发生阻塞，如果调用 B.interrupt()，会中断B的阻塞。</p>
<h2 id="多线程的作用"><a href="#多线程的作用" class="headerlink" title="多线程的作用"></a>多线程的作用</h2><p>（1）发挥多核CPU的优势，提高CPU的利用率（2）防止阻塞，提高效率</p>
<h2 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h2><p>当多个线程访问某一个类（对象或方法）时，这个对象始终都能表现出正确的行为，那么这个类（对象或方法）就是线程安全的。</p>
<h2 id="线程安全级别"><a href="#线程安全级别" class="headerlink" title="线程安全级别"></a>线程安全级别</h2><p>（1）不可变（2）绝对线程安全（3）相对线程安全（4）线程非安全</p>
<h2 id="如何在两个线程之间共享数据"><a href="#如何在两个线程之间共享数据" class="headerlink" title="如何在两个线程之间共享数据"></a>如何在两个线程之间共享数据</h2><p>线程之间数据共享，其实可以理解为线程之间的通信，可以用wait/notify/notifyAll 进行等待和唤醒。</p>
<h2 id="Java中提供了对象的那些级别引用"><a href="#Java中提供了对象的那些级别引用" class="headerlink" title="Java中提供了对象的那些级别引用"></a>Java中提供了对象的那些级别引用</h2><p>在Java中提供了对象的4个级别引用, 分别是强引用、软引用、弱引用以及虚引用。这四个类型的引用中, 只有强类型的引用是包内可见的, 其他级别的引用都是Public, 可以直接被应用程序开发者使用的。</p>
<table>
<thead>
<tr>
<th>强引用</th>
<th>我们在Java中创建的对象引用, 一般都是强类型引用. 这同样意味着当该对象如果有引用存在的情况下, 同时在JVM整个环境中该对象是路径可达的, 那么该对象永远不会被垃圾回收机制回收的。 例如我们创建一个对象<code>Object object = new Object();</code> 该object就是一个强引用. 当强引用的对象占用内存过多, 而又没有释放的时候, 就会出现OOM问题;</th>
</tr>
</thead>
<tbody>
<tr>
<td>软引用</td>
<td>软引用使用的时候需要通过一个软引用对象来进行声明, 软引用对象比强引用稍微弱一点, 通过软引用的对象当出现内存不足的情况的时候, 垃圾回收机制会将该类型的对象进行回收</td>
</tr>
<tr>
<td>弱引用</td>
<td>弱引用使用的时候需要通过一个弱引用对象进行声明。弱引用可以维持对对象的引用, 但是一旦垃圾回收线程工作的时候, 发现一个对象只有弱引用保持的时候, 那么就会对该对象进行垃圾回收.引用类型是一种比软引用弱的易用类型, 在系统GC时, 只要发现一个对象只有弱引用时不管系统堆空间是否足够, 都会将对象回收。但是由于垃圾回收器的线程通常优先级很低, 因此并不一定能够很快发现只有弱引用持有的对象, 在这种情况下, 弱引用对象可以存在很长的时间。一旦弱引用对象被垃圾回收器回收, 那么有一种机制能够保证该弱引用添加到一个注册引用的队列中。</td>
</tr>
<tr>
<td>虚引用</td>
<td>虚引用与其他的引用都不相同, 虚引用并不会决定引用对象的生命周期, 所以虚引用又成为”幽灵引用”。如果一个对象只持有虚引用, 那么该对象就跟没有任何引用一样, 在任何时候都有可能被垃圾回收器回收. 所以没办法在程序中调用它的任何相关函数, 因为存在太多的不确定性。而虚引用主要是用来提供当对象被GC的时候的通知机制. 通过该通知机制我们可以做一些资源回收等方面的工作. 因为对象只存在虚引用完全没有意义, 即在程序中声明一个对象的虚引用完全没有意义, 所以虚引用一定要与Reference队列一起使用, 才能起到对象回收通知机制.</td>
</tr>
</tbody>
</table>
<h2 id="Finalizer对象什么时候会在引用队列中"><a href="#Finalizer对象什么时候会在引用队列中" class="headerlink" title="Finalizer对象什么时候会在引用队列中"></a>Finalizer对象什么时候会在引用队列中</h2><p>对于Java而言： 调用时机：当垃圾回收器要宣告一个对象死亡时，至少要经过两次标记过程：如果对象在进行可达性分析后发现没有和GC Roots相连接的引用链，就会被第一次标记，并且判断是否执行finalizer( )方法，如果对象覆盖finalizer( )方法且未被虚拟机调用过，那么这个对象会被放置在F-Queue队列中，并在稍后由一个虚拟机自动建立的低优先级的Finalizer线程区执行触发finalizer( )方法，但不承诺等待其运行结束。 </p>
<p>finalization的目的：对象逃脱死亡的最后一次机会。（只要重新与引用链上的任何一个对象建立关联即可。）但是不建议使用，运行代价高昂，不确定性大，且无法保证各个对象的调用顺序。可用try-finally或其他替代。</p>
<h2 id="CountDownLatch-原理"><a href="#CountDownLatch-原理" class="headerlink" title="CountDownLatch 原理"></a>CountDownLatch 原理</h2><p>实现原理：计数器的值由构造函数传入，并用它初始化AQS的state值。当线程调用await方法时会检查state的值是否为0，如果是就直接返回（即不会阻塞）；如果不是，将表示该节点的线程入列，然后将自身阻塞。当其它线程调用countDown方法会将计数器减1，然后判断计数器的值是否为0，当它为0时，会唤醒队列中的第一个节点，由于CountDownLatch使用了AQS的共享模式，所以第一个节点被唤醒后又会唤醒第二个节点，以此类推，使得所有因await方法阻塞的线程都能被唤醒而继续执行。</p>
<p>从源代码和实现原理中可以看出一个CountDownLatch对象，只能使用一次，不能重复使用。</p>
<h2 id="CyclicBarrier-原理"><a href="#CyclicBarrier-原理" class="headerlink" title="CyclicBarrier 原理"></a>CyclicBarrier 原理</h2><p>实现原理：在CyclicBarrier的内部定义了一个Lock对象，每当一个线程调用CyclicBarrier的await方法时，将剩余拦截的线程数减1，然后判断剩余拦截数是否为0，如果不是，进入Lock对象的条件队列等待。如果是，执行barrierAction对象的Runnable方法，然后将锁的条件队列中的所有线程放入锁等待队列中，这些线程会依次的获取锁、释放锁，接着先从await方法返回，再从CyclicBarrier的await方法中返回。</p>
<h2 id="Semaphore-原理"><a href="#Semaphore-原理" class="headerlink" title="Semaphore 原理"></a>Semaphore 原理</h2><p>信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</p>
<p>Semaphore的流程的一些特性：</p>
<p>• 管理一系列许可证，即state共享资源值；<br>• 每acquire一次则state就减1一次，直到许可证数量小于0则阻塞等待；<br>• 释放许可的时候要保证唤醒后继结点，以此来保证线程释放他们所持有的信号量；<br>• 是Synchronized的升级版，因为Synchronized是只有一个许可，而Semaphore就像开了挂一样，可以有多个许可；</p>
<h2 id="Exchanger-原理"><a href="#Exchanger-原理" class="headerlink" title="Exchanger 原理"></a>Exchanger 原理</h2><p>作用：Exchanger类用于两个线程之间交换数据。</p>
<p>换句话说Exchanger提供的是一个交换服务，允许原子性的交换两个（多个）对象，但同时只有一对才会成功。先看一个简单的实例模型。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180406/i3k1g34GGf.png" alt="mark"></p>
<p>在上面的模型中，我们假定一个空的栈（Stack），栈顶（Top）当然是没有元素的。同时我们假定一个数据结构Node，包含一个要交换的元素E和一个要填充的“洞”Node。这时线程T1携带节点node1进入栈（cas_push)，当然这是CAS操作，这样栈顶就不为空了。线程T2携带节点node2进入栈，发现栈里面已经有元素了node1，同时发现node1的hold（Node）为空，于是将自己（node2）填充到node1的hold中（cas_fill）。然后将元素node1从栈中弹出（cas_take）。这样线程T1就得到了node1.hold.item也就是node2的元素e2，线程T2就得到了node1.item也就是e1，从而达到了交换的目的。</p>
<p>算法描述就是下图展示的内容。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180406/jjKBca1jD6.png" alt="mark"></p>
<p>JDK 5就是采用类似的思想实现的Exchanger。JDK 6以后为了支持多线程多对象同时Exchanger了就进行了改造（为了支持更好的并发），采用ConcurrentHashMap的思想，将Stack分割成很多的片段（或者说插槽Slot），线程Id（Thread.getId()）hash相同的落在同一个Slot上，这样在默认32个Slot上就有很好的吞吐量。当然会根据机器CPU内核的数量有一定的优化，有兴趣的可以去了解下Exchanger的源码。</p>
<h2 id="CountDownLatch-与-CyclicBarrier-区别"><a href="#CountDownLatch-与-CyclicBarrier-区别" class="headerlink" title="CountDownLatch 与 CyclicBarrier 区别"></a>CountDownLatch 与 CyclicBarrier 区别</h2><ul>
<li>CountDownLatch：一个或者多个线程，等待其他多个线程完成某件事情之后才能执行；</li>
<li>CyclicBarrier：多个线程互相等待，直到到达同一个同步点，再继续一起执行。</li>
</ul>
<p>对于CountDownLatch来说，重点是“一个线程（多个线程）等待”，而其他的N个线程在完成“某件事情”之后，可以终止，也可以等待。而对于CyclicBarrier，重点是多个线程，在任意一个线程没有完成，所有的线程都必须等待。</p>
<p>CountDownLatch是计数器，线程完成一个记录一个，只不过计数不是递增而是递减，而CyclicBarrier更像是一个阀门，需要所有线程都到达，阀门才能打开，然后继续执行。</p>
<h2 id="线程池中的coreNum和maxNum有什么不同"><a href="#线程池中的coreNum和maxNum有什么不同" class="headerlink" title="线程池中的coreNum和maxNum有什么不同"></a>线程池中的coreNum和maxNum有什么不同</h2><h2 id="在不同的业务场景中，线程池参数如何设置"><a href="#在不同的业务场景中，线程池参数如何设置" class="headerlink" title="在不同的业务场景中，线程池参数如何设置"></a>在不同的业务场景中，线程池参数如何设置</h2><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="https://blogimg.nos-eastchina1.126.net/180406/ImGJ28Gc1d.png" alt="mark"></p>
<p>上图是一个线程的生命周期状态流转图，很清楚的描绘了一个线程从创建到终止的过程。</p>
<p>这些状态的枚举值都定义在java.lang.Thread.State下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</div><div class="line">    NEW,</div><div class="line">    RUNNABLE,</div><div class="line">    BLOCKED,</div><div class="line">    WAITING,</div><div class="line">    TIMED_WAITING,</div><div class="line">    TERMINATED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NEW：毫无疑问表示的是刚创建的线程，还没有开始启动。</p>
<p>RUNNABLE:  表示线程已经触发start()方式调用，线程正式启动，线程处于运行中状态。</p>
<p>BLOCKED：表示线程阻塞，等待获取锁，如碰到synchronized、lock等关键字等占用临界区的情况，一旦获取到锁就进行RUNNABLE状态继续运行。</p>
<p>WAITING：表示线程处于无限制等待状态，等待一个特殊的事件来重新唤醒，如通过wait()方法进行等待的线程等待一个notify()或者notifyAll()方法，通过join()方法进行等待的线程等待目标线程运行结束而唤醒，一旦通过相关事件唤醒线程，线程就进入了RUNNABLE状态继续运行。</p>
<p>TIMED_WAITING：表示线程进入了一个有时限的等待，如sleep(3000)，等待3秒后线程重新进行RUNNABLE状态继续运行。</p>
<p>TERMINATED：表示线程执行完毕后，进行终止状态。</p>
<p>需要注意的是，一旦线程通过start方法启动后就再也不能回到初始NEW状态，线程终止后也不能再回到RUNNABLE状态。</p>
<h2 id="synchronize-实现原理"><a href="#synchronize-实现原理" class="headerlink" title="synchronize 实现原理"></a>synchronize 实现原理</h2><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性</p>
<p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p>
<p>普通同步方法，锁是当前实例对象</p>
<p>静态同步方法，锁是当前类的class对象</p>
<p>同步方法块，锁是括号里面的对象</p>
<h2 id="Lock接口有哪些实现类，使用场景是什么"><a href="#Lock接口有哪些实现类，使用场景是什么" class="headerlink" title="Lock接口有哪些实现类，使用场景是什么"></a>Lock接口有哪些实现类，使用场景是什么</h2><p><strong>Lock接口有三个实现类</strong>，一个是<strong>ReentrantLock</strong>,另两个是ReentrantReadWriteLock类中的两个静态内部类<strong>ReadLock</strong>和<strong>WriteLock</strong>。<br><strong>与互斥锁定相比</strong>，读-写锁定允许对共享数据进行更高级别的并发访问。虽然一次只有一个线程（writer 线程）可以修改共享数据，但在许多情况下，<br>任何数量的线程可以同时读取共享数据（reader 线程）。从理论上讲，与互斥锁定相比，使用读-写锁定所允许的并发性增强将带来更大的性能提高。<br><strong>在实践中</strong>，只有在多处理器上并且只在访问模式适用于共享数据时，才能完全实现并发性增强。——例如，某个最初用数据填充并且之后不经常对其进行<br>修改的 collection，因为经常对其进行搜索（比如搜索某种目录），所以这样的 collection 是使用读-写锁定的理想候选者。</p>
<h2 id="ReentrantLock-的原理"><a href="#ReentrantLock-的原理" class="headerlink" title="ReentrantLock 的原理"></a>ReentrantLock 的原理</h2><p><strong>原理：</strong>可重入锁的原理是在锁内部维护了一个线程标示，标示该锁目前被那个线程占用，然后关联一个计数器，一开始计数器值为0，说明该锁没有被任何线程占用，<br>当一个线程获取了该锁，计数器会变成1，其他线程在获取该锁时候发现锁的所有者不是自己所以被阻塞，<br>但是当获取该锁的线程再次获取锁时候发现锁拥有者是自己会把计数器值+1， 当释放锁后计数器会-1，当计数器为0时候，锁里面的线程标示重置为null,这时候阻塞的线程会获取被唤醒来获取该锁.</p>
<p><strong>ReentrantLock 类实现了Lock</strong> ，它拥有与synchronized 相同的并发性和内存语义，但是添加了类似锁投票、定时锁等候和可中断锁等候的一些特性。</p>
<p>此外，它还提供了在激烈争用情况下更佳的性能。（换句话说，当许多线程都想访问共享资源时，JVM 可以花更少的时候来调度线程，把更多时间用在执行线程上。）</p>
<h2 id="ReentrantLock扩展的功能"><a href="#ReentrantLock扩展的功能" class="headerlink" title="ReentrantLock扩展的功能"></a>ReentrantLock扩展的功能</h2><p><strong>1.实现可轮询的锁请求：</strong></p>
<p>–在内部锁中，死锁是致命的——唯一的恢复方法是重新启动程序，唯一的预防方法是在构建程序时不要出错。而可轮询的锁获取模式具有更完善的错误</p>
<p>恢复机制，可以规避死锁的发生。 </p>
<p>–如果你不能获得所有需要的锁，那么使用可轮询的获取方式使你能够重新拿到控制权，它会释放你已经获得的这些锁，然后再重新尝试。</p>
<p>可轮询的锁获取模式，由tryLock()方法实现。此方法仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。</p>
<p>如果锁不可用，则此方法将立即返回值false。此方法的典型使用语句如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Lock lock = ...;   </div><div class="line"></div><div class="line"><span class="keyword">if</span> (lock.tryLock()) &#123;   </div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;   </div><div class="line"></div><div class="line"><span class="comment">// manipulate protected state   </span></div><div class="line"></div><div class="line">&#125; <span class="keyword">finally</span> &#123;   </div><div class="line"></div><div class="line">lock.unlock();   </div><div class="line"></div><div class="line">&#125;   </div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;   </div><div class="line"></div><div class="line"><span class="comment">// perform alternative actions   </span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2.实现可定时的锁请求</strong></p>
<p>–当使用内部锁时，一旦开始请求，锁就不能停止了，所以内部锁给实现具有时限的活动带来了风险。为了解决这一问题，可以使用定时锁。</p>
<p>当具有时限的活动调用了阻塞方法，定时锁能够在时间预算内设定相应的超时。如果活动在期待的时间内没能获得结果，定时锁能使程序提前返回。</p>
<p>可定时的锁获取模式，由tryLock(long, TimeUnit)方法实现。</p>
<p><strong>3.实现可中断的锁获取请求</strong></p>
<p>–可中断的锁获取操作允许在可取消的活动中使用。lockInterruptibly()方法能够使你获得锁的时候响应中断。</p>
<h2 id="ReentrantLock不好与需要注意的地方"><a href="#ReentrantLock不好与需要注意的地方" class="headerlink" title="ReentrantLock不好与需要注意的地方"></a>ReentrantLock不好与需要注意的地方</h2><p>–lock 必须在 finally 块中释放。否则，如果受保护的代码将抛出异常，锁就有可能永远得不到释放！这一点区别看起来可能没什么，但是实际上，</p>
<p>它极为重要。忘记在 finally 块中释放锁，可能会在程序中留下一个定时炸弹，当有一天炸弹爆炸时，您要花费很大力气才有找到源头在哪。</p>
<p>而使用同步，JVM 将确保锁会获得自动释放.</p>
<p>–当 JVM 用 synchronized 管理锁定请求和释放时，JVM 在生成线程转储时能够包括锁定信息。这些对调试非常有价值，因为它们能标识死锁或者</p>
<p>其他异常行为的来源。 Lock 类只是普通的类，JVM 不知道具体哪个线程拥有 Lock 对象。</p>
<h2 id="synchronized-和java-util-concurrent-locks-Lock的异同"><a href="#synchronized-和java-util-concurrent-locks-Lock的异同" class="headerlink" title="synchronized 和java.util.concurrent.locks.Lock的异同"></a>synchronized 和java.util.concurrent.locks.Lock的异同</h2><p>主要相同点：Lock能完成synchronized所实现的所有功能</p>
<p>主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。Lock还有更强大的功能，例如，它的tryLock方法可以非阻塞方式去拿锁。</p>
<h2 id="介绍下栈和队列"><a href="#介绍下栈和队列" class="headerlink" title="介绍下栈和队列"></a>介绍下栈和队列</h2><p>栈和队列都是动态集合，且在其上进行DELETE操作所移除的元素是预先设定的。在<strong>栈</strong>（stack）中，被删除的是最近插入的元素：栈实现的是一种<strong>后进先出</strong>（last-in, first-out, LIFO)策略。类似地，在队列（queue）中，被删去的总是在集合中存在时间最长的那个元素：队列实现的是一种<strong>先进先出</strong>（first-in, first-out, FIFO)策略。</p>
<h2 id="synchronized、Lock、ReentrantLock、ReadWriteLock"><a href="#synchronized、Lock、ReentrantLock、ReadWriteLock" class="headerlink" title="synchronized、Lock、ReentrantLock、ReadWriteLock"></a>synchronized、Lock、ReentrantLock、ReadWriteLock</h2><p>Lock和synchronized有以下几点不同： </p>
<ol>
<li>Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现； </li>
<li>synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁； </li>
<li>Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断； </li>
<li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。 </li>
<li>Lock可以提高多个线程进行读操作的效率。<br>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</li>
</ol>
<p>ReentrantReadWriteLock相比ReentrantLock的最大区别是：</p>
<p>ReentrantReadWriteLock的读锁是共享锁，任何线程都可以获取，而写锁是独占锁。ReentrantLock不论读写，是独占锁。</p>
<h2 id="介绍下CAS-无锁技术"><a href="#介绍下CAS-无锁技术" class="headerlink" title="介绍下CAS(无锁技术)"></a>介绍下CAS(无锁技术)</h2><p><strong>CAS:</strong> java.util.concurrent包中借助CAS实现了区别于synchronouse同步锁的一种乐观锁。</p>
<p><strong>CAS应用：</strong>CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>
<p><strong>CAS原理:</strong>CAS通过调用JNI的代码实现的。JNI:Java Native Interface为JAVA本地调用，允许java调用其他语言。</p>
<p><strong>CAS缺点:</strong></p>
<p>CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。<strong>ABA问题</strong>，<strong>循环时间长开销大</strong>和<strong>只能保证一个共享变量的原子操作</strong></p>
<h2 id="ThreadPoolExecutor的内部工作原理"><a href="#ThreadPoolExecutor的内部工作原理" class="headerlink" title="ThreadPoolExecutor的内部工作原理"></a>ThreadPoolExecutor的内部工作原理</h2><ol>
<li>如果线程池大小poolSize小于corePoolSize，则创建新线程执行任务。</li>
<li>如果线程池大小poolSize大于corePoolSize，且等待队列未满，则进入等待队列。</li>
<li>如果线程池大小poolSize大于corePoolSize且小于maximumPoolSize，且等待队列已满，则创建新线程执行任务。</li>
<li>如果线程池大小poolSize大于corePoolSize且大于maximumPoolSize，且等待队列已满，则调用拒绝策略来处理该任务。</li>
<li>线程池里的每个线程执行完任务后不会立刻退出，而是会去检查下等待队列里是否还有线程任务需要执行，如果在keepAliveTime里等不到新的任务了，那么线程就会退出。</li>
</ol>
<p>ThreadPoolExecutor线程池中拒绝策略：</p>
<ol>
<li>AbortPolicy：为java线程池默认的阻塞策略，不执行此任务，而且会直接抛出一个执行时异常，切记TreadPoolExecutor.execute需要try catch，否则程序会直接退出。</li>
<li>DiscardPolicy：直接抛弃，任务不执行，空方法</li>
<li>DiscardOldestPolicy：从队列里面抛弃head的一个任务，并再次execute 此任务（task）</li>
<li>CallerRunsPolicy：在调用execute的线程里面执行此command，会阻塞入口。</li>
<li>用户自定义拒绝策略：实现RejectdExecutionHandler，并自己定义策略模式。</li>
</ol>
<h2 id="分布式环境下，怎么保证线程安全"><a href="#分布式环境下，怎么保证线程安全" class="headerlink" title="分布式环境下，怎么保证线程安全"></a>分布式环境下，怎么保证线程安全</h2><h2 id="有哪些类加载器"><a href="#有哪些类加载器" class="headerlink" title="有哪些类加载器"></a>有哪些类加载器</h2><h2 id="能不能自己写一个类叫java-lang-String"><a href="#能不能自己写一个类叫java-lang-String" class="headerlink" title="能不能自己写一个类叫java.lang.String"></a>能不能自己写一个类叫java.lang.String</h2><p>可以，但在应用的时候，需要用自己的类加载器去加载，否则，系统的类加载器永远只是去加载jre.jar包中的那个java.lang.String。由于在tomcat的web应用程序中，都是由webapp自己的类加载器先自己加载WEB-INF/classess目录中的类，然后才委托上级的类加载器加载，如果我们在tomcat的web应用程序中写一个java.lang.String，这时候Servlet程序加载的就是我们自己写的java.lang.String，但是这么干就会出很多潜在的问题，原来所有用了java.lang.String类的都将出现问题。</p>
<p>虽然java提供了endorsed技术，可以覆盖jdk中的某些类，具体做法是….。但是，能够被覆盖的类是有限制范围，反正不包括java.lang这样的包中的类。</p>
<p>例如，运行下面的程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"string"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>报告的错误如下：</p>
<p>java.lang.NoSuchMethodError: main</p>
<p>Exception in thread “main”</p>
<p>这是因为加载了jre自带的java.lang.String，而该类中没有main方法。</p>
<h2 id="介绍下B树、二叉树"><a href="#介绍下B树、二叉树" class="headerlink" title="介绍下B树、二叉树"></a>介绍下B树、二叉树</h2><p><strong>B树：</strong></p>
<p><strong>B树</strong>（英语：B-tree）是一种自平衡的<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="external">树</a>)，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6#.E5.AF.B9.E6.95.B0.E6.97.B6.E9.97.B4" target="_blank" rel="external">对数时间</a>内完成。B树，概括来说是一个一般化的<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="external">二叉查找树</a>（binary search tree），可以拥有多于2个子节点。与<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91" target="_blank" rel="external">自平衡二叉查找树</a>不同，B树为系统大块数据的读写操作做了优化。B树减少定位记录时所经历的中间过程，从而加快存取速度。B树这种数据结构可以用来描述外部存储。这种数据结构常被应用在<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="external">数据库</a>和<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">文件系统</a>的实现上。</p>
<p>概括关键词：自平衡，可以拥有多于2个子节点，适用于数据库和文件系统。</p>
<p><strong>二叉树：</strong></p>
<p>二叉树是一种特殊的有序树：每个节点至多有两个分支（子节点），分支具有左右次序，不能颠倒。<br>两种特殊的二叉树：<br>完全二叉树：除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点（注意是右边，而不能是左边缺少）。<br>满二叉树：每一层都是满的（除了最后一层，这里的最后一层是指叶节点）。</p>
<p><strong>红黑树：</strong></p>
<p><strong>红黑树</strong>（英语：Red–black tree）是一种<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91" target="_blank" rel="external">自平衡二叉查找树</a>。<br>它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：它可以在O(log <em>n</em>)时间内做查找，插入和删除，这里的<em>n</em>是树中元素的数目。</p>
<ul>
<li>红黑树的性质</li>
<li>节点是红色或黑色。</li>
<li>根是黑色。</li>
<li>所有叶子都是黑色（叶子是NIL节点）。</li>
<li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li>
<li>从任一节点到其每个叶子的所有<a href="https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E9%81%93%E8%B7%AF_(%E5%9B%BE%E8%AE%BA" target="_blank" rel="external">简单路径</a>)都包含相同数目的黑色节点。</li>
</ul>
<h2 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h2><p>针对分布式锁的实现，目前比较常用的有以下几种方案：</p>
<p>(1).基于数据库实现分布式锁 </p>
<p>(2).基于缓存（redis，memcached，tair）实现分布式锁</p>
<p>(3).基于Zookeeper实现分布式锁</p>
<table>
<thead>
<tr>
<th>实现方式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据库实现</td>
<td>直接借助数据库，容易理解。</td>
<td>1. 会有各种各样的问题，在解决问题的过程中会使整个方案变得越来越复杂。 2.操作数据库需要一定的开销，性能问题需要考虑。 使用数据库的行级锁并不一定靠谱，尤其是当我们的锁表并不大的时候。</td>
</tr>
<tr>
<td>缓存实现</td>
<td>性能好，实现起来较为方便。</td>
<td>1.通过超时时间来控制锁的失效时间并不是十分的靠谱。</td>
</tr>
<tr>
<td>Zookeeper实现</td>
<td>有效的解决单点问题，不可重入问题，非阻塞问题以及锁无法释放的问题。实现起来较为简单。</td>
<td>1.性能上不如使用缓存实现分布式锁。 需要对ZK的原理有所了解。</td>
</tr>
</tbody>
</table>
<p><strong>三种方法比较：</strong></p>
<p>上面几种方式，哪种方式都无法做到完美。就像CAP一样，在复杂性、可靠性、性能等方面无法同时满足，所以，根据不同的应用场景选择最适合自己的才是王道。</p>
<p><strong>从理解的难易程度角度（从低到高）</strong></p>
<p>数据库 &gt; 缓存 &gt; Zookeeper</p>
<p><strong>从实现的复杂程度角度（从低到高）</strong></p>
<p>Zookeeper &gt;= 缓存 &gt; 数据库</p>
<p><strong>从性能角度（从高到低）</strong></p>
<p>缓存 &gt; Zookeeper &gt;= 数据库</p>
<p><strong>从可靠性角度（从高到低）</strong></p>
<p>Zookeeper &gt; 缓存 &gt; 数据库</p>
<h2 id="分布式session存储解决方案"><a href="#分布式session存储解决方案" class="headerlink" title="分布式session存储解决方案"></a>分布式session存储解决方案</h2><p><strong>1. Session Stick</strong> </p>
<p>Session Stick 方案即将客户端的每次请求都转发至同一台服务器，这就需要负载均衡器能够根据每次请求的会话标识（SessionId）来进行请求转发，如下图所示。 </p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180406/8eB6j61FCb.png" alt="mark"></p>
<p>这种方案实现比较简单，对于Web服务器来说和单机的情况一样。但是可能会带来如下问题：</p>
<ul>
<li>如果有一台服务器宕机或者重启，那么这台机器上的会话数据会全部丢失。</li>
<li>会话标识是应用层信息，那么负载均衡要将同一个会话的请求都保存到同一个Web服务器上的话，就需要进行应用层（第7层）的解析，这个开销比第4层大。</li>
<li>负载均衡器将变成一个有状态的节点，要将会话保存到具体Web服务器的映射。和无状态节点相比，内存消耗更大，容灾方面也会更麻烦。</li>
</ul>
<p><strong>2. Session Replication</strong> </p>
<p>Session Replication 的方案则不对负载均衡器做更改，而是在Web服务器之间增加了会话数据同步的功能，各个服务器之间通过同步保证不同Web服务器之间的Session数据的一致性，如下图所示。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180406/GflJ8EDgFD.png" alt="mark"></p>
<p>Session Replication 方案对负载均衡器不再有要求，但是同样会带来以下问题：</p>
<ul>
<li>同步Session数据会造成额外的网络带宽的开销，只要Session数据有变化，就需要将新产生的Session数据同步到其他服务器上，服务器数量越多，同步带来的网络带宽开销也就越大。</li>
<li>每台Web服务器都需要保存全部的Session数据，如果整个集群的Session数量太多的话，则对于每台机器用于保存Session数据的占用会很严重。</li>
</ul>
<p><strong>3. Session 数据集中存储</strong> </p>
<p>Session 数据集中存储方案则是将集群中的所有Session集中存储起来，Web服务器本身则并不存储Session数据，不同的Web服务器从同样的地方来获取Session，如下图所示。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180406/4aD9AaAj9L.png" alt="mark"></p>
<p>相对于Session Replication方案，此方案的Session数据将不保存在本机，并且Web服务器之间也没有了Session数据的复制，但是该方案存在的问题在于：</p>
<ul>
<li>读写Session数据引入了网络操作，这相对于本机的数据读取来说，问题就在于存在时延和不稳定性，但是通信发生在内网，则问题不大。</li>
<li>如果集中存储Session的机器或集群出现问题，则会影响应用。</li>
</ul>
<p><strong>4. Cookie Based</strong></p>
<p>Cookie Based 方案是将Session数据放在Cookie里，访问Web服务器的时候，再由Web服务器生成对应的Session数据，如下图所示。 </p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180406/Fah17gFI8I.png" alt="mark"></p>
<p>但是Cookie Based 方案依然存在不足：</p>
<ul>
<li>Cookie长度的限制。这会导致Session长度的限制。</li>
<li>安全性。Seesion数据本来是服务端数据，却被保存在了客户端，即使可以加密，但是依然存在不安全性。</li>
<li>带宽消耗。这里不是指内部Web服务器之间的宽带消耗，而是数据中心的整体外部带宽的消耗。</li>
<li>性能影响。每次HTTP请求和响应都带有Seesion数据，对Web服务器来说，在同样的处理情况下，响应的结果输出越少，支持的并发就会越高。</li>
</ul>
<p><strong>总结</strong><br>前面四个方案都是可行的，但是对于大型网站来说，Session Sticky和Session数据集中存储是比较好的方案。</p>
<h2 id="常用的linux命令"><a href="#常用的linux命令" class="headerlink" title="常用的linux命令"></a>常用的linux命令</h2><p>mkdir: 用于新建一个新目录</p>
<p>pwd: 显示当前工作目录</p>
<p>rmdir: 删除给定的目录。</p>
<p>rm: 会删除给定的文件</p>
<p>mv: 命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名。</p>
<p>cat: 用于在标准输出（监控器或屏幕）上查看文件内容</p>
<p>tail: 默认在标准输出上显示给定文件的最后10行内容，可以使用tail -n N 指定在标准输出上显示文件的最后N行内容。</p>
<p>less: 按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。你可以使用Ctrl+F向前翻页，Ctrl+B向后翻页。</p>
<p>grep: 在给定的文件中搜寻指定的字符串。grep -i “” 在搜寻时会忽略字符串的大小写，而grep -r “” 则会在当前工作目录的文件中递归搜寻指定的字符串。</p>
<p>find: 这个命令会在给定位置搜寻与条件匹配的文件。你可以使用find -name 的-name选项来进行区分大小写的搜寻，find -iname 来进行不区分大小写的搜寻。</p>
<p>tar: 命令能创建、查看和提取tar压缩文件。tar -cvf 是创建对应压缩文件，tar -tvf 来查看对应压缩文件，tar -xvf 来提取对应压缩文件。</p>
<p>gzip: 命令创建和提取gzip压缩文件，还可以用gzip -d 来提取压缩文件。</p>
<p>unzip: 对gzip文档进行解压。在解压之前，可以使用unzip -l 命令查看文件内容。</p>
<p>whatis: 会用单行来描述给定的命令，就是解释当前命令。</p>
<p>exit: 用于结束当前的终端会话。</p>
<p>who: 能列出当前登录的用户名。</p>
<p>su: 用于切换不同的用户。即使没有使用密码，超级用户也能切换到其它用户。</p>
<p>uname: 会显示出关于系统的重要信息，如内核名称、主机名、内核版本、处理机类型等等，使用uname -a可以查看所有信息。</p>
<p>df: 查看文件系统中磁盘的使用情况–硬盘已用和可用的存储空间以及其它存储设备。你可以使用df -h将结果以人类可读的方式显示。</p>
<p>ps: 显示系统的运行进程。</p>
<p>top: 命令会默认按照CPU的占用情况，显示占用量较大的进程,可以使用top -u 查看某个用户的CPU使用排名情况。</p>
<p>文章地址：<a href="https://www.jianshu.com/p/0056d671ea6d" target="_blank" rel="external">https://www.jianshu.com/p/0056d671ea6d</a></p>
<p><a href="https://juejin.im/post/5a9f5ce86fb9a028de443ed9" target="_blank" rel="external">https://juejin.im/post/5a9f5ce86fb9a028de443ed9</a></p>
]]></content>
      
        <categories>
            
            <category> 基础面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础线程面试题]]></title>
      <url>/2018/06/03/%E5%9F%BA%E7%A1%80%E7%BA%BF%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="基础线程面试题"><a href="#基础线程面试题" class="headerlink" title="基础线程面试题"></a>基础线程面试题</h1><p><em>摘要：</em> 不管你是新程序员还是老手，你一定在面试中遇到过有关线程的问题。Java语言一个重要的特点就是内置了对并发的支持，让Java大受企业和程序员的欢迎。大多数待遇丰厚的Java开发职位都要求开发者精通多线程技术并且有丰富的Java程序开发、调试、优化经验，所以线程相关的问题在面试中经常会被提到。</p>
<a id="more"></a>
<p>　　在典型的Java面试中， 面试官会从线程的基本概念问起, 如：为什么你需要使用线程， 如何创建线程，用什么方式创建线程比较好（比如：继承thread类还是调用Runnable接口），然后逐渐问到并发问题像在Java并发编程的过程中遇到了什么挑战，Java内存模型，JDK1.5引入了哪些更高阶的并发工具，并发编程常用的设计模式，经典多线程问题如生产者消费者，哲学家就餐，读写器或者简单的有界缓冲区问题。仅仅知道线程的基本概念是远远不够的， 你必须知道如何处理死锁，竞态条件，内存冲突和线程安全等并发问题。掌握了这些技巧，你就可以轻松应对多线程和并发面试了。</p>
<p>　　许多Java程序员在面试前才会去看面试题，这很正常。因为收集面试题和练习很花时间，所以我从许多面试者那里收集了Java多线程和并发相关的50个热门问题。我只收集了比较新的面试题且没有提供全部答案。想必聪明的你对这些问题早就心中有数了， 如果遇到不懂的问题，你可以用Google找到答案。若你实在找不到答案，可以在文章的评论中向我求助。你也可以在这找到一些答案Java线程问答Top 12。</p>
<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>　　线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。程序员可以通过它进行多处理器编程，你可以使用多线程对运算密集型任务提速。比如，如果一个线程完成一个任务要100毫秒，那么用十个线程完成改任务只需10毫秒。Java在语言层面对多线程提供了卓越的支持，它也是一个很好的卖点。欲了解更多详细信息请点击这里。</p>
<h2 id="线程和进程有什么区别"><a href="#线程和进程有什么区别" class="headerlink" title="线程和进程有什么区别"></a>线程和进程有什么区别</h2><p>　　线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。更多详细信息请点击这里。</p>
<h2 id="如何在Java中实现线程"><a href="#如何在Java中实现线程" class="headerlink" title="如何在Java中实现线程"></a>如何在Java中实现线程</h2><p>　　在语言层面有两种方式。java.lang.Thread 类的实例就是一个线程但是它需要调用java.lang.Runnable接口来执行，由于线程类本身就是调用的Runnable接口所以你可以继承java.lang.Thread 类或者直接调用Runnable接口来重写run()方法实现线程。更多详细信息请点击这里.</p>
<h2 id="用Runnable还是Thread"><a href="#用Runnable还是Thread" class="headerlink" title="用Runnable还是Thread"></a>用Runnable还是Thread</h2><p>　　这个问题是上题的后续，大家都知道我们可以通过继承Thread类或者调用Runnable接口来实现线程，问题是，那个方法更好呢？什么情况下使用它？这个问题很容易回答，如果你知道Java不支持类的多重继承，但允许你调用多个接口。所以如果你要继承其他类，当然是调用Runnable接口好了。更多详细信息请点击这里。</p>
<h2 id="Thread-类中的start-和-run-方法有什么区别"><a href="#Thread-类中的start-和-run-方法有什么区别" class="headerlink" title="Thread 类中的start() 和 run() 方法有什么区别"></a>Thread 类中的start() 和 run() 方法有什么区别</h2><p>　　这个问题经常被问到，但还是能从此区分出面试者对Java线程模型的理解程度。start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。更多讨论请点击这里</p>
<h2 id="Runnable和Callable有什么不同"><a href="#Runnable和Callable有什么不同" class="headerlink" title="Runnable和Callable有什么不同"></a>Runnable和Callable有什么不同</h2><p>　　Runnable和Callable都代表那些要在不同的线程中执行的任务。Runnable从JDK1.0开始就有了，Callable是在JDK1.5增加的。它们的主要区别是Callable的 call() 方法可以返回值和抛出异常，而Runnable的run()方法没有这些功能。Callable可以返回装载有计算结果的Future对象。我的博客有更详细的说明。</p>
<h2 id="CyclicBarrier-和-CountDownLatch有什么不同"><a href="#CyclicBarrier-和-CountDownLatch有什么不同" class="headerlink" title="CyclicBarrier 和 CountDownLatch有什么不同"></a>CyclicBarrier 和 CountDownLatch有什么不同</h2><p>　　CyclicBarrier 和 CountDownLatch 都可以用来让一组线程等待其它线程。与 CyclicBarrier 不同的是，CountdownLatch 不能重新使用。点此查看更多信息和示例代码。</p>
<h2 id="Java内存模型是什么"><a href="#Java内存模型是什么" class="headerlink" title="Java内存模型是什么"></a>Java内存模型是什么</h2><p>　　Java内存模型规定和指引Java程序在不同的内存架构、CPU和操作系统间有确定性地行为。它在多线程的情况下尤其重要。Java内存模型对一个线程所做的变动能被其它线程可见提供了保证，它们之间是先行发生关系。这个关系定义了一些规则让程序员在并发编程时思路更清晰。比如，先行发生关系确保了：</p>
<p>线程内的代码能够按先后顺序执行，这被称为程序次序规则。<br>对于同一个锁，一个解锁操作一定要发生在时间上后发生的另一个锁定操作之前，也叫做管程锁定规则。<br>前一个对volatile的写操作在后一个volatile的读操作之前，也叫volatile变量规则。<br>一个线程内的任何操作必需在这个线程的start()调用之后，也叫作线程启动规则。<br>一个线程的所有操作都会在线程终止之前，线程终止规则。<br>一个对象的终结操作必需在这个对象构造完成之后，也叫对象终结规则。<br>可传递性<br>　　我强烈建议大家阅读《Java并发编程实践》第十六章来加深对Java内存模型的理解。</p>
<h2 id="volatile-变量是什么"><a href="#volatile-变量是什么" class="headerlink" title="volatile 变量是什么"></a>volatile 变量是什么</h2><p>　　volatile是一个特殊的修饰符，只有成员变量才能使用它。在Java并发程序缺少同步类的情况下，多线程对成员变量的操作对其它线程是透明的。volatile变量可以保证下一个读取操作会在前一个写操作之后发生，就是上一题的volatile变量规则。点击这里查看更多volatile的相关内容。</p>
<h2 id="什么是线程安全，Vector是一个线程安全类吗"><a href="#什么是线程安全，Vector是一个线程安全类吗" class="headerlink" title="什么是线程安全，Vector是一个线程安全类吗"></a>什么是线程安全，Vector是一个线程安全类吗</h2><p>　　如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分成两组，线程安全和非线程安全的。Vector 是用同步方法来实现线程安全的, 而和它相似的ArrayList不是线程安全的。</p>
<h2 id="什么是竞态条件，举个例子说明"><a href="#什么是竞态条件，举个例子说明" class="headerlink" title="什么是竞态条件，举个例子说明"></a>什么是竞态条件，举个例子说明</h2><p>　　竞态条件会导致程序在并发情况下出现一些bugs。多线程对一些资源的竞争的时候就会产生竞态条件，如果首先要执行的程序竞争失败排到后面执行了，那么整个程序就会出现一些不确定的bugs。这种bugs很难发现而且会重复出现，因为线程间的随机竞争。一个例子就是无序处理，详见答案。</p>
<h2 id="如何停止一个线程"><a href="#如何停止一个线程" class="headerlink" title="如何停止一个线程"></a>如何停止一个线程</h2><p>　　Java提供了很丰富的API但没有为停止线程提供API。JDK 1.0本来有一些像stop(), suspend() 和 resume()的控制方法但是由于潜在的死锁威胁因此在后续的JDK版本中他们被弃用了，之后Java API的设计者就没有提供一个兼容且线程安全的方法来停止一个线程。当run() 或者 call() 方法执行完的时候线程会自动结束,如果要手动结束一个线程，你可以用volatile 布尔变量来退出run()方法的循环或者是取消任务来中断线程。点击这里查看示例代码。</p>
<h2 id="一个线程运行时发生异常会怎样？"><a href="#一个线程运行时发生异常会怎样？" class="headerlink" title="一个线程运行时发生异常会怎样？"></a>一个线程运行时发生异常会怎样？</h2><p>　　这是我在一次面试中遇到的一个很刁钻的Java面试题, 简单的说，如果异常没有被捕获该线程将会停止执行。Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候JVM会使用Thread.getUncaughtExceptionHandler()来查询线程的UncaughtExceptionHandler并将线程和异常作为参数传递给handler的uncaughtException()方法进行处理。</p>
<h2 id="如何在两个线程间共享数据"><a href="#如何在两个线程间共享数据" class="headerlink" title="如何在两个线程间共享数据"></a>如何在两个线程间共享数据</h2><p>　　你可以通过共享对象来实现这个目的，或者是使用像阻塞队列这样并发的数据结构。这篇教程《Java线程间通信》(涉及到在两个线程间共享对象)用wait和notify方法实现了生产者消费者模型。</p>
<h2 id="notify-和-notifyAll有什么区别？"><a href="#notify-和-notifyAll有什么区别？" class="headerlink" title="notify 和 notifyAll有什么区别？"></a>notify 和 notifyAll有什么区别？</h2><p>　　这又是一个刁钻的问题，因为多线程可以等待单监控锁，Java API 的设计人员提供了一些方法当等待条件改变的时候通知它们，但是这些方法没有完全实现。notify()方法不能唤醒某个具体的线程，所以只有一个线程在等待的时候它才有用武之地。而notifyAll()唤醒所有线程并允许他们争夺锁确保了至少有一个线程能继续运行。我的博客有更详细的资料和示例代码。</p>
<h2 id="为什么wait-notify-和-notifyAll这些方法不在thread类里面"><a href="#为什么wait-notify-和-notifyAll这些方法不在thread类里面" class="headerlink" title="为什么wait, notify 和 notifyAll这些方法不在thread类里面"></a>为什么wait, notify 和 notifyAll这些方法不在thread类里面</h2><p>　　这是个设计相关的问题，它考察的是面试者对现有系统和一些普遍存在但看起来不合理的事物的看法。回答这些问题的时候，你要说明为什么把这些方法放在Object类里是有意义的，还有不把它放在Thread类里的原因。一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。如果wait()方法定义在Thread类中，线程正在等待的是哪个锁就不明显了。简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。你也可以查看这篇文章了解更多。</p>
<h2 id="什么是ThreadLocal变量"><a href="#什么是ThreadLocal变量" class="headerlink" title="什么是ThreadLocal变量"></a>什么是ThreadLocal变量</h2><p>　　ThreadLocal是Java里一种特殊的变量。每个线程都有一个ThreadLocal就是每个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。它是为创建代价高昂的对象获取线程安全的好方法，比如你可以用ThreadLocal让SimpleDateFormat变成线程安全的，因为那个类创建代价高昂且每次调用都需要创建不同的实例所以不值得在局部范围使用它，如果为每个线程提供一个自己独有的变量拷贝，将大大提高效率。首先，通过复用减少了代价高昂的对象的创建个数。其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。线程局部变量的另一个不错的例子是ThreadLocalRandom类，它在多线程环境中减少了创建代价高昂的Random对象的个数。查看答案了解更多。</p>
<h2 id="什么是FutureTask"><a href="#什么是FutureTask" class="headerlink" title="什么是FutureTask"></a>什么是FutureTask</h2><p>　　在Java并发程序中FutureTask表示一个可以取消的异步运算。它有启动和取消运算、查询运算是否完成和取回运算结果等方法。只有当运算完成的时候结果才能取回，如果运算尚未完成get方法将会阻塞。一个FutureTask对象可以对调用了Callable和Runnable的对象进行包装，由于FutureTask也是调用了Runnable接口所以它可以提交给Executor来执行。</p>
<h2 id="interrupted-和-isInterruptedd方法的区别"><a href="#interrupted-和-isInterruptedd方法的区别" class="headerlink" title="interrupted 和 isInterruptedd方法的区别"></a>interrupted 和 isInterruptedd方法的区别</h2><p>　　interrupted() 和 isInterrupted()的主要区别是前者会将中断状态清除而后者不会。Java多线程的中断机制是用内部标识来实现的，调用Thread.interrupt()来中断一个线程就会设置中断标识为true。当中断线程调用静态方法Thread.interrupted()来检查中断状态时，中断状态会被清零。而非静态方法isInterrupted()用来查询其它线程的中断状态且不会改变中断状态标识。简单的说就是任何抛出InterruptedException异常的方法都会将中断状态清零。无论如何，一个线程的中断状态有有可能被其它线程调用中断来改变。</p>
<h2 id="为什么wait和notify方法要在同步块中调用"><a href="#为什么wait和notify方法要在同步块中调用" class="headerlink" title="为什么wait和notify方法要在同步块中调用"></a>为什么wait和notify方法要在同步块中调用</h2><p>　　主要是因为Java API强制要求这样做，如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。还有一个原因是为了避免wait和notify之间产生竞态条件。</p>
<h2 id="为什么你应该在循环中检查等待条件"><a href="#为什么你应该在循环中检查等待条件" class="headerlink" title="为什么你应该在循环中检查等待条件"></a>为什么你应该在循环中检查等待条件</h2><p>　　处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。因此，当一个等待线程醒来时，不能认为它原来的等待状态仍然是有效的，在notify()方法调用之后和等待线程醒来之前这段时间它可能会改变。这就是在循环中使用wait()方法效果更好的原因，你可以在Eclipse中创建模板调用wait和notify试一试。如果你想了解更多关于这个问题的内容，我推荐你阅读《Effective Java》这本书中的线程和同步章节。</p>
<h2 id="同步集合与并发集合有什么区别"><a href="#同步集合与并发集合有什么区别" class="headerlink" title="同步集合与并发集合有什么区别"></a>同步集合与并发集合有什么区别</h2><p>　　同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发集合的可扩展性更高。在Java1.5之前程序员们只有同步集合来用且在多线程并发的时候会导致争用，阻碍了系统的扩展性。Java5介绍了并发集合像ConcurrentHashMap，不仅提供线程安全还用锁分离和内部分区等现代技术提高了可扩展性。更多内容详见答案。</p>
<h2 id="堆和栈有什么不同"><a href="#堆和栈有什么不同" class="headerlink" title="堆和栈有什么不同"></a>堆和栈有什么不同</h2><p>　　为什么把这个问题归类在多线程和并发面试题里？因为栈是一块和线程紧密相关的内存区域。每个线程都有自己的栈内存，用于存储本地变量，方法参数和栈调用，一个线程中存储的变量对其它线程是不可见的。而堆是所有线程共享的一片公用内存区域。对象都在堆里创建，为了提升效率线程会从堆中弄一个缓存到自己的栈，如果多个线程使用该变量就可能引发问题，这时volatile 变量就可以发挥作用了，它要求线程从主存中读取变量的值。 更多内容详见答案。</p>
<h2 id="什么是线程池，为什么要使用它"><a href="#什么是线程池，为什么要使用它" class="headerlink" title="什么是线程池，为什么要使用它"></a>什么是线程池，为什么要使用它</h2><p>　　创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变长，而且一个进程能创建的线程数有限。为了避免这些问题，在程序启动的时候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程。从JDK1.5开始，Java API提供了Executor框架让你可以创建不同的线程池。比如单线程池，每次处理一个任务；数目固定的线程池或者是缓存线程池（一个适合很多生存期短的任务的程序的可扩展线程池）。更多内容详见这篇文章。</p>
<h3 id="如何写代码来解决生产者消费者问题？"><a href="#如何写代码来解决生产者消费者问题？" class="headerlink" title="如何写代码来解决生产者消费者问题？"></a>如何写代码来解决生产者消费者问题？</h3><p>　　在现实中你解决的许多线程问题都属于生产者消费者模型，就是一个线程生产任务供其它线程进行消费，你必须知道怎么进行线程间通信来解决这个问题。比较低级的办法是用wait和notify来解决这个问题，比较赞的办法是用Semaphore 或者 BlockingQueue来实现生产者消费者模型，这篇教程有实现它。</p>
<h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><p><a href="http://www.cnblogs.com&amp;iframeId=iframe_0.21145907562000632&quot;" target="_blank" rel="external">http://www.cnblogs.com&amp;iframeId=iframe_0.21145907562000632&quot;</a> frameborder=”0” scrolling=”no” height=”20”&gt;<br>　　Java多线程中的死锁 死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起无法完成任务，死锁的发生必须满足以下四个条件：</p>
<p>互斥条件：一个资源每次只能被一个进程使用。<br>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。<br>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。<br>避免死锁最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁。这篇教程有代码示例和避免死锁的讨论细节。</p>
<h2 id="活锁和死锁有什么区别"><a href="#活锁和死锁有什么区别" class="headerlink" title="活锁和死锁有什么区别"></a>活锁和死锁有什么区别</h2><p>　　这是上题的扩展，活锁和死锁类似，不同之处在于处于活锁的线程或进程的状态是不断改变的，活锁可以认为是一种特殊的饥饿。一个现实的活锁例子是两个人在狭小的走廊碰到，两个人都试着避让对方好让彼此通过，但是因为避让的方向都一样导致最后谁都不能通过走廊。简单的说就是，活锁和死锁的主要区别是前者进程的状态可以改变但是却不能继续执行。</p>
<h2 id="怎么检测一个线程是否拥有锁"><a href="#怎么检测一个线程是否拥有锁" class="headerlink" title="怎么检测一个线程是否拥有锁"></a>怎么检测一个线程是否拥有锁</h2><p>　　我一直不知道我们竟然可以检测一个线程是否拥有锁，直到我参加了一次电话面试。在java.lang.Thread中有一个方法叫holdsLock()，它返回true如果当且仅当当前线程拥有某个具体对象的锁。你可以查看这篇文章了解更多。</p>
<h2 id="如何获取线程堆栈"><a href="#如何获取线程堆栈" class="headerlink" title="如何获取线程堆栈"></a>如何获取线程堆栈</h2><p>　　对于不同的操作系统，有多种方法来获得Java进程的线程堆栈。当你获取线程堆栈时，JVM会把所有线程的状态存到日志文件或者输出到控制台。在Windows你可以使用Ctrl + Break组合键来获取线程堆栈，Linux下用kill -3命令。你也可以用jstack这个工具来获取，它对线程id进行操作，你可以用jps这个工具找到id。</p>
<h2 id="JVM中哪个参数是用来控制线程的栈堆栈小的"><a href="#JVM中哪个参数是用来控制线程的栈堆栈小的" class="headerlink" title="JVM中哪个参数是用来控制线程的栈堆栈小的"></a>JVM中哪个参数是用来控制线程的栈堆栈小的</h2><p>　　这个问题很简单， -Xss参数用来控制线程的堆栈大小。你可以查看JVM配置列表来了解这个参数的更多信息。</p>
<h2 id="synchronized-和-ReentrantLock-有什么不同？"><a href="#synchronized-和-ReentrantLock-有什么不同？" class="headerlink" title="synchronized 和 ReentrantLock 有什么不同？"></a>synchronized 和 ReentrantLock 有什么不同？</h2><p>　　Java在过去很长一段时间只能通过synchronized关键字来实现互斥，它有一些缺点。比如你不能扩展锁之外的方法或者块边界，尝试获取锁时不能中途取消等。Java 5 通过Lock接口提供了更复杂的控制来解决这些问题。 ReentrantLock 类实现了 Lock，它拥有与 synchronized 相同的并发性和内存语义且它还具有可扩展性。你可以查看这篇文章了解更多</p>
<h2 id="有三个线程T1，T2，T3，怎么确保它们按顺序执行？"><a href="#有三个线程T1，T2，T3，怎么确保它们按顺序执行？" class="headerlink" title="有三个线程T1，T2，T3，怎么确保它们按顺序执行？"></a>有三个线程T1，T2，T3，怎么确保它们按顺序执行？</h2><p>　　在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的join()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成。你可以查看这篇文章了解更多。</p>
<h2 id="Thread类中的yield方法有什么作用"><a href="#Thread类中的yield方法有什么作用" class="headerlink" title="Thread类中的yield方法有什么作用"></a>Thread类中的yield方法有什么作用</h2><p>　　Yield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行yield()的线程有可能在进入到暂停状态后马上又被执行。点击这里查看更多yield方法的相关内容。</p>
<h2 id="ConcurrentHashMap的并发度是什么"><a href="#ConcurrentHashMap的并发度是什么" class="headerlink" title="ConcurrentHashMap的并发度是什么"></a>ConcurrentHashMap的并发度是什么</h2><p>　　ConcurrentHashMap把实际map划分成若干部分来实现它的可扩展性和线程安全。这种划分是使用并发度获得的，它是ConcurrentHashMap类构造函数的一个可选参数，默认值为16，这样在多线程情况下就能避免争用。欲了解更多并发度和内部大小调整请阅读我的文章How ConcurrentHashMap works in Java。</p>
<h2 id="Semaphore是什么"><a href="#Semaphore是什么" class="headerlink" title="Semaphore是什么"></a>Semaphore是什么</h2><p>　　Java中的Semaphore是一种新的同步类，它是一个计数信号。从概念上讲，从概念上讲，信号量维护了一个许可集合。如有必要，在许可可用前会阻塞每一个 acquire()，然后再获取该许可。每个 release()添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore只对可用许可的号码进行计数，并采取相应的行动。信号量常常用于多线程的代码中，比如数据库连接池。更多详细信息请点击这里。</p>
<h2 id="如果你提交任务时，线程池队列已满。会时发会生什么"><a href="#如果你提交任务时，线程池队列已满。会时发会生什么" class="headerlink" title="如果你提交任务时，线程池队列已满。会时发会生什么"></a>如果你提交任务时，线程池队列已满。会时发会生什么</h2><p>　　这个问题问得很狡猾，许多程序员会认为该任务会阻塞直到线程池队列有空位。事实上如果一个任务不能被调度执行那么ThreadPoolExecutor’s submit()方法将会抛出一个RejectedExecutionException异常。</p>
<h2 id="线程池中submit-和-execute-方法有什么区别"><a href="#线程池中submit-和-execute-方法有什么区别" class="headerlink" title="线程池中submit() 和 execute()方法有什么区别"></a>线程池中submit() 和 execute()方法有什么区别</h2><p>　　两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在Executor接口中, 而submit()方法可以返回持有计算结果的Future对象，它定义在ExecutorService接口中，它扩展了Executor接口，其它线程池类像ThreadPoolExecutor和ScheduledThreadPoolExecutor都有这些方法。更多详细信息请点击这里。</p>
<h2 id="什么是阻塞式方法"><a href="#什么是阻塞式方法" class="headerlink" title="什么是阻塞式方法"></a>什么是阻塞式方法</h2><p>　　阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，ServerSocket的accept()方法就是一直等待客户端连接。这里的阻塞是指调用结果返回之前，当前线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在任务完成前就返回。更多详细信息请点击这里。</p>
<h2 id="Swing是线程安全的吗为什么"><a href="#Swing是线程安全的吗为什么" class="headerlink" title="Swing是线程安全的吗为什么"></a>Swing是线程安全的吗为什么</h2><p>　　你可以很肯定的给出回答，Swing不是线程安全的，但是你应该解释这么回答的原因即便面试官没有问你为什么。当我们说swing不是线程安全的常常提到它的组件，这些组件不能在多线程中进行修改，所有对GUI组件的更新都要在AWT线程中完成，而Swing提供了同步和异步两种回调方法来进行更新。点击这里查看更多swing和线程安全的相关内容。</p>
<h2 id="invokeAndWait-和-invokeLater区别"><a href="#invokeAndWait-和-invokeLater区别" class="headerlink" title="invokeAndWait 和 invokeLater区别"></a>invokeAndWait 和 invokeLater区别</h2><p>　　这两个方法是Swing API 提供给Java开发者用来从当前线程而不是事件派发线程更新GUI组件用的。InvokeAndWait()同步更新GUI组件，比如一个进度条，一旦进度更新了，进度条也要做出相应改变。如果进度被多个线程跟踪，那么就调用invokeAndWait()方法请求事件派发线程对组件进行相应更新。而invokeLater()方法是异步调用更新组件的。更多详细信息请点击这里。</p>
<h2 id="Swing-API中那些方法是线程安全的"><a href="#Swing-API中那些方法是线程安全的" class="headerlink" title="Swing API中那些方法是线程安全的"></a>Swing API中那些方法是线程安全的</h2><p>　　这个问题又提到了swing和线程安全，虽然组件不是线程安全的但是有一些方法是可以被多线程安全调用的，比如repaint(), revalidate()。 JTextComponent的setText()方法和JTextArea的insert() 和 append() 方法也是线程安全的。</p>
<h2 id="如何创建Immutable对象"><a href="#如何创建Immutable对象" class="headerlink" title="如何创建Immutable对象"></a>如何创建Immutable对象</h2><p>　　这个问题看起来和多线程没什么关系， 但不变性有助于简化已经很复杂的并发程序。Immutable对象可以在没有同步的情况下共享，降低了对该对象进行并发访问时的同步化开销。可是Java没有@Immutable这个注解符，要创建不可变类，要实现下面几个步骤：通过构造方法初始化所有成员、对变量不要提供setter方法、将所有的成员声明为私有的，这样就不允许直接访问这些成员、在getter方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝。我的文章how to make an object Immutable in Java有详细的教程，看完你可以充满自信。</p>
<h2 id="ReadWriteLock是什么"><a href="#ReadWriteLock是什么" class="headerlink" title="ReadWriteLock是什么"></a>ReadWriteLock是什么</h2><p>　　一般而言，读写锁是用来提升并发程序性能的锁分离技术的成果。Java中的ReadWriteLock是Java 5 中新增的一个接口，一个ReadWriteLock维护一对关联的锁，一个用于只读操作一个用于写。在没有写线程的情况下一个读锁可能会同时被多个读线程持有。写锁是独占的，你可以使用JDK中的ReentrantReadWriteLock来实现这个规则，它最多支持65535个写锁和65535个读锁。</p>
<h2 id="多线程中的忙循环是什么"><a href="#多线程中的忙循环是什么" class="headerlink" title="多线程中的忙循环是什么"></a>多线程中的忙循环是什么</h2><p>　　忙循环就是程序员用循环让一个线程等待，不像传统方法wait(), sleep() 或 yield() 它们都放弃了CPU控制，而忙循环不会放弃CPU，它就是在运行一个空循环。这么做的目的是为了保留CPU缓存，在多核系统中，一个等待线程醒来的时候可能会在另一个内核运行，这样会重建缓存。为了避免重建缓存和减少等待重建的时间就可以使用它了。你可以查看这篇文章获得更多信息。</p>
<h2 id="volatile-变量和-atomic-变量有什么不同"><a href="#volatile-变量和-atomic-变量有什么不同" class="headerlink" title="volatile 变量和 atomic 变量有什么不同"></a>volatile 变量和 atomic 变量有什么不同</h2><p>　　这是个有趣的问题。首先，volatile 变量和 atomic 变量看起来很像，但功能却不一样。Volatile变量可以确保先行关系，即写操作会发生在后续的读操作之前, 但它并不能保证原子性。例如用volatile修饰count变量那么 count++ 操作就不是原子性的。而AtomicInteger类提供的atomic方法可以让这种操作具有原子性如getAndIncrement()方法会原子性的进行增量操作把当前值加一，其它数据类型和引用变量也可以进行相似操作。</p>
<h2 id="如果同步块内的线程抛出异常会发生什么"><a href="#如果同步块内的线程抛出异常会发生什么" class="headerlink" title="如果同步块内的线程抛出异常会发生什么"></a>如果同步块内的线程抛出异常会发生什么</h2><p>　　这个问题坑了很多Java程序员，若你能想到锁是否释放这条线索来回答还有点希望答对。无论你的同步块是正常还是异常退出的，里面的线程都会释放锁，所以对比锁接口我更喜欢同步块，因为它不用我花费精力去释放锁，该功能可以在finally block里释放锁实现。</p>
<h2 id="单例模式的双检锁是什么"><a href="#单例模式的双检锁是什么" class="headerlink" title="单例模式的双检锁是什么"></a>单例模式的双检锁是什么</h2><p>　　这个问题在Java面试中经常被问到，但是面试官对回答此问题的满意度仅为50%。一半的人写不出双检锁还有一半的人说不出它的隐患和Java1.5是如何对它修正的。它其实是一个用来创建线程安全的单例的老方法，当单例实例第一次被创建时它试图用单个锁进行性能优化，但是由于太过于复杂在JDK1.4中它是失败的，我个人也不喜欢它。无论如何，即便你也不喜欢它但是还是要了解一下，因为它经常被问到。你可以查看how double checked locking on Singleton works这篇文章获得更多信息。</p>
<h2 id="如何创建线程安全的Singleton"><a href="#如何创建线程安全的Singleton" class="headerlink" title="如何创建线程安全的Singleton"></a>如何创建线程安全的Singleton</h2><p>　　这是上面那个问题的后续，如果你不喜欢双检锁而面试官问了创建Singleton类的替代方法，你可以利用JVM的类加载和静态变量初始化特征来创建Singleton实例，或者是利用枚举类型来创建Singleton，我很喜欢用这种方法。你可以查看这篇文章获得更多信息。</p>
<h2 id="写出3条你遵循的多线程最佳实践"><a href="#写出3条你遵循的多线程最佳实践" class="headerlink" title="写出3条你遵循的多线程最佳实践"></a>写出3条你遵循的多线程最佳实践</h2><p>　　这种问题我最喜欢了，我相信你在写并发代码来提升性能的时候也会遵循某些最佳实践。以下三条最佳实践我觉得大多数Java程序员都应该遵循：</p>
<p>给你的线程起个有意义的名字。 这样可以方便找bug或追踪。OrderProcessor, QuoteProcessor or TradeProcessor 这种名字比 Thread-1. Thread-2 and Thread-3 好多了，给线程起一个和它要完成的任务相关的名字，所有的主要框架甚至JDK都遵循这个最佳实践。<br>避免锁定和缩小同步的范围 锁花费的代价高昂且上下文切换更耗费时间空间，试试最低限度的使用同步和锁，缩小临界区。因此相对于同步方法我更喜欢同步块，它给我拥有对锁的绝对控制权。<br>多用同步类少用wait 和 notify 首先，CountDownLatch, Semaphore, CyclicBarrier 和 Exchanger 这些同步类简化了编码操作，而用wait和notify很难实现对复杂控制流的控制。其次，这些类是由最好的企业编写和维护在后续的JDK中它们还会不断优化和完善，使用这些更高等级的同步工具你的程序可以不费吹灰之力获得优化。<br>多用并发集合少用同步集合 这是另外一个容易遵循且受益巨大的最佳实践，并发集合比同步集合的可扩展性更好，所以在并发编程时使用并发集合效果更好。如果下一次你需要用到map，你应该首先想到用ConcurrentHashMap。我的文章Java并发集合有更详细的说明。</p>
<h2 id="如何强制启动一个线程"><a href="#如何强制启动一个线程" class="headerlink" title="如何强制启动一个线程"></a>如何强制启动一个线程</h2><p>　　这个问题就像是如何强制进行Java垃圾回收，目前还没有觉得方法，虽然你可以使用System.gc()来进行垃圾回收，但是不保证能成功。在Java里面没有办法强制启动一个线程，它是被线程调度器控制着且Java没有公布相关的API。</p>
<h2 id="fork-join框架是什么"><a href="#fork-join框架是什么" class="headerlink" title="fork join框架是什么"></a>fork join框架是什么</h2><p>　　fork join框架是JDK7中出现的一款高效的工具，Java开发人员可以通过它充分利用现代服务器上的多处理器。它是专门为了那些可以递归划分成许多子模块设计的，目的是将所有可用的处理能力用来提升程序的性能。fork join框架一个巨大的优势是它使用了工作窃取算法，可以完成更多任务的工作线程可以从其它线程中窃取任务来执行。你可以查看这篇文章获得更多信息。</p>
<h2 id="多线程中调用wait-和-sleep-方法有什么不同"><a href="#多线程中调用wait-和-sleep-方法有什么不同" class="headerlink" title="多线程中调用wait() 和 sleep()方法有什么不同"></a>多线程中调用wait() 和 sleep()方法有什么不同</h2><p>　　Java程序中wait 和 sleep都会造成某种形式的暂停，它们可以满足不同的需要。wait()方法用于线程间通信，如果等待条件为真且其它线程被唤醒时它会释放锁，而sleep()方法仅仅释放CPU资源或者让当前线程停止执行一段时间，但不会释放锁。</p>
]]></content>
      
        <categories>
            
            <category> 基础面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数]]></title>
      <url>/2018/06/03/%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>2.1 size()方法和length属性</p>
<p>2.2 jQuery全面支持css2.1的选择器</p>
<p>2.3 jQuery全面支持css3的选择器</p>
<p>2.4 jQuery自己发明的伪类</p>
<a id="more"></a>
<p>2.5 ()函数和jQuery函数等价</p>
<p>2.6 ()函数得到的是jQuery对象</p>
<p>2.7 关于引号</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * $() 函数</div><div class="line">     * 1. jq 是批量处理的，jq函数的结果是一个 jq 对象</div><div class="line">     * 说明：</div><div class="line">     * a.在创建变量保存 jq 对象的时候，约定习惯使用 $ 做前缀，表示对象为 jq 对象而不是 js 对象</div><div class="line">     * b.jq 对象和 js 对象不是同一种类型，因此两者所拥有的方法不能混合使用</div><div class="line">     */</div><div class="line">    var $div = $('div');</div><div class="line">    console.log($div);</div><div class="line">    console.log(typeof $div)</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/F1AAEG13kL.png" alt="mark"></p>
<h2 id="size-方法和length属性"><a href="#size-方法和length属性" class="headerlink" title="size()方法和length属性"></a>size()方法和length属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * $() 函数</div><div class="line">     * 1. jq 是批量处理的，jq函数的结果是一个 jq 对象</div><div class="line">     * 说明：</div><div class="line">     * a.在创建变量保存 jq 对象的时候，约定习惯使用 $ 做前缀，表示对象为 jq 对象而不是 js 对象</div><div class="line">     * b.jq 对象和 js 对象不是同一种类型，因此两者所拥有的方法不能混合使用</div><div class="line">     * c.jq 中提供了 size() 方法和 length 属性，用来获取 jq 对象中包含的页面元素个数</div><div class="line">     */</div><div class="line">    var $div = $('div');</div><div class="line">    console.log($div.size());</div><div class="line">    console.log($div.length)</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="全面支持css2-1和css3的选择器"><a href="#全面支持css2-1和css3的选择器" class="headerlink" title="全面支持css2.1和css3的选择器"></a>全面支持css2.1和css3的选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * $() 函数</div><div class="line">     * 2. $ 函数在对页面元素的选择上具有非常灵活的写法</div><div class="line">     * 说明：</div><div class="line">     * a.$() 函数全面支持 css2.1 之前的所有选择器写法</div><div class="line">     * b.$() 函数全面支持 css3 中的所有选择器写法</div><div class="line">     * c.$() 函数在选中页面元素的时候不存在兼容性的问题</div><div class="line">     */</div><div class="line">    // 空格和+都被称为关系选择器</div><div class="line">    // 空格表示：包含关系</div><div class="line">    // + 表示：相连关系，表示读取 div1 选择器后面紧挨着它的div2 选择器</div><div class="line">    // 下面的例子：是证明选择器的写法是支持的</div><div class="line">    var $div2 = $('.div1+.div2');</div><div class="line">    console.log($div2);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/305mK7d7bH.png" alt="mark"></p>
<h2 id="自己发明的伪类"><a href="#自己发明的伪类" class="headerlink" title="自己发明的伪类"></a>自己发明的伪类</h2><p>jQuery自己发明的【伪类】    </p>
<p>其实这里我个人觉得更精准的说法应该是jq自己发明的【筛选器】。</p>
<p>因为他们的作用是能够从指定元素集合中【筛选】出想要的元素。    </p>
<p>jq中自创的筛选器有七种：    </p>
<p>选择器:first  选中指定元素集合中的第一个元素    </p>
<p>选择器:last  选中指定元素集合中的最后一个元素    </p>
<p>选择器:eq(n) 选中指定元素集合中从0开始，第n个元素    </p>
<p>选择器:lt(n)  选中指定元素集合中从0开始，第n个元素之前的所有元素    </p>
<p>选择器:gt(n)    选中指定元素集合中从0开始，第n个元素之后的所有元素    </p>
<p>选择器:odd 选中指定元素集合中从0开始，所有奇数序号的元素    </p>
<p>选择器:even    选中指定元素集合中从0开始，所有偶数序号的元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	</div><div class="line">    // 选中所有div</div><div class="line">    var $div = $('div');</div><div class="line">    console.log($div);</div><div class="line">    $('div').css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="选择器-first"><a href="#选择器-first" class="headerlink" title="选择器:first"></a>选择器:first</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	</div><div class="line">	// 选择器:first  选中指定元素集合中的第一个元素</div><div class="line">    $('div:first').css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/i1ih7GBH84.png" alt="mark"></p>
<h3 id="选择器-last"><a href="#选择器-last" class="headerlink" title="选择器:last"></a>选择器:last</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">    // 选择器:last  选中指定元素集合中的最后一个元素</div><div class="line">    $('div:last').css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/jCbbE9h57J.png" alt="mark"></p>
<h3 id="选择器-eq-n"><a href="#选择器-eq-n" class="headerlink" title="选择器:eq(n)"></a>选择器:eq(n)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	// 下标为 3 的元素</div><div class="line">    $('div:eq(3)').css('background-color','red');</div><div class="line">    // 另一种写法</div><div class="line">    //$('div').eq(3).css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/j4jj7CBAJk.png" alt="mark"></p>
<h3 id="选择器-lt-n"><a href="#选择器-lt-n" class="headerlink" title="选择器:lt(n)"></a>选择器:lt(n)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    // 小于下标为 4 的元素</div><div class="line">    $('div:lt(4)').css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/ah049gbAfL.png" alt="mark"></p>
<h3 id="选择器-gt-n"><a href="#选择器-gt-n" class="headerlink" title="选择器:gt(n)"></a>选择器:gt(n)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    // 大于下标为 4 的元素</div><div class="line">    $('div:gt(4)').css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/djDbAFDl4A.png" alt="mark"></p>
<h3 id="选择器-odd"><a href="#选择器-odd" class="headerlink" title="选择器:odd"></a>选择器:odd</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    // 下标为奇数的触发</div><div class="line">    $('div:odd').css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/ca6jADKkH9.png" alt="mark"></p>
<h3 id="选择器-even"><a href="#选择器-even" class="headerlink" title="选择器:even"></a>选择器:even</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 50px; height: 50px; background-color: orange;</div><div class="line">            margin: 10px;  &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    // 下标为偶数的触发</div><div class="line">    $('div:even').css('background-color','red');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/7abBL2IAkg.png" alt="mark"></p>
<p>实例：表格奇数行颜色加深</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellapacing</span>=<span class="string">"0"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"600px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    // jq 批量的，所以可以一次选择多个</div><div class="line"></div><div class="line">    // 下标为奇数的触发</div><div class="line">    $('tr:odd').css('background-color','darkgray');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="函数和jQuery函数等价"><a href="#函数和jQuery函数等价" class="headerlink" title="$()函数和jQuery函数等价"></a>$()函数和jQuery函数等价</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellapacing</span>=<span class="string">"0"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"600px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * $() 和 jQuery() 的关系</div><div class="line">     * 说明：在 jq 框架中 $() 完全等价于 jQuery() 函数，两者作用相同，只是写法不同而已。</div><div class="line">     * 原因：</div><div class="line">     * a.简操作</div><div class="line">     * b.避免冲突</div><div class="line">     */</div><div class="line">    jQuery('tr:odd').css('background-color','darkgray');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="函数得到的是jQuery对象"><a href="#函数得到的是jQuery对象" class="headerlink" title="$ ()函数得到的是jQuery对象"></a>$ ()函数得到的是jQuery对象</h2><p>jq 方法返回值</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * $() 和 jQuery() 的关系</div><div class="line">     * $() 函数的执行结果会返回一个 jq 对象</div><div class="line">     * 说明：jq 对象是一个集合对象，和 js 中的 "对象" 不是一个东西</div><div class="line">     */</div><div class="line">    // js中规定函数都会有一个执行结果，或者说是返回值。</div><div class="line">    // 如果函数没有返回值，会默认设置为 undefined</div><div class="line">    function func()&#123;&#125;</div><div class="line">    var result = func();</div><div class="line">    console.log(result);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><p>jq对象仅能够调用jq中设定的属性和方法，对于原生js的属性和方法都无法调用</p>
</li>
<li><p>jq对象可以在必要的时候转换为js原生对象。</p>
<ol>
<li><p>jq对象可以通过【jq对象[n]】方式转换为js原生对象</p>
<p>var p = $(“p”)[0];</p>
</li>
<li><p>jq对象可以通过【.get(n)】方式转换为js原生对象</p>
<p>var p = $(“p”).get(0);</p>
</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * $() 和 jQuery() 的关系</div><div class="line">     * 说明：jq 对象因为和 js 对象不同，因此 js 的方法对 jq 无效 反之。。</div><div class="line">     */</div><div class="line">    console.log($('span'));</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>jq 转换为 js</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 补充：</div><div class="line">     * 可以通过 jq 对象后【添加中括号】或调用【get(n)】方法，将 jq 对象装换为 js 对象。</div><div class="line">     */</div><div class="line">    // 方式1： var span = $('span')[0];</div><div class="line">    // 方式 2：</div><div class="line">    var span = $('span').get(0);</div><div class="line">    console.log(span);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/BkhblgfD26.png" alt="mark"></p>
<h2 id="关于引号"><a href="#关于引号" class="headerlink" title="关于引号"></a>关于引号</h2><p>前面提到过$()在选择元素的时候括号中先写引号，但是存在获取某些对象的时候不需要加引号的特例：</p>
<ol>
<li><strong>$(window)</strong></li>
<li><strong>$(document)</strong></li>
<li><strong>$(this)</strong></li>
</ol>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事件监听]]></title>
      <url>/2018/06/03/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
      <content type="html"><![CDATA[<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><h2 id="JQuery中的常用事件"><a href="#JQuery中的常用事件" class="headerlink" title="JQuery中的常用事件"></a>JQuery中的常用事件</h2><p>jQuery中事件的名字，一律没有on。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>.click()</th>
<th>鼠标单击触发事件，参数可选（data，function）</th>
</tr>
</thead>
<tbody>
<tr>
<td>.dblclick()</td>
<td>双击触发，同上</td>
</tr>
<tr>
<td>.mousedown()/up()</td>
<td>鼠标按下/弹起触发事件</td>
</tr>
<tr>
<td>.mousemove()</td>
<td>鼠标移动事件</td>
</tr>
<tr>
<td>.mouseover()/out()</td>
<td>鼠标移入/移出触发事件</td>
</tr>
<tr>
<td>.mouseenter()/leave()</td>
<td>鼠标进入/离开触发事件*</td>
</tr>
<tr>
<td>.hover(func1,func2)</td>
<td>鼠标移入调用func1函数，移出调用func2函数</td>
</tr>
<tr>
<td>.focusin()</td>
<td>鼠标聚焦到该元素时触发事件</td>
</tr>
<tr>
<td>.focusout()</td>
<td>鼠标失去焦点时触发事件</td>
</tr>
<tr>
<td>. focus()/.blur()</td>
<td>鼠标聚焦/失去焦点触发事件（不支持冒泡）</td>
</tr>
<tr>
<td>.change()</td>
<td>表单元素发生改变时触发事件</td>
</tr>
<tr>
<td>.select()</td>
<td>文本元素被选中时触发事件</td>
</tr>
<tr>
<td>.submit()</td>
<td>表单提交动作触发*</td>
</tr>
<tr>
<td>.keydown()/up()</td>
<td>键盘按键按下/弹起触发</td>
</tr>
<tr>
<td>.on()</td>
<td>多事件的绑定</td>
</tr>
<tr>
<td>.off()</td>
<td>移除事件的绑定</td>
</tr>
<tr>
<td>.trigger(“event”)</td>
<td>触发事件event调用</td>
</tr>
<tr>
<td>.triggerHandler()</td>
<td>触发事件，不会冒泡，不会触发默认事件</td>
</tr>
</tbody>
</table>
<h2 id="jQuery添加事件监听"><a href="#jQuery添加事件监听" class="headerlink" title="jQuery添加事件监听"></a>jQuery添加事件监听</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 监听事件</div><div class="line">     * 语法：jq 对象.事件名（回调函数）</div><div class="line">     * 特征：因为jq对象是集合对象，因此添加事件监听也是批量操作的。</div><div class="line">     */</div><div class="line">    $('div').click(function () &#123;</div><div class="line">       $(this).css('background-color','red');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：jq中对于事件的绑定还允许链式声明，不必重复获取jq对象。 且链式声明时除最后一个绑定函数末尾加分号表示绑定结束外，其余函数后均不必写任何内容。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$("div").mouseenter(function()&#123;$(this).css("background-color","red");&#125;)</div><div class="line">.mouseleave(function()&#123;$(this).css("background-color","orange");&#125;);</div></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">    // $('div').dblclick(function () &#123;</div><div class="line">    //    $(this).css('background-color','red');</div><div class="line">    // &#125;).click(function () &#123;</div><div class="line">    //     $(this).css('background-color','green');</div><div class="line">    // &#125;);</div><div class="line">    var $div = $('div');</div><div class="line">    $div.dblclick(function () &#123;</div><div class="line">       $(this).css('background-color','red');</div><div class="line">    &#125;).click(function () &#123;</div><div class="line">        $(this).css('background-color','green');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="事件监听的特点："><a href="#事件监听的特点：" class="headerlink" title="事件监听的特点："></a>事件监听的特点：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 事件监听的特点：</div><div class="line">     * jq中添加事件监听不会产生覆盖，并且执行顺序按照添加顺序执行。</div><div class="line">     */</div><div class="line">    $('div').click(function () &#123;</div><div class="line">        console.log('这是第一个回调函数！');</div><div class="line">    &#125;).click(function () &#123;</div><div class="line">        console.log('这是第二个回调函数！');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $('div').click(function () &#123;</div><div class="line">        console.log('这是第三个回调函数！');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://blogimg.nos-eastchina1.126.net/180402/3E0l5e9352.png" alt="mark"></p>
<h3 id="添加事件监听的方法"><a href="#添加事件监听的方法" class="headerlink" title="添加事件监听的方法"></a>添加事件监听的方法</h3><p>为jq对象添加事件监听除了本身的方法之外，jq还提供了很多添加事件监听的方法</p>
<h4 id="1-通过on方法来为jq对象添加事件监听、通过off方法来为jq对象取消事件监听。"><a href="#1-通过on方法来为jq对象添加事件监听、通过off方法来为jq对象取消事件监听。" class="headerlink" title="(1)通过on方法来为jq对象添加事件监听、通过off方法来为jq对象取消事件监听。"></a>(1)通过on方法来为jq对象添加事件监听、通过off方法来为jq对象取消事件监听。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 事件监听的其他添加方式</div><div class="line">     * (1)on/off方法</div><div class="line">     * 描述：on方法用来给jq对象添加事件监听</div><div class="line">     *       off方法用来将jq对象上的事件监听取消</div><div class="line">     * 语法：jq对象.on('事件名',回调函数,c,d);</div><div class="line">     *       jq对象.off('事件名',b,c);</div><div class="line">     */</div><div class="line">    $('div').on('click',function () &#123;</div><div class="line">        console.log('这是第一个回调函数！');</div><div class="line">    &#125;).on('click',function () &#123;</div><div class="line">        console.log('这是第二个回调函数！');</div><div class="line">    &#125;).on('dblclick',function () &#123;</div><div class="line">        console.log('这是双击事件！');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $('div').on('click',function () &#123;</div><div class="line">        console.log('这是第三个回调函数！');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 取消掉单击事件</div><div class="line">    $('div').off('click');</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-通过bind方法来给jq对象添加事件监听"><a href="#2-通过bind方法来给jq对象添加事件监听" class="headerlink" title="(2)通过bind方法来给jq对象添加事件监听"></a>(2)通过bind方法来给jq对象添加事件监听</h4><p>bind方法的好处的就是能够给一个jq对象添加多个事件监听。事件名用空格隔开。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 事件监听的其他添加方式</div><div class="line">     * bind()方法</div><div class="line">     * 语法：</div><div class="line">     * 将多个事件绑定为同一个事件监听，每一个事件触发都会执行这个唯一的回调函数</div><div class="line">     * jq对象.bind('事件名1 事件名2 ...', 回调函数);</div><div class="line">     */</div><div class="line">    $('.div1').bind('mousedown mouseup',function () &#123;</div><div class="line">        console.log('状态改变啦！');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>bind还可以采用JSON形式的参数来给jq对象添加事件监听。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 事件监听的其他添加方式</div><div class="line">     * bind()方法</div><div class="line">     * 语法：</div><div class="line">     * 将多个事件绑定为同一个事件监听，每一个事件触发都会执行这个唯一的回调函数</div><div class="line">     * jq对象.bind('事件名1 事件名2 ...', 回调函数);</div><div class="line">     * jq对象.bind(&#123;</div><div class="line">     *     事件名1：回调函数1,</div><div class="line">     *     事件名2：回调函数2,</div><div class="line">     *     ...</div><div class="line">     * &#125;);</div><div class="line">     */</div><div class="line"></div><div class="line">    $('.div1').bind(&#123;</div><div class="line">        mousedown:function () &#123;console.log('鼠标按下')&#125;,</div><div class="line">        mouseup:function () &#123;console.log('鼠标抬起')&#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-通过one方法来给jq对象添加事件监听。"><a href="#3-通过one方法来给jq对象添加事件监听。" class="headerlink" title="(3)通过one方法来给jq对象添加事件监听。"></a>(3)通过one方法来给jq对象添加事件监听。</h4><p>但是需要注意通过one方法添加的事件监听是’一次性的’，只能执行一次。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;  width: 100px; height: 100px; background-color: orange;   &#125;</div><div class="line">        .div2&#123;  width: 100px; height: 100px; background-color: skyblue;   &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;script src="http://apps.bdimg.com/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 事件监听的其他添加方式</div><div class="line">     * 通过one方法来给jq对象添加事件监听</div><div class="line">     * 但是需要注意通过one方法添加的事件监听是'一次性的'，只能执行一次。</div><div class="line">     */</div><div class="line"></div><div class="line">    $('.div1').one('click',function () &#123;</div><div class="line">        console.log('这是 one 添加的事件监听的回调函数！');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[乐观锁与悲观锁的应用]]></title>
      <url>/2018/06/03/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="乐观锁与悲观锁的应用"><a href="#乐观锁与悲观锁的应用" class="headerlink" title="乐观锁与悲观锁的应用"></a>乐观锁与悲观锁的应用</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="悲观锁-Pessimistic-Lock"><a href="#悲观锁-Pessimistic-Lock" class="headerlink" title="悲观锁(Pessimistic Lock)"></a>悲观锁(Pessimistic Lock)</h3><p>每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="external">数据库</a>里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p>
<p>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p>
<h3 id="乐观锁-Optimistic-Lock"><a href="#乐观锁-Optimistic-Lock" class="headerlink" title="乐观锁(Optimistic Lock)"></a>乐观锁(Optimistic Lock)</h3><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上<code>+10</code>，然后再更新回去。<br>如果此时有两个线程同时并发处理，第一个线程拿到数据是10，+10=20更新回去。第二个线程原本是要在第一个线程的基础上再<code>+20=40</code>,结果由于并发访问取到更新前的数据为10，<code>+20=30</code>。</p>
<p>这就是典型的存在中间状态，导致数据不正确。来看以下的例子：</p>
<h2 id="并发所带来的问题"><a href="#并发所带来的问题" class="headerlink" title="并发所带来的问题"></a>并发所带来的问题</h2><p>和上文提到的类似，这里有一张<code>price</code>表，表结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `price` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</div><div class="line">  `total` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;总值&apos;,</div><div class="line">  `front` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费前&apos;,</div><div class="line">  `end` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费后&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1268 DEFAULT CHARSET=utf8</div></pre></td></tr></table></figure>
<p>我这里写了一个单测：就一个主线程，循环100次，每次把 front 的值减去10，再写入一次流水记录，正常情况是写入的每条记录都会每次减去10。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">   * 单线程消费</div><div class="line">   */</div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singleCounsumerTest1</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">// 使用 Mybaits </span></div><div class="line">      <span class="comment">/*  for (int i=0 ;i&lt;100 ;i++)&#123;</span></div><div class="line">          Price price = priceMapper.selectByPrimaryKey(1);</div><div class="line">          int ron = 10 ;</div><div class="line">          price.setFront(price.getFront().subtract(new BigDecimal(ron)));</div><div class="line">          price.setEnd(price.getEnd().add(new BigDecimal(ron)));</div><div class="line">          price.setTotal(price.getFront().add(price.getEnd()));</div><div class="line"></div><div class="line">          priceMapper.updateByPrimaryKey(price) ;</div><div class="line"></div><div class="line">          price.setId(null);</div><div class="line">          priceMapper.insertSelective(price) ;</div><div class="line">      &#125;*/</div><div class="line">      </div><div class="line">      <span class="comment">// 使用 hibernate</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">100</span> ;i++)&#123;</div><div class="line">          Price price = priceDao.selectByPrimaryKey(<span class="string">"1"</span>);</div><div class="line"></div><div class="line">          <span class="keyword">int</span> ron = <span class="number">10</span> ;</div><div class="line">          price.setFront(price.getFront().subtract(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">          price.setEnd(price.getEnd().add(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">          price.setTotal(price.getFront().add(price.getEnd()));</div><div class="line"></div><div class="line">          priceDao.updateByPrimaryKey(price) ;</div><div class="line"></div><div class="line">         <span class="comment">// price.setId(null);</span></div><div class="line">          priceDao.insertSelective(price) ;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>初始化数据库中的值：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180308/KI48lACLcF.png" alt="mark"></p>
<p>执行结果如下：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180308/8JjL8h3ICG.png" alt="mark"></p>
<p>但是如果是多线程的情况下会是如何呢：</p>
<blockquote>
<p>我这里新建了一个 PriceController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * <span class="doctag">@Author</span> shenwenfang</div><div class="line">  * <span class="doctag">@Date</span> 2018/3/8 10:50</div><div class="line">  * <span class="doctag">@Description</span>: 线程池 无锁</div><div class="line">  */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"threadPrice"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfigController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    PriceDao priceDao;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ThreadPoolConfig config;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/threadPrice.do"</span>)</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"锁的应用"</span>,httpMethod = <span class="string">"POST"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadPrice</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i &lt;<span class="number">10</span>;i++)&#123;</div><div class="line">                Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        Price price = priceDao.selectByPrimaryKey(<span class="string">"1"</span>);</div><div class="line">                        <span class="keyword">int</span> ron = <span class="number">10</span>;</div><div class="line">                        price.setFront(price.getFront().subtract(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">                        price.setEnd(price.getEnd().add(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">                        priceDao.updateByPrimaryKey(price);</div><div class="line"></div><div class="line">                        priceDao.insertSelective(price);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                config.submit(t);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中为了节省资源使用了一个线程池:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * <span class="doctag">@Author</span> shenwenfang</div><div class="line">  * <span class="doctag">@Date</span> 2018/3/8 10:40</div><div class="line">  * <span class="doctag">@Description</span>: 为了节省资源使用一个线程池</div><div class="line">  */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_SIZE = <span class="number">5</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SECOND = <span class="number">1000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ThreadPoolExecutor executor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolConfig</span><span class="params">()</span></span>&#123;</div><div class="line">        executor = <span class="keyword">new</span> ThreadPoolExecutor(CORE_SIZE,MAX_SIZE,SECOND,TimeUnit.MICROSECONDS,</div><div class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(Thread thread)</span></span>&#123;</div><div class="line">        executor.submit(thread);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于线程池的使用今后会仔细探讨。这里就简单理解为有10个线程并发去处理上面单线程的逻辑，来看看结果怎么样：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180308/hBB6B3cG2J.png" alt="mark"></p>
<p>会看到明显的数据错误，导致错误的原因自然就是有线程读取到了中间状态进行了错误的更新。</p>
<p>进而有了以下两种解决方案：悲观锁和乐观锁。</p>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。</p>
<p>使用方式如下：<br>首先要关闭 MySQL 的自动提交：<code>set autocommit = 0;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bigen --开启事务</div><div class="line">select id, total, front, end from price where id=1 for update </div><div class="line"></div><div class="line">insert into price values(?,?,?,?,?)</div><div class="line"></div><div class="line">commit --提交事务</div></pre></td></tr></table></figure>
<p>这里使用<code>select for update</code>的方式利用数据库开启了悲观锁，锁定了id=1的这条数据(<code>注意:这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。</code>)。之后使用<code>commit</code>提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。</p>
<p>悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。</p>
<p><strong>优点与不足</strong></p>
<p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数</p>
<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>那么有没有性能好，支持的并发也更多的方式呢？</p>
<p>那就是乐观锁。</p>
<p>乐观锁是首先假设数据冲突很少，只有在数据提交修改的时候才进行校验，如果冲突了则不会进行更新。</p>
<p>通常的实现方式增加一个<code>version</code>字段，为每一条数据加上版本。每次更新的时候<code>version+1</code>，并且更新时候带上版本号。实现方式如下：</p>
<p>新建了一张<code>price_version</code>表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `price_version` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</div><div class="line">  `total` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;总值&apos;,</div><div class="line">  `front` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费前&apos;,</div><div class="line">  `end` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费后&apos;,</div><div class="line">  `version` int(11) DEFAULT &apos;0&apos; COMMENT &apos;并发版本控制&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1268 DEFAULT CHARSET=utf8</div></pre></td></tr></table></figure>
<p>更新数据的SQL：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Mubatis --&gt;</div><div class="line">&lt;update id=&quot;updateByVersion&quot; parameterType=&quot;com.crossoverJie.pojo.PriceVersion&quot;&gt;</div><div class="line">    UPDATE price_version</div><div class="line">    SET front = #&#123;front,jdbcType=DECIMAL&#125;,</div><div class="line">        version= version + 1</div><div class="line">    WHERE id = #&#123;id,jdbcType=INTEGER&#125;</div><div class="line">    AND version = #&#123;version,jdbcType=INTEGER&#125;</div><div class="line">  &lt;/update&gt;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(PriceVersion priceVersion)</span></span>&#123;</div><div class="line">    String sql = <span class="string">"UPDATE price_version\n"</span> +</div><div class="line">            <span class="string">"SET front = :front, version= version + 1\n"</span> +</div><div class="line">            <span class="string">"WHERE id = :id AND version = :version"</span>;</div><div class="line">    Map&lt;String,Object&gt; param = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">    param.put(<span class="string">"front"</span>,priceVersion.getFront());</div><div class="line">    param.put(<span class="string">"id"</span>,priceVersion.getId());</div><div class="line">    param.put(<span class="string">"version"</span>,priceVersion.getVersion());</div><div class="line">    <span class="keyword">int</span> count =                                                                getCurrentSession().createSQLQuery(sql).setProperties(param).executeUpdate();</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 线程池，乐观锁</div><div class="line"> * <span class="doctag">@param</span> redisContentReq</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/threadPriceVersion.do"</span>)</div><div class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"乐观锁的应用"</span>,httpMethod = <span class="string">"POST"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadPriceVersion</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                PriceVersion priceVersion = goodStoreDao.vselectByPrimaryKey(<span class="string">"1"</span>);</div><div class="line">                <span class="keyword">int</span> ron = <span class="keyword">new</span> Random().nextInt(<span class="number">20</span>);</div><div class="line">                System.out.println(<span class="string">"本次消费="</span>+ron);</div><div class="line">                priceVersion.setFront(<span class="keyword">new</span> BigDecimal(ron));</div><div class="line">                <span class="keyword">int</span> count = goodStoreDao.vupdateByPrimaryKey(priceVersion);</div><div class="line">                <span class="keyword">if</span>(count == <span class="number">0</span>)</div><div class="line">                    System.out.println(<span class="string">"更新失败！"</span>);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    System.out.println(<span class="string">"更新成功！"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        config.submit(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理逻辑：开了三个线程生成了20以内的随机数更新到 front 字段。</p>
<p>当调用该接口时日志如下：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180308/13Al0Kkab7.png" alt="mark"></p>
<p>可以看到线程1、4、5分别生成了15，2，11三个随机数。最后线程4、5都更新失败了，只有线程1更新成功了。</p>
<p>查看数据库：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180308/43187E0lH3.png" alt="mark"></p>
<p>发现也确实是更新的6。</p>
<p>乐观锁在实际应用相对较多，它可以提供更好的并发访问，并且数据库开销较少，但是有可能存在脏读的情况。</p>
<p><strong>优点与不足</strong></p>
<p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>1.我们经常会在访问数据库的时候用到锁，怎么实现乐观锁和悲观锁呢？以Hibernate为例，可以通过为记录添加版本或时间戳字段来实现乐观锁。可以用session.Lock()锁定对象来实现悲观锁（本质上就是执行了SELECT * FROM t FOR UPDATE语句）。</p>
<p>2.如果把乐观锁看作是关于冲突检测的，那么悲观锁就是关于冲突避免的。在实际应用的源代码控制系统中，</p>
<p>这两种策略都可以被使用，但是现在大多数源代码开发者更倾向于使用乐观锁策略。（有一种很有道理的说法：乐观锁并不是真正的锁定，但是这种叫法很方便并且广泛流传，以至于不容忽略。）</p>
<p>在乐观锁和悲观锁之间进行选择的标准是：冲突的频率与严重性。如果冲突很少，或者冲突的后果不会很严重，那么通常情况下应该选择乐观锁，因为它能得到更好的并发性，而且更容易实现。但是，如果冲突的结果对于用户来说痛苦的，那么就需要使用悲观策略。</p>
]]></content>
      
        <categories>
            
            <category> 乐观锁与悲观锁 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java 高级应用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThreadLocal 源码解析和使用场景]]></title>
      <url>/2018/06/03/ThreadLocal%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      <content type="html"><![CDATA[<h1 id="ThreadLocal-源码解析和使用场景"><a href="#ThreadLocal-源码解析和使用场景" class="headerlink" title="ThreadLocal 源码解析和使用场景"></a>ThreadLocal 源码解析和使用场景</h1><h2 id="ThreadLocal-主要用途"><a href="#ThreadLocal-主要用途" class="headerlink" title="ThreadLocal 主要用途"></a>ThreadLocal 主要用途</h2><p>ThreadLocal 是在 JDK 包里面提供的，它提供了线程本地变量，也就是如果你创建了一个 ThreadLocal 变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是操作的自己本地内存里面的变量，从而避免了线程安全问题，创建一个ThreadLocal变量后每个线程会拷贝一个变量到自己本地内存，如下图：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180316/6IE9Kh6dAe.png" alt="mark"></p>
<ul>
<li>从JAVA官方对 ThreadLocal 类的说明定义（定义在示例代码中）：ThreadLocal  类用来提供线程内部的局部变量。这种变量在多线程环境下访问（通过 get 和 set 方法访问）时能保证各个线程的变量相对独立于其他线程内的变量。ThreadLocal 实例通常来说都是 private static 类型的，用于关联线程和线程上下文。</li>
<li>我们可以得知 ThreadLocal 的作用是：ThreadLocal 的作用是提供线程内的局部变量，不同的线程之间不会相互干扰，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或组件之间一些公共变量的传递的复杂度。</li>
<li>上述可以概述为：ThreadLocal 提供线程内部的局部变量，在本线程内随时随地可取，隔离其他线程。</li>
</ul>
<h2 id="ThreadLocal使用实例"><a href="#ThreadLocal使用实例" class="headerlink" title="ThreadLocal使用实例"></a>ThreadLocal使用实例</h2><p>使用例子来调试，看下ThreadLocal如何使用，从而加深理解。例子开启了两个线程，每个线程内部设置了本地变量的值，然后调用print函数打印当前本地变量的值，如果打印后调用了本地变量额remove方法则会删除本地内存中的该变量，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//(1)打印函数</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="comment">//1.1  打印当前线程本地内存中localVariable变量的值</span></div><div class="line">        System.out.println(str + <span class="string">":"</span> +localVariable.get());</div><div class="line">        <span class="comment">//1.2 清除当前线程本地内存中localVariable变量</span></div><div class="line">        <span class="comment">//localVariable.remove();</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//(2) 创建ThreadLocal变量</span></div><div class="line">    <span class="keyword">static</span> ThreadLocal&lt;String&gt; localVariable = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//(3) 创建线程one</span></div><div class="line">        Thread threadOne = <span class="keyword">new</span> Thread(<span class="keyword">new</span>  Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//3.1 设置线程one中本地变量localVariable的值</span></div><div class="line">                localVariable.set(<span class="string">"threadOne local variable"</span>);</div><div class="line">                <span class="comment">//3.2 调用打印函数</span></div><div class="line">                print(<span class="string">"threadOne"</span>);</div><div class="line">                <span class="comment">//3.3打印本地变量值</span></div><div class="line">                System.out.println(<span class="string">"threadOne remove after"</span> + <span class="string">":"</span> +localVariable.get());</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//(4) 创建线程two</span></div><div class="line">        Thread threadTwo = <span class="keyword">new</span> Thread(<span class="keyword">new</span>  Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//4.1 设置线程one中本地变量localVariable的值</span></div><div class="line">                localVariable.set(<span class="string">"threadTwo local variable"</span>);</div><div class="line">                <span class="comment">//4.2 调用打印函数</span></div><div class="line">                print(<span class="string">"threadTwo"</span>);</div><div class="line">                <span class="comment">//4.3打印本地变量值</span></div><div class="line">                System.out.println(<span class="string">"threadTwo remove after"</span> + <span class="string">":"</span> +localVariable.get());</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//(5)启动线程</span></div><div class="line">        threadOne.start();</div><div class="line">        threadTwo.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">threadOne:threadOne local variable</div><div class="line">threadTwo:threadTwo local variable</div><div class="line">threadOne remove after:threadOne local variable</div><div class="line">threadTwo remove after:threadTwo local variable</div></pre></td></tr></table></figure>
<ul>
<li>代码（2）创建了一个ThreadLocal变量</li>
<li>代码（3）（4）分别创建了线程one和two</li>
<li>代码（5）启动了两个线程。</li>
<li>线程one中代码3.1通过set方法设置了localVariable的值，这个设置的其实是线程one本地内存中的一个拷贝，这个拷贝线程two是访问不了的。然后代码3.2调用了print函数，代码1.1通过get函数获取了当前线程（线程one）本地内存中localVariable的值。</li>
<li>线程two执行类似线程one</li>
</ul>
<p>解开代码1.2的注释后，再次运行，运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">threadOne:threadOne local variable</div><div class="line">threadOne remove after:null</div><div class="line">threadTwo:threadTwo local variable</div><div class="line">threadTwo remove after:null</div></pre></td></tr></table></figure>
<h2 id="ThreadLocal实现原理"><a href="#ThreadLocal实现原理" class="headerlink" title="ThreadLocal实现原理"></a>ThreadLocal实现原理</h2><p>首先看下ThreadLocal相关的类的类图结构</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/1/3/160baaa075e68be6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>如上类图可知 Thread 类中有一个 threadLocals 和 inheritableThreadLocals 都是 ThreadLocalMap 类型的变量，而 <strong>ThreadLocalMap 是一个定制化的 HashMap</strong>，默认每个线程中这个两个变量都为null。</p>
<p>只有当前线程第一次调用了 ThreadLocal 的set或者get方法时候才会进行创建。其实每个线程的本地变量不是存放到 ThreadLocal 实例里面的，而是存放到调用线程的 threadLocals 变量里面。</p>
<p><strong>也就是说 ThreadLocal 类型的本地变量是存放到具体的线程内存空间的。</strong></p>
<p><strong>ThreadLocal 就是一个工具壳，它通过 set 方法把 value 值放入调用线程的 threadLocals 里面存放起来，当调用线程调用它的 get 方法时候再从当前线程的 threadLocals 变量里面拿出来使用。</strong></p>
<p>如果调用线程一直不终止那么这个本地变量会一直存放到调用线程的 threadLocals 变量里面，所以当不需要使用本地变量时候可以通过调用ThreadLocal 变量的 remove 方法，从当前线程的 threadLocals 里面删除该本地变量。</p>
<p>另外 Thread 里面的threadLocals 为何设计为 map 结构那？很明显是因为每个线程里面可以关联多个 ThreadLocal 变量。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180301/mb7C7FllE1.png" alt="mark"></p>
<h3 id="为什么使用了弱引用"><a href="#为什么使用了弱引用" class="headerlink" title="为什么使用了弱引用"></a>为什么使用了弱引用</h3><p>ThreadLocalMap 中的存储实体 Entry 使用 ThreadLocal 作为 key，但这个 Entry 是继承弱引用 WeakReference 的，为什么要这样设计，使用了弱引用 WeakReference 会造成内存泄露问题吗？</p>
<ul>
<li>首先，回答这个问题之前，我需要解释一下什么是强引用，什么是弱引用。</li>
</ul>
<p>我们在正常情况下，普遍使用的是强引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A a = new A();</div><div class="line"></div><div class="line">B b = new B();</div></pre></td></tr></table></figure>
<p>当  a = null;b = null; 时，一段时间后，JAVA垃圾回收机制GC会将 a 和 b 对应所分配的内存空间给回收。</p>
<p>但考虑这样一种情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C c = new C(b);</div><div class="line">b = null;</div></pre></td></tr></table></figure>
<p>当 b 被设置成 null 时，那么是否意味这一段时间后GC工作可以回收 b 所分配的内存空间呢？答案是否定的，因为即使 b 被设置成 null ，但 c 仍然持有对 b 的引用，而且还是强引用，所以GC不会回收 b 原先所分配的空间，既不能回收，又不能使用，这就造成了 内存泄露。</p>
<p><strong>那么我们该如何处理呢？</strong></p>
<p>可以通过 c = null;，也可以使用弱引用 WeakReference w = new WeakReference(b); 。因为使用了弱引用 WeakReference，GC 是可以回收 b 原先所分配的空间的。</p>
<p>上述解释主要参考自：<a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2Fee8c9dccc953" target="_blank" rel="external">对ThreadLocal实现原理的一点思考</a></p>
<ul>
<li>回到  ThreadLocal  的层面上，ThreadLocalMap  使用 ThreadLocal  的弱引用作为key，如果一个ThreadLocal 没有外部强引用来引用它，那么系统 GC 的时候，这个 ThreadLocal 势必会被回收，这样一来，ThreadLocalMap 中就会出现 key 为 null 的 Entry，就没有办法访问这些 key 为 null 的 Entry 的 value，如果当前线程再迟迟不结束的话，这些 key 为 null 的 Entry 的 value 就会一直存在一条强引用链：<code>Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value</code> 永远无法回收，造成内存泄漏。</li>
</ul>
<p>其实，ThreadLocalMap的设计中已经考虑到这种情况，也加上了一些防护措施：在 ThreadLocal 的get(), set(), remove() 的时候都会清除线程 ThreadLocalMap 里所有 key 为null 的 value。</p>
<p>但是这些被动的预防措施并不能保证不会内存泄漏：</p>
<ul>
<li>使用static的ThreadLocal，延长了ThreadLocal的生命周期，可能导致的内存泄漏（参考<a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.xiaohansong.com%2F2016%2F08%2F09%2FThreadLocal-leak-analyze%2F" target="_blank" rel="external">ThreadLocal 内存泄露的实例分析</a>）。</li>
<li>分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏。</li>
</ul>
<p>从表面上看内存泄漏的根源在于使用了弱引用。网上的文章大多着重分析 ThreadLocal 使用了弱引用会导致内存泄漏，但是另一个问题也同样值得思考：为什么使用弱引用而不是强引用？</p>
<p>我们先来看看官方文档的说法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">To help deal with very large and long-lived usages, </div><div class="line">the hash table entries use WeakReferences for keys.</div></pre></td></tr></table></figure>
<p>为了应对非常大和长时间的用途，哈希表使用弱引用的 key。</p>
<p>下面我们分两种情况讨论：</p>
<ul>
<li>key 使用强引用：引用的 ThreadLocal 的对象被回收了，但是 ThreadLocalMap 还持有 ThreadLocal 的强引用，如果没有手动删除，ThreadLocal 不会被回收，导致 Entry 内存泄漏。</li>
<li>key  使用弱引用：引用的 ThreadLocal 的对象被回收了，由于 ThreadLocalMap 持有 ThreadLocal 的弱引用，即使没有手动删除，ThreadLocal 也会被回收。value 在下一次 ThreadLocalMap 调用get() ,set(),remove()的时候会被清除。</li>
<li>比较两种情况，我们可以发现：由于 ThreadLocalMap 的生命周期跟 Thread 一样长，如果都没有手动删除对应 key ，都会导致内存泄漏，但是使用弱引用可以多一层保障：弱引用 ThreadLocal  不会内存泄漏，对应的 value 在下一次 ThreadLocalMap 调用 get() ,set(),remove()的时候会被清除。</li>
</ul>
<p>因此， ThreadLocal 内存泄漏的根源是：由于 ThreadLocalMap 的生命周期跟 Thread 一样长，如果没有手动删除对应 key 就会导致内存泄漏，而不是因为弱引用。</p>
<p>综合上面的分析，我们可以理解ThreadLocal内存泄漏的前因后果，那么怎么避免内存泄漏呢？</p>
<p>每次使用完ThreadLocal，都调用它的 remove() 方法，清除数据。</p>
<p>在使用线程池的情况下，没有及时清理 ThreadLocal，不仅是内存泄漏的问题，更严重的是可能导致业务逻辑出现问题。所以，使用 ThreadLocal 就跟加锁完要解锁一样，用完就清理。</p>
<p>上述解释主要参考自：<a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.xiaohansong.com%2F2016%2F08%2F06%2FThreadLocal-memory-leak%2F" target="_blank" rel="external">深入分析 ThreadLocal 内存泄漏问题</a></p>
<h3 id="常用操作的底层实现原理"><a href="#常用操作的底层实现原理" class="headerlink" title="常用操作的底层实现原理"></a>常用操作的底层实现原理</h3><p>根据上面的例子，我们进行调试，看看一下几个常用操作的实现原理。</p>
<h4 id="get-方法"><a href="#get-方法" class="headerlink" title="get() 方法"></a>get() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回当前线程对应的ThreadLocal的初始值</div><div class="line"> * 此方法的第一次调用发生在，当线程通过&#123;<span class="doctag">@link</span> #get&#125;方法访问此线程的ThreadLocal值时</div><div class="line"> * 除非线程先调用了 &#123;<span class="doctag">@link</span> #set&#125;方法，在这种情况下，</div><div class="line"> * &#123;<span class="doctag">@code</span> initialValue&#125; 才不会被这个线程调用。</div><div class="line"> * 通常情况下，每个线程最多调用一次这个方法，</div><div class="line"> * 但也可能再次调用，发生在调用&#123;<span class="doctag">@link</span> #remove&#125;方法后，</div><div class="line"> * 紧接着调用&#123;<span class="doctag">@link</span> #get&#125;方法。</div><div class="line"> *</div><div class="line"> * &lt;p&gt;这个方法仅仅简单的返回null &#123;<span class="doctag">@code</span> null&#125;;</div><div class="line"> * 如果程序员想ThreadLocal线程局部变量有一个除null以外的初始值，</div><div class="line"> * 必须通过子类继承&#123;<span class="doctag">@code</span> ThreadLocal&#125; 的方式去重写此方法</div><div class="line"> * 通常, 可以通过匿名内部类的方式实现</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> 当前ThreadLocal的初始值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建一个ThreadLocal</div><div class="line"> * <span class="doctag">@see</span> #withInitial(java.util.function.Supplier)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadLocal</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回当前线程中保存ThreadLocal的值</div><div class="line"> * 如果当前线程没有此ThreadLocal变量，</div><div class="line"> * 则它会通过调用&#123;<span class="doctag">@link</span> #initialValue&#125; 方法进行初始化值</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> 返回当前线程对应此ThreadLocal的值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 获取当前线程对象</span></div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="comment">// 如果此map存在</span></div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 以当前的ThreadLocal 为 key，调用getEntry获取对应的存储实体e</span></div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// 找到对应的存储实体 e </span></div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            <span class="comment">// 获取存储实体 e 对应的 value值</span></div><div class="line">            <span class="comment">// 即为我们想要的当前线程对应此ThreadLocal的值</span></div><div class="line">            T result = (T)e.value;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果map不存在，则证明此线程没有维护的ThreadLocalMap对象</span></div><div class="line">    <span class="comment">// 调用setInitialValue进行初始化</span></div><div class="line">    <span class="keyword">return</span> setInitialValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * set的变样实现，用于初始化值initialValue，</div><div class="line"> * 用于代替防止用户重写set()方法</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the initial value 初始化后的值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 调用initialValue获取初始化的值</span></div><div class="line">    T value = initialValue();</div><div class="line">    <span class="comment">// 获取当前线程对象</span></div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="comment">// 如果此map存在</span></div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        <span class="comment">// 存在则调用map.set设置此实体entry</span></div><div class="line">        map.set(<span class="keyword">this</span>, value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></div><div class="line">        <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></div><div class="line">        <span class="comment">// 3）并将此实体entry作为第一个值存放至ThreadLocalMap中</span></div><div class="line">        createMap(t, value);</div><div class="line">    <span class="comment">// 返回设置的值value</span></div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取当前线程Thread对应维护的ThreadLocalMap </div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span>  t the current thread 当前线程</div><div class="line"> * <span class="doctag">@return</span> the map 对应维护的ThreadLocalMap </div><div class="line"> */</div><div class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> t.threadLocals;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>调用 get() 操作获取 ThreadLocal 中对应当前线程存储的值时，进行了如下操作：</p>
<p>1 ) 获取当前线程 Thread 对象，进而获取此线程对象中维护的 ThreadLocalMap 对象。</p>
<p>2 ) 判断当前的 ThreadLocalMap 是否存在：</p>
</li>
<li><p>如果存在，则以当前的ThreadLocal为 key，调用ThreadLocalMap中的getEntry方法获取对应的存储实体 e。找到对应的存储实体 e，获取存储实体 e 对应的 value 值，即为我们想要的当前线程对应此ThreadLocal的值，返回结果值。</p>
</li>
<li><p>如果不存在，则证明此线程没有维护的 ThreadLocalMap 对象，调用 setInitialValue 方法进行初始化。返回setInitialValue 初始化的值。</p>
</li>
<li><p>setInitialValue 方法的操作如下：</p>
<p>1 ) 调用initialValue获取初始化的值。</p>
<p>2 ) 获取当前线程Thread对象，进而获取此线程对象中维护的ThreadLocalMap对象。</p>
<p>3 ) 判断当前的ThreadLocalMap是否存在：</p>
</li>
<li><p>如果存在，则调用map.set 设置此实体entry。</p>
</li>
<li><p>如果不存在，则调用createMap 进行 ThreadLocalMap 对象的初始化，并将此实体 entry 作为第一个值存放至 ThreadLocalMap 中。</p>
</li>
</ul>
<h4 id="set-方法"><a href="#set-方法" class="headerlink" title="set() 方法"></a>set() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置当前线程对应的ThreadLocal的值</div><div class="line"> * 大多数子类都不需要重写此方法，</div><div class="line"> * 只需要重写 &#123;<span class="doctag">@link</span> #initialValue&#125;方法代替设置当前线程对应的ThreadLocal的值</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> value 将要保存在当前线程对应的 ThreadLocal 的值</div><div class="line"> *  </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    <span class="comment">// 获取当前线程对象</span></div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    <span class="comment">// 获取此线程对象中维护的 ThreadLocalMap 对象</span></div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="comment">// 如果此map存在</span></div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        <span class="comment">// 存在则调用map.set设置此实体entry</span></div><div class="line">        map.set(<span class="keyword">this</span>, value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></div><div class="line">        <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></div><div class="line">        <span class="comment">// 3）并将此实体entry作为第一个值存放至ThreadLocalMap中</span></div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 为当前线程Thread 创建对应维护的ThreadLocalMap. </div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> t the current thread 当前线程</div><div class="line"> * <span class="doctag">@param</span> firstValue 第一个要存放的ThreadLocal变量值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</div><div class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>调用 set(T value) 操作设置ThreadLocal中对应当前线程要存储的值时，进行了如下操作：</p>
<p>1 ) 获取当前线程 Thread 对象，进而获取此线程对象中维护的 ThreadLocalMap 对象。</p>
<p>2 ) 判断当前的 ThreadLocalMap 是否存在：</p>
</li>
<li><p>如果存在，则调用 map.set 设置此实体 entry。</p>
</li>
<li><p>如果不存在，则调用 createMap 进行 ThreadLocalMap 对象的初始化，并将此实体 entry 作为第一个值存放至 ThreadLocalMap 中。</p>
</li>
</ul>
<h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove() 方法"></a>remove() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除当前线程中保存的ThreadLocal对应的实体entry</div><div class="line"> * 如果此ThreadLocal变量在当前线程中调用 &#123;<span class="doctag">@linkplain</span> #get read&#125;方法</div><div class="line"> * 则会通过调用&#123;<span class="doctag">@link</span> #initialValue&#125;进行再次初始化，</div><div class="line"> * 除非此值value是通过当前线程内置调用 &#123;<span class="doctag">@linkplain</span> #set set&#125;设置的</div><div class="line"> * 这可能会导致在当前线程中多次调用&#123;<span class="doctag">@code</span> initialValue&#125;方法</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> 1.5</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 获取当前线程对象中维护的ThreadLocalMap对象</span></div><div class="line">     ThreadLocalMap m = getMap(Thread.currentThread());</div><div class="line">    <span class="comment">// 如果此map存在</span></div><div class="line">     <span class="keyword">if</span> (m != <span class="keyword">null</span>)</div><div class="line">        <span class="comment">// 存在则调用map.remove</span></div><div class="line">        <span class="comment">// 以当前ThreadLocal为key删除对应的实体entry</span></div><div class="line">         m.remove(<span class="keyword">this</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>调用 remove() 操作删除ThreadLocal中对应当前线程已存储的值时，进行了如下操作：</p>
<ol>
<li>获取当前线程 Thread 对象，进而获取此线程对象中维护的 ThreadLocalMap 对象。</li>
<li>判断当前的 ThreadLocalMap 是否存在， 如果存在，则调用 map.remove ，以当前 ThreadLocal 为 key 删除对应的实体 entry。</li>
</ol>
<h3 id="ThreadLocalMap的内部底层实现"><a href="#ThreadLocalMap的内部底层实现" class="headerlink" title="ThreadLocalMap的内部底层实现"></a>ThreadLocalMap的内部底层实现</h3><p>对 ThreadLocal 的常用操作实际是对线程Thread中的ThreadLocalMap进行操作，核心是ThreadLocalMap这个哈希表，接着我们来谈谈ThreadLocalMap的内部底层实现。</p>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ThreadLocalMap 是一个定制的自定义 hashMap 哈希表，只适合用于维护</div><div class="line"> * 线程对应ThreadLocal的值. 此类的方法没有在ThreadLocal 类外部暴露，</div><div class="line"> * 此类是私有的，允许在 Thread 类中以字段的形式声明 ，     </div><div class="line"> * 以助于处理存储量大，生命周期长的使用用途，</div><div class="line"> * 此类定制的哈希表实体键值对使用弱引用WeakReferences 作为key， </div><div class="line"> * 但是, 一旦引用不在被使用，</div><div class="line"> * 只有当哈希表中的空间被耗尽时，对应不再使用的键值对实体才会确保被 移除回收。</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实体entries在此hash map中是继承弱引用 WeakReference, </div><div class="line">     * 使用ThreadLocal 作为 key 键.  请注意，当key为null（i.e. entry.get()</div><div class="line">     * == null) 意味着此key不再被引用,此时实体entry 会从哈希表中删除。</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class="line">        <span class="comment">/** 当前 ThreadLocal 对应储存的值value. */</span></div><div class="line">        Object value;</div><div class="line"></div><div class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class="line">            <span class="keyword">super</span>(k);</div><div class="line">            value = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始容量大小 16 -- 必须是2的n次方.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 底层哈希表 table, 必要时需要进行扩容.</div><div class="line">     * 底层哈希表 table.length 长度必须是2的n次方.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Entry[] table;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实际存储键值对元素个数 entries.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下一次扩容时的阈值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// 默认为 0</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置触发扩容时的阈值 threshold</div><div class="line">     * 阈值 threshold = 底层哈希表table的长度 len * 2 / 3</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        threshold = len * <span class="number">2</span> / <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取该位置i对应的下一个位置index</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取该位置i对应的上一个位置index</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prevIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>ThreadLocalMap 的底层实现是一个定制的自定义 HashMap 哈希表，核心组成元素有：</p>
<p>1 ) Entry[] table; ：底层哈希表 table, 必要时需要进行扩容，底层哈希表 table.length 长度必须是2的n次方。</p>
<p>2 ) int size;：实际存储键值对元素个数 entries</p>
<p>3 ) int threshold;：下一次扩容时的阈值，阈值 threshold = len <em> 2 / 3 (底层哈希表table的长度)。当<code>size &gt;= threshold</code>时，遍历 table 并删除 key 为 null 的元素，如果删除后`size &gt;= threshold</em>3/4`时，需要对table 进行扩容</p>
</li>
<li><p>其中 Entry[] table; 哈希表存储的核心元素是 Entry ，Entry 包含：</p>
<p>1 ) <strong>ThreadLocal&lt;?&gt; k</strong>；：当前存储的 ThreadLocal 实例对象</p>
<p>2 ) <strong>Object value</strong>;：当前 ThreadLocal 对应储存的值value</p>
</li>
<li><p>需要注意的是，此 Entry 继承了弱引用  WeakReference ，所以在使用 ThreadLocalMap 时，发现<code>key == null</code>，则意味着此 key ThreadLocal 不在被引用，需要将其从 ThreadLocalMap 哈希表中移除。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用于创建一个新的hash map包含 (firstKey, firstValue).</div><div class="line"> * ThreadLocalMaps 构造方法是延迟加载的,所以我们只会在至少有一个</div><div class="line"> * 实体entry存放时，才初始化创建一次（仅初始化一次）。</div><div class="line"> */</div><div class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</div><div class="line">    <span class="comment">// 初始化 table 初始容量为 16</span></div><div class="line">    table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</div><div class="line">    <span class="comment">// 计算当前entry的存储位置</span></div><div class="line">    <span class="comment">// 存储位置计算等价于：</span></div><div class="line">    <span class="comment">// ThreadLocal 的 hash 值 threadLocalHashCode  % 哈希表的长度 length</span></div><div class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</div><div class="line">    <span class="comment">// 存储当前的实体，key 为 : 当前ThreadLocal  value：真正要存储的值</span></div><div class="line">    table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</div><div class="line">    <span class="comment">// 设置当前实际存储元素个数 size 为 1</span></div><div class="line">    size = <span class="number">1</span>;</div><div class="line">    <span class="comment">// 设置阈值，为初始化容量 16 的 2/3。</span></div><div class="line">    setThreshold(INITIAL_CAPACITY);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThreadLocalMap 的构造方法是延迟加载的，也就是说，只有当线程需要存储对应的 ThreadLocal 的值时，才初始化创建一次（仅初始化一次）。初始化步骤如下：</p>
<p>1） 初始化底层数组 table 的初始容量为 16。</p>
<p>2） 获取 ThreadLocal 中的 threadLocalHashCode ，通过<code>threadLocalHashCode &amp; (INITIAL_CAPACITY - 1)</code>，即ThreadLocal 的 hash 值 threadLocalHashCode % 哈希表的长度 length 的方式计算该实体的存储位置。</p>
<p>3） 存储当前的实体，key 为 : 当前ThreadLocal value：真正要存储的值</p>
<p>4）设置当前实际存储元素个数 size 为 1</p>
<p>5）设置阈值<code>setThreshold(INITIAL_CAPACITY)</code>，为初始化容量 16 的 2/3。</p>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据key 获取对应的实体 entry.  此方法快速适用于获取某一存在key的</div><div class="line"> * 实体 entry，否则，应该调用getEntryAfterMiss方法获取，这样做是为</div><div class="line"> * 了最大限制地提高直接命中的性能</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span>  key 当前thread local 对象</div><div class="line"> * <span class="doctag">@return</span> the entry 对应key的 实体entry, 如果不存在，则返回null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class="line">    <span class="comment">// 计算要获取的entry的存储位置</span></div><div class="line">    <span class="comment">// 存储位置计算等价于：</span></div><div class="line">    <span class="comment">// ThreadLocal 的 hash 值 threadLocalHashCode  % 哈希表</span></div><div class="line">    的长度 length</div><div class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</div><div class="line">    <span class="comment">// 获取到对应的实体 Entry </span></div><div class="line">    Entry e = table[i];</div><div class="line">    <span class="comment">// 存在对应实体并且对应key相等，即同一ThreadLocal</span></div><div class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</div><div class="line">        <span class="comment">// 返回对应的实体Entry </span></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">// 不存在 或 key不一致，则通过调用getEntryAfterMiss继续查找</span></div><div class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 当根据key找不到对应的实体entry 时，调用此方法。</div><div class="line"> * 直接定位到对应的哈希表位置</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span>  key 当前thread local 对象</div><div class="line"> * <span class="doctag">@param</span>  i 此对象在哈希表 table中的存储位置 index</div><div class="line"> * <span class="doctag">@param</span>  e the entry 实体对象</div><div class="line"> * <span class="doctag">@return</span> the entry 对应key的 实体entry, 如果不存在，则返回null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    <span class="comment">// 循环遍历当前位置的所有实体entry</span></div><div class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 获取当前entry 的 key ThreadLocal</span></div><div class="line">        ThreadLocal&lt;?&gt; k = e.get();</div><div class="line">       <span class="comment">// 比较key是否一致，一致则返回</span></div><div class="line">        <span class="keyword">if</span> (k == key)</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">        <span class="comment">// 找到对应的entry ，但其key 为 null，则证明引用已经不存在</span></div><div class="line">        <span class="comment">// 这是因为Entry继承的是WeakReference，这是弱引用带来的坑</span></div><div class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>)</div><div class="line">            <span class="comment">// 删除过期(stale)的entry</span></div><div class="line">            expungeStaleEntry(i);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="comment">// key不一致 ，key也不为空，则遍历下一个位置，继续查找</span></div><div class="line">            i = nextIndex(i, len);</div><div class="line">        <span class="comment">// 获取下一个位置的实体 entry</span></div><div class="line">        e = tab[i];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 遍历完毕，找不到则返回null</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除对应位置的过期实体，并删除此位置后对应相关联位置key = null的实体</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> staleSlot 已知的key = null 的对应的位置索引</div><div class="line"> * <span class="doctag">@return</span> 对应过期实体位置索引的下一个key = null的位置</div><div class="line"> * (所有的对应位置都会被检查)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</div><div class="line">    <span class="comment">// 获取对应的底层哈希表 table</span></div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="comment">// 获取哈希表长度</span></div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line"></div><div class="line">    <span class="comment">// 擦除这个位置上的脏数据</span></div><div class="line">    tab[staleSlot].value = <span class="keyword">null</span>;</div><div class="line">    tab[staleSlot] = <span class="keyword">null</span>;</div><div class="line">    size--;</div><div class="line"></div><div class="line">    <span class="comment">// 直到我们找到 Entry e = null，才执行rehash操作</span></div><div class="line">    <span class="comment">// 就是遍历完该位置的所有关联位置的实体</span></div><div class="line">    Entry e;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="comment">// 查找该位置对应所有关联位置的过期实体，进行擦除操作</span></div><div class="line">    <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</div><div class="line">         (e = tab[i]) != <span class="keyword">null</span>;</div><div class="line">         i = nextIndex(i, len)) &#123;</div><div class="line">        ThreadLocal&lt;?&gt; k = e.get();</div><div class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">            e.value = <span class="keyword">null</span>;</div><div class="line">            tab[i] = <span class="keyword">null</span>;</div><div class="line">            size--;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (h != i) &#123;</div><div class="line">                tab[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                <span class="comment">// 我们必须一直遍历直到最后</span></div><div class="line">                <span class="comment">// 因为还可能存在多个过期的实体</span></div><div class="line">                <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</div><div class="line">                    h = nextIndex(h, len);</div><div class="line">                tab[h] = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除所有过期的实体</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</div><div class="line">        Entry e = tab[j];</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>)</div><div class="line">            expungeStaleEntry(j);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>ThreadLocal 的 get() 操作实际是调用 ThreadLocalMap 的 getEntry(ThreadLocal&lt;?&gt; key) 方法,此方法快速适用于获取某一存在 key 的实体 entry，否则，应该调用<code>getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)</code>方法获取，这样做是为了最大限制地提高直接命中的性能，该方法进行了如下操作：</p>
<p>1 ) 计算要获取的 entry 的存储位置，存储位置计算等价于：ThreadLocal 的 hash 值 threadLocalHashCode % 哈希表的长度 length。</p>
<p>2 ) 根据计算的存储位置，获取到对应的实体 Entry。判断对应实体 Entry 是否存在 并且 key 是否相等：</p>
</li>
<li><p>存在对应实体 Entry 并且对应 key 相等，即同一 ThreadLocal ，返回对应的实体 Entry。</p>
</li>
<li><p>不存在对应实体 Entry 或者  key 不相等，则通过调用<code>getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)</code>方法继续查找。</p>
</li>
<li><p><code>getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e)</code>方法操作如下：</p>
<p>1 ) 获取底层哈希表数组 table，循环遍历对应要查找的实体 Entry 所关联的位置。</p>
<p>2 ) 获取当前遍历的 entry 的  key ThreadLocal ，比较 key 是否一致，一致则返回。</p>
<p>3 ) 如果 key 不一致 并且 key 为 null，则证明引用已经不存在，这是因为 Entry 继承的是 WeakReference，这是弱引用带来的坑。调用<code>expungeStaleEntry(int staleSlot)</code>方法删除过期的实体 Entry（此方法不单独解释，请查看示例代码，有详细注释说明）。</p>
<p>4 ) key不一致 ，key也不为空，则遍历下一个位置，继续查找。</p>
<p>5 ) 遍历完毕，仍然找不到则返回null。</p>
<p>​</p>
</li>
</ul>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 设置对应ThreadLocal的值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> key 当前thread local 对象</div><div class="line">     * <span class="doctag">@param</span> value 要设置的值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 我们不会像get()方法那样使用快速设置的方式，</span></div><div class="line">        <span class="comment">// 因为通常很少使用set()方法去创建新的实体</span></div><div class="line">        <span class="comment">// 相对于替换一个已经存在的实体, 在这种情况下,</span></div><div class="line">        <span class="comment">// 快速设置方案会经常失败。</span></div><div class="line"></div><div class="line">        <span class="comment">// 获取对应的底层哈希表 table</span></div><div class="line">        Entry[] tab = table;</div><div class="line">        <span class="comment">// 获取哈希表长度</span></div><div class="line">        <span class="keyword">int</span> len = tab.length;</div><div class="line">        <span class="comment">// 计算对应threalocal的存储位置</span></div><div class="line">        <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 循环遍历table对应该位置的实体，查找对应的threadLocal</span></div><div class="line">        <span class="keyword">for</span> (Entry e = tab[i];e != <span class="keyword">null</span>;e = tab[i = nextIndex(i, len)]) &#123;</div><div class="line">            <span class="comment">// 获取当前位置的ThreadLocal</span></div><div class="line">            ThreadLocal&lt;?&gt; k = e.get();</div><div class="line">            <span class="comment">// 如果key threadLocal一致，则证明找到对应的threadLocal</span></div><div class="line">            <span class="keyword">if</span> (k == key) &#123;</div><div class="line">                <span class="comment">// 赋予新值</span></div><div class="line">                e.value = value;</div><div class="line">                <span class="comment">// 结束</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 如果当前位置的key threadLocal为null</span></div><div class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 替换该位置key == null 的实体为当前要设置的实体</span></div><div class="line">                replaceStaleEntry(key, value, i);</div><div class="line">                <span class="comment">// 结束</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 当前位置的k ！= key  &amp;&amp; k != null</span></div><div class="line">        <span class="comment">// 创建新的实体，并存放至当前位置i</span></div><div class="line">        tab[i] = <span class="keyword">new</span> Entry(key, value);</div><div class="line">        <span class="comment">// 实际存储键值对元素个数 + 1</span></div><div class="line">        <span class="keyword">int</span> sz = ++size;</div><div class="line">        <span class="comment">// 由于弱引用带来了这个问题，所以先要清除无用数据，才能判断现在的size有没有达到阀值threshhold</span></div><div class="line">        <span class="comment">// 如果没有要清除的数据，存储元素个数仍然 大于 阈值 则扩容</span></div><div class="line">        <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class="line">            <span class="comment">// 扩容</span></div><div class="line">            rehash();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当执行set操作时，获取对应的key threadLocal，并替换过期的实体</div><div class="line">     * 将这个value值存储在对应key threadLocal的实体中，无论是否已经存在体</div><div class="line">     * 对应的key threadLocal</div><div class="line">     *</div><div class="line">     * 有一个副作用, 此方法会删除该位置下和该位置nextIndex对应的所有过期的实体</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  key 当前thread local 对象</div><div class="line">     * <span class="doctag">@param</span>  value 当前thread local 对象对应存储的值</div><div class="line">     * <span class="doctag">@param</span>  staleSlot 第一次找到此过期的实体对应的位置索引index</div><div class="line">     *         .</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span></div><div class="line">                                   <span class="keyword">int</span> staleSlot) &#123;</div><div class="line">        <span class="comment">// 获取对应的底层哈希表 table</span></div><div class="line">        Entry[] tab = table;</div><div class="line">        <span class="comment">// 获取哈希表长度</span></div><div class="line">        <span class="keyword">int</span> len = tab.length;</div><div class="line">        Entry e;</div><div class="line"></div><div class="line">        <span class="comment">// 往前找，找到table中第一个过期的实体的下标</span></div><div class="line">        <span class="comment">// 清理整个table是为了避免因为垃圾回收带来的连续增长哈希的危险</span></div><div class="line">        <span class="comment">// 也就是说，哈希表没有清理干净，当GC到来的时候，后果很严重</span></div><div class="line"></div><div class="line">        <span class="comment">// 记录要清除的位置的起始首位置</span></div><div class="line">        <span class="keyword">int</span> slotToExpunge = staleSlot;</div><div class="line">        <span class="comment">// 从该位置开始，往前遍历查找第一个过期的实体的下标</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = prevIndex(staleSlot, len);</div><div class="line">             (e = tab[i]) != <span class="keyword">null</span>;</div><div class="line">             i = prevIndex(i, len))</div><div class="line">            <span class="keyword">if</span> (e.get() == <span class="keyword">null</span>)</div><div class="line">                slotToExpunge = i;</div><div class="line"></div><div class="line">        <span class="comment">// 找到key一致的ThreadLocal或找到一个key为 null的</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nextIndex(staleSlot, len);</div><div class="line">             (e = tab[i]) != <span class="keyword">null</span>;</div><div class="line">             i = nextIndex(i, len)) &#123;</div><div class="line">            ThreadLocal&lt;?&gt; k = e.get();</div><div class="line"></div><div class="line">            <span class="comment">// 如果我们找到了key，那么我们就需要把它跟新的过期数据交换来保持哈希表的顺序</span></div><div class="line">            <span class="comment">// 那么剩下的过期Entry呢，就可以交给expungeStaleEntry方法来擦除掉</span></div><div class="line">            <span class="comment">// 将新设置的实体放置在此过期的实体的位置上</span></div><div class="line">            <span class="keyword">if</span> (k == key) &#123;</div><div class="line">                <span class="comment">// 替换，将要设置的值放在此过期的实体中</span></div><div class="line">                e.value = value;</div><div class="line">                tab[i] = tab[staleSlot];</div><div class="line">                tab[staleSlot] = e;</div><div class="line"></div><div class="line">                <span class="comment">// 如果存在，则开始清除之前过期的实体</span></div><div class="line">                <span class="keyword">if</span> (slotToExpunge == staleSlot)</div><div class="line">                    slotToExpunge = i;</div><div class="line">                <span class="comment">// 在这里开始清除过期数据</span></div><div class="line">                cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// / 如果我们没有在往后查找中找没有找到过期的实体，</span></div><div class="line">            <span class="comment">// 那么slotToExpunge就是第一个过期Entry的下标了</span></div><div class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)</div><div class="line">                slotToExpunge = i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 最后key仍没有找到，则将要设置的新实体放置</span></div><div class="line">        <span class="comment">// 在原过期的实体对应的位置上。</span></div><div class="line">        tab[staleSlot].value = <span class="keyword">null</span>;</div><div class="line">        tab[staleSlot] = <span class="keyword">new</span> Entry(key, value);</div><div class="line"></div><div class="line">        <span class="comment">// 如果该位置对应的其他关联位置存在过期实体，则清除</span></div><div class="line">        <span class="keyword">if</span> (slotToExpunge != staleSlot)</div><div class="line">            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 启发式的扫描查找一些过期的实体并清除，</div><div class="line"> * 此方法会再添加新实体的时候被调用, </div><div class="line"> * 或者过期的元素被清除时也会被调用.</div><div class="line"> * 如果实在没有过期数据，那么这个算法的时间复杂度就是O(log n)</div><div class="line"> * 如果有过期数据，那么这个算法的时间复杂度就是O(n)</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> i 一个确定不是过期的实体的位置，从这个位置i开始扫描</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> n 扫描控制: 有&#123;<span class="doctag">@code</span> log2(n)&#125; 单元会被扫描,</div><div class="line"> * 除非找到了过期的实体, 在这种情况下</div><div class="line"> * 有&#123;<span class="doctag">@code</span> log2(table.length)-1&#125; 的格外单元会被扫描.</div><div class="line"> * 当调用插入时, 这个参数的值是存储实体的个数，</div><div class="line"> * 但如果调用 replaceStaleEntry方法, 这个值是哈希表table的长度</div><div class="line"> * (注意: 所有的这些都可能或多或少的影响n的权重</div><div class="line"> * 但是这个版本简单，快速，而且似乎执行效率还可以）</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> true 返回true，如果有任何过期的实体被删除。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        i = nextIndex(i, len);</div><div class="line">        Entry e = tab[i];</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) &#123;</div><div class="line">            n = len;</div><div class="line">            removed = <span class="keyword">true</span>;</div><div class="line">            i = expungeStaleEntry(i);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> removed;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 哈希表扩容方法</div><div class="line"> * 首先扫描整个哈希表table，删除过期的实体</div><div class="line"> * 缩小哈希表table大小 或 扩大哈希表table大小，扩大的容量是加倍.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 删除所有过期的实体</span></div><div class="line">    expungeStaleEntries();</div><div class="line"></div><div class="line">    <span class="comment">// 使用较低的阈值threshold加倍以避免滞后</span></div><div class="line">    <span class="comment">// 存储实体个数 大于等于 阈值的3/4则扩容</span></div><div class="line">    <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</div><div class="line">        resize();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 扩容方法，以2倍的大小进行扩容</div><div class="line"> * 扩容的思想跟HashMap很相似，都是把容量扩大两倍</div><div class="line"> * 不同之处还是因为WeakReference带来的</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 记录旧的哈希表</span></div><div class="line">    Entry[] oldTab = table;</div><div class="line">    <span class="comment">// 记录旧的哈希表长度</span></div><div class="line">    <span class="keyword">int</span> oldLen = oldTab.length;</div><div class="line">    <span class="comment">// 新的哈希表长度为旧的哈希表长度的2倍</span></div><div class="line">    <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</div><div class="line">    <span class="comment">// 创建新的哈希表</span></div><div class="line">    Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 逐一遍历旧的哈希表table的每个实体，重新分配至新的哈希表中</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</div><div class="line">        <span class="comment">// 获取对应位置的实体</span></div><div class="line">        Entry e = oldTab[j];</div><div class="line">        <span class="comment">// 如果实体不会null</span></div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 获取实体对应的ThreadLocal</span></div><div class="line">            ThreadLocal&lt;?&gt; k = e.get(); </div><div class="line">            <span class="comment">// 如果该ThreadLocal 为 null</span></div><div class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 则对应的值也要清除</span></div><div class="line">                <span class="comment">// 就算是扩容，也不能忘了为擦除过期数据做准备</span></div><div class="line">                e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 如果不是过期实体，则根据新的长度重新计算存储位置</span></div><div class="line">                <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</div><div class="line">               <span class="comment">// 将该实体存储在对应ThreadLocal的最后一个位置</span></div><div class="line">                <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</div><div class="line">                    h = nextIndex(h, newLen);</div><div class="line">                newTab[h] = e;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 重新分配位置完毕，则重新计算阈值Threshold</span></div><div class="line">    setThreshold(newLen);</div><div class="line">    <span class="comment">// 记录实际存储元素个数</span></div><div class="line">    size = count;</div><div class="line">    <span class="comment">// 将新的哈希表赋值至底层table</span></div><div class="line">    table = newTab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThreadLocal 的<code>set(T value)</code>操作实际是调用 ThreadLocalMap 的<code>set(ThreadLocal&lt;?&gt; key, Object value)</code>方法，该方法进行了如下操作：</p>
<p>1 ) 获取对应的底层哈希表 table ，计算对应 threalocal 的存储位置。</p>
<p>2 ) 循环遍历 table 对应该位置的实体，查找对应的 threadLocal。</p>
<p>3 ) 获取当前位置的 threadLocal，如果 key threadLocal 一致，则证明找到对应的 threadLocal，将新值赋值给找到的当前实体 Entry 的 value 中，结束。</p>
<p>4 ) 如果当前位置的 key threadLocal 不一致，并且 key threadLocal 为 null，则调用<code>replaceStaleEntry(ThreadLocal&lt;?&gt; key, Object value,int staleSlot)</code>方法（此方法不单独解释，请查看示例代码，有详细注释说明），替换该位置<code>key == null</code> 的实体为当前要设置的实体，结束。</p>
<p>5 ) 如果当前位置的 key threadLocal 不一致，并且 key threadLocal 不为 null ，则创建新的实体，并存放至当前位置 i <code>tab[i] = new Entry(key, value);</code>，实际存储键值对元素个数<code>size + 1</code>，由于弱引用带来了这个问题，所以要调用<code>cleanSomeSlots(int i, int n)</code>方法清除无用数据（此方法不单独解释，请查看示例代码，有详细注释说明），才能判断现在的 size 有没有达到阀值 threshhold ，如果没有要清除的数据，存储元素个数仍然 大于 阈值 则调用 rehash 方法进行扩容（此方法不单独解释，请查看示例代码，有详细注释说明）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除对应ThreadLocal的实体</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class="line">    <span class="comment">// 获取对应的底层哈希表 table</span></div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="comment">// 获取哈希表长度</span></div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    <span class="comment">// 计算对应threalocal的存储位置</span></div><div class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</div><div class="line">    <span class="comment">// 循环遍历table对应该位置的实体，查找对应的threadLocal</span></div><div class="line">    <span class="keyword">for</span> (Entry e = tab[i];e != <span class="keyword">null</span>;e = tab[i = nextIndex(i, len)]) &#123;</div><div class="line">        <span class="comment">// 如果key threadLocal一致，则证明找到对应的threadLocal</span></div><div class="line">        <span class="keyword">if</span> (e.get() == key) &#123;</div><div class="line">            <span class="comment">// 执行清除操作</span></div><div class="line">            e.clear();</div><div class="line">            <span class="comment">// 清除此位置的实体</span></div><div class="line">            expungeStaleEntry(i);</div><div class="line">            <span class="comment">// 结束</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThreadLocal 的<code>remove()</code>操作实际是调用 ThreadLocalMap 的<code>remove(ThreadLocal&lt;?&gt; key)</code>方法，该方法进行了如下操作：</p>
<p>1 ) 获取对应的底层哈希表 table，计算对应 threalocal 的存储位置。</p>
<p>2 ) 循环遍历 table 对应该位置的实体，查找对应的 threadLocal。</p>
<p>3 ) 获取当前位置的threadLocal，如果 key threadLocal 一致，则证明找到对应的 threadLocal，执行删除操作，删除此位置的实体，结束。</p>
<h2 id="ThreadLocal-在现时有什么应用场景"><a href="#ThreadLocal-在现时有什么应用场景" class="headerlink" title="ThreadLocal 在现时有什么应用场景"></a>ThreadLocal 在现时有什么应用场景</h2><p>总的来说 ThreadLocal 主要是解决2种类型的问题：</p>
<ul>
<li>解决并发问题：使用 ThreadLocal 代替 synchronized 来保证线程安全。同步机制采用了“以时间换空间”的方式，而ThreadLocal 采用了“以空间换时间”的方式。前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，因此可以同时访问而互不影响。</li>
<li>解决数据存储问题：ThreadLocal 为变量在每个线程中都创建了一个副本，所以每个线程可以访问自己内部的副本变量，不同线程之间不会互相干扰。如一个Parameter对象的数据需要在多个模块中使用，如果采用参数传递的方式，显然会增加模块之间的耦合性。此时我们可以使用 ThreadLocal 解决。</li>
</ul>
<p>应用场景：</p>
<p>Spring 使用 ThreadLocal 解决线程安全问题</p>
<ul>
<li>我们知道在一般情况下，只有无状态的 Bean 才可以在多线程环境下共享，在 Spring 中，绝大部分 Bean 都可以声明为 singleton 作用域。就是因为 Spring 对一些 Bean（如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等）中非线程安全状态采用ThreadLocal进行处理，让它们也成为线程安全的状态，因为有状态的 Bean 就可以在多线程中共享了。</li>
<li>一般的 Web 应用划分为展现层、服务层和持久层三个层次，在不同的层中编写对应的逻辑，下层通过接口向上层开放功能调用。在一般情况下，从接收请求到返回响应所经过的所有程序调用都同属于一个线程ThreadLocal 是解决线程安全问题一个很好的思路，它通过为每个线程提供一个独立的变量副本解决了变量并发访问的冲突问题。在很多情况下，ThreadLocal 比直接使用 synchronized 同步机制解决线程安全问题更简单，更方便，且结果程序拥有更高的并发性。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestContextHolder</span>  </span>&#123;</div><div class="line">····</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jsfPresent =</div><div class="line">            ClassUtils.isPresent(<span class="string">"javax.faces.context.FacesContext"</span>, RequestContextHolder.class.getClassLoader());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder =</div><div class="line">            <span class="keyword">new</span> NamedThreadLocal&lt;RequestAttributes&gt;(<span class="string">"Request attributes"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; inheritableRequestAttributesHolder =</div><div class="line">            <span class="keyword">new</span> NamedInheritableThreadLocal&lt;RequestAttributes&gt;(<span class="string">"Request context"</span>);</div><div class="line"></div><div class="line">·····</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ThreadLocal-和-synchronized-的区别"><a href="#ThreadLocal-和-synchronized-的区别" class="headerlink" title="ThreadLocal 和 synchronized 的区别"></a>ThreadLocal 和 synchronized 的区别</h2><p>ThreadLocal 和 synchronized 关键字都用于处理多线程并发访问变量的问题，只是二者处理问题的角度和思路不同。</p>
<ol>
<li>ThreadLocal是一个Java类,通过对当前线程中的局部变量的操作来解决不同线程的变量访问的冲突问题。所以，ThreadLocal提供了线程安全的共享对象机制，每个线程都拥有其副本。</li>
<li>Java中的synchronized是一个保留字，它依靠JVM的锁机制来实现临界区的函数或者变量的访问中的原子性。在同步机制中，通过对象的锁机制保证同一时间只有一个线程访问变量。此时，被用作“锁机制”的变量时多个线程共享的。</li>
<li>同步机制(synchronized关键字)采用了以“时间换空间”的方式，提供一份变量，让不同的线程排队访问。而ThreadLocal采用了“以空间换时间”的方式，为每一个线程都提供一份变量的副本，从而实现同时访问而互不影响。</li>
</ol>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li>ThreadLocal提供线程内部的局部变量，在本线程内随时随地可取，隔离其他线程。</li>
<li>ThreadLocal的设计是：每个Thread维护一个ThreadLocalMap哈希表，这个哈希表的key是ThreadLocal实例本身，value才是真正要存储的值Object。</li>
<li>对ThreadLocal 的常用操作实际是对线程 Thread 中的 ThreadLocalMap 进行操作。</li>
<li>ThreadLocalMap 的底层实现是一个定制的自定义哈希表，ThreadLocalMap 的阈值threshold = 底层哈希表 table 的长度 <code>len * 2 / 3</code>，当实际存储元素个数 size  大于或等于 阈值 threshold 的 <code>3/4</code> 时<code>size &gt;= threshold*3/4</code>，则对底层哈希表数组 table 进行扩容操作。</li>
<li>ThreadLocalMap 中的哈希表 Entry[] table 存储的核心元素是 Entry ，存储的 key 是 ThreadLocal 实例对象，value 是ThreadLocal 对应储存的值value。需要注意的是，此Entry继承了弱引用 WeakReference，所以在使用ThreadLocalMap时，发现<code>key == null</code>，则意味着此key ThreadLocal不在被引用，需要将其从ThreadLocalMap哈希表中移除。</li>
<li>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用来引用它，那么系统 GC 的时候，这个ThreadLocal势必会被回收。所以，在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value。如果我们不主动调用上述操作，则会导致内存泄露。</li>
<li>为了安全地使用ThreadLocal，必须要像每次使用完锁就解锁一样，在每次使用完ThreadLocal后都要调用remove() 来清理无用的Entry。这在操作在使用线程池时尤为重要。</li>
<li>ThreadLocal 和synchronized的区别：同步机制(synchronized关键字)采用了以“时间换空间”的方式，提供一份变量，让不同的线程排队访问。而ThreadLocal采用了“以空间换时间”的方式，为每一个线程都提供一份变量的副本，从而实现同时访问而互不影响。</li>
<li>ThreadLocal主要是解决2种类型的问题：A. 解决并发问题：使用ThreadLocal代替同步机制解决并发问题。B. 解决数据存储问题：如一个Parameter对象的数据需要在多个模块中使用，如果采用参数传递的方式，显然会增加模块之间的耦合性。此时我们可以使用ThreadLocal解决。</li>
<li>每个线程内部都有一个名字为threadLocals的成员变量，该变量类型为HashMap，其中key为我们定义的ThreadLocal变量的this引用，value则为我们set时候的值，每个线程的本地变量是存到到线程自己的内存变量threadLocals里面的，如果当前线程一直不消失那么这些本地变量会一直存到，所以可能会造成内存溢出，所以使用完毕后要记得调用ThreadLocal的remove方法删除对应线程的threadLocals中的本地变量。如果子线程中想要使用父线程中的threadlocal变量该如何做那？敬请期待 <code>Java中高并发编程必备基础之并发包源码剖析</code> 一书出版</li>
</ol>
<p>原文地址：<a href="https://juejin.im/entry/5a4c753a6fb9a0451a76c538" target="_blank" rel="external">https://juejin.im/entry/5a4c753a6fb9a0451a76c538</a></p>
]]></content>
      
        <categories>
            
            <category> ThreadLocal </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java 源码解读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text新建.vue模板并高亮]]></title>
      <url>/2018/06/03/Sublime%20Text%E6%96%B0%E5%BB%BA.vue%E6%A8%A1%E6%9D%BF%E5%B9%B6%E9%AB%98%E4%BA%AE/</url>
      <content type="html"><![CDATA[<h1 id="Sublime-Text新建-vue模板并高亮"><a href="#Sublime-Text新建-vue模板并高亮" class="headerlink" title="Sublime Text新建.vue模板并高亮"></a>Sublime Text新建.vue模板并高亮</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>下载安装新建文件模板插件 <code>SublimeTmpl</code></li>
<li>下载安装vue语法高亮插件 <code>Vue Syntax Highlight</code></li>
</ul>
<h5 id="Sublime-Text安装插件的方法有两种："><a href="#Sublime-Text安装插件的方法有两种：" class="headerlink" title="Sublime Text安装插件的方法有两种："></a>Sublime Text安装插件的方法有两种：</h5><ol>
<li>使用Sublime Text自带的安装库 <code>Package Control</code> 去安装<br>点击菜单栏的 <code>Preferences -&gt; Package Control</code> 或使用快捷键 <code>CTRL+SHIFT+P</code> 打开终端窗口，输入<code>Install</code>选择<code>Package Control: Install Package</code>来安装</li>
<li>下载直接放入包目录 <code>(Preferences / Browse Packages)</code> <code>中文:(首选项 / 包浏览器)</code> 文件夹里面<ul>
<li><a href="https://github.com/kairyou/SublimeTmpl" target="_blank" rel="external">SublimeTmpl</a></li>
<li><a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="external">Vue Syntax Highlight</a></li>
</ul>
</li>
</ol>
<h2 id="创建-vue模板并让语法高亮"><a href="#创建-vue模板并让语法高亮" class="headerlink" title="创建.vue模板并让语法高亮"></a>创建.vue模板并让语法高亮</h2><p>安装完<code>Vue Syntax Highlight</code>之后，你打开<code>.vue</code>格式的文件就已经可以高亮了，我们现在来设置用快捷键直接创建<code>.vue</code>格式的文件。</p>
<h6 id="SublimeTmpl-默认只有6种语法模板："><a href="#SublimeTmpl-默认只有6种语法模板：" class="headerlink" title="SublimeTmpl 默认只有6种语法模板："></a><code>SublimeTmpl</code> 默认只有6种语法模板：</h6><ul>
<li>html <code>ctrl+alt+h</code></li>
<li>javascript <code>ctrl+alt+j</code></li>
<li>css <code>ctrl+alt+c</code></li>
<li>php <code>ctrl+alt+p</code></li>
<li>ruby <code>ctrl+alt+r</code></li>
<li>python <code>ctrl+alt+shift+p</code></li>
</ul>
<h6 id="我们现在新增创建-vue-格式的模板"><a href="#我们现在新增创建-vue-格式的模板" class="headerlink" title="我们现在新增创建 vue 格式的模板"></a>我们现在新增创建 <code>vue</code> 格式的模板</h6><ol>
<li><p>创建<code>vue</code>文件模板</p>
<ul>
<li>直接打开插件包的文件夹 <code>Preferences -&gt; Browse Packages</code></li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/ckm0BJkjl9.png" alt="mark"></p>
<p>​</p>
<p>首选项 -&gt; 浏览程序包</p>
<p>​</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/JBE3g91b7a.png" alt="mark"></p>
<p>​</p>
<p>包文件夹</p>
<ul>
<li>打开存放模板的文件夹 <code>templates</code>，随便复制一项，改名为<code>vue.tmpl</code></li>
</ul>
<p>​</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/8mc9145hab.png" alt="mark"></p>
<p>创建vue.tmpl</p>
<ul>
<li><code>vue.tmpl</code>内容改为你想要的模板</li>
</ul>
<p>​</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/JhL8j52hdC.png" alt="mark"></p>
<p>vue.tmpl内容</p>
</li>
<li><p>修改新建菜单，增加新建<code>vue</code>选项</p>
<ul>
<li><code>SublimeTmpl</code>新建菜单默认是没有<code>vue</code>的，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/EhKlBifH5b.png" alt="mark"></p>
<p>​</p>
<p>新建 -&gt; New File (SublimeTmpl)</p>
<ul>
<li>点击上图的 <code>Menu</code> 选项，或者打开 <code>Preferences -&gt; Package Settings -&gt; SublimeTmpl -&gt; Settings - Menu</code>，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/aebbHgC3jG.png" alt="mark"></p>
<p>​</p>
<p>打开菜单配置项</p>
<ul>
<li>复制一项，然后粘贴修改为 <code>vue</code> 项，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/L4hKlbbIm7.png" alt="mark"></p>
<p>​</p>
<p>新增vue项</p>
<ul>
<li>保存修改，就会在新建菜单里面出现<code>vue</code>项，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/Fkl7AbGj6e.png" alt="mark"></p>
<p>​</p>
<p>出现vue项</p>
<ul>
<li>点击上图<code>vue</code>新建项，就会出现之前设置的模板内容，只不过没有语法高亮，并且是纯文本格式，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/DDD66EB98b.png" alt="mark"></p>
<p>​</p>
<p>新建vue文件</p>
</li>
<li><p>模板绑定vue语法高亮</p>
<ul>
<li>打开 <code>Preferences -&gt; Package Settings -&gt; SublimeTmpl -&gt; Settings - Default</code>，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/JCecEJgji4.png" alt="mark"></p>
<p>​</p>
<p>打开默认设置项</p>
<ul>
<li>复制一项并修改为vue，路径如下</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/Jgf4ef10f5.png" alt="mark"></p>
<p>​</p>
<p>绑定vue语法</p>
<ul>
<li>绑定语法关联文件路径请查看目录 <code>Sublime Text3\Data\Cache</code>，寻找vue高亮语法插件名，并打开，如图</li>
</ul>
<p>​</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/a3d1AcCf25.png" alt="mark"></p>
<p>Sublime Text3\Data\Cache目录</p>
<p>​</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/67kf30ea7f.png" alt="mark"></p>
<p>​</p>
<p>Sublime Text3\Data\Cache\vue-syntax-highlight</p>
<ul>
<li>再次菜单新建vue就语法高亮了，如图</li>
</ul>
<p>​</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/1lA8G1g1Gd.png" alt="mark"></p>
<p>新建vue文件</p>
</li>
<li><p>绑定新建<code>vue</code>文件快捷键</p>
<ul>
<li>打开 <code>Preferences -&gt; Package Settings -&gt; SublimeTmpl -&gt; Key Bindings - Default</code>，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/CICf0f6gad.png" alt="mark"></p>
<p>​</p>
<p>打开设置快捷键文件</p>
<ul>
<li>复制一项，粘贴创建新建vue快捷键为 <code>ctrl+alt+v</code>，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/DCDLl85ejk.png" alt="mark"></p>
<p>​</p>
<p>创建快捷键</p>
<ul>
<li>保存后，菜单新建里也有了，如图</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/eLF86ba49j.png" alt="mark"></p>
<p>​</p>
<p>新建文件菜单</p>
<ul>
<li>试试，完美！</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180310/f1jmIeJlka.png" alt="mark"></p>
<p>​</p>
<p>完美</p>
</li>
</ol>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p><code>Preferences -&gt; Package Settings -&gt; SublimeTmpl -&gt; Settings - Commands</code> 文件好像是配置命令的，配置方法也跟上面相同，照猫画虎即可~</p>
<h4 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h4><p>通过这种方法，其他的语言模板也可以自己去创建。</p>
]]></content>
      
        <categories>
            
            <category> Sublime Text </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发工具使用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 3 搭建Python开发环境]]></title>
      <url>/2018/06/03/Sublime%20Text%203%20%E6%90%AD%E5%BB%BAPython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="Sublime-Text-3-搭建Python开发环境"><a href="#Sublime-Text-3-搭建Python开发环境" class="headerlink" title="Sublime Text 3 搭建Python开发环境"></a>Sublime Text 3 搭建Python开发环境</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  Sublime Text：一款具有代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制，用她来写代码，绝对是一种享受。相比于难于上手的 Vim ，浮肿沉重的 Eclipse ， VS ，即便体积轻巧迅速启动的 Editplus 、 Notepad++ ，在 Sublime Text 面前也略显失色，无疑这款性感无比的编辑器是 Coding 和 Writing 最佳的选择，没有之一。</p>
<a id="more"></a>
<p>  Sublime Text 3 的功能实在是太强大了，搭配各种 package ，码代码、美如画。对于 Sublime Text 3 的介绍网上一大堆，博主就不再这里赘述了。本篇博文主要是记录一下博主如何在 Sublime Text 3 下优雅的编写、编译、运行 python 代码。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>  我使用的版本是 Sublime Text Build 3143 ，大家自行下载后直接安装即可，安装完之后需要 License 来激活我们的软件。</p>
<p>​    <strong>Sublime Text Build 3143的下载路径：</strong></p>
<p>​    <a href="https://code.aliyun.com/shenwenfang106/SublimeTextBuild3143.git" target="_blank" rel="external">https://code.aliyun.com/shenwenfang106/SublimeTextBuild3143.git</a></p>
<p>  直接将下面的 License 复制过去就好，亲测可用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">—– BEGIN LICENSE —– </div><div class="line">TwitterInc </div><div class="line">200 User License </div><div class="line">EA7E-890007 </div><div class="line">1D77F72E 390CDD93 4DCBA022 FAF60790 </div><div class="line">61AA12C0 A37081C5 D0316412 4584D136 </div><div class="line">94D7F7D4 95BC8C1C 527DA828 560BB037 </div><div class="line">D1EDDD8C AE7B379F 50C9D69D B35179EF </div><div class="line">2FE898C4 8E4277A8 555CE714 E1FB0E43 </div><div class="line">D5D52613 C3D12E98 BC49967F 7652EED2 </div><div class="line">9D2D2E61 67610860 6D338B72 5CF95C69 </div><div class="line">E36B85CC 84991F19 7575D828 470A92AB </div><div class="line">—— END LICENSE ——12345678910111213</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h3><p>  按 Ctrl+` 调出 console ，粘贴以下代码到底部命令行并回车：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)<span class="number">1</span></div></pre></td></tr></table></figure>
<p>  重启 Sublime Text 3。如果在 Perferences-&gt;package settings 中看到 package control 这一项，则安装成功。按下 Ctrl+Shift+P 调出命令面板输入 install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</p>
<p>  下面介绍几个比较实用的 package 。</p>
<h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p>  SideBarEnhancements 扩展了侧边栏中菜单选项的数量，从而提升你的工作效率。诸如 “New file” 和 “Duplicate” 这样的选项对于 ST3 来说实在是太重要了，而且仅凭 “Delete” 这一个功能就让这个插件值得下载。这个功能将你会在你删除文件的时候把它放入回收站。虽然这个功能乍一看没什么用，但是当你没有使用这样的功能而彻底删除了一个文件的时候，除非你用了版本管理软件，否则你将很难恢复这个文件。</p>
<h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p>  Anaconda 是一个终极 Python 插件。它为 ST3 增添了多项 IDE 类似的功能，例如：</p>
<ul>
<li>Autocompletion 自动完成，该选项默认开启，同时提供多种配置选项。</li>
<li>Code linting 使用支持 pep8 标准的 PyLint 或者 PyFlakes。</li>
<li>McCabe code complexity checker 让你可以在特定的文件中使用 McCabe complexity checker.</li>
<li>Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数，或者类的定义。</li>
<li>Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。</li>
<li>Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</li>
</ul>
<p>  但是，刚安装完之后，打开一个 python 文档，所有代码都会被白色细线框中，如图所示；</p>
<p>​    <img src="https://blogimg.nos-eastchina1.126.net/171221/8FeHd6GlLB.png" alt="mark"></p>
<p>  强迫症的我看着好难受，决心要搞一搞这东西。后来发现在 Sublime &gt; Preferences &gt; Package Settings &gt; Anaconda &gt; Settings – Default 下修改 linting behaviour 选项即可，我这里改成了只有在保存的时候linting工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">    Sets the linting behaviour for anaconda:</div><div class="line"></div><div class="line">    "always" - Linting works always even while you are writing (in the background)</div><div class="line">    "load-save" - Linting works in file load and save only</div><div class="line">    "save-only" - Linting works in file save only</div><div class="line">*/</div><div class="line"><span class="string">"anaconda_linting_behaviour"</span>: <span class="string">"save-only"</span>,</div></pre></td></tr></table></figure>
<h3 id="SublimeREPL"><a href="#SublimeREPL" class="headerlink" title="SublimeREPL"></a>SublimeREPL</h3><p>  这可能是对程序员来说最有用的插件。SublimeREPL 允许你在 Sublime Text 中运行各种语言（NodeJS ，Python，Ruby， Scala 和 Haskell 等等）。</p>
<p>  在 Sublime &gt; Tools &gt; SublimeREPL 下我们可以看到 SublimeREPL 支持运行的所有语言。</p>
<p>  下面的代码是在 AppData\Roaming\Sublime Text 3\Packages\SublimeREPL\config\Python 下的 Default.sublime-commands 文件，从中我们可以看到 SublimeREPL 所支持的 python 的各种运行方式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python"</span>,</div><div class="line">        <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, <span class="string">"args"</span>:</div><div class="line">        &#123;</div><div class="line">            <span class="string">"id"</span>: <span class="string">"repl_python"</span>,</div><div class="line">            <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python - PDB current file"</span>,</div><div class="line">        <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, <span class="string">"args"</span>:</div><div class="line">        &#123;</div><div class="line">            <span class="string">"id"</span>: <span class="string">"repl_python_pdb"</span>,</div><div class="line">            <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python - RUN current file"</span>,</div><div class="line">        <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, <span class="string">"args"</span>:</div><div class="line">        &#123;</div><div class="line">            <span class="string">"id"</span>: <span class="string">"repl_python_run"</span>,</div><div class="line">            <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"command"</span>: <span class="string">"python_virtualenv_repl"</span>,</div><div class="line">        <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python - virtualenv"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python - IPython"</span>,</div><div class="line">        <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, <span class="string">"args"</span>:</div><div class="line">        &#123;</div><div class="line">            <span class="string">"id"</span>: <span class="string">"repl_python_ipython"</span>,</div><div class="line">            <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>  接下来配置快捷键，打开 Sublime &gt; Preferences &gt; Key Building ，在右侧栏（ User 部分）添加下面的代码。<strong>下面的代码用 F5 来执行当前 Python 脚本，用 F4 来实现切换至 Python 命令行窗口</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;<span class="string">"keys"</span>:[<span class="string">"f5"</span>],</div><div class="line">    <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python - RUN current file"</span>,</div><div class="line">    <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, <span class="string">"args"</span>:</div><div class="line">    &#123;<span class="string">"id"</span>: <span class="string">"repl_python_run"</span>,</div><div class="line">    <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span>&#125;&#125;</div><div class="line">    ,</div><div class="line">    &#123;<span class="string">"keys"</span>:[<span class="string">"f4"</span>],</div><div class="line">    <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python"</span>,</div><div class="line">    <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, <span class="string">"args"</span>:</div><div class="line">    &#123;<span class="string">"id"</span>: <span class="string">"repl_python"</span>,</div><div class="line">    <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span>&#125;&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>【1】Shift+Ctrl+Alt+p 创建 python 文件</p>
<p> <img src="https://blogimg.nos-eastchina1.126.net/171221/GdKBia0ead.png" alt="mark"></p>
<p>先保存再执行。</p>
<p>【2】F5 执行代码 （如果你没有设置快捷键就 win+b）</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171221/ELAf82G4Aa.png" alt="mark"></p>
<p>【3】 看 Python 命令行窗口</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171221/fFkk8dBJ6B.png" alt="mark"></p>
<p>​    </p>
<p>  当然，如果你电脑里面安装了两个版本的 Python ，而你想指定使用某个版本，则需要修改下面的代码。下面的代码是在 AppData\Roaming\Sublime Text 3\Packages\SublimeREPL\config\Python 下的 Main.sublime-menu 文件，主要修改 “cmd” 后面跟着的 python 命令。比如我电脑里 python2.7 的执行程序命名是 python.exe ，而 python3.6 的执行程序命名为 python3.exe ，我想要使用 python3 ，所以把所有 “cmd” 后面跟着的命令都改为 “python3” 。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="string">"tools"</span>,</div><div class="line">        <span class="string">"children"</span>:</div><div class="line">        [&#123;</div><div class="line">            <span class="string">"caption"</span>: <span class="string">"SublimeREPL"</span>,</div><div class="line">            <span class="string">"mnemonic"</span>: <span class="string">"R"</span>,</div><div class="line">            <span class="string">"id"</span>: <span class="string">"SublimeREPL"</span>,</div><div class="line">            <span class="string">"children"</span>:</div><div class="line">            [</div><div class="line">                &#123;<span class="string">"caption"</span>: <span class="string">"Python"</span>,</div><div class="line">                <span class="string">"id"</span>: <span class="string">"Python"</span>,</div><div class="line"></div><div class="line">                 <span class="string">"children"</span>:[</div><div class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</div><div class="line">                     <span class="string">"caption"</span>: <span class="string">"Python"</span>,</div><div class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python"</span>,</div><div class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"P"</span>,</div><div class="line">                     <span class="string">"args"</span>: &#123;</div><div class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</div><div class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</div><div class="line">                        <span class="string">"cmd"</span>: [<span class="string">"python3"</span>, <span class="string">"-i"</span>, <span class="string">"-u"</span>],</div><div class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</div><div class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</div><div class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</div><div class="line">                        <span class="string">"extend_env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"python_virtualenv_repl"</span>,</div><div class="line">                     <span class="string">"id"</span>: <span class="string">"python_virtualenv_repl"</span>,</div><div class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - virtualenv"</span>&#125;,</div><div class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</div><div class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - PDB current file"</span>,</div><div class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python_pdb"</span>,</div><div class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"D"</span>,</div><div class="line">                     <span class="string">"args"</span>: &#123;</div><div class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</div><div class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</div><div class="line">                        <span class="string">"cmd"</span>: [<span class="string">"python3"</span>, <span class="string">"-i"</span>, <span class="string">"-u"</span>, <span class="string">"-m"</span>, <span class="string">"pdb"</span>, <span class="string">"$file_basename"</span>],</div><div class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</div><div class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</div><div class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</div><div class="line">                        <span class="string">"extend_env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</div><div class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - RUN current file"</span>,</div><div class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python_run"</span>,</div><div class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"R"</span>,</div><div class="line">                     <span class="string">"args"</span>: &#123;</div><div class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</div><div class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</div><div class="line">                        <span class="string">"cmd"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$file_basename"</span>],</div><div class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</div><div class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</div><div class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</div><div class="line">                        <span class="string">"extend_env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</div><div class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - IPython"</span>,</div><div class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python_ipython"</span>,</div><div class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"I"</span>,</div><div class="line">                     <span class="string">"args"</span>: &#123;</div><div class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</div><div class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</div><div class="line">                        <span class="string">"autocomplete_server"</span>: true,</div><div class="line">                        <span class="string">"cmd"</span>: &#123;</div><div class="line">                            <span class="string">"osx"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py"</span>],</div><div class="line">                            <span class="string">"linux"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py"</span>],</div><div class="line">                            <span class="string">"windows"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py"</span>]</div><div class="line">                        &#125;,</div><div class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</div><div class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</div><div class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</div><div class="line">                        <span class="string">"extend_env"</span>: &#123;</div><div class="line">                            <span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>,</div><div class="line">                            <span class="string">"SUBLIMEREPL_EDITOR"</span>: <span class="string">"$editor"</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    &#125;</div><div class="line">                ]&#125;</div><div class="line">            ]</div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>  别忘了， Sublime Text 3 也有自己的 build 功能，即也支持 python 等语言的代码构建（ ctrl + b ）。同样的，我们如何添加不同的 python 版本到我们的构建系统呢？很简单，Sublime &gt; Tools &gt; Build System &gt; New Build System，分别添加如下代码之后，再分别保存为 python2.sublime-build 和 python3.sublime-build ，这样，当我们再次打开 Sublime &gt; Tools &gt; Build System 之后，就会发现我们新添加的 python2 和 python3 构建系统了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"cmd"</span>: [<span class="string">"D:/Program Files/Python/Python27/python.exe"</span>, <span class="string">"-u"</span>, <span class="string">"$file"</span>],</div><div class="line">    <span class="string">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line([0-9]*)"</span>,</div><div class="line">    <span class="string">"selector"</span>: <span class="string">"source.python"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"cmd"</span>: [<span class="string">"D:/Program Files/Python/Python36/python3.exe"</span>, <span class="string">"-u"</span>, <span class="string">"$file"</span>],</div><div class="line">    <span class="string">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line([0-9]*)"</span>,</div><div class="line">    <span class="string">"selector"</span>: <span class="string">"source.python"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SublimeTmpl"><a href="#SublimeTmpl" class="headerlink" title="SublimeTmpl"></a>SublimeTmpl</h3><p>  快速生成文件模板</p>
<p>  ，SublimeTmpl能新建html、css、javascript、php、python、ruby六种类型的文件模板，所有的文件模板都在插件目录的templates文件夹里，可以自定义编辑文件模板。</p>
<p>  SublimeTmpl默认的快捷键:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ctrl+alt+h html</div><div class="line">ctrl+alt+j javascript</div><div class="line">ctrl+alt+c css</div><div class="line">ctrl+alt+p php</div><div class="line">ctrl+alt+r ruby</div><div class="line">ctrl+alt+shift+p python</div></pre></td></tr></table></figure>
<p>  这里我想修改一下python模板，所以就需要进行如下操作：Sublime &gt; Preferences &gt; Package Settings &gt; SublimeTmpl &gt; Settings – User 添加如下代码。然后 ctrl+alt+shift+p 来新建一个模板试试看。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line">    <span class="string">"disable_keymap_actions"</span>: false, // <span class="string">"all"</span>; <span class="string">"html,css"</span>  </div><div class="line">    <span class="string">"date_format"</span> : <span class="string">"%Y-%m-%d %H:%M:%S"</span>,  </div><div class="line">    <span class="string">"attr"</span>: &#123;  </div><div class="line">        <span class="string">"author"</span>: <span class="string">"WordZzzz"</span>,  </div><div class="line">        <span class="string">"email"</span>: <span class="string">"wordzzzz@foxmail.com"</span>,  </div><div class="line">        <span class="string">"link"</span>: <span class="string">"http://blog.csdn.net/u011475210"</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  快捷键也是可以更改的，全部在 Sublime &gt; Preferences &gt; Package Settings &gt; SublimeTmpl 的设置中。</p>
<p>  如果想要新建其他类型的文件模板的话，先自定义文件模板方在templates文件夹里，再分别打开Default (Windows).sublime-keymap、Default.sublime-commands、Main.sublime-menu、SublimeTmpl.sublime-settings这四个文件照着里面的格式自定义想要新建的类型，这里就不详细介绍了，请各位自己折腾哈~</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>跳转到任意内容 (“cmd+p”) 用来快速查找和打开文件。你仅仅只需要工程中文件的一部分路径或者文件名你就可以很容易的打开这个文件。这在一个大型的 Django 工程中显得非常方便。</li>
<li>跳转到指定行 (“ctrl+g”) 让你在当前文件中跳转到指定行数。</li>
<li>跳转到标志 (“cmd+r”) 可以列出当前文件中所有的函数或者类，让你更方便查找。你可以通过输入关键字来查找你所需要的函数或者类。</li>
<li>跳转到行首 (cmd+left-arrow-key) 与 跳转到行尾 (cmd+right-arrow-key)</li>
<li>删除当前行(ctrl+shift+k)</li>
<li>多重编辑 是我迄今为止最喜欢的快捷键<br>选定一个单词，点击 “cmd+d”来选择同样的单词，再次点击 “cmd+d”*继续选择下一个单词…<br>或者 “cmd+单击”来指定多个你想要同时修改的地方。</li>
<li>块编辑 (option+left-mouse-click) 用于选择一整块的内容。通常在整理 CSV 文件的时候用于删除空白内容。</li>
</ul>
<h2 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h2><p>  你可以很容易地使用 Python 来编辑你自己的自定义命令和快捷键组合。例如：</p>
<ul>
<li>拷贝当前文件路径到剪贴板 – 链接</li>
<li>关闭除当前活动标签页以外的所有其他标签页 – 链接</li>
</ul>
<p>  通过文件选项打开你的 Package 文件夹(Sublime &gt; Preferences &gt; Browse Packages)，然后打开 User 文件夹，接下来将上述的 Python 文件添加到 “/Sublime Text 3/Packages/User” 文件夹中。</p>
<p>  最后请在 Key Bindings – User file (Sublime Text &gt; Preferences &gt; Package Settings &gt; AdvancedNewFile &gt; Key Bindings – User) 文件中完成快捷键绑定。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  // Copy file name</div><div class="line">  &#123;</div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"cmd+shift+c"</span>],</div><div class="line">     <span class="string">"command"</span>: <span class="string">"copy_path_to_clipboard"</span></div><div class="line">  &#125;,</div><div class="line">  // Close all other tabs</div><div class="line">  &#123;  </div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"cmd+alt+w"</span>],</div><div class="line">    <span class="string">"command"</span>: <span class="string">"close_tabs"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>参看文章：<a href="http://blog.csdn.net/u011475210/article/details/78168341" target="_blank" rel="external">http://blog.csdn.net/u011475210/article/details/78168341</a></p>
]]></content>
      
        <categories>
            
            <category> 搭建Python开发环境 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python发布包到pypi]]></title>
      <url>/2018/06/03/python%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0pypi/</url>
      <content type="html"><![CDATA[<h1 id="python发布包到pypi"><a href="#python发布包到pypi" class="headerlink" title="python发布包到pypi"></a>python发布包到pypi</h1><p>python更新太快了，甚至连这种发布上传机制都在不断的更新，这导致网上的一些关于python发布上传到pypi的教程都过时了，按着博文操作可能会失败。</p>
<a id="more"></a>
<h2 id="pypi相关概念介绍"><a href="#pypi相关概念介绍" class="headerlink" title="pypi相关概念介绍"></a>pypi相关概念介绍</h2><h4 id="关于pypi本身"><a href="#关于pypi本身" class="headerlink" title="关于pypi本身"></a>关于pypi本身</h4><p>　　pypi是专门用于存放第三方python包的地方，你可以在这里找别人分享的模块，也可以自己分享模块给别人。可以通过easy_install或者pip进行安装。pypi针对分享提供了两个平台，一个是测试发布平台，一个是正式发布平台，我们正式发布前可以先用测试发布平台发布，看是否正确，然后再采用正式发布平台．</p>
<h4 id="关于python打包发布工具"><a href="#关于python打包发布工具" class="headerlink" title="关于python打包发布工具"></a>关于python打包发布工具</h4><p>　　python的打包安装工具也经历了很多次变化，由最早的distutils到setuptools到distribute又回到setuptools，后来还有disutils2以及distlib等，其中distutils是python标准库的一部分，它提出了采用setup.py机制安装和打包发布上传机制．setuptools(操作系统发布版本可能没有自带安装,需要自己额外安装)基于它扩展了很多功能，也是采用setup.py机制，针对安装额外提供了easy_install命令．distribute是setuptools的一个分之，后来又合并到setuptools了，所以姑且就把它看做是最新的setuptools吧！和我们打包最相关的貌似就是distutils或者setuptools，两者都可以用来打包发布并上传到pypi，后面介绍采用distutils，如果想更多的功能，比如想通过entry points扩展的一些功能，那么就要使用setuptools了．另外，还有一个工具可以用来发布到pypi，叫twine，需要额外安装．最后,需要确保自己的工具都是尽量新的,官方给出的版本参考:twine v1.8.0+ (recommended tool), setuptools 27+, or the distutils included with Python 3.4.6+,Python 3.5.3+, Python 3.6+, and 2.7.13+,升级的参考命令:</p>
<p><code>sudo -H pip install -U pip setuptools twine</code></p>
<h2 id="写一个-setup-py"><a href="#写一个-setup-py" class="headerlink" title="写一个 setup.py"></a>写一个 setup.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup  <span class="comment"># 从 Python 发布工具导入 setup 函数</span></div><div class="line">setup(</div><div class="line">  	  name=<span class="string">'swfswf'</span>, <span class="comment"># 要打包的模块名称</span></div><div class="line">      version=<span class="string">'1.0'</span>, </div><div class="line">      description=<span class="string">'Python Distribution Utilities'</span>,</div><div class="line">      author=<span class="string">'shenwenfang'</span>,</div><div class="line">      author_email=<span class="string">'1978626782@qq.com'</span>,</div><div class="line">      url=<span class="string">'https://swenfang.github.io/'</span>,</div><div class="line">     )</div></pre></td></tr></table></figure>
<p> 也可参阅官方文档：</p>
<ul>
<li><a href="https://docs.python.org/2/distutils/setupscript.html" target="_blank" rel="external">https://docs.python.org/2/dis…</a></li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>这里只是最基本的参考例子，执行打包会报警告，说缺少一些需要的文件，比如MANIFEST.in、readme.txt等等，暂时忽略即可。正式的项目中会复杂很多，甚至需要用到setuptools来扩展。这部分可以参考其他文档</p>
</li>
<li><p><strong>为了保证效果，在打包之前我们可以验证setup.py的正确性。执行代码<code>python setup.py check</code>，输出一般是running check，如果有错误或者警告，就会在此之后显示.没有任何显示表示Distutils认可你这个setup.py文件</strong></p>
</li>
<li><p>执行 <strong><code>python setup.py sdist upload -r pypi</code></strong> 创建发布并上传,如果想先上传到测试平台，可以执行 <strong>python setup.py sdist upload -r pypitest</strong>，成功后再执行上面命令上传到正式平台。注意，这一步的配置文件里面由于pypi的发布机制更新导致有一些问题的出现。</p>
</li>
<li><p>410错误：这个是pypi上传机制变更导致的,我虽然参考的是最新的blog，但是还是过时了！！！（.pypirc的repository过时了，很多博客说的<code>repository: https://pypi.python.org/pypi</code>会导致后面步骤操作出现410错误）</p>
<p>​</p>
</li>
</ul>
<h2 id="打包发布到pypi"><a href="#打包发布到pypi" class="headerlink" title="打包发布到pypi"></a>打包发布到pypi</h2><p><strong>基本流程：</strong></p>
<ul>
<li><p>注册 pypi 账号，如果期望测试发布，同时需要注册<a href="https://testpypi.python.org/pypi?:action=register_form" target="_blank" rel="external">pypitest</a>账号（可以采用相同的用户名和密码）</p>
<p>直接通过官网注册 <a href="https://pypi.python.org/pypi?%3Aaction=register_form" target="_blank" rel="external">https://pypi.python.org/pypi?…</a>，填写用户名、密码、确认密码、邮箱，</p>
<p> 但是需要验证邮件并确认激活。</p>
</li>
<li><p>创建配置文件, 该配置文件里面记录了你的账号信息以及要发布的平台信息，参考如下配置文件创建即可</p>
<p>在自己的用户目录下新建一个空白文件命名为<code>.pypirc</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[distutils]</div><div class="line">index-servers=pypi</div><div class="line"></div><div class="line">[pypi]</div><div class="line">repository = https://upload.pypi.org/legacy/</div><div class="line">username = shenwenfang</div><div class="line">password = **************</div><div class="line"></div><div class="line"><span class="comment"># 如果期望测试发布，同时需要</span></div><div class="line"><span class="comment">#repository: https://test.pypi.org/legacy/</span></div><div class="line"><span class="comment">#username= your_username</span></div><div class="line"><span class="comment">#password= your_password</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/180101/jDEFKjA19C.png" alt="mark"></p>
<p><strong>相关命令：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py check <span class="comment">#验证setup.py的正确性</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py sdist upload -r pypi <span class="comment">#打包发布到pypi，返回 "Server response (200) : OK" 说明上传成功</span></div></pre></td></tr></table></figure>
<p><strong>查看上传记录：</strong></p>
<p>如果你的包已经上传成功，那么当你登录PyPI网站后应该能在右侧导航栏看到管理入口。</p>
<p><img src="https://segmentfault.com/img/remote/1460000008663129?w=230&amp;h=177" alt="img"></p>
<h2 id="测试代码块"><a href="#测试代码块" class="headerlink" title="测试代码块"></a>测试代码块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> swfswf;</div><div class="line">swfswf.print_lol(参数<span class="number">1</span>，参数<span class="number">2.</span>..)</div></pre></td></tr></table></figure>
<h3 id="管理你的包"><a href="#管理你的包" class="headerlink" title="管理你的包"></a>管理你的包</h3><p>如果你的包已经上传成功，那么当你登录PyPI网站后应该能在右侧导航栏看到管理入口。</p>
<p><img src="https://segmentfault.com/img/remote/1460000008663129?w=230&amp;h=177" alt="img"></p>
<p>点击包名进去后你可以对你的包进行管理，当然你也可以从这里删除这个包。</p>
<h3 id="让别人使用你的包"><a href="#让别人使用你的包" class="headerlink" title="让别人使用你的包"></a>让别人使用你的包</h3><p>包发布完成后，其他人只需要使用pip就可以安装你的包文件。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install package-name</div></pre></td></tr></table></figure>
<p>如果你更新了包，别人可以可以通过<code>--update</code>参数来更新：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install package-name --update</div></pre></td></tr></table></figure>
<h2 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h2><ol>
<li><strong>410错误</strong>：.pypirc的repository过时了，很多博客说的<code>repository: https://pypi.python.org/pypi</code>会导致后面步骤操作出现410错误</li>
<li><strong>403错误</strong>：是因为项目和已有 的项目重名了，可以先到 <a href="https://pypi.python.org/simple/" target="_blank" rel="external">https://pypi.python.org/simple/</a> 上搜一下看看是否重名。解决的方法自然就是修改一下setup.py中setup函数中的name参数，删除之前生成的dist文件夹并重新生成，然后再upload</li>
</ol>
<p>参考文章：</p>
<p><a href="https://www.xncoding.com/2015/10/26/python/setuptools.html" target="_blank" rel="external">https://www.xncoding.com/2015/10/26/python/setuptools.html</a></p>
<p><a href="https://segmentfault.com/a/1190000008663126" target="_blank" rel="external">https://segmentfault.com/a/1190000008663126</a></p>
<p><a href="http://www.cnblogs.com/rongpmcu/p/7662821.html" target="_blank" rel="external">http://www.cnblogs.com/rongpmcu/p/7662821.html</a></p>
]]></content>
      
        <categories>
            
            <category> 发布包到pypi </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据迭代的基本用法]]></title>
      <url>/2018/06/03/python%E5%88%97%E8%A1%A8%E8%BF%AD%E4%BB%A3/</url>
      <content type="html"><![CDATA[<h1 id="数据迭代的基本用法："><a href="#数据迭代的基本用法：" class="headerlink" title="数据迭代的基本用法："></a>数据迭代的基本用法：</h1><h2 id="for-循环的使用"><a href="#for-循环的使用" class="headerlink" title="for 循环的使用"></a>for 循环的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;fav_movies = [<span class="string">"The Holy Crail"</span>,<span class="string">"The Life of Brian"</span>]</div><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> each_flick <span class="keyword">in</span> fav_movies:print(each_flick)</div><div class="line"></div><div class="line">The Holy Crail</div><div class="line">The Life of Brian</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="while-循环的使用"><a href="#while-循环的使用" class="headerlink" title="while 循环的使用"></a>while 循环的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;count=<span class="number">2</span></div><div class="line">&gt;&gt;&gt;<span class="keyword">while</span> count&gt;<span class="number">0</span>: 【注意加冒号了再回车】</div><div class="line">		print(<span class="string">"aaaa"</span>) 【如果正确会自动缩进】</div><div class="line">		count = count<span class="number">-1</span></div><div class="line">		</div><div class="line">aaaa 【输出结果】</div><div class="line">aaaa</div></pre></td></tr></table></figure>
<h2 id="enumerate，dict，zip-使用"><a href="#enumerate，dict，zip-使用" class="headerlink" title="enumerate，dict，zip  使用"></a>enumerate，dict，zip  使用</h2><p>通过一个练习，看看这三个函数怎么用的哈。小丽，你也跟着敲一下代码，看看运行效果</p>
<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>现有:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list1=[&apos;neil&apos;,&apos;mike&apos;,&apos;lucy&apos;]</div><div class="line">list2=[&apos;123456&apos;,&apos;xuiasj==&apos;,&apos;passWD123&apos;]</div><div class="line">list3=[&apos;www.abc.com&apos;,&apos;www.mike.org&apos;,&apos;www.lucy.gov&apos;]</div></pre></td></tr></table></figure>
<p>需要形成列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fin_list = [&#123;&apos;name&apos;:&apos;neil&apos;,&apos;passwd&apos;:&apos;123456&apos;,&apos;url&apos;:&apos;www.abc.com&apos;&#125;,&#123;&apos;name&apos;:&apos;mike&apos;,&apos;passwd&apos;:&apos;xuiasj==&apos;,&apos;url&apos;:&apos;www.mike.org&apos;&#125;,&#123;&apos;name&apos;:&apos;lucy&apos;,&apos;passwd&apos;:&apos;passWD123&apos;,&apos;url&apos;:&apos;www.lucy.gov&apos;&#125;]</div></pre></td></tr></table></figure>
<p>python新手的小丽啊，这要如何实现呢？你先自己好好想想怎么实现，动手敲敲代码哈。</p>
<p>在这里我提供两种方法：</p>
<p><strong>方法1: 使用 enumerate 函数来实现</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">【按题目定义<span class="number">3</span>个列表】</div><div class="line">&gt;&gt;&gt;list1 = [<span class="string">'neil'</span>,<span class="string">'mike'</span>,<span class="string">'lucy'</span>]</div><div class="line">&gt;&gt;&gt;list2 = [<span class="string">'123456'</span>,<span class="string">'xuiasj=='</span>,<span class="string">'passWD123'</span>]</div><div class="line">&gt;&gt;&gt;list3 = [<span class="string">'www.abc.com'</span>,<span class="string">'www.mike.org'</span>,<span class="string">'www.lucy.gov'</span>]</div><div class="line">&gt;&gt;&gt;fin_list = []</div><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> i , name <span class="keyword">in</span> enumerate(list1):</div><div class="line">  		d = &#123;&#125;</div><div class="line">    	d[<span class="string">'name'</span>] = name</div><div class="line">        d[<span class="string">'password'</span>] = list2[i]</div><div class="line">        d[<span class="string">'url'</span>] = list3[i]</div><div class="line">        fin_list.append(d)</div><div class="line">        							【小丽你回车,会空格一行】</div><div class="line">&gt;&gt;&gt;fin_list 【再输入要输出的这个列表名】</div><div class="line">【这是输出的结果】</div><div class="line">[&#123;<span class="string">'name'</span>: <span class="string">'neil'</span>, <span class="string">'password'</span>: <span class="string">'123456'</span>, <span class="string">'url'</span>: <span class="string">'www.abc.com'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'mike'</span>, <span class="string">'password'</span>: <span class="string">'xuiasj=='</span>, <span class="string">'url'</span>: <span class="string">'www.mike.org'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'lucy'</span>, <span class="string">'password'</span>: <span class="string">'passWD123'</span>, <span class="string">'url'</span>: <span class="string">'www.lucy.gov'</span>&#125;]</div></pre></td></tr></table></figure>
<p>之前你问我:python 中 in 的使用 和 enumerate 函数，在这里我来回答你，你要认真看哈！</p>
<h3 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate 函数"></a>enumerate 函数</h3><p>一般情况下我们对一个列表或数组既要遍历索引又要遍历元素时，会这样写： </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,len(list)):  【其实，在 ypthon 中 <span class="keyword">for</span>... <span class="keyword">in</span> .. 它就是一个语法】</div><div class="line">&gt;&gt;&gt;<span class="keyword">print</span> i ,list[i]				  【range 是取一个范围的值】</div></pre></td></tr></table></figure>
<p>但是这种方法有些累赘，使用内置enumerrate函数会有更加直接，优美的做法，先看看enumerate的定义：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;def enumerate(collection):    【def 函数我在下面会跟你讲】</div><div class="line">&gt;&gt;&gt;  'Generates an indexed series:  (0,coll[0]), (1,coll[1])'</div><div class="line">&gt;&gt;&gt;  i = 0 </div><div class="line">&gt;&gt;&gt;  it = iter(collection) </div><div class="line">&gt;&gt;&gt;  while 1: </div><div class="line">&gt;&gt;&gt;  yield (i, it.next()) </div><div class="line">&gt;&gt;&gt;  i += 1</div></pre></td></tr></table></figure>
<p> <strong>enumerate会将数组或列表组成一个索引序列</strong>。使我们再获取索引和索引内容的时候更加方便如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> index，text <span class="keyword">in</span> enumerate(list)):</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>  <span class="keyword">print</span> index ,text</div></pre></td></tr></table></figure>
<p>如果你要计算文件的行数，可以这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;count = len(open(thefilepath,‘rU’).readlines())</div></pre></td></tr></table></figure>
<p>前面这种方法简单，但是可能比较慢，当文件比较大时甚至不能工作，下面这种循环读取的方法更合适些。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;Count = <span class="number">-1</span> </div><div class="line">&gt;&gt;&gt;For count,line <span class="keyword">in</span> enumerate(open(thefilepath,‘rU’))：</div><div class="line"><span class="meta">&gt;&gt;&gt; </span> Pass</div><div class="line">&gt;&gt;&gt;Count += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>小丽，计算文件的行数的这两种方法，看不懂没关系，你只要知道就可以了。</p>
<p>看到这里你必须掌握的是：for 的迭代 和 enumerate 行数的使用</p>
<p><strong>在来看看 def 函数</strong></p>
<h3 id="def-函数"><a href="#def-函数" class="headerlink" title="def 函数"></a>def 函数</h3><p>对于某些需要重复调用的程序，可以使用函数进行定义，基本形式为：</p>
<p>def 函数名(参数1, 参数2, ……, 参数N):</p>
<p>执行语句函数名为调用的表示名，参数则是传入的参数。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例1：简单的函数使用</span></div><div class="line"><span class="comment"># coding=gb2312</span></div><div class="line"> </div><div class="line"><span class="comment"># 定义函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">print</span> <span class="string">'hello python!'</span></div><div class="line">   </div><div class="line"><span class="comment"># 调用函数    </span></div><div class="line">hello()</div><div class="line">   </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hello python!</div></pre></td></tr></table></figure>
<p>函数可以带参数和返回值，参数将按从左到右的匹配，参数可设置默认值，当使用函数时没给相应的参数时，会按照默认值进行赋值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例2：累加计算值</span></div><div class="line"><span class="comment"># coding=gb2312</span></div><div class="line"> </div><div class="line"><span class="comment"># 定义函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myadd</span><span class="params">(a=<span class="number">1</span>,b=<span class="number">100</span>)</span>:</span></div><div class="line">  result = <span class="number">0</span></div><div class="line">  i = a</div><div class="line">  <span class="keyword">while</span> i &lt;= b:  <span class="comment"># 默认值为1+2+3+……+100</span></div><div class="line">    result += i  </div><div class="line">    i += <span class="number">1</span></div><div class="line">  <span class="keyword">return</span> result</div><div class="line"> </div><div class="line"><span class="comment"># 打印1+2+……+10    </span></div><div class="line"><span class="keyword">print</span> myadd(<span class="number">1</span>,<span class="number">10</span>)</div><div class="line"><span class="keyword">print</span> myadd()    <span class="comment"># 使用默认参数1，100</span></div><div class="line"><span class="keyword">print</span> myadd(<span class="number">50</span>)   <span class="comment"># a赋值50，b使用默认值</span></div><div class="line">   </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">55</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5050</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3825</span></div></pre></td></tr></table></figure>
<p>Python 函数的参数传递时，值得注意的是参数传入时若为变量会被当作临时赋值给参数变量，如果是对象则会被引用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例3：</span></div><div class="line"><span class="comment"># coding=gb2312</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testpara</span><span class="params">(p1,p2)</span>:</span></div><div class="line">  p1 = <span class="number">10</span></div><div class="line">  p2.append(<span class="string">'hello'</span>)</div><div class="line"> </div><div class="line">l = []   <span class="comment"># 定义一数组对像</span></div><div class="line">a = <span class="number">20</span>   <span class="comment"># 给变量a赋值</span></div><div class="line">testpara(a,l) <span class="comment"># 变量a与对象数组l作为参数传入</span></div><div class="line"><span class="keyword">print</span> a   <span class="comment"># 打印运行参数后的值</span></div><div class="line"><span class="keyword">for</span> v <span class="keyword">in</span> l: <span class="comment"># 打印数组对象的成员</span></div><div class="line">  <span class="keyword">print</span> v</div><div class="line">     </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">20</span>    <span class="comment"># 调用函数后a变量并未被复值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hello  <span class="comment"># 而对象l数组则增加成员hello</span></div></pre></td></tr></table></figure>
<p>方法2: 使用 dict 和 zip  函数来实现**</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">【按题目定义<span class="number">3</span>个列表】</div><div class="line">&gt;&gt;&gt;list1 = [<span class="string">'neil'</span>,<span class="string">'mike'</span>,<span class="string">'lucy'</span>]</div><div class="line">&gt;&gt;&gt;list2 = [<span class="string">'123456'</span>,<span class="string">'xuiasj=='</span>,<span class="string">'passWD123'</span>]</div><div class="line">&gt;&gt;&gt;list3 = [<span class="string">'www.abc.com'</span>,<span class="string">'www.mike.org'</span>,<span class="string">'www.lucy.gov'</span>]</div><div class="line">&gt;&gt;&gt;fin_list = []</div><div class="line">&gt;&gt;&gt;style = [<span class="string">'name'</span>,<span class="string">'passwd'</span>,<span class="string">'url'</span>]</div><div class="line">&gt;&gt;&gt;fin_list.append(dict(zip(style,list1)))</div><div class="line">&gt;&gt;&gt;fin_list.append(dict(zip(style,list2)))</div><div class="line">&gt;&gt;&gt;fin_list.append(dict(zip(style,list3)))</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt;print(fin_list)</div><div class="line">【这是输出的结果】</div><div class="line">[&#123;<span class="string">'name'</span>: <span class="string">'neil'</span>, <span class="string">'password'</span>: <span class="string">'123456'</span>, <span class="string">'url'</span>: <span class="string">'www.abc.com'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'mike'</span>, <span class="string">'password'</span>: <span class="string">'xuiasj=='</span>, <span class="string">'url'</span>: <span class="string">'www.mike.org'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'lucy'</span>, <span class="string">'password'</span>: <span class="string">'passWD123'</span>, <span class="string">'url'</span>: <span class="string">'www.lucy.gov'</span>&#125;]</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据迭代 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3 安装]]></title>
      <url>/2018/06/03/Python3%20%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="Python3-安装"><a href="#Python3-安装" class="headerlink" title="Python3 安装"></a>Python3 安装</h1><p>Linux下默认安装的是Python2.7，要使用Python3，需要自行安装。Python3最新的版本是Python3.6。</p>
<p>在这里介绍在CentOS，Debian和Windows上安装Python3.6。</p>
<p>小丽，你跳过前面的，只看Windows上安装Python3.6哈。</p>
<a id="more"></a>
<h2 id="CentOS安装Python3-6"><a href="#CentOS安装Python3-6" class="headerlink" title="CentOS安装Python3.6"></a>CentOS安装Python3.6</h2><p>更详细的安装过程查看：<a href="https://www.yuzhi100.com/tutorial/centos/centos-anzhuang-python36" target="_blank" rel="external">CentOS7安装Python3.6</a></p>
<p>IUS软件源中包含了Python3.6，可以使用IUS软件源安装Python3.6，查看<a href="https://www.yuzhi100.com/article/centos7-ruhe-shiyong-ius-xinban-ruanjian" target="_blank" rel="external">如何安装使用IUS软件源</a></p>
<p>1）安装IUS软件源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">复制#安装EPEL依赖</div><div class="line">sudo yum install epel-release</div><div class="line"></div><div class="line">#安装IUS软件源</div><div class="line">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</div></pre></td></tr></table></figure>
<p>2）安装Python3.6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">复制sudo yum install python36u</div></pre></td></tr></table></figure>
<p>安装Python3完成后的shell命令为python3.6，为了使用方便，创建一个到python3的符号链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">复制sudo ln -s /bin/python3.6 /bin/python3</div></pre></td></tr></table></figure>
<p>3）安装pip3</p>
<p>安装完成python36u并没有安装pip，安装pip</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">复制sudo yum install python36u-pip</div></pre></td></tr></table></figure>
<p>安装pip完成后的shell命令为pip3.6，为了使用方便，创建一个到pip3的符号链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">复制sudo ln -s /bin/pip3.6 /bin/pip3</div></pre></td></tr></table></figure>
<h2 id="Debian安装Python3-6"><a href="#Debian安装Python3-6" class="headerlink" title="Debian安装Python3.6"></a>Debian安装Python3.6</h2><p>Debian8的软件源中包含了Python3.4，要安装Python3.6，需要下载源文件安装：</p>
<p>1）安装编译，安装Python源文件的依赖包，GCC编译器，Make编译程序，Zlib压缩库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">复制sudo aptitude -y install gcc make zlib1g-dev</div></pre></td></tr></table></figure>
<p>2）运行如下命令安装Python3.6，以下命令依次为获取Python3.6源文件，解压，配置环境，编译，安装Python3.6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">复制wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</div><div class="line">tar xJf Python-3.6.0.tar.xz</div><div class="line">cd Python-3.6.0</div><div class="line">sudo ./configure</div><div class="line">sudo make</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<p>安装完成后，Python安装在了/usr/local文件夹中，可运行文件/usr/local/bin，库文件/usr/local/lib，可以使用如下命令查看安装位置和版本</p>
<p>3）查看安装位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">复制anxin@bogon:~$ which python3</div><div class="line"></div><div class="line">/usr/local/bin/python3</div></pre></td></tr></table></figure>
<p>4）验证Python3.6版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">复制anxin@bogon:~$ python3 -V</div><div class="line"></div><div class="line">Python 3.6.0</div></pre></td></tr></table></figure>
<h2 id="Windows安装Python3-6"><a href="#Windows安装Python3-6" class="headerlink" title="Windows安装Python3.6"></a>Windows安装Python3.6</h2><p>1）进入<a href="https://www.python.org/downloads/" target="_blank" rel="external">Python下载页面</a>下载对应版本的Python安装包，本例下载Python3.6 64位Windows安装包 python-3.6.2-amd64.exe</p>
<p><strong>如果你的电脑系统是32 位的,你就直接点击箭头的按钮下载就好了!</strong> </p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/em47IffHIC.png" alt="mark"></p>
<p><strong>如果你的电脑系统是64 位的,就按下面流程下载哈</strong></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/Hhj4AC819m.png" alt="mark"></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/lj0mE2G40B.png" alt="mark"></p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/LkaDhF964L.png" alt="mark"></p>
<p>下载下来：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/5CIc1GB4ii.png" alt="mark"></p>
<p>2）双击Python3.6安装包，开始安装Python3.6。</p>
<p><strong>1. 选择 Install Now 安装方式方式</strong></p>
<p><strong>其实你也可以一步就完成 Python3.6 的安装，如果选择 Install Now 安装方式</strong>，以后下的步骤你可以全部不用做。</p>
<p>查看安装是否成功，打开cmd 输入 python 即可</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/lGDD9DK26a.png" alt="mark"></p>
<p><strong>2. 选择选择自定义安装（Customize installation）方式</strong>，可以选择安装的内容和目录：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/7AkhCB08fC.png" alt="mark"></p>
<p>注：安装Python3.6时，可以选中 Add Python 3.6 to PATH ，这样Python会自动把Python3.6的路径加入当前用户的PATH路径下，而不是系统的PATH路径下。</p>
<p>3）选择要安装的内容（如果你清除它们是什么），一般可以选择默认，即：所有内容，点击Next</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/4g2BHFGJAC.png" alt="mark"></p>
<p>4）选择一些安装选择，一般选择默认，在这一步可以选择安装目录，<strong>也可以直接输入目录地址</strong>，点击“浏览（Browse）”按钮：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/IllKcK3K4k.png" alt="mark"></p>
<p>5）选择安装的目录，最好先创建好目录如 python36 ，点击“确定”按钮：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/K99deLGafF.png" alt="mark"></p>
<p>6）如图所示选择好Python3.6的安装目录，点击“Install”按钮，开始安装Python3.6</p>
<p>7）如不出什么以外，会提示你安装完成</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171220/2h4lLL7Aah.png" alt="mark"></p>
<p>恭喜你，成功的在Windows安装了Python 3.6！</p>
<h2 id="配置Python3-6环境变量"><a href="#配置Python3-6环境变量" class="headerlink" title="配置Python3.6环境变量"></a>配置Python3.6环境变量</h2><p>你也可以在安装完成Python3.6后，自己手动配置Python3.6的环境变量。</p>
<p>Win7进入控制面板–&gt;系统和安全–&gt;系统–&gt;高级系统设置–&gt;环境变量–&gt;系统变量，选中Path，双击编辑Path环境变量，添加路径<python-home>\和<python-home>\Scripts\：</python-home></python-home></p>
<p><img src="https://www.yuzhi100.com/sites/default/files/inline-images/win7-install-python-362-7.jpg" alt="配置Python3.6环境变量"></p>
<p>在本例中我们添加的Python3.6环境变量的路径为：;C:\python36\Scripts\;C:\python36\，注意：Windows的环境变量已 ; 分隔。</p>
<h3 id="我们敲代码的地方"><a href="#我们敲代码的地方" class="headerlink" title="我们敲代码的地方"></a>我们敲代码的地方</h3><p><img src="https://blogimg.nos-eastchina1.126.net/171220/Dh8J6JH3hB.png" alt="mark"></p>
<p>打开箭头指向的 IDLE ，就是我们的编辑器。</p>
]]></content>
      
        <categories>
            
            <category> Python3 安装 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 的基本要素]]></title>
      <url>/2018/06/03/Python%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A6%81%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h1 id="Python-的基本要素"><a href="#Python-的基本要素" class="headerlink" title="Python 的基本要素"></a>Python 的基本要素</h1><ol>
<li>基本数据类型</li>
<li>对象引用</li>
<li>组合数据类型</li>
<li>逻辑操作符</li>
<li>控制流语句</li>
<li>算数操作符</li>
<li>输入/输出</li>
<li>函数的创建与调用</li>
</ol>
<a id="more"></a>
<h2 id="要素1：基本数据类型"><a href="#要素1：基本数据类型" class="headerlink" title="要素1：基本数据类型"></a>要素1：基本数据类型</h2><ul>
<li><p>任何数据语言都必须能够表示基本数据项目</p>
</li>
<li><p>Python 中的基本数据类型有</p>
<p>【1】Integral 类型 </p>
<p>​    （1）.整型：不可变类型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">num = <span class="number">1</span> <span class="comment">#被保存在内存中，是不可变的</span></div></pre></td></tr></table></figure>
<p>​    注意：对象和变量都是不可变的</p>
<p>​    （2）.布尔型  (Ture、False) </p>
<p>​    注意：加引号 </p>
<p>【2】浮点类型</p>
<p>​    （1）. 浮点数字</p>
<p>​    （2）. 复数</p>
<p>【3】字符串</p>
<p>​    注意：在这里字符串表示的序列。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type(放任意的类型) <span class="comment"># 输出变量的类型</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="要素2：对象引用（变量）"><a href="#要素2：对象引用（变量）" class="headerlink" title="要素2：对象引用（变量）"></a>要素2：对象引用（变量）</h2><ul>
<li><p>Python 将所有数据存为内存对象</p>
</li>
<li><p>Python 中，对象事实上是只想内存对象的引用</p>
</li>
<li><p>动态类型：在任何时刻，只要需要，某个对象都可以重新引用一个不同的对象（可以是不同的数据类型）</p>
</li>
<li><p>内建函数type()用于返回给定数据项的数据类型</p>
</li>
<li><p>“=” 用于将变量名与内存中的某个对象进行绑定：如果对象事先存在，就直接绑定；否则用 “=” 创建引用的对象。</p>
<ul>
<li><img src="https://blogimg.nos-eastchina1.126.net/180113/L99LElb9dB.png" alt="mark"></li>
</ul>
</li>
<li><p>变量的命名规则</p>
<ul>
<li>只能包含字母下、数字和下划线，且不能以数字开头。</li>
<li>区分数字大小写</li>
<li>禁止使用保留字段（Python2和Python3有所不同）</li>
</ul>
</li>
<li><p>命名惯例</p>
<ul>
<li><p>一单个下划线开头的变量名称 (_x) 不会被 from model import * 语句导入</p>
</li>
<li><p>前后都有下滑线的变量名(_x _) 是系统定义的变量名称，对 Python 解释器有特殊的意义</p>
</li>
<li><p>以两个下划线开头但结尾没有下划线的变量名称(__x)是类的本地变量</p>
</li>
<li><p>交互模式下，变量名 “—” 用于保存最后表达式的结果</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(_)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li><strong>变量名没有类型，对象才有</strong></li>
<li>变量可以指定任何类型（这是 Python 和其他语言不同的）</li>
</ul>
</li>
</ul>
<h2 id="要素3：组合数据类型"><a href="#要素3：组合数据类型" class="headerlink" title="要素3：组合数据类型"></a>要素3：组合数据类型</h2><ul>
<li><p>数据结构：通过某种方式（例如对元素进行编码）组织在一起的数据元素的集合</p>
</li>
<li><p>Python 常用的组合数据类型</p>
<ul>
<li><p>序列类型</p>
</li>
<li><p><img src="https://blogimg.nos-eastchina1.126.net/180113/57KL9DI08I.png" alt="mark"></p>
<ul>
<li><p>列表：使用[]创建，如[‘Call’,’me’,’Ishmell’,’_’]</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="string">'Call'</span>,<span class="string">'me'</span>,<span class="string">'Ishmell'</span>,<span class="string">'_'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l1[<span class="number">0</span>]</div><div class="line"><span class="string">'Call'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l1[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"><span class="string">'C'</span></div></pre></td></tr></table></figure>
</li>
<li><p>注意：列表是可变的，可以在原处进行修改，且内容改变，id 不会改变</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(l1)</div><div class="line">[<span class="string">'Call'</span>, <span class="string">'me'</span>, <span class="string">'Ishmell'</span>, <span class="string">'_'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(l1[<span class="number">1</span>])</div><div class="line">me</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l1[<span class="number">1</span>] = <span class="string">'your'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(l1)</div><div class="line">[<span class="string">'Call'</span>, <span class="string">'your'</span>, <span class="string">'Ishmell'</span>, <span class="string">'_'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(l1)</div><div class="line"><span class="number">1543556324360</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l1[<span class="number">2</span>]= <span class="string">'Xshell'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(l1)</div><div class="line">[<span class="string">'Call'</span>, <span class="string">'your'</span>, <span class="string">'Xshell'</span>, <span class="string">'_'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(l1)</div><div class="line"><span class="number">1543556324360</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
<li><p>元组：使用 () 创建，如(‘one’,’two’)</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = (<span class="string">'This'</span>,<span class="string">'is'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1[<span class="number">1</span>]</div><div class="line"><span class="string">'is'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1[<span class="number">0</span>]</div><div class="line"><span class="string">'This'</span></div></pre></td></tr></table></figure>
</li>
<li><p>注意: 元组是不能做原处修改的，一旦修改就会引发异常</p>
</li>
</ul>
<p>​</p>
</li>
<li><p>字符串也属于序列类型</p>
<ul>
<li><p>优点：可以做字符串的切块操作</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'jerry'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>]</div><div class="line"><span class="string">'j'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>:<span class="number">1</span>]</div><div class="line"><span class="string">'j'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line"><span class="string">'je'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name[:<span class="number">2</span>]</div><div class="line"><span class="string">'je'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">2</span>:]</div><div class="line"><span class="string">'rry'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>:<span class="number">4</span>]</div><div class="line"><span class="string">'jerr'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]</div><div class="line"><span class="string">'jr'</span></div></pre></td></tr></table></figure>
</li>
<li><p>注意：切块本身会创建新的对象（因为字符串本身是不可用的）</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>集合类型</p>
<ul>
<li>集合（杂乱的数据）</li>
</ul>
</li>
<li><p>映射类型</p>
<ul>
<li>字典</li>
</ul>
</li>
<li><p>列表是可变序列，元组是不可变序列</p>
</li>
<li><p>Python 中，组合数据类型也是对象，因此其可以嵌套</p>
<ul>
<li>[‘hello’,’worle’,[1,2,3]]</li>
</ul>
</li>
<li><p>实质上，列表和元组并不是真正存储数据，而是存放对象引用</p>
</li>
<li><p>Python 对象可以具有其可以被调用的特定 “方法（函数）”</p>
</li>
<li><p>元组、列表以及字符串等数据类型是“有大小的”，也即，其长度可用内置函数 len() 测量</p>
</li>
</ul>
</li>
</ul>
<h2 id="要素4：逻辑操作符"><a href="#要素4：逻辑操作符" class="headerlink" title="要素4：逻辑操作符"></a>要素4：逻辑操作符</h2><ul>
<li><p>逻辑运算是任何程序设计语言的基本共能</p>
</li>
<li><p>Python 提供了4 组逻辑运算符</p>
<ul>
<li><p>身份操作符</p>
<ul>
<li><p>is:判断左端对象引用是否等于右端对象引用；也可以与Node进行；</p>
</li>
<li><p>对象引用可以不同，但是对象 所属的类型有可能是相同</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="string">"swfswf"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>test=<span class="string">"swfswf"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(name) <span class="keyword">is</span> type(test)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>比较操作符号</p>
<ul>
<li>&lt;,&gt;,&lt;=,&gt;=,!=,==</li>
</ul>
</li>
<li><p>成员操作符</p>
<ul>
<li>in 或 not in :测试成员关系</li>
</ul>
</li>
<li><p>逻辑运算符</p>
<ul>
<li>and、or、not</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="要素5：控制流语句"><a href="#要素5：控制流语句" class="headerlink" title="要素5：控制流语句"></a>要素5：控制流语句</h2><ul>
<li><p>控制流语句是过程式编程语言的基本控制机制</p>
</li>
<li><p>Python 的常见控制流语句</p>
<ul>
<li><p>if</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> boolean_expression1:</div><div class="line">  suite1</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> boolean_expression2:</div><div class="line">  suite2</div><div class="line">.....</div><div class="line"><span class="keyword">else</span>:</div><div class="line">  else_suite</div></pre></td></tr></table></figure>
</li>
<li><p>注意：冒号是代码块起始的标志</p>
</li>
</ul>
</li>
<li><p>while</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> boolean_expression:</div><div class="line">  suite</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>for…in</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> iterable:</div><div class="line">  suite</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>try</p>
</li>
</ul>
</li>
</ul>
<h2 id="要素6：算数操作符"><a href="#要素6：算数操作符" class="headerlink" title="要素6：算数操作符"></a>要素6：算数操作符</h2><ul>
<li>Python 提供了完整的算数操作符集</li>
<li>很多的 Python 数据类型也可以使用增强的赋值操作符，如+=、-= 等</li>
<li>同样的功能使用增强型赋值操作符的性能较好。</li>
<li>Python 的 int 类型是不可变的，因此，增强型赋值的实际过程是创建了一个新的对象来存储结果后将变量名执行了重新绑定<ul>
<li><img src="https://blogimg.nos-eastchina1.126.net/180113/lC2i9Jf2ag.png" alt="mark"> </li>
</ul>
</li>
</ul>
<h2 id="要素7：输入-输出"><a href="#要素7：输入-输出" class="headerlink" title="要素7：输入/输出"></a>要素7：输入/输出</h2><ul>
<li><p>现实中，具有实际共能的程序必须能够读取输入（如从键盘或文件中），以及产生输出，并写到终端或文件中</p>
</li>
<li><p>Python 的输入/输出</p>
<ul>
<li><p>输出</p>
<ul>
<li>Python3：print() 函数</li>
<li>Python2:  print 语句</li>
</ul>
</li>
<li><p>输入</p>
<ul>
<li><p>input()</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>input(<span class="string">"plz input a num:"</span>)</div><div class="line">plz input a num:a</div><div class="line"><span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>input(<span class="string">"plz input a num:"</span>)</div><div class="line">plz input a num:<span class="number">3</span></div><div class="line"><span class="string">'3'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = input(<span class="string">"plz input a num:"</span>)</div><div class="line">plz input a num:Hello</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</div><div class="line">Hello</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>row_input()</p>
</li>
</ul>
</li>
<li><p>Python 解释器提供了 3 中标准的文件对象，分别为标准输入、标准输出和标准错误，它们 sys 模块中分别以 sys.stdin、sys.stdout 和 sys.stderr 形式提供</p>
</li>
<li><p>Python 的 print 语句实现打印</p>
</li>
<li><p>从技术角度来讲，print 是把一个或多个对象转化为其文本表达形式，然后发送给标准输出或另一个类似文件的流</p>
<ul>
<li><p>在 Python 中，打印与文件和流的概念联系紧密</p>
<ul>
<li>文件写入方法是把字符串写入到任意文件</li>
<li>print 默认把对象打印到 stdout 流，并添加一些自动的格式化</li>
</ul>
</li>
<li><p>实质上，print 语句只是 Python 的人性化特性的具体实现，它提供了 sys.stdout.write() 的简单接口，再加上一些默认的格式设置</p>
</li>
<li><p>print 接受一个逗号分隔的对象列表，并为行尾自动添加一个换行符，如果不需要，则在最后个元素后面添加逗号</p>
</li>
<li><p>实现格式化输出，print “String %format1%format2…”%(varialbe1,varialbe2,…….) </p>
</li>
<li><p>| 字符   | 输出格式                       |<br>| —- | ————————– |<br>| d,i  | 十进制整数或长整型                  |<br>| u    | 无符号整数或长整型                  |<br>| o    | 八进制整数或长整型                  |<br>| x    | 十六进制整数或长整型                 |<br>| X    | 十六进制整数                     |<br>| f    | 浮点数                        |<br>| e    | 浮点数                        |<br>| E    | 浮点数                        |<br>| g,G  | 指数小于-4或更高精度时使用%e或%E,否则使用%f |<br>| s    | 字符串火任意对象，格式化代码使用str()生成字符串 |<br>| r    | 同 repr() 生成的字符串            |<br>| c    | 单个字符                       |<br>| %    | 字面量%                       |</p>
<p>​</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>num = <span class="number">7.9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The num is %f"</span> %num)</div><div class="line">The num <span class="keyword">is</span> <span class="number">7.900000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The num is %d"</span> %num)</div><div class="line">The num <span class="keyword">is</span> <span class="number">7</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num2 = <span class="number">9.13</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The nums are %d and %f"</span> %(num,num2))</div><div class="line">The nums are <span class="number">7</span> <span class="keyword">and</span> <span class="number">9.130000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The nums are %e and %f"</span>%(num,<span class="number">3.1</span>))</div><div class="line">The nums are <span class="number">7.900000e+00</span> <span class="keyword">and</span> <span class="number">3.100000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The nums are %d and %f"</span>%(num,<span class="number">3.1</span>))</div><div class="line">The nums are <span class="number">7</span> <span class="keyword">and</span> <span class="number">3.100000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"Jerry"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name is %s."</span>%name)</div><div class="line">The name <span class="keyword">is</span> Jerry.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name is %s."</span>%num)</div><div class="line">The name <span class="keyword">is</span> <span class="number">7.9</span>.</div></pre></td></tr></table></figure>
</li>
<li><p>注意：Python 的输出是需要转换的。 </p>
</li>
<li><p>数据转换类型：</p>
<ul>
<li><p>显示转换</p>
</li>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; num = 7.9</div><div class="line">&gt;&gt;&gt; test3 = str(num)</div><div class="line">&gt;&gt;&gt; type(test3)</div><div class="line">&lt;class 'str'&gt;</div><div class="line">&gt;&gt;&gt; type(num)</div><div class="line">&lt;class 'float'&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>隐式转换</p>
</li>
</ul>
</li>
<li><p>想知道内置有多少种类型</p>
<ul>
<li><p>python3</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'name'</span>, <span class="string">'num'</span>, <span class="string">'num2'</span>, <span class="string">'test3'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(__builtins__)</div></pre></td></tr></table></figure>
</li>
<li><p>python2</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;dir(builtins)</div><div class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'name'</span>, <span class="string">'num'</span>, <span class="string">'num2'</span>, <span class="string">'test3'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(__builtins__)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>想明确一个工具怎么使用</p>
<ul>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; help(str)</div><div class="line">Help on class str in module builtins:</div><div class="line"></div><div class="line">class str(object)</div><div class="line"> |  str(object='') -&gt; str</div><div class="line"> |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</div><div class="line"> |  </div><div class="line"> |  Create a new string object from the given object. If encoding or</div><div class="line"> |  errors is specified, then the object must expose a data buffer</div><div class="line"> |  that will be decoded using the given encoding and error handler.</div><div class="line"> ....</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>% 后面可以使用的修饰符，（如果有只能按如下的顺序）</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%[(name)][flags][width][.precision]typecode</div></pre></td></tr></table></figure>
<ul>
<li><p>位于括号中的一个属性后面的字典的键名，用于选出一个具体项</p>
</li>
<li><p>下面标志中的一个或多个</p>
<ul>
<li><p>减号（-）:表示左对齐，默认为右对齐</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %+10f and %+f"</span>%(num,<span class="number">-3.1</span>))</div><div class="line">The name are  +<span class="number">7.900000</span> <span class="keyword">and</span> <span class="number">-3.100000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %-20f and %+f"</span>%(num,<span class="number">-3.1</span>))</div><div class="line">The name are <span class="number">7.900000</span>             <span class="keyword">and</span> <span class="number">-3.100000</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
<li><p>加号（+）:表示包含数字符号，整数也会带 “+”</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;num=<span class="number">7.9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %+e and %f"</span>%(num,<span class="number">3.1</span>))</div><div class="line">The name are +<span class="number">7.900000e+00</span> <span class="keyword">and</span> <span class="number">3.100000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %+e and %+f"</span>%(num,<span class="number">3.1</span>))</div><div class="line">The name are +<span class="number">7.900000e+00</span> <span class="keyword">and</span> +<span class="number">3.100000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %+e and %f"</span>%(num,<span class="number">-3.1</span>))</div><div class="line">The name are +<span class="number">7.900000e+00</span> <span class="keyword">and</span> <span class="number">-3.100000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %+e and %+f"</span>%(num,<span class="number">-3.1</span>))</div><div class="line">The name are +<span class="number">7.900000e+00</span> <span class="keyword">and</span> <span class="number">-3.100000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %f and %f"</span>%(num,<span class="number">-3.1</span>))</div><div class="line">The name are <span class="number">7.900000</span> <span class="keyword">and</span> <span class="number">-3.100000</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>零（0）:表示一个零填充</p>
</li>
</ul>
</li>
<li><p>一个指定最小宽度的数</p>
</li>
<li><p>一个小数,用于按照精度分割字段的宽度(如下例子：15指小数占15位数)</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The name are %-20.15f and %+f"</span>%(num,<span class="number">-3.1</span>))</div><div class="line">The name are <span class="number">7.900000000000000</span>    <span class="keyword">and</span> <span class="number">-3.100000</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一个数字,指定要打印字符串中的最大字符个数，浮点数中小数点之后的位数，或者整数最小位数。</p>
</li>
<li><p>字典：kv集合（键值对集合）</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1=&#123;<span class="string">'a'</span>:<span class="number">33</span>,<span class="string">'b'</span>:<span class="number">66</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">'a'</span>]</div><div class="line"><span class="number">33</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1=&#123;<span class="number">0</span>:<span class="number">33</span>,<span class="number">1</span>:<span class="number">66</span>&#125;	</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="number">0</span>]</div><div class="line"><span class="number">33</span></div></pre></td></tr></table></figure>
</li>
<li><p>注意字典也是可变对象;键可以是字符也可以是数字</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="string">'x'</span>:<span class="number">32</span>,<span class="string">'y'</span>:<span class="number">27.490325</span>,<span class="string">'z'</span>:<span class="number">65</span>&#125;</div><div class="line">	</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"%(x)-10d %(y)0.3g"</span>%d)</div><div class="line">	</div><div class="line"><span class="number">32</span>         <span class="number">27.5</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="要素8：函数的创建与调用"><a href="#要素8：函数的创建与调用" class="headerlink" title="要素8：函数的创建与调用"></a>要素8：函数的创建与调用</h2><ul>
<li><p>函数实现模块化编程的组件</p>
</li>
<li><p>Python 使用 def 语句定义函数</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionName</span><span class="params">(arguments)</span>:</span></div><div class="line">  suite</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>函数可以参数化，通过传递不同的参数来调用。</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">printName</span><span class="params">(name)</span>:</span></div><div class="line">	print(name)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>printName(<span class="string">'Tony'</span>)</div><div class="line">Tony</div></pre></td></tr></table></figure>
</li>
<li><p>注意：函数也是对象</p>
</li>
</ul>
</li>
<li><p>每个 Python 函数都有一个返回值，默认为None,也可以使用 “return value” 明确定义返回值</p>
</li>
<li><p>def 会创建一个函数对象，并同时创建一个函数的对象引用</p>
<ul>
<li><p>函数也是对象，可以存储在组合数据类型中，也可以作为参数传递给其他函数</p>
</li>
<li><p>callable() 可用于测试函数是否可调用</p>
<ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(name)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(printName)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Python 有众多内置函数</p>
<ul>
<li>dir()、id()、type() 、str()、help()、len()、callable() 等等</li>
</ul>
</li>
<li><p>Python 标准库拥有众多内置模块，这些模块拥有大量的函数</p>
<ul>
<li>Python 模块实际上是包含 Python 代码的 .py 文件，其拥有自定义的函数与类及变量等</li>
<li>导入代码块使用 import 语句进行，后跟模块名称（不能指定模块文件的后缀.py）</li>
<li>导入一个模块后，可以访问其内部的任意函数、类及变量</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven仓库理解和优先级]]></title>
      <url>/2018/06/03/Maven-Priority/</url>
      <content type="html"><![CDATA[<p><img src="/images/maven-logo.png" alt="此处输入图片的描述"></p>
<p><strong>5 Seven 2017</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 maven 也有一段时间了，有时候在配置 repository,mirror,profile的时候，总会导致 jar 拉取不到。所以认真的分析了 maven 获取 jar 包时候的优先级。<br><a id="more"></a></p>
<h2 id="Maven-仓库的分类"><a href="#Maven-仓库的分类" class="headerlink" title="Maven 仓库的分类"></a>Maven 仓库的分类</h2><p>仓库分类：本地仓库和远程仓库。Maven根据坐标寻找构件的时候，它先会查看本地仓库，如果本地仓库存在构件，则直接使用；如果没有，则从远程仓库查找，找到后，下载到本地。</p>
<p>1）本地仓库<br>默认情况下，每个用户在自己的用户目录下都有一个路径名为.m2/repository/的仓库目录。我们也可以在 settings.xml 文件配置本地仓库的地址</p>
<p>2）远程仓库<br>本地仓库好比书房，而远程仓库就像是书店。对于Maven来说，每个用户只有一个本地仓库，但是可以配置多个远程仓库。<br>下·</p>
<blockquote>
<p>我们可以在 pom 文件配置多个 repository，但是随着项目越来也多我们每次都要在 pom 文件配置比较麻烦，所以我们可以在<br>settings 文件配置 profile （私服）。这样我们每次创建新项目的时候就可以不用配置 repository。</p>
</blockquote>
<p>3）中央仓库<br>Maven必须要知道至少一个可用的远程仓库，中央仓库就是这样一个默认的远程仓库，Maven 默认有一个 super pom 文件。<br>maven super pom 文件位置<br>D:\apache-maven-3.0.4\lib 下的 maven-model-builder-3.0.4.jar 中的 org/apache/maven/model/pom-4.0.0.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">··· 省略其他</div><div class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">···</div></pre></td></tr></table></figure></p>
<p>这个时候我们就明白了，我们在 settings 文件配置一个 mirror 的 mirrorOf 为 central 的镜像就会替代 ‘中央仓库’ 的原因了。</p>
<h3 id="Maven-镜像"><a href="#Maven-镜像" class="headerlink" title="Maven 镜像"></a>Maven 镜像</h3><p>镜像（Mirroring）是冗余的一种类型，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像。<br>为什么配置镜像?</p>
<blockquote>
<p>1.一句话，你有的我也有，你没有的我也有。（拥有远程仓库的所有 jar，包括远程仓库没有的 jar）<br>2.还是一句话，我跑的比你快。（有时候远程仓库获取 jar 的速度可能比镜像慢，这也是为什么我们一般要配置中央仓库的原因，外国的 maven 仓库一般获取速度比较慢）</p>
</blockquote>
<p>如果你配置 maven 镜像不是为了以上两点，那基本就不用配置镜像了。<br><strong>注意:当远程仓库被镜像匹配到的，则在获取 jar 包将从镜像仓库获取，而不是我们配置的 repository 仓库, repository 将失去作用</strong></p>
<h4 id="mirrorOf-标签"><a href="#mirrorOf-标签" class="headerlink" title="mirrorOf 标签"></a>mirrorOf 标签</h4><p>mirrorOf 标签里面放置的是 repository 配置的 id,为了满足一些复杂的需求，Maven还支持更高级的镜像配置：</p>
<pre><code>external:* = 不在本地仓库的文件才从该镜像获取
repo,repo1 = 远程仓库 repo 和 repo1 从该镜像获取
*,!repo1 =  所有远程仓库都从该镜像获取，除 repo1 远程仓库以外
* = 所用远程仓库都从该镜像获取
</code></pre><h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><p>私服是一种特殊的远程Maven仓库，它是架设在局域网内的仓库服务，私服一般被配置为互联网远程仓库的镜像，供局域网内的Maven用户使用。<br>当Maven需要下载构件的时候，先向私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，同时缓存在私服之上，然后为Maven下载请求提供下载服务，另外，对于自定义或第三方的jar可以从本地上传到私服，供局域网内其他maven用户使用。<br>优点主要有：</p>
<pre><code>1. 节省外网宽带
2. 加速Maven构建
3. 部署第三方构件：可以将公司项目的 jar 发布到私服上，方便项目与项目之间的调用
4. 提高稳定性、增强控制：原因是外网不稳定
5. 降低中央仓库的负荷：原因是中央仓库访问量太大
</code></pre><p><strong>上面大概介绍了 Maven 仓库概念，接下来我们进入正题</strong></p>
<h2 id="Maven-仓库优先级"><a href="#Maven-仓库优先级" class="headerlink" title="Maven 仓库优先级"></a>Maven 仓库优先级</h2><p>为了方便测试，我准备了以下几个仓库</p>
<ul>
<li>172.16.xxx.xxx  远程仓库 （私服）</li>
<li>dev.xxx.wiki 远程仓库  （远程）</li>
<li>localhost 仓库 是我自己在本机搭建的一个仓库 （镜像）</li>
<li>maven.aliyun.com 中央仓库（中央）</li>
</ul>
<h3 id="本地仓库优先级"><a href="#本地仓库优先级" class="headerlink" title="本地仓库优先级"></a>本地仓库优先级</h3><p><img src="/images/example.png" alt="此处输入图片的描述"><br>Maven 本地仓库拥有该包，而远程、镜像、中央、私服都不包含该包。我们来看下 Maven 是怎么获取的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.......</div><div class="line"></div><div class="line"><span class="comment">// 使用本地仓库，优先级(priority)为 10</span></div><div class="line">[DEBUG] Using local repository at E:\OperSource</div><div class="line">[DEBUG] Using manager EnhancedLocalRepositoryManager with priority <span class="number">10.0</span> <span class="keyword">for</span> E:\OperSource</div><div class="line">[INFO] Scanning <span class="keyword">for</span> projects..</div><div class="line"></div><div class="line">........</div><div class="line"></div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\target\demo-<span class="number">1.0</span>-SNAPSHOT.jar to E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\demo-<span class="number">1.0</span>-SNAPSHOT.jar</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\_remote.repositories</div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\pom.xml to E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\demo-<span class="number">1.0</span>-SNAPSHOT.pom</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Installing com.cjf:demo:<span class="number">1.0</span>-SNAPSHOT/maven-metadata.xml to E:\OperSource\com\cjf\demo\<span class="number">1.0</span>-SNAPSHOT\maven-metadata-local.xml</div><div class="line">[DEBUG] Installing com.cjf:demo/maven-metadata.xml to E:\OperSource\com\cjf\demo\maven-metadata-local.xml</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: <span class="number">1.874</span> s</div><div class="line">[INFO] Finished at: <span class="number">2017</span>-<span class="number">07</span>-<span class="number">07</span>T10:<span class="number">37</span>:<span class="number">32</span>+<span class="number">08</span>:<span class="number">00</span></div><div class="line">[INFO] Final Memory: <span class="number">23</span>M/<span class="number">219</span>M</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line"></div><div class="line">Process finished with exit code <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>从上面可以看出 Maven 一开始就使用本地仓库，并将本地仓库的优先级定制为 10 , 最后 jar 包也在本地仓库找到，Maven 成功打包。</p>
<h3 id="远程仓库优先级"><a href="#远程仓库优先级" class="headerlink" title="远程仓库优先级"></a>远程仓库优先级</h3><p>前面我们知道了，本地仓库的优先级是最高的，现在我们继续研究远程仓库的优先级（以下的所有例子，都默认本地仓库不拥有我们需要的包）</p>
<p>这一次我们默认配置 <strong>profile</strong>（私服）为 172.16.xxx.xxx 远程仓库, <strong>repository</strong> 为 dev.xxx.wiki 远程仓库,<strong>mirror</strong> 为本地 localhost 仓库，还配置了一个 <strong>mirrorOf  为 central</strong> 远程仓库为 maven.aliyun.com 的中央仓库,</p>
<p>以下是配置信息<br>settings.xml 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">······</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span> </div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>   <span class="comment">&lt;!--拦截 pom 文件配置的 repository--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>localhost2<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>foo2<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>   <span class="comment">&lt;!--配置一个拦截 foo2 的远程仓库的镜像--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  <span class="comment">&lt;!--覆盖 Maven 默认的配置的中央仓库--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置私服--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.xxx.xxx:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.xxx.xxx:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></div><div class="line"></div><div class="line">······</div></pre></td></tr></table></figure></p>
<p>pom.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--xxx-cif-api 存在 172.16.xxx.xxx 仓库--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx.cif<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx-cif-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Chapter1 存在 localhost 仓库--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cjf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Chapter1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置远程仓库--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://dev.xxx.wiki:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以下是 Maven 拉取包的日志<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">······· 省略部分日志信息</div><div class="line"></div><div class="line">[DEBUG] Using local repository at E:\OperSource</div><div class="line">[DEBUG] Using manager EnhancedLocalRepositoryManager with priority <span class="number">10.0</span> <span class="keyword">for</span> E:\OperSource</div><div class="line">[INFO] Scanning <span class="keyword">for</span> projects...</div><div class="line"></div><div class="line"><span class="comment">// 从这里可以看出我们配置的镜像替代了我们在 pom 配置的远程仓库</span></div><div class="line">[DEBUG] <span class="function">Using mirror <span class="title">localhost</span> <span class="params">(http://localhost:<span class="number">8081</span>/repository/maven-<span class="keyword">public</span>/)</span> <span class="keyword">for</span> <span class="title">foo</span> <span class="params">(http://dev.xxx.wiki:<span class="number">8081</span>/nexus/content/groups/<span class="keyword">public</span>/)</span>.</span></div><div class="line">替代了默认的中央仓库</div><div class="line">[DEBUG] Using mirror <span class="title">alimaven</span> <span class="params">(http://maven.aliyun.com/nexus/content/groups/<span class="keyword">public</span>/)</span> <span class="keyword">for</span> <span class="title">central</span> <span class="params">(https://repo.maven.apache.org/maven2)</span>.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 从这里可以看出 Maven 使用哪些 dependencies 和 plugins 的地址，我们可以看出优先级最高的是 172.16.xxx.xxx,然后就是 localhost 最后才是 maven.aliyun.com</span></div><div class="line"></div><div class="line"><span class="comment">// 注意：alimaven (http://maven.aliyun.com/nexus/content/groups/public/, default, releases) 从这里可以看出中央仓库只能获取 releases 包，所有的 snapshots 包都不从中央仓库获取。（可以看前面 central 的配置信息）</span></div><div class="line">[DEBUG] === PROJECT BUILD PLAN ================================================</div><div class="line">[DEBUG] Project:       com.cjf:demo:<span class="number">1.0</span>-SNAPSHOT</div><div class="line">[DEBUG] Dependencies (collect): []</div><div class="line">[DEBUG] Dependencies (resolve): [compile, runtime, test]</div><div class="line"></div><div class="line">[DEBUG] Repositories (dependencies): [<span class="keyword">public</span> (http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/, default, releases+snapshots), localhost (http://localhost:8081/repository/maven-public/, default, releases+snapshots), alimaven (http://maven.aliyun.com/nexus/content/groups/public/, default, releases)]</span></div><div class="line"></div><div class="line">[DEBUG] Repositories (plugins)     : [<span class="keyword">public</span> (http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public, default, releases+snapshots), alimaven (http://maven.aliyun.com/nexus/content/groups/public/, default, releases)]</span></div><div class="line"></div><div class="line"></div><div class="line">[DEBUG] =======================================================================</div><div class="line"><span class="comment">// 寻找本地是否有 maven-metadata.xml 配置文件 ，从这里可以看出寻找不到（后面会详细讲该文件作用）</span></div><div class="line">[DEBUG] Could not find metadata com.xxx.cif:xxx-cif-api:<span class="number">0.0</span>.1-SNAPSHOT/maven-metadata.<span class="function">xml in <span class="title">local</span> <span class="params">(E:\OperSource)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 由于寻找不到 Maven 只能从我们配置的远程仓库寻找，由于 Maven 也不知道那个仓库才有，所以同时寻找两个仓库</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\resolver-status.properties</div><div class="line"></div><div class="line"><span class="comment">// 从这里可以看出在 172.16.xxx.xxx 找到  xxx-cif-api 的 maven-metadata.xml 文件并下载下来</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/maven-metadata.xml (781 B at 7.0 KB/sec)</span></div><div class="line"></div><div class="line"><span class="comment">// 追踪文件，resolver-status.properties 配置了 jar 包下载地址和时间</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\resolver-status.properties</div><div class="line">[DEBUG] Could not find metadata com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml in <span class="title">localhost</span> <span class="params">(http://localhost:<span class="number">8081</span>/repository/maven-<span class="keyword">public</span>/)</span></div><div class="line"></div><div class="line"><span class="comment">// 在 localhost 远程仓库寻找不到 xxx-cif-api 的 maven-metadata.xml</span></div><div class="line">[DEBUG] Could not find metadata com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml in <span class="title">local</span> <span class="params">(E:\OperSource)</span></div><div class="line"></div><div class="line"><span class="comment">// 跳过的远程请求 </span></div><div class="line">[DEBUG] Skipped remote request <span class="keyword">for</span> com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml, already updated during <span class="keyword">this</span> session.</div><div class="line">[DEBUG] Skipped remote request <span class="keyword">for</span> com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml, already updated during <span class="keyword">this</span> session.</div><div class="line"></div><div class="line"><span class="comment">// 默认以后获取 xxx-cif-api 的时候将不在从 localhost 寻找了，除非强制获取才会再次从 localhost 寻找这个包</span></div><div class="line">[DEBUG] Failure to find com.xxx.cif:xxx-cif-api:0.0.1-SNAPSHOT/maven-metadata.xml in http:<span class="comment">//localhost:8081/repository/maven-public/ was cached in the local repository, resolution will not be reattempted until the update interval of localhost has elapsed or updates are forced</span></div><div class="line"></div><div class="line"><span class="comment">// 将 172.16.xxx.xxx 优先级升为 0 ，并下载 xxx-cif-api 的 pom 文件</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.pom</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.pom (930 B at 82.6 KB/sec)</span></div><div class="line"></div><div class="line"><span class="comment">// _remote.repositories 记录的以后使用那个远程仓库获取 （ps:这个文件作用我要不是很清楚作用，以上观点是自己推测出来的。）</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\xxx-cif-api-0.0.1-20170515.040917-89.pom.lastUpdated</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 后面获取 Chapter1 包的流程跟 com.xxx.cif 是一样的，不过最后是在 localhost 寻找到而已，所以这分日志就不贴出来了。</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 最后在下载包的时候，都到对应的仓库下载</span></div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.jar</span></div><div class="line">Downloading: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/util/xxx-util/0.0.1-SNAPSHOT/xxx-util-0.0.1-20170514.091041-31.jar</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/util/xxx-util/0.0.1-SNAPSHOT/xxx-util-0.0.1-20170514.091041-31.jar (26 KB at 324.2 KB/sec)</span></div><div class="line">Downloaded: http:<span class="comment">//172.16.xxx.xxx:8081/nexus/content/groups/public/com/xxx/cif/xxx-cif-api/0.0.1-SNAPSHOT/xxx-cif-api-0.0.1-20170515.040917-89.jar (68 KB at 756.6 KB/sec)</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\cif\xxx-cif-api\0.0.1-SNAPSHOT\xxx-cif-api-0.0.1-20170515.040917-89.jar.lastUpdated</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\util\xxx-util\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\xxx\util\xxx-util\0.0.1-SNAPSHOT\xxx-util-0.0.1-20170514.091041-31.jar.lastUpdated</div><div class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 <span class="keyword">for</span> http:<span class="comment">//localhost:8081/repository/maven-public/</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-public/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170708.092339-1.jar</span></div><div class="line">Downloaded: http:<span class="comment">//localhost:8081/repository/maven-public/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170708.092339-1.jar (8 KB at 167.0 KB/sec)</span></div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\Chapter1\0.0.1-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\Chapter1\0.0.1-SNAPSHOT\Chapter1-0.0.1-20170708.092339-1.jar.lastUpdated</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\target\demo-1.0-SNAPSHOT.jar to E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\demo-1.0-SNAPSHOT.jar</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\_remote.repositories</div><div class="line">[INFO] Installing C:\Users\swipal\Desktop\abc\demo\pom.xml to E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\demo-1.0-SNAPSHOT.pom</div><div class="line">[DEBUG] Writing tracking file E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\_remote.repositories</div><div class="line">[DEBUG] Installing com.cjf:demo:1.0-SNAPSHOT/maven-metadata.xml to E:\OperSource\com\cjf\demo\1.0-SNAPSHOT\maven-metadata-local.xml</div><div class="line">[DEBUG] Installing com.cjf:demo/maven-metadata.xml to E:\OperSource\com\cjf\demo\maven-metadata-local.xml</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 10.549 s</div><div class="line">[INFO] Finished at: 2017-07-09T18:13:20+08:00</div><div class="line">[INFO] Final Memory: 26M/219M</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line"></div><div class="line">·······</div></pre></td></tr></table></figure></p>
<p>好了，看了这么多的配置文件信息和日志信息，我们也总结一下 Maven 远程仓库优先级了。</p>
<p>主要有以下几点：<br>1.从日志信息我们得出这几种maven仓库的优先级别为</p>
<blockquote>
<p>本地仓库 &gt; 私服 （profile）&gt; 远程仓库（repository）和 镜像 （mirror） &gt; 中央仓库 （central）</p>
</blockquote>
<p>2.镜像是一个特殊的配置，其实镜像等同与远程仓库，没有匹配远程仓库的镜像就毫无作用（如 foo2）。<br>3.总结上面所说的，Maven 仓库的优先级就是 <strong>私服和远程仓库</strong> 的对比，没有其它的仓库类型。为什么这么说是因为，镜像等同远程，而中央其实也是 maven super xml 配置的一个repository 的一个而且。所以 maven 仓库真正的优先级为 </p>
<blockquote>
<p>本地仓库 &gt; 私服（profile）&gt; 远程仓库（repository）</p>
</blockquote>
<h2 id="maven-metadata-xml-文件"><a href="#maven-metadata-xml-文件" class="headerlink" title="maven-metadata.xml 文件"></a>maven-metadata.xml 文件</h2><p>Maven Repository Metadata 可用于表示：</p>
<pre><code>1. 一个没有版本的工件：它提供有关该工件的可用版本的信息
2. 快照伪像：它提供有关快照的精确信息
3. 包含Maven插件工件的组：它提供了有关此组中可用插件的信息。
</code></pre><p>元数据文件名是：</p>
<pre><code>远程存储库中的 maven-metadata.xml，
maven-metadata- &lt;repo-id&gt;.xml在本地存储库中，用于具有repo-id标识符的存储库中的元标记。
</code></pre><p>以上是 Maven 官网对该文件的解释。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>问题：有时候我们更新最新包的时候，会发现最新的包被拉取下来的，但是项目使用的包还是旧的包。所以我们要分析下是什么原因导致的。</p>
<p>首先我们先大概的了解下 maven-metadata.xml  文件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">metadata</span> <span class="attr">modelVersion</span>=<span class="string">"1.1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cjf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Chapter1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">versioning</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">snapshot</span>&gt;</span>                               <span class="comment">&lt;!--当前版本下的最新快照信息--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span>20170710.071727<span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span> <span class="comment">&lt;!--快照的时间戳--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">buildNumber</span>&gt;</span>6<span class="tag">&lt;/<span class="name">buildNumber</span>&gt;</span>           <span class="comment">&lt;!--构件号--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">snapshot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">lastUpdated</span>&gt;</span>20170710071727<span class="tag">&lt;/<span class="name">lastUpdated</span>&gt;</span><span class="comment">&lt;!--metadata文件被更新的时间--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">snapshotVersions</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">snapshotVersion</span>&gt;</span>                      <span class="comment">&lt;!--当前版本下可用的子快照版本信息--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">extension</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">extension</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.1-20170710.071727-6<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!--子快照版本的信息--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">updated</span>&gt;</span>20170710071727<span class="tag">&lt;/<span class="name">updated</span>&gt;</span>     <span class="comment">&lt;!--这个子快照版本的更新时间--&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">snapshotVersion</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">snapshotVersion</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">extension</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">extension</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.1-20170710.071727-6<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">updated</span>&gt;</span>20170710071727<span class="tag">&lt;/<span class="name">updated</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">snapshotVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">snapshotVersions</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">versioning</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中 lastUpdated 是最中要的一个属性，Maven 更新工程的 jar包时，会比较 lastUpdated 时间戳值，哪个值更大，就以哪个文件为准。</p>
<p>接下来我们看下 Maven 为我们生成了那些文件<br><img src="http://orbs83j4x.bkt.clouddn.com/20170710163449.png" alt="此处输入图片的描述"><br>我们可以看到 maven-metadata.xml 一共有三个</p>
<pre><code>1. maven-metadata-local.xml 本地的元数据, Maven install 的时候就会生成。
2. maven-metadata-snapshots.xml Maven deploy 时会生成
3. maven-metadata-localhost.xml 远程仓库获取的时候生成 (repository 的 id = localhost)
</code></pre><p>以上的文件其实都是 Maven 的过渡文件而已</p>
<ol>
<li>例如 maven-metadata-snapshots 就是 Maven deploy 先从远程仓库对应包的 maven-metadata.xml 下载下来，然后修改快照信息后在上传到远程仓库上。</li>
<li>例如 maven-metadata-localhost 的作用是在 Maven 在拉取包的时候，会先跟本地 maven-metadata-local 比较下 lastUpdated 时间戳值，值大用哪个。如果是 Mavne <strong>强制更新</strong> 的时候(没有强制更新是不会) 会下载远程的 maven-metadata.xml 比较<strong>远程，本地，和之前远程保存下来的 maven-metadata 文件</strong>。</li>
</ol>
<p>所以有时候 maven 库上的 jar 包已经更新，而我们总是拉取不到 maven 的包原因就是本地的 maven-metadata-local 的 lastUpdated 比较大。</p>
<p>我们验证下 Maven deploy 例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[INFO] --- maven-deploy-plugin:<span class="number">2.8</span>.2:deploy (<span class="keyword">default</span>-deploy) @ Chapter1 ---</div><div class="line"><span class="comment">// 先从远程下载快照 maven-metadata.xml</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">Downloaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml (768 B at 3.3 KB/sec)</span></div><div class="line"><span class="comment">// 将项目的 jar 和 pom 文件更新到远程仓库</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.jar</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.jar (8 KB at 14.1 KB/sec)</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.pom</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/Chapter1-0.0.1-20170710.121310-15.pom (2 KB at 2.0 KB/sec)</span></div><div class="line">Downloading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml</span></div><div class="line">Downloaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml (275 B at 1.6 KB/sec)</span></div><div class="line"><span class="comment">// 上传  maven-metadata.xml 到远程仓库</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/0.0.1-SNAPSHOT/maven-metadata.xml (768 B at 1.0 KB/sec)</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8081/repository/maven-snapshots/com/cjf/Chapter1/maven-metadata.xml (275 B at 0.4 KB/sec)</span></div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: <span class="number">5.231</span> s</div><div class="line">[INFO] Finished at: <span class="number">2017</span>-<span class="number">07</span>-<span class="number">10</span>T20:<span class="number">13</span>:<span class="number">13</span>+<span class="number">08</span>:<span class="number">00</span></div><div class="line">[INFO] Final Memory: <span class="number">19</span>M/<span class="number">226</span>M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本以为两天就写好这篇文章，在自己理清思路的时候总是被自己绕晕了。比如在 Nexus 的 Central 配置的中央仓库获取，和 maven-metadata.xml 是如何比较的。</p>
<p>如果以上文章有误，等博客的评论系统搭建起来后欢迎大家指认出来。</p>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LogBack 使用]]></title>
      <url>/2018/06/03/Logback/</url>
      <content type="html"><![CDATA[<p><img src="https://logback.qos.ch/images/logos/lblogo.jpg" alt="此处输入图片的描述"><br><strong>26 Seven 2017</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前项目一直使用 logback ,现在大概写下了 logback 基础配置。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>LogBack</code>是一个日志框架，它是Log4j作者Ceki的又一个日志组件。</p>
<p><code>LogBack,Slf4j,Log4j</code>之间的关系</p>
<p>slf4j是The Simple Logging Facade for Java的简称，是一个简单日志门面抽象框架，它本身只提供了日志Facade API和一个简单的日志类实现，一般常配合<code>Log4j</code>，<code>LogBack</code>，<code>java.util.logging</code>使用。Slf4j作为应用层的Log接入时，程序可以根据实际应用场景动态调整底层的日志实现框架(Log4j/LogBack/JdkLog…)；</p>
<p>LogBack和Log4j都是开源日记工具库，LogBack是Log4j的改良版本，比Log4j拥有更多的特性，同时也带来很大性能提升。</p>
<p>LogBack官方建议配合Slf4j使用，这样可以灵活地替换底层日志框架。</p>
<p>LogBack的结构<br>LogBack分为3个组件，logback-core, logback-classic 和 logback-access。<br>其中logback-core提供了LogBack的核心功能，是另外两个组件的基础。<br>logback-classic则实现了Slf4j的API，所以当想配合Slf4j使用时，则需要引入这个包。<br>logback-access是为了集成Servlet环境而准备的，可提供HTTP-access的日志接口。</p>
<p>Log的行为级别：<br>OFF、<br>FATAL、<br>ERROR、<br>WARN、<br>INFO、<br>DEBUG、<br>ALL<br>从下向上，当选择了其中一个级别，则该级别向下的行为是不会被打印出来。<br>举个例子，当选择了INFO级别，则INFO以下的行为则不会被打印出来。</p>
<h2 id="获取-Logger-对象"><a href="#获取-Logger-对象" class="headerlink" title="获取 Logger 对象"></a>获取 Logger 对象</h2><p><img src="/images/example.png" alt="此处输入图片的描述"></p>
<p>我们先从获取 logger 对象开始<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logger logger = LoggerFactory.getLogger(xxx.class.getName());</div></pre></td></tr></table></figure></p>
<p>LoggerFactory 是 slf4j 的日志工厂，获取 logger 方法就来自这里。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.slf4j.<span class="function">LoggerFactory</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(String name)</span> &#123;</div><div class="line">    ILoggerFactory iLoggerFactory = getILoggerFactory();</div><div class="line">    <span class="keyword">return</span> iLoggerFactory.getLogger(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法里面有分为两个过程。第一个过程是获取ILoggerFactory，就是真正的日志工厂。第二个过程就是从真正的日志工厂中获取logger。<br>接下来我们看下到底是怎么获取的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.slf4j.<span class="function">LoggerFactory</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ILoggerFactory <span class="title">getILoggerFactory</span><span class="params">()</span> &#123;</div><div class="line"><span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</div><div class="line">  INITIALIZATION_STATE = ONGOING_INITIALIZATION;</div><div class="line">  <span class="comment">// 第一次调用会去加载 StaticLoggerBinder.class 文件来决定 LoggerFactory 的实现类</span></div><div class="line">  <span class="comment">// （补充下：不同日志包下都有 StaticLoggerBinder 这个类文件，这个会决定 LoggerFactory 初始化那种类型的日志）</span></div><div class="line">  performInitialization();</div><div class="line">&#125;</div><div class="line"><span class="comment">// INITIALIZATION_STATE 值判断是否有加载初始化过 ILoggerFactory 实例。</span></div><div class="line"><span class="keyword">switch</span> (INITIALIZATION_STATE) &#123;</div><div class="line">  <span class="keyword">case</span> SUCCESSFUL_INITIALIZATION:</div><div class="line">    <span class="comment">// 返回对应的 ILoggerFactory 实例</span></div><div class="line">    <span class="keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();</div><div class="line">  <span class="keyword">case</span> NOP_FALLBACK_INITIALIZATION:</div><div class="line">    <span class="comment">// 当加载不到一个 StaticLoggerBinder 时，会走这里</span></div><div class="line">    <span class="comment">// 返回一个 NOPLoggerFactory 实例</span></div><div class="line">    <span class="keyword">return</span> NOP_FALLBACK_FACTORY;</div><div class="line">  <span class="keyword">case</span> FAILED_INITIALIZATION:</div><div class="line">    <span class="comment">// 初始化异常</span></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(UNSUCCESSFUL_INIT_MSG);</div><div class="line">  <span class="keyword">case</span> ONGOING_INITIALIZATION:</div><div class="line">    <span class="comment">// support re-entrant behavior.</span></div><div class="line">    <span class="comment">// See also http://bugzilla.slf4j.org/show_bug.cgi?id=106</span></div><div class="line">    <span class="keyword">return</span> TEMP_FACTORY;</div><div class="line">&#125;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unreachable code"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们来看下是怎么加载 StaticLoggerBinder.class 文件的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.slf4j.<span class="function">LoggerFactory</span></div><div class="line"></div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 加载 StaticLoggerBinder</span></div><div class="line">      Set staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();</div><div class="line">      reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);</div><div class="line">      <span class="comment">// 最后会随机选择一个StaticLoggerBinder.class来创建一个单例</span></div><div class="line">      StaticLoggerBinder.getSingleton();</div><div class="line">      <span class="comment">// 改变 INITIALIZATION_STATE 值，表示成功初始化 Factory。</span></div><div class="line">      <span class="comment">// 并且以后在获取 Logger 的时候并不会再次加载该方法</span></div><div class="line">      INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;</div><div class="line">      reportActualBinding(staticLoggerBinderPathSet);</div><div class="line">      emitSubstituteLoggerWarning();</div><div class="line">    &#125; <span class="keyword">catch</span> (NoClassDefFoundError ncde) &#123;</div><div class="line">      String msg = ncde.getMessage();</div><div class="line">      <span class="keyword">if</span> (messageContainsOrgSlf4jImplStaticLoggerBinder(msg)) &#123;</div><div class="line">        <span class="comment">// 加载不到 StaticLoggerBinder 文件</span></div><div class="line">        INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        failedBinding(ncde);</div><div class="line">        <span class="keyword">throw</span> ncde;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (java.lang.NoSuchMethodError nsme) &#123;</div><div class="line">      String msg = nsme.getMessage();</div><div class="line">      <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.indexOf(<span class="string">"org.slf4j.impl.StaticLoggerBinder.getSingleton()"</span>) != -<span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// 初始化异常</span></div><div class="line">        INITIALIZATION_STATE = FAILED_INITIALIZATION;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">throw</span> nsme;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      failedBinding(e);</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected initialization failure"</span>, e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p> 加载 StaticLoggerBinder.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.slf4j.LoggerFactory.findPossibleStaticLoggerBinderPathSet</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String STATIC_LOGGER_BINDER_PATH = <span class="string">"org/slf4j/impl/StaticLoggerBinder.class"</span>;</div><div class="line"></div><div class="line">···</div><div class="line"><span class="keyword">if</span> (loggerFactoryClassLoader == <span class="keyword">null</span>) &#123;</div><div class="line">    paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    paths = loggerFactoryClassLoader</div><div class="line">            .getResources(STATIC_LOGGER_BINDER_PATH);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> (paths.hasMoreElements()) &#123;</div><div class="line">    URL path = (URL) paths.nextElement();</div><div class="line">    staticLoggerBinderPathSet.add(path);</div><div class="line">  &#125;</div><div class="line">···</div></pre></td></tr></table></figure></p>
<p>当项目中存在多个StaticLoggerBinder.class文件时，运行项目会出现以下日志：<br>（这里获取的规则就近原则，如果在 maven 先配置 slf4j 而后面在配置 logback，则这里初始化的是 slf4j）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SLF4J: Class path contains multiple SLF4J bindings.</div><div class="line">SLF4J: Found binding in [jar:file:/E:/OperSource/org/slf4j/slf4j-log4j12/<span class="number">1.7</span>.12/slf4j-log4j12-<span class="number">1.7</span>.12.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: Found binding in [jar:file:/E:/OperSource/ch/qos/logback/logback-classic/<span class="number">1.1</span>.3/logback-classic-<span class="number">1.1</span>.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: See http:<span class="comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></div><div class="line">SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]</div></pre></td></tr></table></figure></p>
<p>返回实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以下代码摘自：org.slf4j.LoggerFactory.getILoggerFactory</div><div class="line"></div><div class="line">StaticLoggerBinder.getSingleton().getLoggerFactory();</div></pre></td></tr></table></figure></p>
<h2 id="LogBack-配置"><a href="#LogBack-配置" class="headerlink" title="LogBack 配置"></a>LogBack 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 项目名称配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>example<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 属性 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"APP_Name"</span> <span class="attr">value</span>=<span class="string">"example"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 统一的时间格式，用于日志头输出 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"timeStyle"</span> <span class="attr">datePattern</span>=<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置控制台输出,开发环境有--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- encoder 默认配置为PatternLayoutEncoder --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;timeStyle&#125;] [%cn] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--文件输出配置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>../logs/$&#123;APP_Name&#125;_run.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>../logs/$&#123;APP_Name&#125;_run.%i.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">minIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">minIndex</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">maxIndex</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxIndex</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;timeStyle&#125;] [%cn] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"BUSINESS_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>../logs/$&#123;APP_Name&#125;_business.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>../logs/$&#123;APP_Name&#125;_business.%i.business.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">minIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">minIndex</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">maxIndex</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxIndex</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;timeStyle&#125;] [%cn] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span><span class="comment">&lt;!-- 只打印错误日志 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARE<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 异步输出 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ASYNC"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>256<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"BUSINESS_ASYNC"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>256<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"BUSINESS_FILE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 为数据库开启显示sql --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.cjf.example.repository"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.cjf"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--日志的root目录，用于定位日志输出级别--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ASYNC"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面就是一个常用的日志配置模版，下面就从跟节点来解析每个节点</p>
<p><strong>1.configuration</strong><br>scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。<br>scanPeriod：监测配置文件是否有修改的时间间隔，默认 60s。<br>debug：是否打印 logback 内部日志，默认 false.<br><strong>2.contextName</strong> 项目名称<br>logger 上下文容器名称，默认 ‘default’，用于区分不同应用程序的记录。（可以在日志输出的时候将项目名称打印处理方便系统间交互 比如上面配置的 <code>%cn</code>）<br><strong>3.property</strong> 设置变量<br>定义变量后，可以使<code>${}</code>来使用变量。<br><strong>4.timestamp</strong> 设置时间戳格式<br>key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循Java.txt.SimpleDateFormat的格式。<br><strong>5.logger</strong><br>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。<br>name: 用来指定受此loger约束的某一个包或者具体的某一个类。<br>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。<br>addtivity:是否向上级loger传递打印信息。默认是true。<br>loger可以包含零个或多个appender-ref元素，标识这个appender将会添加到这个loger。<br><strong>6.root</strong><br>也是 loger 元素，但是它是根 loger。只有一个 level 属性，应为已经被命名为 <code>“root”</code>.<br>root 可以包含零个或多个 appender-ref 元素，标识这个 appender 将会添加到这个 loger。</loger></appender></timestamp></p>
<h3 id="什么是-Appender？"><a href="#什么是-Appender？" class="headerlink" title="什么是 Appender？"></a>什么是 Appender？</h3><p>logback 将日志记录事件写入到名为 appender 的组件的任务,不同 appender 决定了日志的记录方式。<br>appender 有多种实现的方式，下面简单介绍几种比较常用的配置。 <a href="https://logback.qos.ch/manual/appenders.html" target="_blank" rel="external">更多详情请参考官方文档</a></p>
<p><strong>ConsoleAppender</strong><br>把日志添加到控制台，有以下子节点：<br>  encoder：对日志进行格式化<br>  target：字符串 System.out 或者 System.err ，默认 System.out;<br>  withJansi：日志彩色输出</p>
<p>例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;timeStyle&#125;] [%cn] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>RollingFileAppender</strong><br>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。<br>file：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br>append：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br>encoder：对记录事件进行格式化。<br>rollingPolicy：当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。<br>triggeringPolicy：告知 RollingFileAppender 合适激活滚动。<br>prudent：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。</p>
<p>　<br>rollingPolicy 有两种类型，分别是 TimeBasedRollingPolicy，FixedWindowRollingPolicy。</p>
<p>例如 TimeBasedRollingPolicy 配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--输出到文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>fileNamePattern 定义了日志的切分方式——把每一天的日志归档到一个文件中<br>maxHistory 表示只保留最近30天的日志，以防止日志填满整个磁盘空间。<br>totalSizeCap 用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。</p>
<p>例如 FixedWindowRollingPolicy 配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>../logs/$&#123;APP_Name&#125;_run.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>../logs/$&#123;APP_Name&#125;_run.%i.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">minIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">minIndex</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maxIndex</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxIndex</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;timeStyle&#125;] [%cn] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里多了一个 SizeBasedTriggeringPolicy 触发机制，但 log 文件大于 10MB 的时候，就开始执行 rolling。<br>minIndex 和 maxIndex 表示保存日志数量，但大于 maxIndex 的时候，会开始删除旧的日志。</p>
<blockquote>
<p>必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为<br>mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz<br>或者 没有log%i.log.zip</p>
</blockquote>
<h3 id="AsyncAppender-异步输出"><a href="#AsyncAppender-异步输出" class="headerlink" title="AsyncAppender 异步输出"></a>AsyncAppender 异步输出</h3><p>这里就不写了，可以<a href="http://blog.csdn.net/ChenJie2000/article/details/8902727" target="_blank" rel="external">参考</a>文章。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于没有深入去了解 logback ,许多内容都是网上摘来的，写文章的时候也很费劲。思路不清晰。</p>
]]></content>
      
        <categories>
            
            <category> LogBack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LogBack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LinkedList 源码分析]]></title>
      <url>/2018/06/03/LinkedList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="LinkedList-源码分析"><a href="#LinkedList-源码分析" class="headerlink" title="LinkedList 源码分析"></a>LinkedList 源码分析</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有了ArrayList，自然少不了LinkedList了。</p>
<p>下面我就以面试问答的形式学习我们的常用的装载容器——<code>LinkedList</code>（源码分析基于JDK8）</p>
<h1 id="问答内容"><a href="#问答内容" class="headerlink" title="问答内容"></a>问答内容</h1><h2 id="LinkedList-用来做什么，怎么使用？"><a href="#LinkedList-用来做什么，怎么使用？" class="headerlink" title="LinkedList 用来做什么，怎么使用？"></a>LinkedList 用来做什么，怎么使用？</h2><p>问：请简单介绍一下您所了解的LinkedList，它可以用来做什么，怎么使用？</p>
<p>答：</p>
<ul>
<li>LinkedList底层是双向链表，同时实现了List接口和Deque接口，所以它既可以看作是一个<strong>顺序容器</strong>，也可以看作是一个<strong>队列(Queue)</strong>，同时也可以看作是一个<strong>栈</strong>(Stack)，但如果想使用栈或队列等数据结构的话，推荐使用ArrayDeque，它作为栈或队列会比LinkedList有更好的使用性能。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个LinkedList，链表的每个节点的内存空间都是实时分配的，所以无须事先指定容器大小</span></div><div class="line">LinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line"><span class="comment">// 往容器里面添加元素</span></div><div class="line">linkedList.add(<span class="string">"张三"</span>);</div><div class="line">linkedList.add(<span class="string">"李四"</span>);</div><div class="line"><span class="comment">// 在张三与李四之间插入一个王五</span></div><div class="line">linkedList.add(<span class="number">1</span>, <span class="string">"王五"</span>);</div><div class="line"><span class="comment">// 在头部插入一个小三</span></div><div class="line">linkedList.addFirst(<span class="string">"小三"</span>);</div><div class="line"><span class="comment">// 获取index下标为2的元素 王五</span></div><div class="line">String element = linkedList.get(<span class="number">2</span>);</div><div class="line"><span class="comment">// 修改index下标为2的元素 王五 为小四</span></div><div class="line">linkedList.set(<span class="number">2</span>, <span class="string">"小四"</span>);</div><div class="line"><span class="comment">// 删除index下标为1的元素 张三</span></div><div class="line">String removeElement = linkedList.remove(<span class="number">1</span>);</div><div class="line"><span class="comment">// 删除第一个元素</span></div><div class="line">String removeFirstElement = linkedList.removeFirst();</div><div class="line"><span class="comment">// 删除最后一个元素</span></div><div class="line">String removeLastElement = linkedList.removeLast();</div></pre></td></tr></table></figure>
<ul>
<li>LinkedList底层实现是双向链表，核心组成元素有：<code>int size = 0</code>用于记录链表长度；<code>Node&lt;E&gt; first;</code>用于记录头（第一个）结点（储存的是头结点的引用）；<code>Node&lt;E&gt; last;</code>用于记录尾（最后一个）结点（储存的是尾结点的引用）。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 记录链表长度</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Pointer to first node. 指向第一个结点</div><div class="line">     * Invariant: (first == null &amp;&amp; last == null) ||</div><div class="line">     *            (first.prev == null &amp;&amp; first.item != null)</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Pointer to last node. 指向最后一个结点</div><div class="line">     * Invariant: (first == null &amp;&amp; last == null) ||</div><div class="line">     *            (last.next == null &amp;&amp; last.item != null)</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>双向链表的核心组成元素还有一个最重要的<code>Node&lt;E&gt;</code>，<code>Node&lt;E&gt;</code>包含：<code>E item;</code> 用于存储元素数据，<code>Node&lt;E&gt; next;</code> 指向当前元素的后继结点，<code>Node&lt;E&gt; prev;</code> 指向当前元素的前驱结点。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 定义LinkedList底层的结点实现</div><div class="line"> */</div><div class="line">private static class Node&lt;E&gt; &#123;</div><div class="line">    E item; // 存储元素数据</div><div class="line">    Node&lt;E&gt; next;// 指向当前元素的后继结点</div><div class="line">    Node&lt;E&gt; prev;// 指向当前元素的前驱结点</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Node结点构造方法</div><div class="line">     */</div><div class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">        this.item = element;// 存储的元素</div><div class="line">        this.next = next;// 后继结点</div><div class="line">        this.prev = prev;// 前驱结点</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/28/8cfa61381cb1e233627e865c8cd33955?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="双向链表底层实现，图片来自网络">双向链表底层实现，图片来自网络</p>
<p>上图中的head即Node first; tail即Node last;</p>
<h2 id="LinkedList-的操作和对应的时间复杂度。"><a href="#LinkedList-的操作和对应的时间复杂度。" class="headerlink" title="LinkedList 的操作和对应的时间复杂度。"></a>LinkedList 的操作和对应的时间复杂度。</h2><p>问：请分别分析一下它是如何获取元素，修改元素，新增元素与删除元素，并分析这些操作对应的时间复杂度。</p>
<p>答：</p>
<ul>
<li>获取元素：LinkedList提供了三种获取元素的方法，分别是：</li>
</ul>
<ol>
<li>获取第一个元素<code>getFirst()</code>，获取第一个元素，直接返回<code>Node&lt;E&gt; first</code>指向的结点即可，所以时间复杂度为O(1)。</li>
<li>获取最后一个元素<code>getLast()</code>，获取最后一个元素，直接返回<code>Node&lt;E&gt; last</code>指向的结点即可，所以时间复杂度也为O(1)。</li>
<li>获取指定索引index位置的元素<code>get(int index)</code>，由于<code>Node&lt;E&gt;</code>结点在内存中存储的空间不是连续存储的，所以查找某一位置的结点，只能通过遍历链表的方式查找结点，因此LinkedList会先通过判断<code>index &lt; (size &gt;&gt; 1)</code>，<code>size&gt;&gt;1</code>即为<code>size/2</code>当前链表长度的一半，判断index的位置是在链表的前半部分还是后半部分。决定是从头部遍历查找数据还是从尾部遍历查找数据。最坏情况下，获取中间元素，则需要遍历n/2次才能获取到对应元素，所以此方法的时间复杂度为O(n)。</li>
</ol>
<ul>
<li>综上所述，LinkedList获取元素的时间复杂度为O(n)。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 返回列表中指定位置的元素</div><div class="line"> *</div><div class="line"> * @param index 指定index位置</div><div class="line"> * @return 返回指定位置的元素</div><div class="line"> * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</div><div class="line"> */</div><div class="line">public E get(int index) &#123;</div><div class="line">    // 检查index下标是否合法[0,size)</div><div class="line">    checkElementIndex(index);</div><div class="line">    // 遍历列表获取对应index位置的元素</div><div class="line">    return node(index).item;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 检查下标是否合法</div><div class="line"> */</div><div class="line">private void checkElementIndex(int index) &#123;</div><div class="line">    if (!isElementIndex(index))</div><div class="line">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean isElementIndex(int index) &#123;</div><div class="line">    return index &gt;= 0 &amp;&amp; index &lt; size;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 返回指定位置的结点元素（重点）</div><div class="line"> */</div><div class="line">Node&lt;E&gt; node(int index) &#123;</div><div class="line">    // assert isElementIndex(index);</div><div class="line">    // 判断index位置是在链表的前半部分还是后半部分</div><div class="line">    if (index &lt; (size &gt;&gt; 1)) &#123;</div><div class="line">        // 从头结点开始，从前往后遍历找到对应位置的结点元素</div><div class="line">        Node&lt;E&gt; x = first;</div><div class="line">        for (int i = 0; i &lt; index; i++)</div><div class="line">            x = x.next;</div><div class="line">        return x;</div><div class="line">    &#125; else &#123;</div><div class="line">        // 从尾结点开始，从后往前遍历找到对应位置的结点元素</div><div class="line">        Node&lt;E&gt; x = last;</div><div class="line">        for (int i = size - 1; i &gt; index; i--)</div><div class="line">            x = x.prev;</div><div class="line">        return x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改元素：LinkedList提供了一种修改元素数据的方法<code>set(int index, E element)</code>，修改元素数据的步骤是：1.检查index索引是否合法[0,size)。2.折半查询获取对应索引元素。3.将新元素赋值，返回旧元素。由获取元素的分析可知，折半查询的时间复杂度为O(n)，故修改元素数据的时间复杂度为O(n)。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 修改指定位置结点的存储数据</div><div class="line"> *</div><div class="line"> * @param index 指定位置</div><div class="line"> * @param element 修改的存储数据</div><div class="line"> * @return 返回未修改前的存储数据</div><div class="line"> * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</div><div class="line"> */</div><div class="line">public E set(int index, E element) &#123;</div><div class="line">    // 检查index下标是否合法[0,size)</div><div class="line">    checkElementIndex(index);</div><div class="line">    // 折半查询获取对应索引元素</div><div class="line">    Node&lt;E&gt; x = node(index);</div><div class="line">    // 将新元素赋值，返回旧元素</div><div class="line">    E oldVal = x.item;</div><div class="line">    x.item = element;</div><div class="line">    return oldVal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>新增元素：LinkedList提供了四种新增元素的方法，分别是：</li>
</ul>
<ol>
<li>将指定元素插入到链表的第一个位置中<code>addFirst(E e)</code>，只需将头结点<code>first</code>指向新元素结点，将原第一结点的前驱指针指向新元素结点即可。不需要移动原数据存储位置，只需交换一下相关结点的指针域信息即可。所以时间复杂度为O(1)。</li>
<li>将指定元素插入到链表的最后一个位置中<code>addLast(E e)</code>，只需将尾结点<code>last</code>指向新元素结点，将原最后一个结点的后继指针指向新元素结点即可。不需要移动原数据存储位置，只需交换一下相关结点的指针域信息即可。所以时间复杂度也为O(1)。</li>
<li>添加元素方法<code>add(E e)</code> 等价于<code>addLast(E e)</code>。</li>
<li>将指定元素插入到链表的指定位置index中<code>add(int index, E element)</code>，需要先根据位置index调用<code>node(index)</code>遍历链表获取该位置的原结点，然后将新结点插入至原该位置结点的前面，不需要移动原数据存储位置，只需交换一下相关结点的指针域信息即可。所以时间复杂度也为O(1)。</li>
</ol>
<ul>
<li>综上所述，LinkedList新增元素的时间复杂度为O(1)，单纯论插入新元素，操作是非常高效的，特别是插入至头部或插入到尾部。但如果是通过索引index的方式插入，插入的位置越靠近链表中间所费时间越长，因为需要对链表进行遍历查找。</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/28/373537715b40c9830bbc6f5de35dc6d3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="添加元素结点示意图，图片来自《大话数据结构》">添加元素结点示意图，图片来自《大话数据结构》</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 将指定元素插入到链表的第一个位置中</div><div class="line"> *</div><div class="line"> * @param e 要插入的元素</div><div class="line"> */</div><div class="line">public void addFirst(E e) &#123;</div><div class="line">    linkFirst(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 将元素e作为第一个元素</div><div class="line"> */</div><div class="line">private void linkFirst(E e) &#123;</div><div class="line">    // 获取原头结点</div><div class="line">    final Node&lt;E&gt; f = first;</div><div class="line">    // 初始化新元素结点</div><div class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</div><div class="line">    // 头指针指向新元素结点</div><div class="line">    first = newNode;</div><div class="line">    // 如果是第一个元素（链表为空）</div><div class="line">    if (f == null)</div><div class="line">        // 将尾指针也指向新元素结点</div><div class="line">        last = newNode;</div><div class="line">    else // 链表不会空</div><div class="line">        // 原头结点的前驱指针指向新结点</div><div class="line">        f.prev = newNode;</div><div class="line">    // 记录链表长度的size + 1</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 将指定元素插入到链表的最后一个位置中</div><div class="line"> *</div><div class="line"> * &lt;p&gt;此方法等同与add(E e)方法 &#123;@link #add&#125;.</div><div class="line"> *</div><div class="line"> * @param e 要插入的元素</div><div class="line"> */</div><div class="line">public void addLast(E e) &#123;</div><div class="line">    linkLast(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 将指定元素插入到链表的最后一个位置中</div><div class="line"> *</div><div class="line"> * &lt;p&gt;此方法等同与addLast(E e)方法  &#123;@link #addLast&#125;.</div><div class="line"> *</div><div class="line"> * @param e 要插入的元素</div><div class="line"> * @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)</div><div class="line"> */</div><div class="line">public boolean add(E e) &#123;</div><div class="line">    linkLast(e);</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 将元素e作为最后一个元素</div><div class="line"> */</div><div class="line">void linkLast(E e) &#123;</div><div class="line">    // 获取原尾结点</div><div class="line">    final Node&lt;E&gt; l = last;</div><div class="line">    // 初始化新元素结点</div><div class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</div><div class="line">    // 位指针指向新元素结点</div><div class="line">    last = newNode;</div><div class="line">    // 如果是第一个元素（链表为空）</div><div class="line">    if (l == null)</div><div class="line">        // 将头指针也指向新元素结点</div><div class="line">        first = newNode;</div><div class="line">    else // 链表不会空</div><div class="line">        // 原尾结点的后继指针指向新结点</div><div class="line">        l.next = newNode;</div><div class="line">    // 记录链表长度的size + 1</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 将指定元素插入到链表的指定位置index中</div><div class="line"> *</div><div class="line"> * @param index 元素要插入的位置index</div><div class="line"> * @param element 要插入的元素</div><div class="line"> * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</div><div class="line"> */</div><div class="line">public void add(int index, E element) &#123;</div><div class="line">    // 检查插入位置是否合法[0,size]</div><div class="line">    checkPositionIndex(index);</div><div class="line">    // 如果插入的位置和当前链表长度相等，则直接将元素插入至链表的尾部</div><div class="line">    if (index == size)</div><div class="line">        // 将元素插入至链表的尾部</div><div class="line">        linkLast(element);</div><div class="line">    else</div><div class="line">        //将元素插入至指定位置,node(index)先获取占有该index位置的原结点</div><div class="line">        linkBefore(element, node(index));</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 检查位置是否合法</div><div class="line"> */</div><div class="line">private void checkPositionIndex(int index) &#123;</div><div class="line">    if (!isPositionIndex(index))</div><div class="line">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 检查位置是否合法</div><div class="line"> */</div><div class="line">private boolean isPositionIndex(int index) &#123;</div><div class="line">    //合法位置为[0,size]</div><div class="line">    return index &gt;= 0 &amp;&amp; index &lt;= size;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 将新元素e插入至旧元素succ前面</div><div class="line"> */</div><div class="line">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</div><div class="line">    // assert succ != null;</div><div class="line">    // 记录旧元素结点succ的前驱指针</div><div class="line">    final Node&lt;E&gt; pred = succ.prev;</div><div class="line">    // 初始化新元素结点</div><div class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</div><div class="line">    // 旧元素结点的前驱指针指向新元素结点(即新元素结点放至在旧元素结点的前面，取代了原本旧元素的位置)</div><div class="line">    succ.prev = newNode;</div><div class="line">    // 如果旧元素结点的前驱指针为空，则证明旧元素结点是头结点，</div><div class="line">    // 将新元素结点插入至旧元素结点前面，所以现时新的头结点是新元素结点</div><div class="line">    if (pred == null)</div><div class="line">        first = newNode;</div><div class="line">    else //不是插入至头部</div><div class="line">        // 旧元素的前驱结点的后继指针指向新元素结点</div><div class="line">        pred.next = newNode;</div><div class="line">    // 记录链表长度的size + 1</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>删除元素：LinkedList提供了四种删除元素的方法，分别是：</li>
</ul>
<ol>
<li>删除链表中的第一个元素<code>removeFirst()</code>，只需将头结点<code>first</code>指向删除元素结点的后继结点并将其前驱结点指针信息<code>prev</code>清空即可。不需要移动原数据存储位置，只需操作相关结点的指针域信息即可。所以时间复杂度为O(1)。</li>
<li>删除链表中的最后一个元素<code>removeLast()</code>，只需将尾结点<code>last</code>指向删除元素结点的前驱结点并将其后继结点指针信息<code>next</code>清空即可。不需要移动原数据存储位置，只需操作相关结点的指针域信息即可，所以时间复杂度也为O(1)。</li>
<li>将指定位置index的元素删除<code>remove(int index)</code>，需要先根据位置index调用<code>node(index)</code>遍历链表获取该位置的原结点，然后将删除元素结点的前驱结点的<code>next</code>后继结点指针域指向删除元素结点的后继结点<code>node.prev.next = node.next</code>，删除元素结点的后继结点的<code>prev</code>前驱结点指针域指向删除元素结点的前驱结点即可<code>node.next.prev = node.prev</code>（此处可能有些绕，不太理解的同学自行学习一下双向链表的数据结构吧），不需要移动原数据存储位置，只需交换一下相关结点的指针域信息即可。所以时间复杂度也为O(1)。</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/28/f85573ac41422b664bdd69d0b9e25a66?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="删除元素结点示意图，图片来自《大话数据结构》">删除元素结点示意图，图片来自《大话数据结构》</p>
<ol>
<li>删除传入的Object o指定对象，比较对象是否一致通过o.equals方法比较<code>remove(Object o)</code>，和3.的思路基本差不多，关键是比较对象是通过o.equals方法，记住这点即可。</li>
</ol>
<ul>
<li>综上所述，LinkedList删除元素的时间复杂度为O(1)，单纯论删除元素，操作是非常高效的，特别是删除第一个结点或删除最后一个结点。但如果是通过索引index的方式或者object对象的方式删除，则需要对链表进行遍历查找对应index索引的对象或者利用equals方法判断对象。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 删除链表中的第一个元素并返回</div><div class="line"> *</div><div class="line"> * @return 链表中的第一个元素</div><div class="line"> * @throws NoSuchElementException if this list is empty</div><div class="line"> */</div><div class="line">public E removeFirst() &#123;</div><div class="line">    //根据头结点获取第一个元素结点</div><div class="line">    final Node&lt;E&gt; f = first;</div><div class="line">    if (f == null) // 没有元素结点则抛出异常</div><div class="line">        throw new NoSuchElementException();</div><div class="line">    return unlinkFirst(f);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 移除第一个元素</div><div class="line"> */</div><div class="line">private E unlinkFirst(Node&lt;E&gt; f) &#123;</div><div class="line">    // assert f == first &amp;&amp; f != null;</div><div class="line">    // 记录要移除元素结点的数据域</div><div class="line">    final E element = f.item;</div><div class="line">    // 记录要移除元素结点的后继结点指针</div><div class="line">    final Node&lt;E&gt; next = f.next;</div><div class="line">    // 清空要删除结点的数据域和next指针域信息，以帮助垃圾回收</div><div class="line">    f.item = null;</div><div class="line">    f.next = null; // help GC</div><div class="line">    // 头结点指向要移除元素结点的后继结点</div><div class="line">    first = next;</div><div class="line">    // 如果要移除元素结点的后继结点为空，则证明链表只有一个元素</div><div class="line">    // 所以需要将尾结点的指针信息也要清空</div><div class="line">    if (next == null)</div><div class="line">        last = null;</div><div class="line">    else</div><div class="line">        // 将新的第一个结点的前驱结点指针信息清空</div><div class="line">        next.prev = null;</div><div class="line">    // 记录链表长度的size - 1</div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    // 返回移除元素结点的数据域</div><div class="line">    return element;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 删除链表中的最后一个元素并返回</div><div class="line"> *</div><div class="line"> * @return 链表中的最后一个元素</div><div class="line"> * @throws NoSuchElementException if this list is empty</div><div class="line"> */</div><div class="line">public E removeLast() &#123;</div><div class="line">    // 根据尾结点获取最后一个元素结点</div><div class="line">    final Node&lt;E&gt; l = last;</div><div class="line">    if (l == null)// 没有元素结点则抛出异常</div><div class="line">        throw new NoSuchElementException();</div><div class="line">    return unlinkLast(l);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 移除最后一个元素</div><div class="line"> */</div><div class="line">private E unlinkLast(Node&lt;E&gt; l) &#123;</div><div class="line">    // assert l == last &amp;&amp; l != null;</div><div class="line">    // 记录要移除元素结点的数据域</div><div class="line">    final E element = l.item;</div><div class="line">    // 记录要移除元素结点的前驱结点指针</div><div class="line">    final Node&lt;E&gt; prev = l.prev;</div><div class="line">    // 清空要删除结点的数据域和prev指针域信息，以帮助垃圾回收</div><div class="line">    l.item = null;</div><div class="line">    l.prev = null; // help GC</div><div class="line">    // 头结点指向要移除元素结点的前驱结点</div><div class="line">    last = prev;</div><div class="line">    // 如果要移除元素结点的前驱结点为空，则证明链表只有一个元素</div><div class="line">    // 所以需要将头结点的指针信息也要清空</div><div class="line">    if (prev == null)</div><div class="line">        first = null;</div><div class="line">    else</div><div class="line">        // 将新的最后一个结点的后继结点指针信息清空</div><div class="line">        prev.next = null;</div><div class="line">    // 记录链表长度的size - 1</div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    // 返回移除元素结点的数据域</div><div class="line">    return element;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 将指定位置index的元素删除</div><div class="line"> *</div><div class="line"> * @param index 要删除的位置index</div><div class="line"> * @return 要删除位置的原元素</div><div class="line"> * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</div><div class="line"> */</div><div class="line">public E remove(int index) &#123;</div><div class="line">    // 检查index下标是否合法[0,size)</div><div class="line">    checkElementIndex(index);</div><div class="line">    // 根据index进行遍历链表获取要删除的结点，再调用unlink方法进行删除</div><div class="line">    return unlink(node(index));</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 删除传入的Object o指定对象，比较对象是否一致通过o.equals方法比较</div><div class="line"> * @param o 要删除的Object o指定对象</div><div class="line"> * @return &#123;@code true&#125; 是否存在要删除对象o</div><div class="line"> */</div><div class="line">public boolean remove(Object o) &#123;</div><div class="line">    // 如果删除对象为null，则遍历链表查找node.item数据域为null的结点并移除</div><div class="line">    if (o == null) &#123;</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">            if (x.item == null) &#123;</div><div class="line">                unlink(x);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        // 从头开始遍历链表，并通过equals方法逐一比较node.item是否相等 </div><div class="line">        // 相等则对象一致，删除此对象。</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">            if (o.equals(x.item)) &#123;</div><div class="line">                unlink(x);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 移除指定结点x</div><div class="line"> */</div><div class="line">E unlink(Node&lt;E&gt; x) &#123;</div><div class="line">    // assert x != null;</div><div class="line">    // 记录要移除元素结点的数据域</div><div class="line">    final E element = x.item;</div><div class="line">    // 记录要移除元素结点的后继结点指针</div><div class="line">    final Node&lt;E&gt; next = x.next;</div><div class="line">    // 记录要移除元素结点的前驱结点指针</div><div class="line">    final Node&lt;E&gt; prev = x.prev;</div><div class="line"></div><div class="line">    // 如果要移除元素结点的前驱结点为空，则证明要删除结点为第一个结点</div><div class="line">    if (prev == null) &#123;</div><div class="line">        // 头结点指向要删除元素结点的后继结点</div><div class="line">        first = next;</div><div class="line">    &#125; else &#123;</div><div class="line">        // 要删除元素结点的前驱结点的后继指针指向要删除元素结点的后继结点</div><div class="line">        prev.next = next;</div><div class="line">        // 清空要删除结点的前驱结点指针信息，以帮助GC</div><div class="line">        x.prev = null;</div><div class="line">    &#125;</div><div class="line">    // 如果要移除元素结点的后继结点为空，则证明要删除结点为最后一个结点</div><div class="line">    if (next == null) &#123;</div><div class="line">        // 尾结点指向要删除元素结点的前驱结点</div><div class="line">        last = prev;</div><div class="line">    &#125; else &#123;</div><div class="line">        // 要删除元素结点的后继结点的前驱指针指向要删除元素结点的前驱结点</div><div class="line">        next.prev = prev;</div><div class="line">        // 清空要删除结点的后继结点指针信息，以帮助GC</div><div class="line">        x.next = null;</div><div class="line">    &#125;</div><div class="line">    // 清空要删除元素的数据域，以帮助GC</div><div class="line">    x.item = null;</div><div class="line">    // 记录链表长度的size - 1</div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    // 返回移除元素结点的数据域</div><div class="line">    return element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayList和LinkedList-的区别"><a href="#ArrayList和LinkedList-的区别" class="headerlink" title="ArrayList和LinkedList 的区别"></a>ArrayList和LinkedList 的区别</h2><p>问：那您可以比较一下ArrayList和LinkedList吗?</p>
<p>答：</p>
<ol>
<li>LinkedList内部存储的是<code>Node&lt;E&gt;</code>，不仅要维护数据域，还要维护<code>prev</code>和<code>next</code>，如果LinkedList中的结点特别多，则LinkedList比ArrayList更占内存。</li>
<li>插入删除操作效率：<br>LinkedList在做插入和删除操作时，插入或删除头部或尾部时是高效的，操作越靠近中间位置的元素时，需要遍历查找，速度相对慢一些，如果在数据量较大时，每次插入或删除时遍历查找比较费时。所以LinkedList插入与删除，慢在遍历查找，快在只需要更改相关结点的引用地址。<br>ArrayList在做插入和删除操作时，插入或删除尾部时也一样是高效的，操作其他位置，则需要批量移动元素，所以ArrayList插入与删除，快在遍历查找，慢在需要批量移动元素。</li>
<li>循环遍历效率：</li>
</ol>
<ul>
<li>由于ArrayList实现了<code>RandomAccess</code>随机访问接口，所以使用for(int i = 0; i &lt; size; i++)遍历会比使用Iterator迭代器来遍历快：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for (int i=0, n=list.size(); i &lt; n; i++) &#123;     </div><div class="line">    list.get(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">runs faster than this loop:</div><div class="line">for (Iterator i=list.iterator(); i.hasNext(); ) &#123; </div><div class="line">   i.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>而由于LinkedList未实现<code>RandomAccess</code>接口，所以推荐使用Iterator迭代器来遍历数据。</li>
<li>因此，如果我们需要频繁在列表的中部改变插入或删除元素时，建议使用LinkedList，否则，建议使用ArrayList，因为ArrayList遍历查找元素较快，并且只需存储元素的数据域，不需要额外记录其他数据的位置信息，可以节省内存空间。</li>
</ul>
<h2 id="LinkedList是线程安全的吗？"><a href="#LinkedList是线程安全的吗？" class="headerlink" title="LinkedList是线程安全的吗？"></a>LinkedList是线程安全的吗？</h2><p>问：LinkedList是线程安全的吗？</p>
<p>答：LinkedList不是线程安全的，如果多个线程同时对同一个LinkedList更改数据的话，会导致数据不一致或者数据污染。如果出现线程不安全的操作时，LinkedList会尽可能的抛出<code>ConcurrentModificationException</code>防止数据异常，当我们在对一个LinkedList进行遍历时，在遍历期间，我们是不能对LinkedList进行添加，删除等更改数据结构的操作的，否则也会抛出<code>ConcurrentModificationException</code>异常，此为fail-fast（快速失败）机制。从源码上分析，我们在<code>add,remove</code>等更改LinkedList数据时，都会导致modCount的改变，当<code>expectedModCount != modCount</code>时，则抛出<code>ConcurrentModificationException</code>。如果想要线程安全，可以考虑调用<code>Collections.synchronizedCollection(Collection&lt;T&gt; c)</code>方法。</p>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">private class ListItr implements ListIterator&lt;E&gt; &#123;</div><div class="line">    private Node&lt;E&gt; lastReturned;</div><div class="line">    private Node&lt;E&gt; next;</div><div class="line">    private int nextIndex;</div><div class="line">    private int expectedModCount = modCount;</div><div class="line"></div><div class="line">    ListItr(int index) &#123;</div><div class="line">        // assert isPositionIndex(index);</div><div class="line">        next = (index == size) ? null : node(index);</div><div class="line">        nextIndex = index;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        return nextIndex &lt; size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public E next() &#123;</div><div class="line">        checkForComodification();</div><div class="line">        if (!hasNext())</div><div class="line">            throw new NoSuchElementException();</div><div class="line"></div><div class="line">        lastReturned = next;</div><div class="line">        next = next.next;</div><div class="line">        nextIndex++;</div><div class="line">        return lastReturned.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean hasPrevious() &#123;</div><div class="line">        return nextIndex &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public E previous() &#123;</div><div class="line">        checkForComodification();</div><div class="line">        if (!hasPrevious())</div><div class="line">            throw new NoSuchElementException();</div><div class="line"></div><div class="line">        lastReturned = next = (next == null) ? last : next.prev;</div><div class="line">        nextIndex--;</div><div class="line">        return lastReturned.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int nextIndex() &#123;</div><div class="line">        return nextIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int previousIndex() &#123;</div><div class="line">        return nextIndex - 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void remove() &#123;</div><div class="line">        checkForComodification();</div><div class="line">        if (lastReturned == null)</div><div class="line">            throw new IllegalStateException();</div><div class="line"></div><div class="line">        Node&lt;E&gt; lastNext = lastReturned.next;</div><div class="line">        unlink(lastReturned);</div><div class="line">        if (next == lastReturned)</div><div class="line">            next = lastNext;</div><div class="line">        else</div><div class="line">            nextIndex--;</div><div class="line">        lastReturned = null;</div><div class="line">        expectedModCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set(E e) &#123;</div><div class="line">        if (lastReturned == null)</div><div class="line">            throw new IllegalStateException();</div><div class="line">        checkForComodification();</div><div class="line">        lastReturned.item = e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void add(E e) &#123;</div><div class="line">        checkForComodification();</div><div class="line">        lastReturned = null;</div><div class="line">        if (next == null)</div><div class="line">            linkLast(e);</div><div class="line">        else</div><div class="line">            linkBefore(e, next);</div><div class="line">        nextIndex++;</div><div class="line">        expectedModCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void forEachRemaining(Consumer&lt;? super E&gt; action) &#123;</div><div class="line">        Objects.requireNonNull(action);</div><div class="line">        while (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;</div><div class="line">            action.accept(next.item);</div><div class="line">            lastReturned = next;</div><div class="line">            next = next.next;</div><div class="line">            nextIndex++;</div><div class="line">        &#125;</div><div class="line">        checkForComodification();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    final void checkForComodification() &#123;</div><div class="line">        if (modCount != expectedModCount)</div><div class="line">            throw new ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LinkedList的结论已在第三个问题中展现了一部分了，所以不再重复说明了，我以面试问答的形式和大家一同学习了LinkedList，由于没有时间画图，可能此次没有ArrayList说的那么清楚，如果大家有看不懂的地方，请自行看一下关于链表的数据结构吧。如果此文对你有帮助，麻烦点个喜欢，谢谢各位。</p>
]]></content>
      
        <categories>
            
            <category> LinkedList </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery 概述]]></title>
      <url>/2018/06/03/jQuery%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h1 id="jQuery-概述"><a href="#jQuery-概述" class="headerlink" title="jQuery 概述"></a>jQuery 概述</h1><h2 id="jQuery-简介"><a href="#jQuery-简介" class="headerlink" title="jQuery 简介"></a>jQuery 简介</h2><p>官网： <a href="http://jquery.com/" target="_blank" rel="external">http://jquery.com/</a></p>
<p>中文：<a href="https://www.jquery123.com" target="_blank" rel="external">https://www.jquery123.com</a></p>
<p>本质： jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。</p>
<a id="more"></a>
<h2 id="jQuery有三条产品线"><a href="#jQuery有三条产品线" class="headerlink" title="jQuery有三条产品线"></a>jQuery有三条产品线</h2><p>jQuery1.x.x : 兼容IE6、7、8，花了很大的气力让IE6、7、8等低级浏览器都兼容。</p>
<p>jQuery2.x.x : 不兼容IE6、7、8，从1代中剔除了所有兼容代码。</p>
<p>jQuery3.x.x : 全面支持HTML5和CSS3。</p>
<h2 id="jQuery的操作过程"><a href="#jQuery的操作过程" class="headerlink" title="jQuery的操作过程"></a>jQuery的操作过程</h2><p>(1) jQuery操作页面元素一定是从一个$()开始的！</p>
<p>(2) $()函数里面有引号，引号里面写CSS选择器。</p>
<p>(3) 然后加上jQuery自己的方法（不能使用js原生的方法。）</p>
<h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height:200px;background-color:skyblue ;</div><div class="line">        &#125;</div><div class="line">        .div2&#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: pink;</div><div class="line">        &#125;</div><div class="line">        .div3&#123;</div><div class="line">            width: 100px;</div><div class="line">            height:100px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--添加事件监听--&gt;</span></div><div class="line">    $('.div3').click(function () &#123;</div><div class="line">        $(this).css('background-color','red');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height:200px;background-color:skyblue ;</div><div class="line">        &#125;</div><div class="line">        .div2&#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: pink;</div><div class="line">        &#125;</div><div class="line">        .div3&#123;</div><div class="line">            width: 100px;</div><div class="line">            height:100px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--批量处理--&gt;</span></div><div class="line">    <span class="comment">&lt;!--添加事件监听--&gt;</span></div><div class="line">    $('div').click(function () &#123;</div><div class="line">        $(this).css('background-color','red');</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="快速设置动画"><a href="#快速设置动画" class="headerlink" title="快速设置动画"></a>快速设置动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height:200px;background-color:skyblue ;</div><div class="line">        &#125;</div><div class="line">        .div2&#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: pink;</div><div class="line">        &#125;</div><div class="line">        .div3&#123;</div><div class="line">            width: 100px;</div><div class="line">            height:100px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">    // <span class="comment">&lt;!--快速设置动画--&gt;</span></div><div class="line">    $('.div3').click(function () &#123;</div><div class="line">        $(this).animate(&#123;'width':600&#125;,500);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="支持css2-、css3-中所有的选择器"><a href="#支持css2-、css3-中所有的选择器" class="headerlink" title="支持css2 、css3 中所有的选择器"></a>支持css2 、css3 中所有的选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height:200px;background-color:skyblue ;</div><div class="line">        &#125;</div><div class="line">        .div2&#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: pink;</div><div class="line">        &#125;</div><div class="line">        .div3&#123;</div><div class="line">            width: 100px;</div><div class="line">            height:100px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--支持css2 、css3 中所有的选择器--&gt;</span></div><div class="line">    $('.div1 .div2').css('background-color','blue');</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="自带的封装到无敌的动画"><a href="#自带的封装到无敌的动画" class="headerlink" title="自带的封装到无敌的动画"></a>自带的封装到无敌的动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height:200px;background-color:skyblue ;</div><div class="line">        &#125;</div><div class="line">        .div2&#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: pink;</div><div class="line">        &#125;</div><div class="line">        .div3&#123;</div><div class="line">            width: 100px;</div><div class="line">            height:100px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--自带的封装到无敌的动画--&gt;</span></div><div class="line">    $('.div3').click(function () &#123;</div><div class="line">        //上滑</div><div class="line">        // $(this).slideUp();</div><div class="line">        // 先上再下</div><div class="line">        // $(this).slideUp().slideDown();</div><div class="line">        // 先上再下 渐变</div><div class="line">        // $(this).slideUp().slideDown().fadeOut();</div><div class="line">        $(this).slideUp().slideDown().fadeOut().fadeIn();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>jQuery框架整体感知<br>        步骤：<br>             (1) jQuery操作页面元素一定是从一个$()开始的！<br>             (2) $()函数里面有引号，引号里面写CSS选择器。<br>             (3) 然后加上jQuery自己的方法（不能使用js原生的方法。）<br>        注意：<br>            $()函数的执行结果会返回一个jq对象，jq对象只能调用jq框架中提供的方法<br>            js对象只能调用js中提供的方法，jq对象和js对象两者不能混为一谈。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .div1&#123;</div><div class="line">            width: 200px;height:200px;background-color:skyblue ;</div><div class="line">        &#125;</div><div class="line">        .div2&#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: pink;</div><div class="line">        &#125;</div><div class="line">        .div3&#123;</div><div class="line">            width: 100px;</div><div class="line">            height:100px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- js对象只能调用js中提供的方法，jq对象和js对象两者不能混为一谈。--&gt;</span></div><div class="line">    $('.div3').click(function () &#123;</div><div class="line">        $(this).style.backgroundColor = 'red';</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java选择题【1~60】]]></title>
      <url>/2018/06/03/Java%E9%80%89%E6%8B%A9%E9%A2%98%E3%80%901~60%E3%80%91/</url>
      <content type="html"><![CDATA[<h1 id="Java选择题【1-60】"><a href="#Java选择题【1-60】" class="headerlink" title="Java选择题【1~60】"></a>Java选择题【1~60】</h1><p>原文地址：<a href="http://blog.csdn.net/qq_36075612/article/details/71126487" target="_blank" rel="external">http://blog.csdn.net/qq_36075612/article/details/71126487</a></p>
<p>1.下面中哪两个可以在A的子类中使用：（ ）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">method1</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A. public int method 1 (int a, int b) { return 0; }</p>
<p>B. private int method1 (int a, int b) { return 0; }</p>
<p>C. private int method1 (int a, long b) { return 0; }</p>
<p>D. public short method1 (int a, int b) { return 0; }</p>
<p>解答：AC</p>
<p><strong>主要考查子类重写父类的方法的原则</strong></p>
<p>B，子类重写父类的方法，访问权限不能降低</p>
<p>C，属于重载</p>
<p>D，子类重写父类的方法 返回值类型要相同或是父类方法返回值类型的子类</p>
<p>2.Abstract method cannot be static. True or False ?</p>
<p>A True</p>
<p>B False</p>
<p>解答：A</p>
<p>抽象方法可以在子类中被重写，但是静态方法不能在子类中被重写，静态方法和静态属性与对象是无关的，只与类有关，这与abstract是矛盾的，所以abstract是不能被修饰为static，否则就失去了abstract的意义了</p>
<p>3.What will be the output when you compile and execute the following program.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(“Base.test()”);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(“Child.test()”);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line"></div><div class="line">Child anObj = <span class="keyword">new</span> Child();</div><div class="line"></div><div class="line">Base baseObj = (Base)anObj;</div><div class="line"></div><div class="line">baseObj.test();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Select most appropriate answer.</p>
<p>A . Child.test()</p>
<p>Base.test()</p>
<p>B. Base.test()</p>
<p>Child.test()</p>
<p>C. Base.test()</p>
<p>D. Child.test()</p>
<p>解答：D</p>
<p>测试代码相当于：Base baseObj = new Child();父类的引用指向子类的实例，子类又重写了父类</p>
<p>的test方法，因此调用子类的test方法。</p>
<p>4.What will be the output when you compile and execute the following program.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(“Base.test()”);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(“Child.test()”);</div><div class="line"></div><div class="line">Base.test(); <span class="comment">//Call the parent method</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Child().test();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Select most appropriate answer.</p>
<p>A . Child.test() 、Base.test()</p>
<p>B . Child.test()、Child.test()</p>
<p>C.  Compilation error. Cannot override a static method by an instance method</p>
<p>D. Runtime error. Cannot override a static method by an instance method</p>
<p>解答：C</p>
<p>静态方法不能在子类中被重写</p>
<p>5.What will be the output when you compile and execute the following program.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(<span class="number">6</span> + <span class="number">6</span> + “(Result)”);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Base().test();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Select most appropriate answer.</p>
<p>A.  66(Result)</p>
<p>B . 12(Result)</p>
<p>C . Runtime Error.Incompatible type for +. Can’t convert an int to a string.</p>
<p>D . Compilation Error.Incompatible type for +. Can’t add a string to an int.</p>
<p>解答：B</p>
<p>字符串与基本数据类型链接的问题,如果第一个是字符串那么后续就都按字符串处理，比如上边例子要是System.out.println(“(Result)”+6 + 6 );那么结果就是(Result)66，如果第一个和第二个。。。第n个都是基本数据第n+1是字符串类型，那么前n个都按加法计算出结果在与字符串连接</p>
<p>6..What will be the output when you compile and execute the following program. The symbol ’ ?’ means space.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>:<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">2</span>:</div><div class="line"></div><div class="line"><span class="number">3</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">4</span>:</div><div class="line"></div><div class="line"><span class="number">5</span>: String aStr = “?One?”;</div><div class="line"></div><div class="line"><span class="number">6</span>: String bStr = aStr;</div><div class="line"></div><div class="line"><span class="number">7</span>: aStr.toUpperCase();</div><div class="line"></div><div class="line"><span class="number">8</span>: aStr.trim();</div><div class="line"></div><div class="line"><span class="number">9</span>: System.out.println(“[<span class="string">" + aStr + "</span>,<span class="string">" + bStr + "</span>]“);</div><div class="line"></div><div class="line"><span class="number">7</span>: &#125;</div><div class="line"></div><div class="line"><span class="number">8</span>:</div><div class="line"></div><div class="line"><span class="number">9</span>: <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">10</span>: <span class="keyword">new</span> Base().test();</div><div class="line"></div><div class="line"><span class="number">11</span>: &#125;</div><div class="line"></div><div class="line"><span class="number">12</span>: &#125;</div></pre></td></tr></table></figure>
<p>Select most appropriate answer.</p>
<p>A.  [ONE,?One?]</p>
<p>B . [?One?,One]</p>
<p>C . [ONE,One]</p>
<p>D . [ONE,ONE]</p>
<p>E . [?One?,?One?]</p>
<p>解答：E</p>
<p>通过 <strong>String bStr = aStr;</strong> 这句代码使 bStr 和 aStr 指向同一个地址空间，所以最后 aStr 和 bStr 的结果应该是一样，String 类是定长字符串，调用一个字符串的方法以后会形成一个新的字符串。</p>
<p>7.下面关于<strong>变量</strong>及其<strong>范围</strong>的陈述哪些是不正确的（ ）：</p>
<p>A．实例变量是类的成员变量</p>
<p>B．实例变量用关键字static声明</p>
<p>C．在方法中定义的局部变量在该方法被执行时创建</p>
<p>D．局部变量在使用前必须被初始化</p>
<p>解答：BC</p>
<p>由static修饰的变量称为类变量或是静态变量</p>
<p>方法加载的时候创建局部变量</p>
<p>8.下列关于<strong>修饰符混用</strong>的说法，错误的是（ ）：</p>
<p>A．abstract不能与final并列修饰同一个类</p>
<p>B．abstract类中可以有private的成员</p>
<p>C．abstract方法必须在abstract类中</p>
<p>D．static方法中能处理非static的属性</p>
<p>解答 D</p>
<p><strong>静态方法中不能引用非静态的成员</strong></p>
<p>9.执行完以下代码 int [ ] x = new int[25]; 后，以下哪项说明是正确的（ ）：</p>
<p>A、 x[24]为0</p>
<p>B、 x[24]未定义</p>
<p>C、 x[25]为0</p>
<p>D、 x[0]为空</p>
<p>解答：A</p>
<p>x 属于引用类型，该引用类型的每一个成员是 int 类型，默认值为：0</p>
<p>10.编译运行以下程序后，关于输出结果的说明正确的是 （ ）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Conditional</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> x=<span class="number">4</span>;</div><div class="line"></div><div class="line">System.out.println(“value is “+ ((x&gt;<span class="number">4</span>) ? <span class="number">99.9</span> :<span class="number">9</span>));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A、 输出结果为：value is 99.99</p>
<p>B、 输出结果为：value is 9</p>
<p>C、 输出结果为：value is 9.0</p>
<p>D、 编译错误</p>
<p>解答：C</p>
<p>三目运算符中：第二个表达式和第三个表达式中如果都为基本数据类型，整个表达式的运算结果</p>
<p>由容量高的决定。99.9是double类型 而9是int类型，double容量高。</p>
<p>11.关于以下 application 的说明，正确的是（ ）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>． <span class="class"><span class="keyword">class</span> <span class="title">StaticStuff</span></span></div><div class="line"></div><div class="line">2． &#123;</div><div class="line"></div><div class="line"><span class="number">3</span>． <span class="keyword">static</span> <span class="keyword">int</span> x=<span class="number">10</span>；</div><div class="line"></div><div class="line"><span class="number">4</span>． <span class="keyword">static</span> &#123; x+=<span class="number">5</span>；&#125;</div><div class="line"></div><div class="line"><span class="number">5</span>． <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String args[ ]）</div><div class="line"></div><div class="line"><span class="number">6</span>． &#123;</div><div class="line"></div><div class="line"><span class="number">7</span>． System.out.println(“x=” + x);</div><div class="line"></div><div class="line"><span class="number">8</span>． &#125;</div><div class="line"></div><div class="line"><span class="number">9</span>． <span class="keyword">static</span> &#123; x/=<span class="number">3</span>;&#125;</div><div class="line"></div><div class="line"><span class="number">10</span>. &#125;</div></pre></td></tr></table></figure>
<p>A、 4行与9行不能通过编译，因为缺少方法名和返回类型</p>
<p>B、 9行不能通过编译，因为只能有一个静态初始化器</p>
<p>C、 编译通过，执行结果为：x=5</p>
<p>D、编译通过，执行结果为：x=3</p>
<p>解答：C</p>
<p>自由块是类加载的时候就会被执行到的，自由块的执行顺序是按照在类中出现的先后顺序执行。</p>
<p>12.关于以下程序代码的说明正确的是（ ）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>．<span class="class"><span class="keyword">class</span> <span class="title">HasStatic</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">2</span>． <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x=<span class="number">100</span>；</div><div class="line"></div><div class="line"><span class="number">3</span>． <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">4</span>． HasStatic hs1=<span class="keyword">new</span> HasStatic( );</div><div class="line"></div><div class="line"><span class="number">5</span>． hs1.x++;</div><div class="line"></div><div class="line"><span class="number">6</span>． HasStatic hs2=<span class="keyword">new</span> HasStatic( );</div><div class="line"></div><div class="line"><span class="number">7</span>． hs2.x++;</div><div class="line"></div><div class="line"><span class="number">8</span>． hs1=<span class="keyword">new</span> HasStatic( );</div><div class="line"></div><div class="line"><span class="number">9</span>． hs1.x++;</div><div class="line"></div><div class="line"><span class="number">10</span>． HasStatic.x–;</div><div class="line"></div><div class="line"><span class="number">11</span>． System.out.println(“x=”+x);</div><div class="line"></div><div class="line"><span class="number">12</span>． &#125;</div><div class="line"></div><div class="line"><span class="number">13</span>．&#125;</div></pre></td></tr></table></figure>
<p>A、5行不能通过编译，因为引用了私有静态变量</p>
<p>B、10行不能通过编译，因为x是私有静态变量</p>
<p>C、程序通过编译，输出结果为：x=103</p>
<p>D、程序通过编译，输出结果为：x=102</p>
<p>解答：D</p>
<p>静态变量是所有对象所共享的，所以上述代码中的几个对象操作是同一静态变量x， 静态变量可以通过类名调用。</p>
<p>13.下列说法正确的有（）</p>
<p>A． class 中的constructor不可省略</p>
<p>B． constructor 必须与 class同名，但方法不能与class同名</p>
<p>C． constructor 在一个对象被 new 时执行</p>
<p>D．一个 class 只能定义一个constructor</p>
<p>解答：C</p>
<p>构造方法的作用是在实例化对象的时候给数据成员进行初始化</p>
<p>A．类中如果没有显示的给出构造方法，系统会提供一个无参构造方法</p>
<p>B．构造方法与类同名，类中可以有和类名相同的方法</p>
<p>D．构造方法可以重载</p>
<p>14.下列哪种说法是正确的（）</p>
<p>A．实例方法可直接调用超类的实例方法</p>
<p>B．实例方法可直接调用超类的类方法</p>
<p>C．实例方法可直接调用其他类的实例方法</p>
<p>D．实例方法可直接调用本类的类方法</p>
<p>解答：D</p>
<p>A. 实例方法不可直接调用超类的私有实例方法</p>
<p>B. 实例方法不可直接调用超类的私有的类方法</p>
<p>C．要看访问权限</p>
<p>15.下列哪一种叙述是正确的（ ）</p>
<p>A． abstract修饰符可修饰字段、方法和类</p>
<p>B． 抽象方法的body部分必须用一对大括号{ }包住</p>
<p>C． 声明抽象方法，大括号可有可无</p>
<p>D． 声明抽象方法不可写出大括号</p>
<p>解答：D</p>
<p>abstract可以修饰方法和类，不能修饰属性。抽象方法没有方法体，即没有大括号{}</p>
<p>16.下面代码的执行结果是？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortSet</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">Set&lt;Short&gt; s=<span class="keyword">new</span> HashSet&lt;Short&gt;();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Short i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">s.add(i);</div><div class="line"></div><div class="line">s.remove(i-<span class="number">1</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(s.size());</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A. 1</p>
<p>B. 100</p>
<p>C. Throws Exception</p>
<p>D. None of the Above</p>
<p>解答：B</p>
<p>i 是 Short 类型 i-1 是int类型,其包装类为 Integer ，所以 s.remove(i-1); 不能移除Set集合中Short类型对象。</p>
<p>17.链表具有的特点是：(选择3项)</p>
<p>A、不必事先估计存储空间</p>
<p>B、可随机访问任一元素</p>
<p>C、插入删除不需要移动元素</p>
<p>D、所需空间与线性表长度成正比</p>
<p>解答：ACD</p>
<p>A.采用动态存储分配，不会造成内存浪费和溢出。</p>
<p>B. 不能随机访问，查找时要从头指针开始遍历</p>
<p>C. 插入、删除时，只要找到对应前驱结点，修改指针即可，无需移动元素</p>
<p>D. 需要用额外空间存储线性表的关系，存储密度小</p>
<p>18.Java语言中，String类的IndexOf()方法返回的类型是？</p>
<p>A、Int16 B、Int32 C、int D、long</p>
<p>解答：C</p>
<p>indexOf方法的声明为：public int indexOf(int ch)</p>
<p>在此对象表示的字符序列中第一次出现该字符的索引；如果未出现该字符，则返回 -1。</p>
<p>19.以下关于面向对象概念的描述中，不正确的一项是（）。(选择1项)</p>
<p>A.在现实生活中，对象是指客观世界的实体</p>
<p>B.程序中的对象就是现实生活中的对象</p>
<p>C.在程序中，对象是通过一种抽象数据类型来描述的，这种抽象数据类型称为类（class）</p>
<p>D.在程序中，对象是一组变量和相关方法的集合</p>
<p>解答：B</p>
<p>20..执行下列代码后,哪个结论是正确的 String[] s=new String[10];</p>
<p>A． s[9] 为 null;</p>
<p>B． s[10] 为 “”;</p>
<p>C． s[0] 为 未定义</p>
<p>D． s.length 为10</p>
<p>解答：AD</p>
<p>s是引用类型，s中的每一个成员都是引用类型，即String类型，String类型默认的值为null</p>
<p>s数组的长度为10。</p>
<p>21.属性的可见性有。(选择3项)</p>
<p>A.公有的</p>
<p>B.私有的</p>
<p>C.私有保护的</p>
<p>D.保护的</p>
<p>解答：ABD</p>
<p>属性的可见性有四种：公有的（public） 保护的（protected） 默认的 私有的（private）</p>
<p>22..在字符串前面加上<strong>_</strong>符号，则字符串中的转义字符将不被处理。(选择1项)</p>
<p>A @</p>
<p>B \</p>
<p>C #</p>
<p>D %</p>
<p>解答：B</p>
<p>23.下列代码哪行会出错: (选择1项)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123; </div><div class="line"><span class="number">2</span>) <span class="keyword">int</span> I, j, k; </div><div class="line"><span class="number">3</span>) I = <span class="number">100</span>; </div><div class="line"><span class="number">4</span>) <span class="keyword">while</span> ( I &gt; <span class="number">0</span> ) &#123; </div><div class="line"><span class="number">5</span>) j = I * <span class="number">2</span>; </div><div class="line"><span class="number">6</span>) System.out.println (” The value of j is ” + j ); </div><div class="line"><span class="number">7</span>) k = k + <span class="number">1</span>; </div><div class="line"><span class="number">8</span>) I–; </div><div class="line"><span class="number">9</span>) &#125; </div><div class="line"><span class="number">10</span>) &#125;</div></pre></td></tr></table></figure>
<p>A. 4</p>
<p>B. 6</p>
<p>C. 7</p>
<p>D. 8</p>
<p>解答：C</p>
<p>k没有初始化就使用了</p>
<p>24.对记录序列{314，298，508，123，486，145}按从小到大的顺序进行插入排序，经过两趟排序后的结果为：(选择1项)</p>
<p>A {314，298，508，123，145，486}</p>
<p>B {298，314，508，123，486，145}</p>
<p>C {298，123，314，508，486，145}</p>
<p>D {123、298，314，508，486，145}</p>
<p>解答：B</p>
<p>插入排序算法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectionSort</span><span class="params">(<span class="keyword">int</span>[] number)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// 第一个元素作为一部分，对后面的部分进行循环</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; number.length; j++) &#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> tmp = number[j];</div><div class="line"></div><div class="line"><span class="keyword">int</span> i = j – <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (tmp &lt; number[i]) &#123;</div><div class="line"></div><div class="line">number[i + <span class="number">1</span>] = number[i];</div><div class="line"></div><div class="line">i–;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (i == -<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">number[i + <span class="number">1</span>] = tmp;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>25.栈是一种。(选择1项)</p>
<p>A 存取受限的线性结构</p>
<p>B 存取不受限的线性结构</p>
<p>C 存取受限的非线性结构</p>
<p>D 存取不受限的非线性结构</p>
<p>解答：A</p>
<p>栈（stack）在计算机科学中是限定仅在表尾进行插入或删除操作的线性表。</p>
<p>26.下列哪些语句关于内存回收的说明是正确的。(选择1项)</p>
<p>A. 程序员必须创建一个线程来释放内存</p>
<p>B. 内存回收程序负责释放无用内存</p>
<p>C. 内存回收程序允许程序员直接释放内存</p>
<p>D. 内存回收程序可以在指定的时间释放内存对象</p>
<p>解答：B</p>
<p>垃圾收集器在一个Java程序中的执行是自动的，不能强制执行，即使程序员能明确地判断出有一块内存已经无用了，是应该回收的，程序员也不能强制垃圾收集器回收该内存块。程序员唯一能做的就是通过调用System. gc 方法来”建议”执行垃圾收集器，但其是否可以执行，什么时候执行却都是不可知的。</p>
<p>27.Which method must be defined by a class implementing the java.lang.Runnable interface?</p>
<p>A. void run()</p>
<p>B. public void run()</p>
<p>C. public void start()</p>
<p>D. void run(int priority)</p>
<p>E. public void run(int priority)</p>
<p>F. public void start(int priority)</p>
<p>解答：B</p>
<p>实现Runnable接口，接口中有一个抽象方法run，实现类中实现该方法。</p>
<p>28 Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">Object obj = <span class="keyword">new</span> Object() &#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">42</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">System.out.println(obj.hashCode());</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What is the result?</p>
<p>A. 42</p>
<p>B. An exception is thrown at runtime.</p>
<p>C. Compilation fails because of an error on line 12.</p>
<p>D. Compilation fails because of an error on line 16.</p>
<p>E. Compilation fails because of an error on line 17.</p>
<p>解答：A</p>
<p>匿名内部类覆盖hashCode方法。</p>
<p>29.哪两个是Java编程语言中的保留字 ? (Choose two)</p>
<p>A. run</p>
<p>B. import</p>
<p>C. default</p>
<p>D. implements</p>
<p>解答：BD</p>
<p>import导入包的保留字，implements实现接口的保留字。</p>
<ol start="30">
<li>Which two statements are true regarding the return values of property written hashCodeand equals methods from two instances of the same class? (Choose two)</li>
</ol>
<p>A. If the hashCode values are different, the objects might be equal.</p>
<p>B. If the hashCode values are the same, the object must be equal.</p>
<p>C. If the hashCode values are the same, the objects might be equal.</p>
<p>D. If the hashCode values are different, the objects must be unequal.</p>
<p>解答：CD</p>
<p>先通过 hashcode 来判断某个对象是否存放某个桶里，但这个桶里可能有很多对象，那么我们就需要再通过 equals 来在这个桶里找到我们要的对象。</p>
<ol start="31">
<li>字符的数字范围是什么?</li>
</ol>
<p>A. 0 … 32767</p>
<p>B. 0 … 65535</p>
<p>C. –256 … 255</p>
<p>D. –32768 … 32767</p>
<p>E. Range is platform dependent.</p>
<p>解答：B</p>
<p>在Java中，char是一个无符号16位类型，取值范围为0到65535。</p>
<ol start="32">
<li>Given:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span>[] f = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(“f[<span class="number">0</span>] = “ + f[<span class="number">0</span>]);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What is the result?</p>
<p>A. f[0] = 0</p>
<p>B. f[0] = 0.0</p>
<p>C. Compilation fails.</p>
<p>D. An exception is thrown at runtime.</p>
<p>解答：B</p>
<ol start="33">
<li>Given:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">String str = NULL;</div><div class="line"></div><div class="line">System.out.println(str);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What is the result?</p>
<p>A. NULL</p>
<p>B. 编译失败</p>
<p>C. 运行代码没有输出</p>
<p>D. 运行时抛出异常</p>
<p>解答：B</p>
<p>null应该小写</p>
<p>34、Exhibit:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">2</span>. <span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line"></div><div class="line"><span class="number">3</span>. <span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line"></div><div class="line"><span class="number">4</span>. <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">5</span>. X that = <span class="keyword">new</span> X();</div><div class="line"></div><div class="line"><span class="number">6</span>. (<span class="keyword">new</span> Thread(that)).start();</div><div class="line"></div><div class="line"><span class="number">7</span>. (<span class="keyword">new</span> Thread(that)).start();</div><div class="line"></div><div class="line"><span class="number">8</span>. &#125;</div><div class="line"></div><div class="line"><span class="number">9</span>. <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">( )</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">10</span>. <span class="keyword">for</span> (;;) &#123;</div><div class="line"></div><div class="line"><span class="number">11</span>. x++;</div><div class="line"></div><div class="line"><span class="number">12</span>. y++;</div><div class="line"></div><div class="line"><span class="number">13</span>. System.out.println(“x = “ + x + “, y = “ + y);</div><div class="line"></div><div class="line"><span class="number">14</span>. &#125;</div><div class="line"></div><div class="line"><span class="number">15</span>. &#125;</div><div class="line"></div><div class="line"><span class="number">16</span>.&#125;</div></pre></td></tr></table></figure>
<p>What is the result?</p>
<p>A. 第11行的错误导致编译失败</p>
<p>B. 第7行和第8行的错误导致编译失败。</p>
<p>C. 该程序打印 x 和 y 的值对，这些值在同一行上可能不总是相同的 (例如,  “x=2, y=1”)</p>
<p>D. 该程序在同一行上打印x和y的值总是一对相同的值(例如, “x=1, y=1”. 此外,每个值出现两次(例如, “x=1, y=1” 其次是“x=1, y=1”)</p>
<p>E. 该程序在同一行上打印x和y的值总是一对相同的值 (例如,  “x=1, y=1”.此外,每个值出现两次 (例如, “x=1, y=1” 其次 “x=2, y=2”)</p>
<p>解答：E</p>
<p>多线程共享相同的数据，使用 synchronized 实现数据同步。</p>
<p>35、哪两个不能直接导致线程停止执行? (Choose Two)</p>
<p>A. 使用 synchronized block.</p>
<p>B. 在对象上调用 wait 方法 </p>
<p>C. 调用对象的 notify 方法</p>
<p>D. 在InputStream对象上调用read方法。</p>
<p>E. 调用Thread对象上的SetPriority方法。</p>
<p>解答：AD</p>
<p>stop方法.这个方法将终止所有未结束的方法，包括run方法。当一个线程停止时候，他会立即释</p>
<p>放 所有他锁住对象上的锁。这会导致对象处于不一致的状态。 当线程想终止另一个线程的时</p>
<p>候，它无法知道何时调用stop是安全的，何时会导致对象被破坏。所以这个方法被弃用了。你应</p>
<p>该中断一个线程而不是停止他。被中断的线程会在安全的时候停止。</p>
<p>36、 关于创建默认构造函数描述正确的是? (Choose Two)</p>
<p>A.  默认构造函数初始化方法变量</p>
<p>B.  默认构造函数调用超类的无参数构造函数</p>
<p>C.  默认构造函数初始化在类中声明的实例变量</p>
<p>D.  如果一个类缺少一个无参数构造函数，但有其他构造函数，编译器会创建一个默认构造函数。</p>
<p>E.  编译器只有在没有其他构造函数是才会创建构造函数</p>
<p>解答：CE</p>
<p>构造方法的作用是实例化对象的时候给数据成员初始化，如果类中没有显示的提供构造方法，系统会提供默认的无参构造方法，如果有了其它构造方法，默认的构造方法不再提供。</p>
<p>37、 Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">double</span> d1 = <span class="number">1.0</span>;</div><div class="line"></div><div class="line"><span class="comment">//insert code here</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您需要在第2行插入内部类声明。 哪两个内部类声明是有效的？</p>
<p>A. static class InnerOne { public double methoda() {return d1;} }</p>
<p>B. static class InnerOne { static double methoda() {return d1;} }</p>
<p>C. private class InnerOne { public double methoda() {return d1;} }</p>
<p>D. protected class InnerOne { static double methoda() {return d1;} }</p>
<p>E. public abstract class InnerOne { public abstract double methoda(); }</p>
<p>解答：CE</p>
<p>AB.内部类可以声明为static的，但此时就不能再使用外层封装类的非static的成员变量；</p>
<p>D.非static的内部类中的成员不能声明为static的，只有在顶层类或static的内部类中</p>
<p>才可声明static成员</p>
<p>38、哪两个声明可以防止重写方法？ (Choose Two)</p>
<p>A. final void methoda() {}</p>
<p>B. void final methoda() {}</p>
<p>C. static void methoda() {}</p>
<p>D. static final void methoda() {}</p>
<p>E. final abstract void methoda() {}</p>
<p>解答：AD</p>
<p>final修饰方法，在子类中不能被重写。</p>
<p>39、Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">3</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Object o = (Object) <span class="keyword">new</span> Foo();</div><div class="line"></div><div class="line">Foo foo = (Foo)o;</div><div class="line"></div><div class="line">System.out.println(foo.i);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What is the result?</p>
<p>A. 编译将失败。</p>
<p>B. 编译将成功，程序将打印“3”</p>
<p>C. 编译会成功，但程序会在第6行抛出ClassCastException。</p>
<p>D. 编译会成功，但程序会在第7行抛出ClassCastException。</p>
<p>解答：B</p>
<p>局部内部类的使用</p>
<p>40、 Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</div><div class="line"></div><div class="line">String foo = “blue”;</div><div class="line"></div><div class="line">String bar = foo;</div><div class="line"></div><div class="line">foo = “green”;</div><div class="line"></div><div class="line">System.out.println(bar);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What is the result?</p>
<p>A. 抛出异常。</p>
<p>B. 代码不会编译。</p>
<p>C. 该程序打印“null”</p>
<p>D. 该程序打印“blue”</p>
<p>E. 该程序打印“green”</p>
<p>解答：D</p>
<p>采用String foo = “blue”定义方式定义的字符串放在字符串池中，通过String bar = foo;</p>
<p>他们指向了同一地址空间，就是同一个池子，当执行foo = “green”; foo指向新的地址空间。</p>
<p>41、Which code determines the int value foo closest to a double value bar?</p>
<p>A. int foo = (int) Math.max(bar);</p>
<p>B. int foo = (int) Math.min(bar);</p>
<p>C. int foo = (int) Math.abs(bar);</p>
<p>D. int foo = (int) Math.ceil(bar);</p>
<p>E. int foo = (int) Math.floor(bar);</p>
<p>F. int foo = (int) Math.round(bar);</p>
<p>解答：DEF</p>
<p>A B两个选项方法是用错误，都是两个参数。</p>
<p>abs方法是取bar的绝对值，</p>
<p>ceil方法返回最小的（最接近负无穷大）double 值，该值大于等于参数，并等于某个整数。</p>
<p>floor方法返回最大的（最接近正无穷大）double 值，该值小于等于参数，并等于某个整数。</p>
<p>round方法 返回最接近参数的 long。</p>
<p>42、 Exhibit:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.<span class="keyword">package</span> foo;</div><div class="line"></div><div class="line"><span class="number">2</span>.<span class="keyword">import</span> java.util.Vector;</div><div class="line"></div><div class="line"><span class="number">3</span>.<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVector</span> <span class="keyword">extends</span> <span class="title">Vector</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">4</span>.<span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="number">5</span>.<span class="function"><span class="keyword">public</span> <span class="title">MyVector</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">6</span>.i = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="number">7</span>. &#125;</div><div class="line"></div><div class="line"><span class="number">8</span>.&#125;</div><div class="line"></div><div class="line"><span class="number">9</span>.<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNewVector</span> <span class="keyword">extends</span> <span class="title">MyVector</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">10</span>.<span class="function"><span class="keyword">public</span> <span class="title">MyNewVector</span> <span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">11</span>. i = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="number">12</span>.&#125;</div><div class="line"></div><div class="line"><span class="number">13</span>.<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args [])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">14</span>.MyVector v = <span class="keyword">new</span> MyNewVector();</div><div class="line"></div><div class="line"><span class="number">15</span>. &#125;</div><div class="line"></div><div class="line"><span class="number">16</span>.&#125;</div></pre></td></tr></table></figure>
<p>The file MyNewVector.java is shown in the exhibit. What is the result?</p>
<p>A. 汇编将会成功。</p>
<p>B. 编译到第3行的时候失败。</p>
<p>C. 编译到第6行的时候失败。</p>
<p>D. 编译到第9行的时候失败。</p>
<p>E. 编译到第14行的时候失败。</p>
<p>解答：B</p>
<p>类MyVector不能是私有的</p>
<p>43、Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span> </span>&#123;</div><div class="line"></div><div class="line">String foo = args[<span class="number">1</span>];</div><div class="line"></div><div class="line">String bar = args[<span class="number">2</span>];</div><div class="line"></div><div class="line">String baz = args[<span class="number">3</span>];</div><div class="line"></div><div class="line">System.out.println(“baz = ” + baz);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">And the output:</div><div class="line"></div><div class="line">Baz = <span class="number">2</span></div></pre></td></tr></table></figure>
<p>Which command line invocation will produce the output?</p>
<p>A. java Test 2222</p>
<p>B. java Test 1 2 3 4</p>
<p>C. java Test 4 2 4 2</p>
<p>D. java Test 4 3 2 1</p>
<p>解答：C</p>
<p>数组下标从0开始</p>
<p>44、 Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Foo</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">2</span>.<span class="keyword">int</span> k = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="number">3</span>. &#125;</div></pre></td></tr></table></figure>
<p>哪三个相当于第2行? (Choose Three)</p>
<p>A. final int k = 4;</p>
<p>B. Public int k = 4;</p>
<p>C. static int k = 4;</p>
<p>D. Private int k = 4;</p>
<p>E. Abstract int k = 4;</p>
<p>F. Volatile int k = 4;</p>
<p>G. Transient int k = 4;</p>
<p>H. protected int k = 4;</p>
<p>解答：BDE</p>
<p>static：修饰的静态变量</p>
<p>final 修饰的是常量</p>
<p>abstract不能修饰变量</p>
<p>Volatile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。</p>
<p>而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。这样在任何时刻，</p>
<p>两个不同的线程总是看到某个成员变量的同一个值。</p>
<p>Transient：对不需序列化的类的域使用transient关键字,以减少序列化的数据量。</p>
<p>int k=4相当于public static final int k=4; 在接口中可以不写static final</p>
<p>45、 Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">foo</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">static</span> String s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println (“s=” + s);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What is the result?</p>
<p>A. 代码编译并打印“s =”。</p>
<p>B. 代码编译并打印“s = null”。</p>
<p>C. 该代码不会编译，因为字符串s未初始化。</p>
<p>D.代码不编译，因为字符串不能被引用。</p>
<p>E. 代码编译，但调用toString时会引发NullPointerException。</p>
<p>解答：B</p>
<p>String为禁用数据类型，引用类型数据成员的默认值为null</p>
<p>46、哪两个创建一个数组的实例? (Choose Two)</p>
<p>A. int[] ia = new int [15];</p>
<p>B. float fa = new float [20];</p>
<p>C. char[] ca = “Some String”;</p>
<p>D. Object oa = new float[20];</p>
<p>E. Int ia [][] = (4, 5, 6) (1, 2, 3)</p>
<p>解答：AD</p>
<p>任何类的父类都是 Object，数组也有数据引用类型，Object oa = new float[20];这种写法相当于父类的用指向之类的实例。</p>
<p>47、Given:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTest</span> <span class="params">()</span> <span class="keyword">throws</span> TestException </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> <span class="comment">/* Point X*/</span> </span>&#123;</div><div class="line"></div><div class="line">runTest ();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第4行的X点上，可以添加哪些代码来编译代码？</p>
<p>A. throws Exception</p>
<p>B. Catch (Exception e).</p>
<p>C. Throws RuntimeException.</p>
<p>D. Catch (TestException e).</p>
<p>E. No code is necessary.</p>
<p>解答：A</p>
<p>方法上使用throws抛出异常，Exception是异常类的超类。</p>
<p>48、Exhibit:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchTest</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String []args)</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println (“value =” +switchIt(<span class="number">4</span>));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">switchIt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (x) &#123;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="number">1</span>: j++;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="number">2</span>: j++;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="number">3</span>: j++;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="number">4</span>: j++;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="number">5</span>: j++;</div><div class="line"></div><div class="line"><span class="keyword">default</span>:j++;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> j + x;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第3行的输出是什么?</p>
<p>A. Value =3</p>
<p>B. Value =4</p>
<p>C. Value =5</p>
<p>D. Value =6</p>
<p>E. Value =7</p>
<p>F. Value =8</p>
<p>解答：F</p>
<p>由于case块没有break语句，那么从case 4：向下的代码都会执行。</p>
<p>49、使用 throw 语句可以抛出哪四种类型的对象? (Choose Four)</p>
<p>A. Error</p>
<p>B. Event</p>
<p>C. Object</p>
<p>D. Exception</p>
<p>E. Throwable</p>
<p>F. RuntimeException</p>
<p>解答：ADEF</p>
<p>能够抛出的对象类型要是 Throwable  或是 Throwable 的子类</p>
<p>50．在下面程序的第6行补充上下列哪个方法,会导致在编译过程中发生错误?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>) <span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">2</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">3</span>) <span class="keyword">return</span> <span class="number">3.0f</span>;</div><div class="line"></div><div class="line"><span class="number">4</span>) &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">5</span>) pubhc <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</div><div class="line"></div><div class="line"><span class="number">6</span>)</div><div class="line"></div><div class="line"><span class="number">7</span>) &#125;</div></pre></td></tr></table></figure>
<p>A. public float getNum(){retun 4.0f;}</p>
<p>B. public void getNum(){}</p>
<p>C. public void getNum(double d){}</p>
<p>D. public double getNum(float d){ retun 4.0f ;} </p>
<p>解答：B</p>
<p>方法重写的问题。子类中有和父类的方法名相同，但是参数不同，不会出编译错误，认为是子类</p>
<p>的特有的方法，但是如果子类中方法和父类的方法名，参数，访问权限，异常都相同，只有返回值</p>
<p>类型不同会编译不通过。</p>
<p>51.下面关于import, class和package的声明顺序哪个正确？( )</p>
<p>A. package, import, class</p>
<p>B. class, import, package</p>
<p>C. import, package, class</p>
<p>D. package, class, import</p>
<p>解答：A</p>
<p>52.下面哪个是正确的？( )</p>
<p>A. String temp [] = new String {“a” “b” “c”};</p>
<p>B. String temp [] = {“a” “b” “c”}</p>
<p>C. String temp = {“a”, “b”, “c”}</p>
<p>D. String temp [] = {“a”, “b”, “c”}</p>
<p>解答：D</p>
<p>53.关于java.lang.String类，以下描述正确的一项是（ ）</p>
<p>A. String类是final类故不可以继承；</p>
<p>B. String类是final类故可以继承；</p>
<p>C. String类不是final类故不可以继承；</p>
<p>D. String类不是final类故可以继承；</p>
<p> 解答：A</p>
<p>String类是final的，在java中final修饰类的不能被继承</p>
<p>54.关于实例方法和类方法，以下描述正确的是：( )</p>
<p>A. 实例方法只能访问实例变量</p>
<p>B. 类方法既可以访问类变量，也可以访问实例变量</p>
<p>C. 类方法只能通过类名来调用</p>
<p>D. 实例方法只能通过对象来调用</p>
<p>解答：D</p>
<p>A 实例方法可以访问类变量</p>
<p>B类方法只能访问类变量</p>
<p>C类方法可以通过对象调用</p>
<p>55.接口是Java面向对象的实现机制之一，以下说法正确的是：( )</p>
<p>A. Java支持多重继承，一个类可以实现多个接口；</p>
<p>B. Java只支持单重继承，一个类可以实现多个接口；</p>
<p>C. Java只支持单重继承，一个类只可以实现一个接口；</p>
<p>D. Java支持多重继承，但一个类只可以实现一个接口。</p>
<p>解答：B</p>
<p>Java支持单重继承，一个类只能继承自另外的一个类，但是一个类可以实现多个接口。</p>
<p>56.下列关于 interface 的说法正确的是：( )</p>
<p>A. interface中可以有private方法</p>
<p>B. interface中可以有final方法</p>
<p>C. interface中可以有function实现</p>
<p>D. interface可以继承其他interface</p>
<p>解答：D</p>
<p>A.   接口中不可以有private的方法</p>
<p>B．接口中不可以有final的方法 接口中的方法默认是 public abstract的</p>
<p>C．接口中的方法不可以有实现</p>
<p>57.已知A类被打包在packageA , B类被打包在packageB ，且B类被声明为public ，且有一个成员变量x被声明为, protected控制方式 。C类也位于packageA包，且继承了B类 。则以下说话正确的是（ ）</p>
<p>A. A类的实例不能访问到B类的实例</p>
<p>B. A类的实例能够访问到B类一个实例的x成员</p>
<p>C. C类的实例可以访问到B类一个实例的x成员</p>
<p>D. C类的实例不能访问到B类的实例</p>
<p>解答：C</p>
<p>不同包子类的关系， 可以访问到父类B的protected成员</p>
<p>58.以下程序正确的输出是（ ）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FatherClass</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(“FatherClass Create”);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> test.FatherClass;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">FatherClass</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChildClass</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(“ChildClass Create”);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">FatherClass fc = <span class="keyword">new</span> FatherClass();</div><div class="line"></div><div class="line">ChildClass cc = <span class="keyword">new</span> ChildClass();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A.</p>
<p>FatherClass Create</p>
<p>FatherClass Create</p>
<p>ChildClass Create</p>
<p>B.</p>
<p>FatherClass Create</p>
<p>ChildClass Create</p>
<p>FatherClass Create</p>
<p>C.</p>
<p>ChildClass Create</p>
<p>ChildClass Create</p>
<p>FatherClass Create</p>
<p>D.</p>
<p>ChildClass Create</p>
<p>FatherClass Create</p>
<p>FatherClass Create</p>
<p>解答：A</p>
<p>在子类构造方法的开始默认情况下有一句super();来调用父类的构造方法</p>
<p>59.给定如下代码，下面哪个可以作为该类的构造函数 ( )</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A. public void Test() {?}</p>
<p>B. public Test() {?}</p>
<p>C. public static Test() {?}</p>
<p>D. public static void Test() {?}</p>
<p>解答：B</p>
<p>构造方法：与类同名没有放回类型</p>
<p>60.题目:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. <span class="function"><span class="keyword">public</span> class <span class="title">test</span> <span class="params">(</span></span></div><div class="line"></div><div class="line"><span class="number">2.</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main (String args[]) &#123;</div><div class="line"></div><div class="line"><span class="number">3</span>. <span class="keyword">int</span> i = <span class="number">0xFFFFFFF1</span>;</div><div class="line"></div><div class="line"><span class="number">4</span>. <span class="keyword">int</span> j = -i;</div><div class="line"></div><div class="line"><span class="number">5</span>.</div><div class="line"></div><div class="line"><span class="number">6</span>. &#125;</div><div class="line"></div><div class="line"><span class="number">7</span>. )</div></pre></td></tr></table></figure>
<p>程序运行到第5行时,j的值为 多少?( )</p>
<p>A. –15</p>
<p>B. 0</p>
<p>C. 1</p>
<p>D. 14</p>
<p>E. 在第三行的错误导致编译失败</p>
<p>解答：D</p>
<p>int i = 0xFFFFFFF1;相当于 int i=-15 然后对i进行取反即取绝对值再减一</p>
]]></content>
      
        <categories>
            
            <category> 基础面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java线程面试题]]></title>
      <url>/2018/06/03/Java%E7%BA%BF%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%20Top%2050/</url>
      <content type="html"><![CDATA[<h1 id="Java线程面试题"><a href="#Java线程面试题" class="headerlink" title="Java线程面试题"></a>Java线程面试题</h1><p><em>摘要：</em> 不管你是新程序员还是老手，你一定在面试中遇到过有关线程的问题。Java语言一个重要的特点就是内置了对并发的支持，让Java大受企业和程序员的欢迎。大多数待遇丰厚的Java开发职位都要求开发者精通多线程技术并且有丰富的Java程序开发、调试、优化经验，所以线程相关的问题在面试中经常会被提到。</p>
<p>不管你是新程序员还是老手，你一定在面试中遇到过有关线程的问题。Java语言一个重要的特点就是内置了对并发的支持，让Java大受企业和程序员的欢迎。大多数待遇丰厚的Java开发职位都要求开发者精通多线程技术并且有丰富的Java程序开发、调试、优化经验，所以线程相关的问题在面试中经常会被提到。</p>
<p>　　在典型的Java面试中， 面试官会从线程的基本概念问起, 如：为什么你需要使用线程， 如何创建线程，用什么方式创建线程比较好（比如：继承thread类还是调用Runnable接口），然后逐渐问到并发问题像在Java并发编程的过程中遇到了什么挑战，Java内存模型，JDK1.5引入了哪些更高阶的并发工具，并发编程常用的设计模式，经典多线程问题如生产者消费者，哲学家就餐，读写器或者简单的有界缓冲区问题。仅仅知道线程的基本概念是远远不够的， 你必须知道如何处理死锁，竞态条件，内存冲突和线程安全等并发问题。掌握了这些技巧，你就可以轻松应对多线程和并发面试了。</p>
<p>　　许多Java程序员在面试前才会去看面试题，这很正常。因为收集面试题和练习很花时间，所以我从许多面试者那里收集了Java多线程和并发相关的50个热门问题。我只收集了比较新的面试题且没有提供全部答案。想必聪明的你对这些问题早就心中有数了， 如果遇到不懂的问题，你可以用Google找到答案。若你实在找不到答案，可以在文章的评论中向我求助。你也可以在这找到一些答案Java线程问答Top 12。</p>
<h2 id="50道Java线程面试题"><a href="#50道Java线程面试题" class="headerlink" title="50道Java线程面试题"></a>50道Java线程面试题</h2><p>　　下面是Java线程相关的热门面试题，你可以用它来好好准备面试。</p>
<h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><p>　　线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。程序员可以通过它进行多处理器编程，你可以使用多线程对运算密集型任务提速。比如，如果一个线程完成一个任务要100毫秒，那么用十个线程完成改任务只需10毫秒。Java在语言层面对多线程提供了卓越的支持，它也是一个很好的卖点。欲了解更多详细信息请点击这里。</p>
<h3 id="线程和进程有什么区别？"><a href="#线程和进程有什么区别？" class="headerlink" title="线程和进程有什么区别？"></a>线程和进程有什么区别？</h3><p>　　线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。更多详细信息请点击这里。</p>
<h3 id="如何在Java中实现线程？"><a href="#如何在Java中实现线程？" class="headerlink" title="如何在Java中实现线程？"></a>如何在Java中实现线程？</h3><p>　　在语言层面有两种方式。java.lang.Thread 类的实例就是一个线程但是它需要调用java.lang.Runnable接口来执行，由于线程类本身就是调用的Runnable接口所以你可以继承java.lang.Thread 类或者直接调用Runnable接口来重写run()方法实现线程。更多详细信息请点击这里.</p>
<h3 id="用Runnable还是Thread？"><a href="#用Runnable还是Thread？" class="headerlink" title="用Runnable还是Thread？"></a>用Runnable还是Thread？</h3><p>　　这个问题是上题的后续，大家都知道我们可以通过继承Thread类或者调用Runnable接口来实现线程，问题是，那个方法更好呢？什么情况下使用它？这个问题很容易回答，如果你知道Java不支持类的多重继承，但允许你调用多个接口。所以如果你要继承其他类，当然是调用Runnable接口好了。更多详细信息请点击这里。</p>
<h3 id="Thread-类中的start-和-run-方法有什么区别？"><a href="#Thread-类中的start-和-run-方法有什么区别？" class="headerlink" title="Thread 类中的start() 和 run() 方法有什么区别？"></a>Thread 类中的start() 和 run() 方法有什么区别？</h3><p>　　这个问题经常被问到，但还是能从此区分出面试者对Java线程模型的理解程度。start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。更多讨论请点击这里</p>
<h3 id="Java中Runnable和Callable有什么不同？"><a href="#Java中Runnable和Callable有什么不同？" class="headerlink" title="Java中Runnable和Callable有什么不同？"></a>Java中Runnable和Callable有什么不同？</h3><p>　　Runnable和Callable都代表那些要在不同的线程中执行的任务。Runnable从JDK1.0开始就有了，Callable是在JDK1.5增加的。它们的主要区别是Callable的 call() 方法可以返回值和抛出异常，而Runnable的run()方法没有这些功能。Callable可以返回装载有计算结果的Future对象。我的博客有更详细的说明。</p>
<h3 id="Java中CyclicBarrier-和-CountDownLatch有什么不同？"><a href="#Java中CyclicBarrier-和-CountDownLatch有什么不同？" class="headerlink" title="Java中CyclicBarrier 和 CountDownLatch有什么不同？"></a>Java中CyclicBarrier 和 CountDownLatch有什么不同？</h3><p>　　CyclicBarrier 和 CountDownLatch 都可以用来让一组线程等待其它线程。与 CyclicBarrier 不同的是，CountdownLatch 不能重新使用。点此查看更多信息和示例代码。</p>
<h3 id="Java内存模型是什么？"><a href="#Java内存模型是什么？" class="headerlink" title="Java内存模型是什么？"></a>Java内存模型是什么？</h3><p>　　Java内存模型规定和指引Java程序在不同的内存架构、CPU和操作系统间有确定性地行为。它在多线程的情况下尤其重要。Java内存模型对一个线程所做的变动能被其它线程可见提供了保证，它们之间是先行发生关系。这个关系定义了一些规则让程序员在并发编程时思路更清晰。比如，先行发生关系确保了：</p>
<p>线程内的代码能够按先后顺序执行，这被称为程序次序规则。<br>对于同一个锁，一个解锁操作一定要发生在时间上后发生的另一个锁定操作之前，也叫做管程锁定规则。<br>前一个对volatile的写操作在后一个volatile的读操作之前，也叫volatile变量规则。<br>一个线程内的任何操作必需在这个线程的start()调用之后，也叫作线程启动规则。<br>一个线程的所有操作都会在线程终止之前，线程终止规则。<br>一个对象的终结操作必需在这个对象构造完成之后，也叫对象终结规则。<br>可传递性<br>　　我强烈建议大家阅读《Java并发编程实践》第十六章来加深对Java内存模型的理解。</p>
<h3 id="Java中的volatile-变量是什么？"><a href="#Java中的volatile-变量是什么？" class="headerlink" title="Java中的volatile 变量是什么？"></a>Java中的volatile 变量是什么？</h3><p>　　volatile是一个特殊的修饰符，只有成员变量才能使用它。在Java并发程序缺少同步类的情况下，多线程对成员变量的操作对其它线程是透明的。volatile变量可以保证下一个读取操作会在前一个写操作之后发生，就是上一题的volatile变量规则。点击这里查看更多volatile的相关内容。</p>
<h3 id="什么是线程安全？Vector是一个线程安全类吗？-（详见这里"><a href="#什么是线程安全？Vector是一个线程安全类吗？-（详见这里" class="headerlink" title="什么是线程安全？Vector是一个线程安全类吗？ （详见这里)"></a>什么是线程安全？Vector是一个线程安全类吗？ （详见这里)</h3><p>　　如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分成两组，线程安全和非线程安全的。Vector 是用同步方法来实现线程安全的, 而和它相似的ArrayList不是线程安全的。</p>
<h3 id="Java中什么是竞态条件？-举个例子说明。"><a href="#Java中什么是竞态条件？-举个例子说明。" class="headerlink" title="Java中什么是竞态条件？ 举个例子说明。"></a>Java中什么是竞态条件？ 举个例子说明。</h3><p>　　竞态条件会导致程序在并发情况下出现一些bugs。多线程对一些资源的竞争的时候就会产生竞态条件，如果首先要执行的程序竞争失败排到后面执行了，那么整个程序就会出现一些不确定的bugs。这种bugs很难发现而且会重复出现，因为线程间的随机竞争。一个例子就是无序处理，详见答案。</p>
<h3 id="Java中如何停止一个线程？"><a href="#Java中如何停止一个线程？" class="headerlink" title="Java中如何停止一个线程？"></a>Java中如何停止一个线程？</h3><p>　　Java提供了很丰富的API但没有为停止线程提供API。JDK 1.0本来有一些像stop(), suspend() 和 resume()的控制方法但是由于潜在的死锁威胁因此在后续的JDK版本中他们被弃用了，之后Java API的设计者就没有提供一个兼容且线程安全的方法来停止一个线程。当run() 或者 call() 方法执行完的时候线程会自动结束,如果要手动结束一个线程，你可以用volatile 布尔变量来退出run()方法的循环或者是取消任务来中断线程。点击这里查看示例代码。</p>
<h3 id="一个线程运行时发生异常会怎样？"><a href="#一个线程运行时发生异常会怎样？" class="headerlink" title="一个线程运行时发生异常会怎样？"></a>一个线程运行时发生异常会怎样？</h3><p>　　这是我在一次面试中遇到的一个很刁钻的Java面试题, 简单的说，如果异常没有被捕获该线程将会停止执行。Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候JVM会使用Thread.getUncaughtExceptionHandler()来查询线程的UncaughtExceptionHandler并将线程和异常作为参数传递给handler的uncaughtException()方法进行处理。</p>
<h3 id="如何在两个线程间共享数据？"><a href="#如何在两个线程间共享数据？" class="headerlink" title="如何在两个线程间共享数据？"></a>如何在两个线程间共享数据？</h3><p>　　你可以通过共享对象来实现这个目的，或者是使用像阻塞队列这样并发的数据结构。这篇教程《Java线程间通信》(涉及到在两个线程间共享对象)用wait和notify方法实现了生产者消费者模型。</p>
<h3 id="Java中notify-和-notifyAll有什么区别？"><a href="#Java中notify-和-notifyAll有什么区别？" class="headerlink" title="Java中notify 和 notifyAll有什么区别？"></a>Java中notify 和 notifyAll有什么区别？</h3><p>　　这又是一个刁钻的问题，因为多线程可以等待单监控锁，Java API 的设计人员提供了一些方法当等待条件改变的时候通知它们，但是这些方法没有完全实现。notify()方法不能唤醒某个具体的线程，所以只有一个线程在等待的时候它才有用武之地。而notifyAll()唤醒所有线程并允许他们争夺锁确保了至少有一个线程能继续运行。我的博客有更详细的资料和示例代码。</p>
<h3 id="为什么wait-notify-和-notifyAll这些方法不在thread类里面？"><a href="#为什么wait-notify-和-notifyAll这些方法不在thread类里面？" class="headerlink" title="为什么wait, notify 和 notifyAll这些方法不在thread类里面？"></a>为什么wait, notify 和 notifyAll这些方法不在thread类里面？</h3><p>　　这是个设计相关的问题，它考察的是面试者对现有系统和一些普遍存在但看起来不合理的事物的看法。回答这些问题的时候，你要说明为什么把这些方法放在Object类里是有意义的，还有不把它放在Thread类里的原因。一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。如果wait()方法定义在Thread类中，线程正在等待的是哪个锁就不明显了。简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。你也可以查看这篇文章了解更多。</p>
<h3 id="什么是ThreadLocal变量？"><a href="#什么是ThreadLocal变量？" class="headerlink" title="什么是ThreadLocal变量？"></a>什么是ThreadLocal变量？</h3><p>　　ThreadLocal是Java里一种特殊的变量。每个线程都有一个ThreadLocal就是每个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。它是为创建代价高昂的对象获取线程安全的好方法，比如你可以用ThreadLocal让SimpleDateFormat变成线程安全的，因为那个类创建代价高昂且每次调用都需要创建不同的实例所以不值得在局部范围使用它，如果为每个线程提供一个自己独有的变量拷贝，将大大提高效率。首先，通过复用减少了代价高昂的对象的创建个数。其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。线程局部变量的另一个不错的例子是ThreadLocalRandom类，它在多线程环境中减少了创建代价高昂的Random对象的个数。查看答案了解更多。</p>
<h3 id="什么是FutureTask？"><a href="#什么是FutureTask？" class="headerlink" title="什么是FutureTask？"></a>什么是FutureTask？</h3><p>　　在Java并发程序中FutureTask表示一个可以取消的异步运算。它有启动和取消运算、查询运算是否完成和取回运算结果等方法。只有当运算完成的时候结果才能取回，如果运算尚未完成get方法将会阻塞。一个FutureTask对象可以对调用了Callable和Runnable的对象进行包装，由于FutureTask也是调用了Runnable接口所以它可以提交给Executor来执行。</p>
<h3 id="Java中interrupted-和-isInterruptedd方法的区别？"><a href="#Java中interrupted-和-isInterruptedd方法的区别？" class="headerlink" title="Java中interrupted 和 isInterruptedd方法的区别？"></a>Java中interrupted 和 isInterruptedd方法的区别？</h3><p>　　interrupted() 和 isInterrupted()的主要区别是前者会将中断状态清除而后者不会。Java多线程的中断机制是用内部标识来实现的，调用Thread.interrupt()来中断一个线程就会设置中断标识为true。当中断线程调用静态方法Thread.interrupted()来检查中断状态时，中断状态会被清零。而非静态方法isInterrupted()用来查询其它线程的中断状态且不会改变中断状态标识。简单的说就是任何抛出InterruptedException异常的方法都会将中断状态清零。无论如何，一个线程的中断状态有有可能被其它线程调用中断来改变。</p>
<h3 id="为什么wait和notify方法要在同步块中调用？"><a href="#为什么wait和notify方法要在同步块中调用？" class="headerlink" title="为什么wait和notify方法要在同步块中调用？"></a>为什么wait和notify方法要在同步块中调用？</h3><p>　　主要是因为Java API强制要求这样做，如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。还有一个原因是为了避免wait和notify之间产生竞态条件。</p>
<h3 id="为什么你应该在循环中检查等待条件"><a href="#为什么你应该在循环中检查等待条件" class="headerlink" title="为什么你应该在循环中检查等待条件?"></a>为什么你应该在循环中检查等待条件?</h3><p>　　处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。因此，当一个等待线程醒来时，不能认为它原来的等待状态仍然是有效的，在notify()方法调用之后和等待线程醒来之前这段时间它可能会改变。这就是在循环中使用wait()方法效果更好的原因，你可以在Eclipse中创建模板调用wait和notify试一试。如果你想了解更多关于这个问题的内容，我推荐你阅读《Effective Java》这本书中的线程和同步章节。</p>
<h3 id="Java中的同步集合与并发集合有什么区别？"><a href="#Java中的同步集合与并发集合有什么区别？" class="headerlink" title="Java中的同步集合与并发集合有什么区别？"></a>Java中的同步集合与并发集合有什么区别？</h3><p>　　同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发集合的可扩展性更高。在Java1.5之前程序员们只有同步集合来用且在多线程并发的时候会导致争用，阻碍了系统的扩展性。Java5介绍了并发集合像ConcurrentHashMap，不仅提供线程安全还用锁分离和内部分区等现代技术提高了可扩展性。更多内容详见答案。</p>
<h3 id="Java中堆和栈有什么不同？"><a href="#Java中堆和栈有什么不同？" class="headerlink" title="Java中堆和栈有什么不同？"></a>Java中堆和栈有什么不同？</h3><p>　　为什么把这个问题归类在多线程和并发面试题里？因为栈是一块和线程紧密相关的内存区域。每个线程都有自己的栈内存，用于存储本地变量，方法参数和栈调用，一个线程中存储的变量对其它线程是不可见的。而堆是所有线程共享的一片公用内存区域。对象都在堆里创建，为了提升效率线程会从堆中弄一个缓存到自己的栈，如果多个线程使用该变量就可能引发问题，这时volatile 变量就可以发挥作用了，它要求线程从主存中读取变量的值。 更多内容详见答案。</p>
<h3 id="什么是线程池？-为什么要使用它？"><a href="#什么是线程池？-为什么要使用它？" class="headerlink" title="什么是线程池？ 为什么要使用它？"></a>什么是线程池？ 为什么要使用它？</h3><p>　　创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变长，而且一个进程能创建的线程数有限。为了避免这些问题，在程序启动的时候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程。从JDK1.5开始，Java API提供了Executor框架让你可以创建不同的线程池。比如单线程池，每次处理一个任务；数目固定的线程池或者是缓存线程池（一个适合很多生存期短的任务的程序的可扩展线程池）。更多内容详见这篇文章。</p>
<h3 id="如何写代码来解决生产者消费者问题？"><a href="#如何写代码来解决生产者消费者问题？" class="headerlink" title="如何写代码来解决生产者消费者问题？"></a>如何写代码来解决生产者消费者问题？</h3><p>　　在现实中你解决的许多线程问题都属于生产者消费者模型，就是一个线程生产任务供其它线程进行消费，你必须知道怎么进行线程间通信来解决这个问题。比较低级的办法是用wait和notify来解决这个问题，比较赞的办法是用Semaphore 或者 BlockingQueue来实现生产者消费者模型，这篇教程有实现它。</p>
<h3 id="如何避免死锁？"><a href="#如何避免死锁？" class="headerlink" title="如何避免死锁？"></a>如何避免死锁？</h3><p><a href="http://www.cnblogs.com&amp;iframeId=iframe_0.21145907562000632&quot;" target="_blank" rel="external">http://www.cnblogs.com&amp;iframeId=iframe_0.21145907562000632&quot;</a> frameborder=”0” scrolling=”no” height=”20”&gt;<br>　　Java多线程中的死锁 死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起无法完成任务，死锁的发生必须满足以下四个条件：</p>
<p>互斥条件：一个资源每次只能被一个进程使用。<br>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。<br>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。<br>避免死锁最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁。这篇教程有代码示例和避免死锁的讨论细节。</p>
<h3 id="Java中活锁和死锁有什么区别？"><a href="#Java中活锁和死锁有什么区别？" class="headerlink" title="Java中活锁和死锁有什么区别？"></a>Java中活锁和死锁有什么区别？</h3><p>　　这是上题的扩展，活锁和死锁类似，不同之处在于处于活锁的线程或进程的状态是不断改变的，活锁可以认为是一种特殊的饥饿。一个现实的活锁例子是两个人在狭小的走廊碰到，两个人都试着避让对方好让彼此通过，但是因为避让的方向都一样导致最后谁都不能通过走廊。简单的说就是，活锁和死锁的主要区别是前者进程的状态可以改变但是却不能继续执行。</p>
<h3 id="怎么检测一个线程是否拥有锁？"><a href="#怎么检测一个线程是否拥有锁？" class="headerlink" title="怎么检测一个线程是否拥有锁？"></a>怎么检测一个线程是否拥有锁？</h3><p>　　我一直不知道我们竟然可以检测一个线程是否拥有锁，直到我参加了一次电话面试。在java.lang.Thread中有一个方法叫holdsLock()，它返回true如果当且仅当当前线程拥有某个具体对象的锁。你可以查看这篇文章了解更多。</p>
<h3 id="你如何在Java中获取线程堆栈？"><a href="#你如何在Java中获取线程堆栈？" class="headerlink" title="你如何在Java中获取线程堆栈？"></a>你如何在Java中获取线程堆栈？</h3><p>　　对于不同的操作系统，有多种方法来获得Java进程的线程堆栈。当你获取线程堆栈时，JVM会把所有线程的状态存到日志文件或者输出到控制台。在Windows你可以使用Ctrl + Break组合键来获取线程堆栈，Linux下用kill -3命令。你也可以用jstack这个工具来获取，它对线程id进行操作，你可以用jps这个工具找到id。</p>
<h3 id="JVM中哪个参数是用来控制线程的栈堆栈小的"><a href="#JVM中哪个参数是用来控制线程的栈堆栈小的" class="headerlink" title="JVM中哪个参数是用来控制线程的栈堆栈小的"></a>JVM中哪个参数是用来控制线程的栈堆栈小的</h3><p>　　这个问题很简单， -Xss参数用来控制线程的堆栈大小。你可以查看JVM配置列表来了解这个参数的更多信息。</p>
<h3 id="Java中synchronized-和-ReentrantLock-有什么不同？"><a href="#Java中synchronized-和-ReentrantLock-有什么不同？" class="headerlink" title="Java中synchronized 和 ReentrantLock 有什么不同？"></a>Java中synchronized 和 ReentrantLock 有什么不同？</h3><p>　　Java在过去很长一段时间只能通过synchronized关键字来实现互斥，它有一些缺点。比如你不能扩展锁之外的方法或者块边界，尝试获取锁时不能中途取消等。Java 5 通过Lock接口提供了更复杂的控制来解决这些问题。 ReentrantLock 类实现了 Lock，它拥有与 synchronized 相同的并发性和内存语义且它还具有可扩展性。你可以查看这篇文章了解更多</p>
<h3 id="有三个线程T1，T2，T3，怎么确保它们按顺序执行？"><a href="#有三个线程T1，T2，T3，怎么确保它们按顺序执行？" class="headerlink" title="有三个线程T1，T2，T3，怎么确保它们按顺序执行？"></a>有三个线程T1，T2，T3，怎么确保它们按顺序执行？</h3><p>　　在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的join()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成。你可以查看这篇文章了解更多。</p>
<h3 id="Thread类中的yield方法有什么作用？"><a href="#Thread类中的yield方法有什么作用？" class="headerlink" title="Thread类中的yield方法有什么作用？"></a>Thread类中的yield方法有什么作用？</h3><p>　　Yield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行yield()的线程有可能在进入到暂停状态后马上又被执行。点击这里查看更多yield方法的相关内容。</p>
<h3 id="Java中ConcurrentHashMap的并发度是什么？"><a href="#Java中ConcurrentHashMap的并发度是什么？" class="headerlink" title="Java中ConcurrentHashMap的并发度是什么？"></a>Java中ConcurrentHashMap的并发度是什么？</h3><p>　　ConcurrentHashMap把实际map划分成若干部分来实现它的可扩展性和线程安全。这种划分是使用并发度获得的，它是ConcurrentHashMap类构造函数的一个可选参数，默认值为16，这样在多线程情况下就能避免争用。欲了解更多并发度和内部大小调整请阅读我的文章How ConcurrentHashMap works in Java。</p>
<h3 id="Java中Semaphore是什么？"><a href="#Java中Semaphore是什么？" class="headerlink" title="Java中Semaphore是什么？"></a>Java中Semaphore是什么？</h3><p>　　Java中的Semaphore是一种新的同步类，它是一个计数信号。从概念上讲，从概念上讲，信号量维护了一个许可集合。如有必要，在许可可用前会阻塞每一个 acquire()，然后再获取该许可。每个 release()添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore只对可用许可的号码进行计数，并采取相应的行动。信号量常常用于多线程的代码中，比如数据库连接池。更多详细信息请点击这里。</p>
<h3 id="如果你提交任务时，线程池队列已满。会时发会生什么？"><a href="#如果你提交任务时，线程池队列已满。会时发会生什么？" class="headerlink" title="如果你提交任务时，线程池队列已满。会时发会生什么？"></a>如果你提交任务时，线程池队列已满。会时发会生什么？</h3><p>　　这个问题问得很狡猾，许多程序员会认为该任务会阻塞直到线程池队列有空位。事实上如果一个任务不能被调度执行那么ThreadPoolExecutor’s submit()方法将会抛出一个RejectedExecutionException异常。</p>
<h3 id="Java线程池中submit-和-execute-方法有什么区别？"><a href="#Java线程池中submit-和-execute-方法有什么区别？" class="headerlink" title="Java线程池中submit() 和 execute()方法有什么区别？"></a>Java线程池中submit() 和 execute()方法有什么区别？</h3><p>　　两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在Executor接口中, 而submit()方法可以返回持有计算结果的Future对象，它定义在ExecutorService接口中，它扩展了Executor接口，其它线程池类像ThreadPoolExecutor和ScheduledThreadPoolExecutor都有这些方法。更多详细信息请点击这里。</p>
<h3 id="什么是阻塞式方法？"><a href="#什么是阻塞式方法？" class="headerlink" title="什么是阻塞式方法？"></a>什么是阻塞式方法？</h3><p>　　阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，ServerSocket的accept()方法就是一直等待客户端连接。这里的阻塞是指调用结果返回之前，当前线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在任务完成前就返回。更多详细信息请点击这里。</p>
<h3 id="Swing是线程安全的吗？-为什么？"><a href="#Swing是线程安全的吗？-为什么？" class="headerlink" title="Swing是线程安全的吗？ 为什么？"></a>Swing是线程安全的吗？ 为什么？</h3><p>　　你可以很肯定的给出回答，Swing不是线程安全的，但是你应该解释这么回答的原因即便面试官没有问你为什么。当我们说swing不是线程安全的常常提到它的组件，这些组件不能在多线程中进行修改，所有对GUI组件的更新都要在AWT线程中完成，而Swing提供了同步和异步两种回调方法来进行更新。点击这里查看更多swing和线程安全的相关内容。</p>
<h3 id="Java中invokeAndWait-和-invokeLater有什么区别？"><a href="#Java中invokeAndWait-和-invokeLater有什么区别？" class="headerlink" title="Java中invokeAndWait 和 invokeLater有什么区别？"></a>Java中invokeAndWait 和 invokeLater有什么区别？</h3><p>　　这两个方法是Swing API 提供给Java开发者用来从当前线程而不是事件派发线程更新GUI组件用的。InvokeAndWait()同步更新GUI组件，比如一个进度条，一旦进度更新了，进度条也要做出相应改变。如果进度被多个线程跟踪，那么就调用invokeAndWait()方法请求事件派发线程对组件进行相应更新。而invokeLater()方法是异步调用更新组件的。更多详细信息请点击这里。</p>
<h3 id="Swing-API中那些方法是线程安全的？"><a href="#Swing-API中那些方法是线程安全的？" class="headerlink" title="Swing API中那些方法是线程安全的？"></a>Swing API中那些方法是线程安全的？</h3><p>　　这个问题又提到了swing和线程安全，虽然组件不是线程安全的但是有一些方法是可以被多线程安全调用的，比如repaint(), revalidate()。 JTextComponent的setText()方法和JTextArea的insert() 和 append() 方法也是线程安全的。</p>
<h3 id="如何在Java中创建Immutable对象？"><a href="#如何在Java中创建Immutable对象？" class="headerlink" title="如何在Java中创建Immutable对象？"></a>如何在Java中创建Immutable对象？</h3><p>　　这个问题看起来和多线程没什么关系， 但不变性有助于简化已经很复杂的并发程序。Immutable对象可以在没有同步的情况下共享，降低了对该对象进行并发访问时的同步化开销。可是Java没有@Immutable这个注解符，要创建不可变类，要实现下面几个步骤：通过构造方法初始化所有成员、对变量不要提供setter方法、将所有的成员声明为私有的，这样就不允许直接访问这些成员、在getter方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝。我的文章how to make an object Immutable in Java有详细的教程，看完你可以充满自信。</p>
<h3 id="Java中的ReadWriteLock是什么？"><a href="#Java中的ReadWriteLock是什么？" class="headerlink" title="Java中的ReadWriteLock是什么？"></a>Java中的ReadWriteLock是什么？</h3><p>　　一般而言，读写锁是用来提升并发程序性能的锁分离技术的成果。Java中的ReadWriteLock是Java 5 中新增的一个接口，一个ReadWriteLock维护一对关联的锁，一个用于只读操作一个用于写。在没有写线程的情况下一个读锁可能会同时被多个读线程持有。写锁是独占的，你可以使用JDK中的ReentrantReadWriteLock来实现这个规则，它最多支持65535个写锁和65535个读锁。</p>
<h3 id="多线程中的忙循环是什么"><a href="#多线程中的忙循环是什么" class="headerlink" title="多线程中的忙循环是什么?"></a>多线程中的忙循环是什么?</h3><p>　　忙循环就是程序员用循环让一个线程等待，不像传统方法wait(), sleep() 或 yield() 它们都放弃了CPU控制，而忙循环不会放弃CPU，它就是在运行一个空循环。这么做的目的是为了保留CPU缓存，在多核系统中，一个等待线程醒来的时候可能会在另一个内核运行，这样会重建缓存。为了避免重建缓存和减少等待重建的时间就可以使用它了。你可以查看这篇文章获得更多信息。</p>
<h3 id="volatile-变量和-atomic-变量有什么不同？"><a href="#volatile-变量和-atomic-变量有什么不同？" class="headerlink" title="volatile 变量和 atomic 变量有什么不同？"></a>volatile 变量和 atomic 变量有什么不同？</h3><p>　　这是个有趣的问题。首先，volatile 变量和 atomic 变量看起来很像，但功能却不一样。Volatile变量可以确保先行关系，即写操作会发生在后续的读操作之前, 但它并不能保证原子性。例如用volatile修饰count变量那么 count++ 操作就不是原子性的。而AtomicInteger类提供的atomic方法可以让这种操作具有原子性如getAndIncrement()方法会原子性的进行增量操作把当前值加一，其它数据类型和引用变量也可以进行相似操作。</p>
<h3 id="如果同步块内的线程抛出异常会发生什么？"><a href="#如果同步块内的线程抛出异常会发生什么？" class="headerlink" title="如果同步块内的线程抛出异常会发生什么？"></a>如果同步块内的线程抛出异常会发生什么？</h3><p>　　这个问题坑了很多Java程序员，若你能想到锁是否释放这条线索来回答还有点希望答对。无论你的同步块是正常还是异常退出的，里面的线程都会释放锁，所以对比锁接口我更喜欢同步块，因为它不用我花费精力去释放锁，该功能可以在finally block里释放锁实现。</p>
<h3 id="单例模式的双检锁是什么？"><a href="#单例模式的双检锁是什么？" class="headerlink" title="单例模式的双检锁是什么？"></a>单例模式的双检锁是什么？</h3><p>　　这个问题在Java面试中经常被问到，但是面试官对回答此问题的满意度仅为50%。一半的人写不出双检锁还有一半的人说不出它的隐患和Java1.5是如何对它修正的。它其实是一个用来创建线程安全的单例的老方法，当单例实例第一次被创建时它试图用单个锁进行性能优化，但是由于太过于复杂在JDK1.4中它是失败的，我个人也不喜欢它。无论如何，即便你也不喜欢它但是还是要了解一下，因为它经常被问到。你可以查看how double checked locking on Singleton works这篇文章获得更多信息。</p>
<h3 id="如何在Java中创建线程安全的Singleton？"><a href="#如何在Java中创建线程安全的Singleton？" class="headerlink" title="如何在Java中创建线程安全的Singleton？"></a>如何在Java中创建线程安全的Singleton？</h3><p>　　这是上面那个问题的后续，如果你不喜欢双检锁而面试官问了创建Singleton类的替代方法，你可以利用JVM的类加载和静态变量初始化特征来创建Singleton实例，或者是利用枚举类型来创建Singleton，我很喜欢用这种方法。你可以查看这篇文章获得更多信息。</p>
<h3 id="写出3条你遵循的多线程最佳实践"><a href="#写出3条你遵循的多线程最佳实践" class="headerlink" title="写出3条你遵循的多线程最佳实践"></a>写出3条你遵循的多线程最佳实践</h3><p>　　这种问题我最喜欢了，我相信你在写并发代码来提升性能的时候也会遵循某些最佳实践。以下三条最佳实践我觉得大多数Java程序员都应该遵循：</p>
<p>给你的线程起个有意义的名字。 这样可以方便找bug或追踪。OrderProcessor, QuoteProcessor or TradeProcessor 这种名字比 Thread-1. Thread-2 and Thread-3 好多了，给线程起一个和它要完成的任务相关的名字，所有的主要框架甚至JDK都遵循这个最佳实践。<br>避免锁定和缩小同步的范围 锁花费的代价高昂且上下文切换更耗费时间空间，试试最低限度的使用同步和锁，缩小临界区。因此相对于同步方法我更喜欢同步块，它给我拥有对锁的绝对控制权。<br>多用同步类少用wait 和 notify 首先，CountDownLatch, Semaphore, CyclicBarrier 和 Exchanger 这些同步类简化了编码操作，而用wait和notify很难实现对复杂控制流的控制。其次，这些类是由最好的企业编写和维护在后续的JDK中它们还会不断优化和完善，使用这些更高等级的同步工具你的程序可以不费吹灰之力获得优化。<br>多用并发集合少用同步集合 这是另外一个容易遵循且受益巨大的最佳实践，并发集合比同步集合的可扩展性更好，所以在并发编程时使用并发集合效果更好。如果下一次你需要用到map，你应该首先想到用ConcurrentHashMap。我的文章Java并发集合有更详细的说明。</p>
<h3 id="如何强制启动一个线程？"><a href="#如何强制启动一个线程？" class="headerlink" title="如何强制启动一个线程？"></a>如何强制启动一个线程？</h3><p>　　这个问题就像是如何强制进行Java垃圾回收，目前还没有觉得方法，虽然你可以使用System.gc()来进行垃圾回收，但是不保证能成功。在Java里面没有办法强制启动一个线程，它是被线程调度器控制着且Java没有公布相关的API。</p>
<h3 id="Java中的fork-join框架是什么？"><a href="#Java中的fork-join框架是什么？" class="headerlink" title="Java中的fork join框架是什么？"></a>Java中的fork join框架是什么？</h3><p>　　fork join框架是JDK7中出现的一款高效的工具，Java开发人员可以通过它充分利用现代服务器上的多处理器。它是专门为了那些可以递归划分成许多子模块设计的，目的是将所有可用的处理能力用来提升程序的性能。fork join框架一个巨大的优势是它使用了工作窃取算法，可以完成更多任务的工作线程可以从其它线程中窃取任务来执行。你可以查看这篇文章获得更多信息。</p>
<h3 id="Java多线程中调用wait-和-sleep-方法有什么不同？"><a href="#Java多线程中调用wait-和-sleep-方法有什么不同？" class="headerlink" title="Java多线程中调用wait() 和 sleep()方法有什么不同？"></a>Java多线程中调用wait() 和 sleep()方法有什么不同？</h3><p>　　Java程序中wait 和 sleep都会造成某种形式的暂停，它们可以满足不同的需要。wait()方法用于线程间通信，如果等待条件为真且其它线程被唤醒时它会释放锁，而sleep()方法仅仅释放CPU资源或者让当前线程停止执行一段时间，但不会释放锁。你可以查看这篇文章获得更多信息。</p>
<p>以上就是50道热门Java多线程和并发面试题啦。我没有分享所有题的答案但给未来的阅读者提供了足够的提示和线索来寻找答案。如果你真的找不到某题的答案，联系我吧，我会加上去的。这篇文章不仅可以用来准备面试，还能检查你对多线程、并发、设计模式和竞态条件、死锁和线程安全等线程问题的理解。我打算把这篇文章的问题弄成所有Java多线程问题的大合集，但是没有你的帮助恐怖是不能完成的，你也可以跟我分享其它任何问题，包括那些你被问到却还没有找到答案的问题。这篇文章对初学者或者是经验丰富的Java开发人员都很有用，过两三年甚至五六年你再读它也会受益匪浅。它可以扩展初学者尤其有用因为这个可以扩展他们的知识面，我会不断更新这些题，大家可以在文章后面的评论中提问，分享和回答问题一起把这篇面试题完善。</p>
]]></content>
      
        <categories>
            
            <category> 基础面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 红黑树源码解读]]></title>
      <url>/2018/06/03/Java%20%E7%BA%A2%E9%BB%91%E6%A0%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h1 id="Java-红黑树源码解读"><a href="#Java-红黑树源码解读" class="headerlink" title="Java 红黑树源码解读"></a>Java 红黑树源码解读</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="红黑树的介绍"><a href="#红黑树的介绍" class="headerlink" title="红黑树的介绍"></a><strong>红黑树的介绍</strong></h3><p>红黑树(Red-Black Tree，简称R-B Tree)，它<strong>一种特殊的二叉查找树</strong>。<br>红黑树是特殊的二叉查找树，意味着它<strong>满足二叉查找树的特征:</strong></p>
<p><strong>任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。</strong><br>除了具备该特性之外，红黑树还包括许多额外的信息。</p>
<p>红黑树的每个节点上都有存储位表示节点的颜色，颜色是红(Red)或黑(Black)。<br>红黑树的特性:<br>【1】 <strong>每个节点或者是黑色，或者是红色。</strong><br>【2】 <strong>根节点是黑色。</strong><br>【3】 <strong>每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]</strong><br>【4】 <strong>如果一个节点是红色的，则它的子节点必须是黑色的。</strong><br>【5】 <strong>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</strong></p>
<p>关于它的特性，需要注意的是：<br>第一，特性(3)中的叶子节点，是只为空(NIL或null)的节点。<br>第二，特性(5)，<strong>确保没有一条路径会比其他路径长出俩倍</strong>。因而，红黑树是相对是接近平衡的二叉树。</p>
<p>红黑树示意图如下：</p>
<p><a href="http://images.cnitblog.com/i/497634/201403/251730074203156.jpg" target="_blank" rel="external"><img src="http://images.cnitblog.com/i/497634/201403/251730074203156.jpg" alt="img"></a></p>
<h3 id="红黑树的原理"><a href="#红黑树的原理" class="headerlink" title="红黑树的原理"></a>红黑树的原理</h3><p>在研究红黑树原理，我们可以通过以下的实例进行 debug 调试，看它的整个执行过。接着再阅读以下内容，会比较容易理解红黑的原理，才能进一步深入研究清楚。</p>
<p><strong>实例地址：<a href="https://github.com/KnIfER/RBTree-java" target="_blank" rel="external">https://github.com/KnIfER/RBTree-java</a></strong></p>
<h3 id="红黑树的实现-代码说明"><a href="#红黑树的实现-代码说明" class="headerlink" title="红黑树的实现(代码说明)"></a><strong>红黑树的实现(代码说明)</strong></h3><p>红黑树的基本操作是<strong>添加</strong>、<strong>删除</strong>和<strong>旋转</strong>。在对红黑树进行添加或删除后，会用到旋转方法。为什么呢？道理很简单，添加或删除红黑树中的节点之后，红黑树就发生了变化，可能不满足红黑树的5条性质，也就不再是一颗红黑树了，而是一颗普通的树。而通过旋转，可以使这颗树重新成为红黑树。简单点说，<strong>旋转的目的是让树保持红黑树的特性。</strong><br>旋转包括两种：<strong>左旋</strong> 和 <strong>右旋</strong>。下面分别对红黑树的基本操作进行介绍。</p>
<h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a><strong>1. 基本定义</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RBTNode&lt;T&gt; mRoot;    <span class="comment">// 根结点</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED   = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> color;        <span class="comment">// 颜色</span></div><div class="line">        T key;                <span class="comment">// 关键字(键值)</span></div><div class="line">        RBTNode&lt;T&gt; left;    <span class="comment">// 左孩子</span></div><div class="line">        RBTNode&lt;T&gt; right;    <span class="comment">// 右孩子</span></div><div class="line">        RBTNode&lt;T&gt; parent;    <span class="comment">// 父结点</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RBTNode</span><span class="params">(T key, <span class="keyword">boolean</span> color, RBTNode&lt;T&gt; parent, RBTNode&lt;T&gt; left, RBTNode&lt;T&gt; right)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.color = color;</div><div class="line">            <span class="keyword">this</span>.parent = parent;</div><div class="line">            <span class="keyword">this</span>.left = left;</div><div class="line">            <span class="keyword">this</span>.right = right;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RBTree是红黑树对应的类，RBTNode是红黑树的节点类。在RBTree中包含了根节点mRoot和红黑树的相关API。<br>注意：在实现红黑树API的过程中，我重载了许多函数。重载的原因，一是因为有的API是内部接口，有的是外部接口；二是为了让结构更加清晰。</p>
<h4 id="2-左旋"><a href="#2-左旋" class="headerlink" title="2. 左旋"></a><strong>2. 左旋</strong></h4><p><a href="http://images.cnitblog.com/i/497634/201403/251733282013849.jpg" target="_blank" rel="external"><img src="http://images.cnitblog.com/i/497634/201403/251733282013849.jpg" alt="img"></a></p>
<p>对x进行左旋，意味着”将x变成一个左节点”。</p>
<p>左旋的实现代码(Java语言)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> * 对红黑树的节点(x)进行左旋转</div><div class="line"> *</div><div class="line"> * 左旋示意图(对节点x进行左旋)：</div><div class="line"> *      px                              px</div><div class="line"> *     /                               /</div><div class="line"> *    x                               y                </div><div class="line"> *   /  \      --(左旋)-.           / \                #</div><div class="line"> *  lx   y                          x  ry     </div><div class="line"> *     /   \                       /  \</div><div class="line"> *    ly   ry                     lx  ly  </div><div class="line"> *</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T&gt; x)</span> </span>&#123;</div><div class="line">    <span class="comment">// 设置x的右孩子为y</span></div><div class="line">    RBTNode&lt;T&gt; y = x.right;</div><div class="line"></div><div class="line">    <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></div><div class="line">    <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></div><div class="line">    x.right = y.left;</div><div class="line">    <span class="keyword">if</span> (y.left != <span class="keyword">null</span>)</div><div class="line">        y.left.parent = x;</div><div class="line"></div><div class="line">    <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></div><div class="line">    y.parent = x.parent;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (x.parent == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.mRoot = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (x.parent.left == x)</div><div class="line">            x.parent.left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            x.parent.right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 将 “x” 设为 “y的左孩子”</span></div><div class="line">    y.left = x;</div><div class="line">    <span class="comment">// 将 “x的父节点” 设为 “y”</span></div><div class="line">    x.parent = y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-右旋"><a href="#3-右旋" class="headerlink" title="3. 右旋"></a><strong>3. 右旋</strong></h4><p><a href="http://images.cnitblog.com/i/497634/201403/251735527958942.jpg" target="_blank" rel="external"><img src="http://images.cnitblog.com/i/497634/201403/251735527958942.jpg" alt="img"></a></p>
<p>对y进行左旋，意味着”将y变成一个右节点”。</p>
<p>右旋的实现代码(Java语言)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> * 对红黑树的节点(y)进行右旋转</div><div class="line"> *</div><div class="line"> * 右旋示意图(对节点y进行左旋)：</div><div class="line"> *            py                               py</div><div class="line"> *           /                                /</div><div class="line"> *          y                                x                  </div><div class="line"> *         /  \      --(右旋)-.            /  \                     #</div><div class="line"> *        x   ry                           lx   y  </div><div class="line"> *       / \                                   / \                   #</div><div class="line"> *      lx  rx                                rx  ry</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T&gt; y)</span> </span>&#123;</div><div class="line">    <span class="comment">// 设置x是当前节点的左孩子。</span></div><div class="line">    RBTNode&lt;T&gt; x = y.left;</div><div class="line"></div><div class="line">    <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></div><div class="line">    <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></div><div class="line">    y.left = x.right;</div><div class="line">    <span class="keyword">if</span> (x.right != <span class="keyword">null</span>)</div><div class="line">        x.right.parent = y;</div><div class="line"></div><div class="line">    <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></div><div class="line">    x.parent = y.parent;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (y.parent == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.mRoot = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (y == y.parent.right)</div><div class="line">            y.parent.right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            y.parent.left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将 “y” 设为 “x的右孩子”</span></div><div class="line">    x.right = y;</div><div class="line"></div><div class="line">    <span class="comment">// 将 “y的父节点” 设为 “x”</span></div><div class="line">    y.parent = x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-添加"><a href="#4-添加" class="headerlink" title="4. 添加"></a><strong>4. 添加</strong></h4><p>将一个节点插入到红黑树中，需要执行哪些步骤呢？首先，将红黑树当作一颗二叉查找树，将节点插入；然后，将节点着色为红色；最后，通过”旋转和重新着色”等一系列操作来修正该树，使之重新成为一颗红黑树。详细描述如下：<br><strong>第一步: 将红黑树当作一颗二叉查找树，将节点插入。</strong><br>​       红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然是一颗二叉查找树。也就意味着，树的键值仍然是有序的。此外，无论是左旋还是右旋，若旋转之前这棵树是二叉查找树，旋转之后它一定还是二叉查找树。这也就意味着，任何的旋转和重新着色操作，都不会改变它仍然是一颗二叉查找树的事实。<br>好吧？那接下来，我们就来想方设法的旋转以及重新着色，使这颗树重新成为红黑树！</p>
<p><strong>第二步：将插入的节点着色为”红色”。</strong><br>​       为什么着色成红色，而不是黑色呢？为什么呢？在回答之前，我们需要重新温习一下红黑树的特性：<br>(1) 每个节点或者是黑色，或者是红色。<br>(2) 根节点是黑色。<br>(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]<br>(4) 如果一个节点是红色的，则它的子节点必须是黑色的。<br>(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。<br>​      将插入的节点着色为红色，不会违背”特性(5)”！少违背一条特性，就意味着我们需要处理的情况越少。接下来，就要努力的让这棵树满足其它性质即可；满足了的话，它就又是一颗红黑树了。o(∩∩)o…哈哈</p>
<p><strong>第三步: 通过一系列的旋转或着色等操作，使之重新成为一颗红黑树。</strong><br>​       第二步中，将插入节点着色为”红色”之后，不会违背”特性(5)”。那它到底会违背哪些特性呢？<br>​       对于”特性(1)”，显然不会违背了。因为我们已经将它涂成红色了。<br>​       对于”特性(2)”，显然也不会违背。在第一步中，我们是将红黑树当作二叉查找树，然后执行的插入操作。而根据二叉查找数的特点，插入操作不会改变根节点。所以，根节点仍然是黑色。<br>​       对于”特性(3)”，显然不会违背了。这里的叶子节点是指的空叶子节点，插入非空节点并不会对它们造成影响。<br>​       对于”特性(4)”，是有可能违背的！<br>​       那接下来，想办法使之”满足特性(4)”，就可以将树重新构造成红黑树了。</p>
<p>添加操作的实现代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> * 将结点插入到红黑树中</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     node 插入的结点        // 对应《算法导论》中的node</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cmp;</div><div class="line">    RBTNode&lt;T&gt; y = <span class="keyword">null</span>;</div><div class="line">    RBTNode&lt;T&gt; x = <span class="keyword">this</span>.mRoot;</div><div class="line"></div><div class="line">    <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></div><div class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</div><div class="line">        y = x;</div><div class="line">        cmp = node.key.compareTo(x.key);</div><div class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">            x = x.left;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            x = x.right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    node.parent = y;</div><div class="line">    <span class="keyword">if</span> (y!=<span class="keyword">null</span>) &#123;</div><div class="line">        cmp = node.key.compareTo(y.key);</div><div class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">            y.left = node;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            y.right = node;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.mRoot = node;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 2. 设置节点的颜色为红色</span></div><div class="line">    node.color = RED;</div><div class="line"></div><div class="line">    <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></div><div class="line">    insertFixUp(node);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"> * 新建结点(key)，并将其插入到红黑树中</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     key 插入结点的键值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">    RBTNode&lt;T&gt; node=<span class="keyword">new</span> RBTNode&lt;T&gt;(key,BLACK,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 如果新建结点失败，则返回。</span></div><div class="line">    <span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line">        insert(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>内部接口</strong> – insert(node)的作用是将”node”节点插入到红黑树中。<br><strong>外部接口</strong> – insert(key)的作用是将”key”添加到红黑树中。</p>
<p>添加修正操作的实现代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 红黑树插入修正函数</div><div class="line"> *</div><div class="line"> * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</div><div class="line"> * 目的是将它重新塑造成一颗红黑树。</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     node 插入的结点        // 对应《算法导论》中的z</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertFixUp</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">    RBTNode&lt;T&gt; parent, gparent;</div><div class="line"></div><div class="line">    <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></div><div class="line">    <span class="keyword">while</span> (((parent = parentOf(node))!=<span class="keyword">null</span>) &amp;&amp; isRed(parent)) &#123;</div><div class="line">        <span class="comment">// 获得祖父节点</span></div><div class="line">        gparent = parentOf(parent);</div><div class="line"></div><div class="line">        <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></div><div class="line">        <span class="keyword">if</span> (parent == gparent.left) &#123;</div><div class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></div><div class="line">            RBTNode&lt;T&gt; uncle = gparent.right;</div><div class="line">            <span class="keyword">if</span> ((uncle!=<span class="keyword">null</span>) &amp;&amp; isRed(uncle)) &#123;</div><div class="line">                setBlack(uncle);</div><div class="line">                setBlack(parent);</div><div class="line">                setRed(gparent);</div><div class="line">                node = gparent;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></div><div class="line">            <span class="keyword">if</span> (parent.right == node) &#123;</div><div class="line">                RBTNode&lt;T&gt; tmp;</div><div class="line">                leftRotate(parent);</div><div class="line">                tmp = parent;</div><div class="line">                parent = node;</div><div class="line">                node = tmp;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></div><div class="line">            setBlack(parent);</div><div class="line">            setRed(gparent);</div><div class="line">            rightRotate(gparent);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></div><div class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></div><div class="line">            RBTNode&lt;T&gt; uncle = gparent.left;</div><div class="line">            <span class="keyword">if</span> ((uncle!=<span class="keyword">null</span>) &amp;&amp; isRed(uncle)) &#123;</div><div class="line">                setBlack(uncle);</div><div class="line">                setBlack(parent);</div><div class="line">                setRed(gparent);</div><div class="line">                node = gparent;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></div><div class="line">            <span class="keyword">if</span> (parent.left == node) &#123;</div><div class="line">                RBTNode&lt;T&gt; tmp;</div><div class="line">                rightRotate(parent);</div><div class="line">                tmp = parent;</div><div class="line">                parent = node;</div><div class="line">                node = tmp;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></div><div class="line">            setBlack(parent);</div><div class="line">            setRed(gparent);</div><div class="line">            leftRotate(gparent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将根节点设为黑色</span></div><div class="line">    setBlack(<span class="keyword">this</span>.mRoot);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>insertFixUp(node)的作用是对应”上面所讲的第三步”。它是一个内部接口。</p>
<h4 id="5-删除操作"><a href="#5-删除操作" class="headerlink" title="5. 删除操作"></a><strong>5. 删除操作</strong></h4><p>将红黑树内的某一个节点删除。需要执行的操作依次是：首先，将红黑树当作一颗二叉查找树，将该节点从二叉查找树中删除；然后，通过”旋转和重新着色”等一系列来修正该树，使之重新成为一棵红黑树。详细描述如下：<br><strong>第一步：将红黑树当作一颗二叉查找树，将节点删除。</strong><br>​       这和”删除常规二叉查找树中删除节点的方法是一样的”。分3种情况：<br>① 被删除节点没有儿子，即为叶节点。那么，直接将该节点删除就OK了。<br>② 被删除节点只有一个儿子。那么，直接删除该节点，并用该节点的唯一子节点顶替它的位置。<br>③ 被删除节点有两个儿子。那么，先找出它的后继节点；然后把“它的后继节点的内容”复制给“该节点的内容”；之后，删除“它的后继节点”。在这里，后继节点相当于替身，在将后继节点的内容复制给”被删除节点”之后，再将后继节点删除。这样就巧妙的将问题转换为”删除后继节点”的情况了，下面就考虑后继节点。 在”被删除节点”有两个非空子节点的情况下，它的后继节点不可能是双子非空。既然”的后继节点”不可能双子都非空，就意味着”该节点的后继节点”要么没有儿子，要么只有一个儿子。若没有儿子，则按”情况① “进行处理；若只有一个儿子，则按”情况② “进行处理。</p>
<p><strong>第二步：通过”旋转和重新着色”等一系列来修正该树，使之重新成为一棵红黑树。</strong><br>​        因为”第一步”中删除节点之后，可能会违背红黑树的特性。所以需要通过”旋转和重新着色”来修正该树，使之重新成为一棵红黑树。</p>
<p>删除操作的实现代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> * 删除结点(node)，并返回被删除的结点</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     node 删除的结点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">    RBTNode&lt;T&gt; child, parent;</div><div class="line">    <span class="keyword">boolean</span> color;</div><div class="line"></div><div class="line">    <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></div><div class="line">    <span class="keyword">if</span> ( (node.left!=<span class="keyword">null</span>) &amp;&amp; (node.right!=<span class="keyword">null</span>) ) &#123;</div><div class="line">        <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></div><div class="line">        <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></div><div class="line">        RBTNode&lt;T&gt; replace = node;</div><div class="line"></div><div class="line">        <span class="comment">// 获取后继节点</span></div><div class="line">        replace = replace.right;</div><div class="line">        <span class="keyword">while</span> (replace.left != <span class="keyword">null</span>)</div><div class="line">            replace = replace.left;</div><div class="line"></div><div class="line">        <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></div><div class="line">        <span class="keyword">if</span> (parentOf(node)!=<span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (parentOf(node).left == node)</div><div class="line">                parentOf(node).left = replace;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                parentOf(node).right = replace;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// "node节点"是根节点，更新根节点。</span></div><div class="line">            <span class="keyword">this</span>.mRoot = replace;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></div><div class="line">        <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></div><div class="line">        child = replace.right;</div><div class="line">        parent = parentOf(replace);</div><div class="line">        <span class="comment">// 保存"取代节点"的颜色</span></div><div class="line">        color = colorOf(replace);</div><div class="line"></div><div class="line">        <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></div><div class="line">        <span class="keyword">if</span> (parent == node) &#123;</div><div class="line">            parent = replace;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// child不为空</span></div><div class="line">            <span class="keyword">if</span> (child!=<span class="keyword">null</span>)</div><div class="line">                setParent(child, parent);</div><div class="line">            parent.left = child;</div><div class="line"></div><div class="line">            replace.right = node.right;</div><div class="line">            setParent(node.right, replace);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        replace.parent = node.parent;</div><div class="line">        replace.color = node.color;</div><div class="line">        replace.left = node.left;</div><div class="line">        node.left.parent = replace;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (color == BLACK)</div><div class="line">            removeFixUp(child, parent);</div><div class="line"></div><div class="line">        node = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (node.left !=<span class="keyword">null</span>) &#123;</div><div class="line">        child = node.left;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        child = node.right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    parent = node.parent;</div><div class="line">    <span class="comment">// 保存"取代节点"的颜色</span></div><div class="line">    color = node.color;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (child!=<span class="keyword">null</span>)</div><div class="line">        child.parent = parent;</div><div class="line"></div><div class="line">    <span class="comment">// "node节点"不是根节点</span></div><div class="line">    <span class="keyword">if</span> (parent!=<span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (parent.left == node)</div><div class="line">            parent.left = child;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            parent.right = child;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.mRoot = child;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (color == BLACK)</div><div class="line">        removeFixUp(child, parent);</div><div class="line">    node = <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"> * 删除结点(z)，并返回被删除的结点</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     tree 红黑树的根结点</div><div class="line"> *     z 删除的结点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">    RBTNode&lt;T&gt; node; </div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((node = search(mRoot, key)) != <span class="keyword">null</span>)</div><div class="line">        remove(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>内部接口</strong> – remove(node)的作用是将”node”节点插入到红黑树中。<br><strong>外部接口</strong> – remove(key)删除红黑树中键值为key的节点。</p>
<p>删除修正操作的实现代码(Java语言)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 红黑树删除修正函数</div><div class="line"> *</div><div class="line"> * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</div><div class="line"> * 目的是将它重新塑造成一颗红黑树。</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     node 待修正的节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeFixUp</span><span class="params">(RBTNode&lt;T&gt; node, RBTNode&lt;T&gt; parent)</span> </span>&#123;</div><div class="line">    RBTNode&lt;T&gt; other;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ((node==<span class="keyword">null</span> || isBlack(node)) &amp;&amp; (node != <span class="keyword">this</span>.mRoot)) &#123;</div><div class="line">        <span class="keyword">if</span> (parent.left == node) &#123;</div><div class="line">            other = parent.right;</div><div class="line">            <span class="keyword">if</span> (isRed(other)) &#123;</div><div class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></div><div class="line">                setBlack(other);</div><div class="line">                setRed(parent);</div><div class="line">                leftRotate(parent);</div><div class="line">                other = parent.right;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((other.left==<span class="keyword">null</span> || isBlack(other.left)) &amp;&amp;</div><div class="line">                (other.right==<span class="keyword">null</span> || isBlack(other.right))) &#123;</div><div class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></div><div class="line">                setRed(other);</div><div class="line">                node = parent;</div><div class="line">                parent = parentOf(node);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (other.right==<span class="keyword">null</span> || isBlack(other.right)) &#123;</div><div class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></div><div class="line">                    setBlack(other.left);</div><div class="line">                    setRed(other);</div><div class="line">                    rightRotate(other);</div><div class="line">                    other = parent.right;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></div><div class="line">                setColor(other, colorOf(parent));</div><div class="line">                setBlack(parent);</div><div class="line">                setBlack(other.right);</div><div class="line">                leftRotate(parent);</div><div class="line">                node = <span class="keyword">this</span>.mRoot;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">            other = parent.left;</div><div class="line">            <span class="keyword">if</span> (isRed(other)) &#123;</div><div class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></div><div class="line">                setBlack(other);</div><div class="line">                setRed(parent);</div><div class="line">                rightRotate(parent);</div><div class="line">                other = parent.left;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((other.left==<span class="keyword">null</span> || isBlack(other.left)) &amp;&amp;</div><div class="line">                (other.right==<span class="keyword">null</span> || isBlack(other.right))) &#123;</div><div class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></div><div class="line">                setRed(other);</div><div class="line">                node = parent;</div><div class="line">                parent = parentOf(node);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (other.left==<span class="keyword">null</span> || isBlack(other.left)) &#123;</div><div class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></div><div class="line">                    setBlack(other.right);</div><div class="line">                    setRed(other);</div><div class="line">                    leftRotate(other);</div><div class="line">                    other = parent.left;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></div><div class="line">                setColor(other, colorOf(parent));</div><div class="line">                setBlack(parent);</div><div class="line">                setBlack(other.left);</div><div class="line">                rightRotate(parent);</div><div class="line">                node = <span class="keyword">this</span>.mRoot;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (node!=<span class="keyword">null</span>)</div><div class="line">        setBlack(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>removeFixup(node, parent)是对应”上面所讲的第三步”。它是一个内部接口。</p>
<h3 id="红黑树的Java实现-完整源码"><a href="#红黑树的Java实现-完整源码" class="headerlink" title="红黑树的Java实现(完整源码)"></a><strong>红黑树的Java实现(完整源码)</strong></h3><p>下面是红黑树实现的完整代码和相应的测试程序。<br>(1) 除了上面所说的”左旋”、”右旋”、”添加”、”删除”等基本操作之后，还实现了”遍历”、”查找”、”打印”、”最小值”、”最大值”、”创建”、”销毁”等接口。<br>(2) 函数接口大多分为内部接口和外部接口。内部接口是private函数，外部接口则是public函数。<br>(3) 测试代码中提供了”插入”和”删除”动作的检测开关。默认是关闭的，打开方法可以参考”代码中的说明”。建议在打开开关后，在草稿上自己动手绘制一下红黑树。</p>
<p>红黑树的实现文件(RBTree.java)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div></pre></td><td class="code"><pre><div class="line">  <span class="number">1</span> <span class="comment">/**</span></div><div class="line">  2  * Java 语言: 红黑树</div><div class="line">  3  *</div><div class="line">  4  * <span class="doctag">@author</span> skywang</div><div class="line">  5  * <span class="doctag">@date</span> 2013/11/07</div><div class="line">  6  */</div><div class="line">  <span class="number">7</span> </div><div class="line">  <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">  <span class="number">9</span> </div><div class="line"> <span class="number">10</span>     <span class="keyword">private</span> RBTNode&lt;T&gt; mRoot;    <span class="comment">// 根结点</span></div><div class="line"> <span class="number">11</span> </div><div class="line"> <span class="number">12</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED   = <span class="keyword">false</span>;</div><div class="line"> <span class="number">13</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">true</span>;</div><div class="line"> <span class="number">14</span> </div><div class="line"> <span class="number">15</span>     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"> <span class="number">16</span>         <span class="keyword">boolean</span> color;        <span class="comment">// 颜色</span></div><div class="line"> <span class="number">17</span>         T key;                <span class="comment">// 关键字(键值)</span></div><div class="line"> <span class="number">18</span>         RBTNode&lt;T&gt; left;    <span class="comment">// 左孩子</span></div><div class="line"> <span class="number">19</span>         RBTNode&lt;T&gt; right;    <span class="comment">// 右孩子</span></div><div class="line"> <span class="number">20</span>         RBTNode&lt;T&gt; parent;    <span class="comment">// 父结点</span></div><div class="line"> <span class="number">21</span> </div><div class="line"> <span class="number">22</span>         <span class="function"><span class="keyword">public</span> <span class="title">RBTNode</span><span class="params">(T key, <span class="keyword">boolean</span> color, RBTNode&lt;T&gt; parent, RBTNode&lt;T&gt; left, RBTNode&lt;T&gt; right)</span> </span>&#123;</div><div class="line"> <span class="number">23</span>             <span class="keyword">this</span>.key = key;</div><div class="line"> <span class="number">24</span>             <span class="keyword">this</span>.color = color;</div><div class="line"> <span class="number">25</span>             <span class="keyword">this</span>.parent = parent;</div><div class="line"> <span class="number">26</span>             <span class="keyword">this</span>.left = left;</div><div class="line"> <span class="number">27</span>             <span class="keyword">this</span>.right = right;</div><div class="line"> <span class="number">28</span>         &#125;</div><div class="line"> <span class="number">29</span> </div><div class="line"> <span class="number">30</span>         <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">31</span>             <span class="keyword">return</span> key;</div><div class="line"> <span class="number">32</span>         &#125;</div><div class="line"> <span class="number">33</span> </div><div class="line"> <span class="number">34</span>         <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">35</span>             <span class="keyword">return</span> <span class="string">""</span>+key+(<span class="keyword">this</span>.color==RED?<span class="string">"(R)"</span>:<span class="string">"B"</span>);</div><div class="line"> <span class="number">36</span>         &#125;</div><div class="line"> <span class="number">37</span>     &#125;</div><div class="line"> <span class="number">38</span> </div><div class="line"> <span class="number">39</span>     <span class="function"><span class="keyword">public</span> <span class="title">RBTree</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">40</span>         mRoot=<span class="keyword">null</span>;</div><div class="line"> <span class="number">41</span>     &#125;</div><div class="line"> <span class="number">42</span> </div><div class="line"> <span class="number">43</span>     <span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">parentOf</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"> <span class="number">44</span>         <span class="keyword">return</span> node!=<span class="keyword">null</span> ? node.parent : <span class="keyword">null</span>;</div><div class="line"> <span class="number">45</span>     &#125;</div><div class="line"> <span class="number">46</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">colorOf</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"> <span class="number">47</span>         <span class="keyword">return</span> node!=<span class="keyword">null</span> ? node.color : BLACK;</div><div class="line"> <span class="number">48</span>     &#125;</div><div class="line"> <span class="number">49</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"> <span class="number">50</span>         <span class="keyword">return</span> ((node!=<span class="keyword">null</span>)&amp;&amp;(node.color==RED)) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line"> <span class="number">51</span>     &#125;</div><div class="line"> <span class="number">52</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlack</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"> <span class="number">53</span>         <span class="keyword">return</span> !isRed(node);</div><div class="line"> <span class="number">54</span>     &#125;</div><div class="line"> <span class="number">55</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBlack</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"> <span class="number">56</span>         <span class="keyword">if</span> (node!=<span class="keyword">null</span>)</div><div class="line"> <span class="number">57</span>             node.color = BLACK;</div><div class="line"> <span class="number">58</span>     &#125;</div><div class="line"> <span class="number">59</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRed</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"> <span class="number">60</span>         <span class="keyword">if</span> (node!=<span class="keyword">null</span>)</div><div class="line"> <span class="number">61</span>             node.color = RED;</div><div class="line"> <span class="number">62</span>     &#125;</div><div class="line"> <span class="number">63</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBTNode&lt;T&gt; node, RBTNode&lt;T&gt; parent)</span> </span>&#123;</div><div class="line"> <span class="number">64</span>         <span class="keyword">if</span> (node!=<span class="keyword">null</span>)</div><div class="line"> <span class="number">65</span>             node.parent = parent;</div><div class="line"> <span class="number">66</span>     &#125;</div><div class="line"> <span class="number">67</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(RBTNode&lt;T&gt; node, <span class="keyword">boolean</span> color)</span> </span>&#123;</div><div class="line"> <span class="number">68</span>         <span class="keyword">if</span> (node!=<span class="keyword">null</span>)</div><div class="line"> <span class="number">69</span>             node.color = color;</div><div class="line"> <span class="number">70</span>     &#125;</div><div class="line"> <span class="number">71</span> </div><div class="line"> <span class="number">72</span>     <span class="comment">/*</span></div><div class="line"> 73      * 前序遍历"红黑树"</div><div class="line"> 74      */</div><div class="line"> <span class="number">75</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line"> <span class="number">76</span>         <span class="keyword">if</span>(tree != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">77</span>             System.out.print(tree.key+<span class="string">" "</span>);</div><div class="line"> <span class="number">78</span>             preOrder(tree.left);</div><div class="line"> <span class="number">79</span>             preOrder(tree.right);</div><div class="line"> <span class="number">80</span>         &#125;</div><div class="line"> <span class="number">81</span>     &#125;</div><div class="line"> <span class="number">82</span> </div><div class="line"> <span class="number">83</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">84</span>         preOrder(mRoot);</div><div class="line"> <span class="number">85</span>     &#125;</div><div class="line"> <span class="number">86</span> </div><div class="line"> <span class="number">87</span>     <span class="comment">/*</span></div><div class="line"> 88      * 中序遍历"红黑树"</div><div class="line"> 89      */</div><div class="line"> <span class="number">90</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line"> <span class="number">91</span>         <span class="keyword">if</span>(tree != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">92</span>             inOrder(tree.left);</div><div class="line"> <span class="number">93</span>             System.out.print(tree.key+<span class="string">" "</span>);</div><div class="line"> <span class="number">94</span>             inOrder(tree.right);</div><div class="line"> <span class="number">95</span>         &#125;</div><div class="line"> <span class="number">96</span>     &#125;</div><div class="line"> <span class="number">97</span> </div><div class="line"> <span class="number">98</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">99</span>         inOrder(mRoot);</div><div class="line"><span class="number">100</span>     &#125;</div><div class="line"><span class="number">101</span> </div><div class="line"><span class="number">102</span> </div><div class="line"><span class="number">103</span>     <span class="comment">/*</span></div><div class="line">104      * 后序遍历"红黑树"</div><div class="line">105      */</div><div class="line"><span class="number">106</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line"><span class="number">107</span>         <span class="keyword">if</span>(tree != <span class="keyword">null</span>)</div><div class="line"><span class="number">108</span>         &#123;</div><div class="line"><span class="number">109</span>             postOrder(tree.left);</div><div class="line"><span class="number">110</span>             postOrder(tree.right);</div><div class="line"><span class="number">111</span>             System.out.print(tree.key+<span class="string">" "</span>);</div><div class="line"><span class="number">112</span>         &#125;</div><div class="line"><span class="number">113</span>     &#125;</div><div class="line"><span class="number">114</span> </div><div class="line"><span class="number">115</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">116</span>         postOrder(mRoot);</div><div class="line"><span class="number">117</span>     &#125;</div><div class="line"><span class="number">118</span> </div><div class="line"><span class="number">119</span> </div><div class="line"><span class="number">120</span>     <span class="comment">/*</span></div><div class="line">121      * (递归实现)查找"红黑树x"中键值为key的节点</div><div class="line">122      */</div><div class="line"><span class="number">123</span>     <span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">search</span><span class="params">(RBTNode&lt;T&gt; x, T key)</span> </span>&#123;</div><div class="line"><span class="number">124</span>         <span class="keyword">if</span> (x==<span class="keyword">null</span>)</div><div class="line"><span class="number">125</span>             <span class="keyword">return</span> x;</div><div class="line"><span class="number">126</span> </div><div class="line"><span class="number">127</span>         <span class="keyword">int</span> cmp = key.compareTo(x.key);</div><div class="line"><span class="number">128</span>         <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line"><span class="number">129</span>             <span class="keyword">return</span> search(x.left, key);</div><div class="line"><span class="number">130</span>         <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line"><span class="number">131</span>             <span class="keyword">return</span> search(x.right, key);</div><div class="line"><span class="number">132</span>         <span class="keyword">else</span></div><div class="line"><span class="number">133</span>             <span class="keyword">return</span> x;</div><div class="line"><span class="number">134</span>     &#125;</div><div class="line"><span class="number">135</span> </div><div class="line"><span class="number">136</span>     <span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">search</span><span class="params">(T key)</span> </span>&#123;</div><div class="line"><span class="number">137</span>         <span class="keyword">return</span> search(mRoot, key);</div><div class="line"><span class="number">138</span>     &#125;</div><div class="line"><span class="number">139</span> </div><div class="line"><span class="number">140</span>     <span class="comment">/*</span></div><div class="line">141      * (非递归实现)查找"红黑树x"中键值为key的节点</div><div class="line">142      */</div><div class="line"><span class="number">143</span>     <span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">iterativeSearch</span><span class="params">(RBTNode&lt;T&gt; x, T key)</span> </span>&#123;</div><div class="line"><span class="number">144</span>         <span class="keyword">while</span> (x!=<span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">145</span>             <span class="keyword">int</span> cmp = key.compareTo(x.key);</div><div class="line"><span class="number">146</span> </div><div class="line"><span class="number">147</span>             <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) </div><div class="line"><span class="number">148</span>                 x = x.left;</div><div class="line"><span class="number">149</span>             <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) </div><div class="line"><span class="number">150</span>                 x = x.right;</div><div class="line"><span class="number">151</span>             <span class="keyword">else</span></div><div class="line"><span class="number">152</span>                 <span class="keyword">return</span> x;</div><div class="line"><span class="number">153</span>         &#125;</div><div class="line"><span class="number">154</span> </div><div class="line"><span class="number">155</span>         <span class="keyword">return</span> x;</div><div class="line"><span class="number">156</span>     &#125;</div><div class="line"><span class="number">157</span> </div><div class="line"><span class="number">158</span>     <span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">iterativeSearch</span><span class="params">(T key)</span> </span>&#123;</div><div class="line"><span class="number">159</span>         <span class="keyword">return</span> iterativeSearch(mRoot, key);</div><div class="line"><span class="number">160</span>     &#125;</div><div class="line"><span class="number">161</span> </div><div class="line"><span class="number">162</span>     <span class="comment">/* </span></div><div class="line">163      * 查找最小结点：返回tree为根结点的红黑树的最小结点。</div><div class="line">164      */</div><div class="line"><span class="number">165</span>     <span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">minimum</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line"><span class="number">166</span>         <span class="keyword">if</span> (tree == <span class="keyword">null</span>)</div><div class="line"><span class="number">167</span>             <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">168</span> </div><div class="line"><span class="number">169</span>         <span class="keyword">while</span>(tree.left != <span class="keyword">null</span>)</div><div class="line"><span class="number">170</span>             tree = tree.left;</div><div class="line"><span class="number">171</span>         <span class="keyword">return</span> tree;</div><div class="line"><span class="number">172</span>     &#125;</div><div class="line"><span class="number">173</span> </div><div class="line"><span class="number">174</span>     <span class="function"><span class="keyword">public</span> T <span class="title">minimum</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">175</span>         RBTNode&lt;T&gt; p = minimum(mRoot);</div><div class="line"><span class="number">176</span>         <span class="keyword">if</span> (p != <span class="keyword">null</span>)</div><div class="line"><span class="number">177</span>             <span class="keyword">return</span> p.key;</div><div class="line"><span class="number">178</span> </div><div class="line"><span class="number">179</span>         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">180</span>     &#125;</div><div class="line"><span class="number">181</span>      </div><div class="line"><span class="number">182</span>     <span class="comment">/* </span></div><div class="line">183      * 查找最大结点：返回tree为根结点的红黑树的最大结点。</div><div class="line">184      */</div><div class="line"><span class="number">185</span>     <span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">maximum</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line"><span class="number">186</span>         <span class="keyword">if</span> (tree == <span class="keyword">null</span>)</div><div class="line"><span class="number">187</span>             <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">188</span> </div><div class="line"><span class="number">189</span>         <span class="keyword">while</span>(tree.right != <span class="keyword">null</span>)</div><div class="line"><span class="number">190</span>             tree = tree.right;</div><div class="line"><span class="number">191</span>         <span class="keyword">return</span> tree;</div><div class="line"><span class="number">192</span>     &#125;</div><div class="line"><span class="number">193</span> </div><div class="line"><span class="number">194</span>     <span class="function"><span class="keyword">public</span> T <span class="title">maximum</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">195</span>         RBTNode&lt;T&gt; p = maximum(mRoot);</div><div class="line"><span class="number">196</span>         <span class="keyword">if</span> (p != <span class="keyword">null</span>)</div><div class="line"><span class="number">197</span>             <span class="keyword">return</span> p.key;</div><div class="line"><span class="number">198</span> </div><div class="line"><span class="number">199</span>         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">200</span>     &#125;</div><div class="line"><span class="number">201</span> </div><div class="line"><span class="number">202</span>     <span class="comment">/* </span></div><div class="line">203      * 找结点(x)的后继结点。即，查找"红黑树中数据值大于该结点"的"最小结点"。</div><div class="line">204      */</div><div class="line"><span class="number">205</span>     <span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">successor</span><span class="params">(RBTNode&lt;T&gt; x)</span> </span>&#123;</div><div class="line"><span class="number">206</span>         <span class="comment">// 如果x存在右孩子，则"x的后继结点"为 "以其右孩子为根的子树的最小结点"。</span></div><div class="line"><span class="number">207</span>         <span class="keyword">if</span> (x.right != <span class="keyword">null</span>)</div><div class="line"><span class="number">208</span>             <span class="keyword">return</span> minimum(x.right);</div><div class="line"><span class="number">209</span> </div><div class="line"><span class="number">210</span>         <span class="comment">// 如果x没有右孩子。则x有以下两种可能：</span></div><div class="line"><span class="number">211</span>         <span class="comment">// (01) x是"一个左孩子"，则"x的后继结点"为 "它的父结点"。</span></div><div class="line"><span class="number">212</span>         <span class="comment">// (02) x是"一个右孩子"，则查找"x的最低的父结点，并且该父结点要具有左孩子"，找到的这个"最低的父结点"就是"x的后继结点"。</span></div><div class="line"><span class="number">213</span>         RBTNode&lt;T&gt; y = x.parent;</div><div class="line"><span class="number">214</span>         <span class="keyword">while</span> ((y!=<span class="keyword">null</span>) &amp;&amp; (x==y.right)) &#123;</div><div class="line"><span class="number">215</span>             x = y;</div><div class="line"><span class="number">216</span>             y = y.parent;</div><div class="line"><span class="number">217</span>         &#125;</div><div class="line"><span class="number">218</span> </div><div class="line"><span class="number">219</span>         <span class="keyword">return</span> y;</div><div class="line"><span class="number">220</span>     &#125;</div><div class="line"><span class="number">221</span>      </div><div class="line"><span class="number">222</span>     <span class="comment">/* </span></div><div class="line">223      * 找结点(x)的前驱结点。即，查找"红黑树中数据值小于该结点"的"最大结点"。</div><div class="line">224      */</div><div class="line"><span class="number">225</span>     <span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">predecessor</span><span class="params">(RBTNode&lt;T&gt; x)</span> </span>&#123;</div><div class="line"><span class="number">226</span>         <span class="comment">// 如果x存在左孩子，则"x的前驱结点"为 "以其左孩子为根的子树的最大结点"。</span></div><div class="line"><span class="number">227</span>         <span class="keyword">if</span> (x.left != <span class="keyword">null</span>)</div><div class="line"><span class="number">228</span>             <span class="keyword">return</span> maximum(x.left);</div><div class="line"><span class="number">229</span> </div><div class="line"><span class="number">230</span>         <span class="comment">// 如果x没有左孩子。则x有以下两种可能：</span></div><div class="line"><span class="number">231</span>         <span class="comment">// (01) x是"一个右孩子"，则"x的前驱结点"为 "它的父结点"。</span></div><div class="line"><span class="number">232</span>         <span class="comment">// (01) x是"一个左孩子"，则查找"x的最低的父结点，并且该父结点要具有右孩子"，找到的这个"最低的父结点"就是"x的前驱结点"。</span></div><div class="line"><span class="number">233</span>         RBTNode&lt;T&gt; y = x.parent;</div><div class="line"><span class="number">234</span>         <span class="keyword">while</span> ((y!=<span class="keyword">null</span>) &amp;&amp; (x==y.left)) &#123;</div><div class="line"><span class="number">235</span>             x = y;</div><div class="line"><span class="number">236</span>             y = y.parent;</div><div class="line"><span class="number">237</span>         &#125;</div><div class="line"><span class="number">238</span> </div><div class="line"><span class="number">239</span>         <span class="keyword">return</span> y;</div><div class="line"><span class="number">240</span>     &#125;</div><div class="line"><span class="number">241</span> </div><div class="line"><span class="number">242</span>     <span class="comment">/* </span></div><div class="line">243      * 对红黑树的节点(x)进行左旋转</div><div class="line">244      *</div><div class="line">245      * 左旋示意图(对节点x进行左旋)：</div><div class="line">246      *      px                              px</div><div class="line">247      *     /                               /</div><div class="line">248      *    x                               y                </div><div class="line">249      *   /  \      --(左旋)-.           / \                #</div><div class="line">250      *  lx   y                          x  ry     </div><div class="line">251      *     /   \                       /  \</div><div class="line">252      *    ly   ry                     lx  ly  </div><div class="line">253      *</div><div class="line">254      *</div><div class="line">255      */</div><div class="line"><span class="number">256</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T&gt; x)</span> </span>&#123;</div><div class="line"><span class="number">257</span>         <span class="comment">// 设置x的右孩子为y</span></div><div class="line"><span class="number">258</span>         RBTNode&lt;T&gt; y = x.right;</div><div class="line"><span class="number">259</span> </div><div class="line"><span class="number">260</span>         <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></div><div class="line"><span class="number">261</span>         <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></div><div class="line"><span class="number">262</span>         x.right = y.left;</div><div class="line"><span class="number">263</span>         <span class="keyword">if</span> (y.left != <span class="keyword">null</span>)</div><div class="line"><span class="number">264</span>             y.left.parent = x;</div><div class="line"><span class="number">265</span> </div><div class="line"><span class="number">266</span>         <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></div><div class="line"><span class="number">267</span>         y.parent = x.parent;</div><div class="line"><span class="number">268</span> </div><div class="line"><span class="number">269</span>         <span class="keyword">if</span> (x.parent == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">270</span>             <span class="keyword">this</span>.mRoot = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></div><div class="line"><span class="number">271</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">272</span>             <span class="keyword">if</span> (x.parent.left == x)</div><div class="line"><span class="number">273</span>                 x.parent.left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></div><div class="line"><span class="number">274</span>             <span class="keyword">else</span></div><div class="line"><span class="number">275</span>                 x.parent.right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></div><div class="line"><span class="number">276</span>         &#125;</div><div class="line"><span class="number">277</span>         </div><div class="line"><span class="number">278</span>         <span class="comment">// 将 “x” 设为 “y的左孩子”</span></div><div class="line"><span class="number">279</span>         y.left = x;</div><div class="line"><span class="number">280</span>         <span class="comment">// 将 “x的父节点” 设为 “y”</span></div><div class="line"><span class="number">281</span>         x.parent = y;</div><div class="line"><span class="number">282</span>     &#125;</div><div class="line"><span class="number">283</span> </div><div class="line"><span class="number">284</span>     <span class="comment">/* </span></div><div class="line">285      * 对红黑树的节点(y)进行右旋转</div><div class="line">286      *</div><div class="line">287      * 右旋示意图(对节点y进行左旋)：</div><div class="line">288      *            py                               py</div><div class="line">289      *           /                                /</div><div class="line">290      *          y                                x                  </div><div class="line">291      *         /  \      --(右旋)-.            /  \                     #</div><div class="line">292      *        x   ry                           lx   y  </div><div class="line">293      *       / \                                   / \                   #</div><div class="line">294      *      lx  rx                                rx  ry</div><div class="line">295      * </div><div class="line">296      */</div><div class="line"><span class="number">297</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T&gt; y)</span> </span>&#123;</div><div class="line"><span class="number">298</span>         <span class="comment">// 设置x是当前节点的左孩子。</span></div><div class="line"><span class="number">299</span>         RBTNode&lt;T&gt; x = y.left;</div><div class="line"><span class="number">300</span> </div><div class="line"><span class="number">301</span>         <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></div><div class="line"><span class="number">302</span>         <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></div><div class="line"><span class="number">303</span>         y.left = x.right;</div><div class="line"><span class="number">304</span>         <span class="keyword">if</span> (x.right != <span class="keyword">null</span>)</div><div class="line"><span class="number">305</span>             x.right.parent = y;</div><div class="line"><span class="number">306</span> </div><div class="line"><span class="number">307</span>         <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></div><div class="line"><span class="number">308</span>         x.parent = y.parent;</div><div class="line"><span class="number">309</span> </div><div class="line"><span class="number">310</span>         <span class="keyword">if</span> (y.parent == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">311</span>             <span class="keyword">this</span>.mRoot = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></div><div class="line"><span class="number">312</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">313</span>             <span class="keyword">if</span> (y == y.parent.right)</div><div class="line"><span class="number">314</span>                 y.parent.right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></div><div class="line"><span class="number">315</span>             <span class="keyword">else</span></div><div class="line"><span class="number">316</span>                 y.parent.left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></div><div class="line"><span class="number">317</span>         &#125;</div><div class="line"><span class="number">318</span> </div><div class="line"><span class="number">319</span>         <span class="comment">// 将 “y” 设为 “x的右孩子”</span></div><div class="line"><span class="number">320</span>         x.right = y;</div><div class="line"><span class="number">321</span> </div><div class="line"><span class="number">322</span>         <span class="comment">// 将 “y的父节点” 设为 “x”</span></div><div class="line"><span class="number">323</span>         y.parent = x;</div><div class="line"><span class="number">324</span>     &#125;</div><div class="line"><span class="number">325</span> </div><div class="line"><span class="number">326</span>     <span class="comment">/*</span></div><div class="line">327      * 红黑树插入修正函数</div><div class="line">328      *</div><div class="line">329      * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</div><div class="line">330      * 目的是将它重新塑造成一颗红黑树。</div><div class="line">331      *</div><div class="line">332      * 参数说明：</div><div class="line">333      *     node 插入的结点        // 对应《算法导论》中的z</div><div class="line">334      */</div><div class="line"><span class="number">335</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertFixUp</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"><span class="number">336</span>         RBTNode&lt;T&gt; parent, gparent;</div><div class="line"><span class="number">337</span> </div><div class="line"><span class="number">338</span>         <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></div><div class="line"><span class="number">339</span>         <span class="keyword">while</span> (((parent = parentOf(node))!=<span class="keyword">null</span>) &amp;&amp; isRed(parent)) &#123;</div><div class="line"><span class="number">340</span>             gparent = parentOf(parent);</div><div class="line"><span class="number">341</span> </div><div class="line"><span class="number">342</span>             <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></div><div class="line"><span class="number">343</span>             <span class="keyword">if</span> (parent == gparent.left) &#123;</div><div class="line"><span class="number">344</span>                 <span class="comment">// Case 1条件：叔叔节点是红色</span></div><div class="line"><span class="number">345</span>                 RBTNode&lt;T&gt; uncle = gparent.right;</div><div class="line"><span class="number">346</span>                 <span class="keyword">if</span> ((uncle!=<span class="keyword">null</span>) &amp;&amp; isRed(uncle)) &#123;</div><div class="line"><span class="number">347</span>                     setBlack(uncle);</div><div class="line"><span class="number">348</span>                     setBlack(parent);</div><div class="line"><span class="number">349</span>                     setRed(gparent);</div><div class="line"><span class="number">350</span>                     node = gparent;</div><div class="line"><span class="number">351</span>                     <span class="keyword">continue</span>;</div><div class="line"><span class="number">352</span>                 &#125;</div><div class="line"><span class="number">353</span> </div><div class="line"><span class="number">354</span>                 <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></div><div class="line"><span class="number">355</span>                 <span class="keyword">if</span> (parent.right == node) &#123;</div><div class="line"><span class="number">356</span>                     RBTNode&lt;T&gt; tmp;</div><div class="line"><span class="number">357</span>                     leftRotate(parent);</div><div class="line"><span class="number">358</span>                     tmp = parent;</div><div class="line"><span class="number">359</span>                     parent = node;</div><div class="line"><span class="number">360</span>                     node = tmp;</div><div class="line"><span class="number">361</span>                 &#125;</div><div class="line"><span class="number">362</span> </div><div class="line"><span class="number">363</span>                 <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></div><div class="line"><span class="number">364</span>                 setBlack(parent);</div><div class="line"><span class="number">365</span>                 setRed(gparent);</div><div class="line"><span class="number">366</span>                 rightRotate(gparent);</div><div class="line"><span class="number">367</span>             &#125; <span class="keyword">else</span> &#123;    <span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></div><div class="line"><span class="number">368</span>                 <span class="comment">// Case 1条件：叔叔节点是红色</span></div><div class="line"><span class="number">369</span>                 RBTNode&lt;T&gt; uncle = gparent.left;</div><div class="line"><span class="number">370</span>                 <span class="keyword">if</span> ((uncle!=<span class="keyword">null</span>) &amp;&amp; isRed(uncle)) &#123;</div><div class="line"><span class="number">371</span>                     setBlack(uncle);</div><div class="line"><span class="number">372</span>                     setBlack(parent);</div><div class="line"><span class="number">373</span>                     setRed(gparent);</div><div class="line"><span class="number">374</span>                     node = gparent;</div><div class="line"><span class="number">375</span>                     <span class="keyword">continue</span>;</div><div class="line"><span class="number">376</span>                 &#125;</div><div class="line"><span class="number">377</span> </div><div class="line"><span class="number">378</span>                 <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></div><div class="line"><span class="number">379</span>                 <span class="keyword">if</span> (parent.left == node) &#123;</div><div class="line"><span class="number">380</span>                     RBTNode&lt;T&gt; tmp;</div><div class="line"><span class="number">381</span>                     rightRotate(parent);</div><div class="line"><span class="number">382</span>                     tmp = parent;</div><div class="line"><span class="number">383</span>                     parent = node;</div><div class="line"><span class="number">384</span>                     node = tmp;</div><div class="line"><span class="number">385</span>                 &#125;</div><div class="line"><span class="number">386</span> </div><div class="line"><span class="number">387</span>                 <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></div><div class="line"><span class="number">388</span>                 setBlack(parent);</div><div class="line"><span class="number">389</span>                 setRed(gparent);</div><div class="line"><span class="number">390</span>                 leftRotate(gparent);</div><div class="line"><span class="number">391</span>             &#125;</div><div class="line"><span class="number">392</span>         &#125;</div><div class="line"><span class="number">393</span> </div><div class="line"><span class="number">394</span>         <span class="comment">// 将根节点设为黑色</span></div><div class="line"><span class="number">395</span>         setBlack(<span class="keyword">this</span>.mRoot);</div><div class="line"><span class="number">396</span>     &#125;</div><div class="line"><span class="number">397</span> </div><div class="line"><span class="number">398</span>     <span class="comment">/* </span></div><div class="line">399      * 将结点插入到红黑树中</div><div class="line">400      *</div><div class="line">401      * 参数说明：</div><div class="line">402      *     node 插入的结点        // 对应《算法导论》中的node</div><div class="line">403      */</div><div class="line"><span class="number">404</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"><span class="number">405</span>         <span class="keyword">int</span> cmp;</div><div class="line"><span class="number">406</span>         RBTNode&lt;T&gt; y = <span class="keyword">null</span>;</div><div class="line"><span class="number">407</span>         RBTNode&lt;T&gt; x = <span class="keyword">this</span>.mRoot;</div><div class="line"><span class="number">408</span> </div><div class="line"><span class="number">409</span>         <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></div><div class="line"><span class="number">410</span>         <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">411</span>             y = x;</div><div class="line"><span class="number">412</span>             cmp = node.key.compareTo(x.key);</div><div class="line"><span class="number">413</span>             <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line"><span class="number">414</span>                 x = x.left;</div><div class="line"><span class="number">415</span>             <span class="keyword">else</span></div><div class="line"><span class="number">416</span>                 x = x.right;</div><div class="line"><span class="number">417</span>         &#125;</div><div class="line"><span class="number">418</span> </div><div class="line"><span class="number">419</span>         node.parent = y;</div><div class="line"><span class="number">420</span>         <span class="keyword">if</span> (y!=<span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">421</span>             cmp = node.key.compareTo(y.key);</div><div class="line"><span class="number">422</span>             <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line"><span class="number">423</span>                 y.left = node;</div><div class="line"><span class="number">424</span>             <span class="keyword">else</span></div><div class="line"><span class="number">425</span>                 y.right = node;</div><div class="line"><span class="number">426</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">427</span>             <span class="keyword">this</span>.mRoot = node;</div><div class="line"><span class="number">428</span>         &#125;</div><div class="line"><span class="number">429</span> </div><div class="line"><span class="number">430</span>         <span class="comment">// 2. 设置节点的颜色为红色</span></div><div class="line"><span class="number">431</span>         node.color = RED;</div><div class="line"><span class="number">432</span> </div><div class="line"><span class="number">433</span>         <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></div><div class="line"><span class="number">434</span>         insertFixUp(node);</div><div class="line"><span class="number">435</span>     &#125;</div><div class="line"><span class="number">436</span> </div><div class="line"><span class="number">437</span>     <span class="comment">/* </span></div><div class="line">438      * 新建结点(key)，并将其插入到红黑树中</div><div class="line">439      *</div><div class="line">440      * 参数说明：</div><div class="line">441      *     key 插入结点的键值</div><div class="line">442      */</div><div class="line"><span class="number">443</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T key)</span> </span>&#123;</div><div class="line"><span class="number">444</span>         RBTNode&lt;T&gt; node=<span class="keyword">new</span> RBTNode&lt;T&gt;(key,BLACK,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line"><span class="number">445</span> </div><div class="line"><span class="number">446</span>         <span class="comment">// 如果新建结点失败，则返回。</span></div><div class="line"><span class="number">447</span>         <span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line"><span class="number">448</span>             insert(node);</div><div class="line"><span class="number">449</span>     &#125;</div><div class="line"><span class="number">450</span> </div><div class="line"><span class="number">451</span> </div><div class="line"><span class="number">452</span>     <span class="comment">/*</span></div><div class="line">453      * 红黑树删除修正函数</div><div class="line">454      *</div><div class="line">455      * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</div><div class="line">456      * 目的是将它重新塑造成一颗红黑树。</div><div class="line">457      *</div><div class="line">458      * 参数说明：</div><div class="line">459      *     node 待修正的节点</div><div class="line">460      */</div><div class="line"><span class="number">461</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeFixUp</span><span class="params">(RBTNode&lt;T&gt; node, RBTNode&lt;T&gt; parent)</span> </span>&#123;</div><div class="line"><span class="number">462</span>         RBTNode&lt;T&gt; other;</div><div class="line"><span class="number">463</span> </div><div class="line"><span class="number">464</span>         <span class="keyword">while</span> ((node==<span class="keyword">null</span> || isBlack(node)) &amp;&amp; (node != <span class="keyword">this</span>.mRoot)) &#123;</div><div class="line"><span class="number">465</span>             <span class="keyword">if</span> (parent.left == node) &#123;</div><div class="line"><span class="number">466</span>                 other = parent.right;</div><div class="line"><span class="number">467</span>                 <span class="keyword">if</span> (isRed(other)) &#123;</div><div class="line"><span class="number">468</span>                     <span class="comment">// Case 1: x的兄弟w是红色的  </span></div><div class="line"><span class="number">469</span>                     setBlack(other);</div><div class="line"><span class="number">470</span>                     setRed(parent);</div><div class="line"><span class="number">471</span>                     leftRotate(parent);</div><div class="line"><span class="number">472</span>                     other = parent.right;</div><div class="line"><span class="number">473</span>                 &#125;</div><div class="line"><span class="number">474</span> </div><div class="line"><span class="number">475</span>                 <span class="keyword">if</span> ((other.left==<span class="keyword">null</span> || isBlack(other.left)) &amp;&amp;</div><div class="line"><span class="number">476</span>                     (other.right==<span class="keyword">null</span> || isBlack(other.right))) &#123;</div><div class="line"><span class="number">477</span>                     <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></div><div class="line"><span class="number">478</span>                     setRed(other);</div><div class="line"><span class="number">479</span>                     node = parent;</div><div class="line"><span class="number">480</span>                     parent = parentOf(node);</div><div class="line"><span class="number">481</span>                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">482</span> </div><div class="line"><span class="number">483</span>                     <span class="keyword">if</span> (other.right==<span class="keyword">null</span> || isBlack(other.right)) &#123;</div><div class="line"><span class="number">484</span>                         <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></div><div class="line"><span class="number">485</span>                         setBlack(other.left);</div><div class="line"><span class="number">486</span>                         setRed(other);</div><div class="line"><span class="number">487</span>                         rightRotate(other);</div><div class="line"><span class="number">488</span>                         other = parent.right;</div><div class="line"><span class="number">489</span>                     &#125;</div><div class="line"><span class="number">490</span>                     <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></div><div class="line"><span class="number">491</span>                     setColor(other, colorOf(parent));</div><div class="line"><span class="number">492</span>                     setBlack(parent);</div><div class="line"><span class="number">493</span>                     setBlack(other.right);</div><div class="line"><span class="number">494</span>                     leftRotate(parent);</div><div class="line"><span class="number">495</span>                     node = <span class="keyword">this</span>.mRoot;</div><div class="line"><span class="number">496</span>                     <span class="keyword">break</span>;</div><div class="line"><span class="number">497</span>                 &#125;</div><div class="line"><span class="number">498</span>             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">499</span> </div><div class="line"><span class="number">500</span>                 other = parent.left;</div><div class="line"><span class="number">501</span>                 <span class="keyword">if</span> (isRed(other)) &#123;</div><div class="line"><span class="number">502</span>                     <span class="comment">// Case 1: x的兄弟w是红色的  </span></div><div class="line"><span class="number">503</span>                     setBlack(other);</div><div class="line"><span class="number">504</span>                     setRed(parent);</div><div class="line"><span class="number">505</span>                     rightRotate(parent);</div><div class="line"><span class="number">506</span>                     other = parent.left;</div><div class="line"><span class="number">507</span>                 &#125;</div><div class="line"><span class="number">508</span> </div><div class="line"><span class="number">509</span>                 <span class="keyword">if</span> ((other.left==<span class="keyword">null</span> || isBlack(other.left)) &amp;&amp;</div><div class="line"><span class="number">510</span>                     (other.right==<span class="keyword">null</span> || isBlack(other.right))) &#123;</div><div class="line"><span class="number">511</span>                     <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></div><div class="line"><span class="number">512</span>                     setRed(other);</div><div class="line"><span class="number">513</span>                     node = parent;</div><div class="line"><span class="number">514</span>                     parent = parentOf(node);</div><div class="line"><span class="number">515</span>                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">516</span> </div><div class="line"><span class="number">517</span>                     <span class="keyword">if</span> (other.left==<span class="keyword">null</span> || isBlack(other.left)) &#123;</div><div class="line"><span class="number">518</span>                         <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></div><div class="line"><span class="number">519</span>                         setBlack(other.right);</div><div class="line"><span class="number">520</span>                         setRed(other);</div><div class="line"><span class="number">521</span>                         leftRotate(other);</div><div class="line"><span class="number">522</span>                         other = parent.left;</div><div class="line"><span class="number">523</span>                     &#125;</div><div class="line"><span class="number">524</span> </div><div class="line"><span class="number">525</span>                     <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></div><div class="line"><span class="number">526</span>                     setColor(other, colorOf(parent));</div><div class="line"><span class="number">527</span>                     setBlack(parent);</div><div class="line"><span class="number">528</span>                     setBlack(other.left);</div><div class="line"><span class="number">529</span>                     rightRotate(parent);</div><div class="line"><span class="number">530</span>                     node = <span class="keyword">this</span>.mRoot;</div><div class="line"><span class="number">531</span>                     <span class="keyword">break</span>;</div><div class="line"><span class="number">532</span>                 &#125;</div><div class="line"><span class="number">533</span>             &#125;</div><div class="line"><span class="number">534</span>         &#125;</div><div class="line"><span class="number">535</span> </div><div class="line"><span class="number">536</span>         <span class="keyword">if</span> (node!=<span class="keyword">null</span>)</div><div class="line"><span class="number">537</span>             setBlack(node);</div><div class="line"><span class="number">538</span>     &#125;</div><div class="line"><span class="number">539</span> </div><div class="line"><span class="number">540</span>     <span class="comment">/* </span></div><div class="line">541      * 删除结点(node)，并返回被删除的结点</div><div class="line">542      *</div><div class="line">543      * 参数说明：</div><div class="line">544      *     node 删除的结点</div><div class="line">545      */</div><div class="line"><span class="number">546</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line"><span class="number">547</span>         RBTNode&lt;T&gt; child, parent;</div><div class="line"><span class="number">548</span>         <span class="keyword">boolean</span> color;</div><div class="line"><span class="number">549</span> </div><div class="line"><span class="number">550</span>         <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></div><div class="line"><span class="number">551</span>         <span class="keyword">if</span> ( (node.left!=<span class="keyword">null</span>) &amp;&amp; (node.right!=<span class="keyword">null</span>) ) &#123;</div><div class="line"><span class="number">552</span>             <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></div><div class="line"><span class="number">553</span>             <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></div><div class="line"><span class="number">554</span>             RBTNode&lt;T&gt; replace = node;</div><div class="line"><span class="number">555</span> </div><div class="line"><span class="number">556</span>             <span class="comment">// 获取后继节点</span></div><div class="line"><span class="number">557</span>             replace = replace.right;</div><div class="line"><span class="number">558</span>             <span class="keyword">while</span> (replace.left != <span class="keyword">null</span>)</div><div class="line"><span class="number">559</span>                 replace = replace.left;</div><div class="line"><span class="number">560</span> </div><div class="line"><span class="number">561</span>             <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></div><div class="line"><span class="number">562</span>             <span class="keyword">if</span> (parentOf(node)!=<span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">563</span>                 <span class="keyword">if</span> (parentOf(node).left == node)</div><div class="line"><span class="number">564</span>                     parentOf(node).left = replace;</div><div class="line"><span class="number">565</span>                 <span class="keyword">else</span></div><div class="line"><span class="number">566</span>                     parentOf(node).right = replace;</div><div class="line"><span class="number">567</span>             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">568</span>                 <span class="comment">// "node节点"是根节点，更新根节点。</span></div><div class="line"><span class="number">569</span>                 <span class="keyword">this</span>.mRoot = replace;</div><div class="line"><span class="number">570</span>             &#125;</div><div class="line"><span class="number">571</span> </div><div class="line"><span class="number">572</span>             <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></div><div class="line"><span class="number">573</span>             <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></div><div class="line"><span class="number">574</span>             child = replace.right;</div><div class="line"><span class="number">575</span>             parent = parentOf(replace);</div><div class="line"><span class="number">576</span>             <span class="comment">// 保存"取代节点"的颜色</span></div><div class="line"><span class="number">577</span>             color = colorOf(replace);</div><div class="line"><span class="number">578</span> </div><div class="line"><span class="number">579</span>             <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></div><div class="line"><span class="number">580</span>             <span class="keyword">if</span> (parent == node) &#123;</div><div class="line"><span class="number">581</span>                 parent = replace;</div><div class="line"><span class="number">582</span>             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">583</span>                 <span class="comment">// child不为空</span></div><div class="line"><span class="number">584</span>                 <span class="keyword">if</span> (child!=<span class="keyword">null</span>)</div><div class="line"><span class="number">585</span>                     setParent(child, parent);</div><div class="line"><span class="number">586</span>                 parent.left = child;</div><div class="line"><span class="number">587</span> </div><div class="line"><span class="number">588</span>                 replace.right = node.right;</div><div class="line"><span class="number">589</span>                 setParent(node.right, replace);</div><div class="line"><span class="number">590</span>             &#125;</div><div class="line"><span class="number">591</span> </div><div class="line"><span class="number">592</span>             replace.parent = node.parent;</div><div class="line"><span class="number">593</span>             replace.color = node.color;</div><div class="line"><span class="number">594</span>             replace.left = node.left;</div><div class="line"><span class="number">595</span>             node.left.parent = replace;</div><div class="line"><span class="number">596</span> </div><div class="line"><span class="number">597</span>             <span class="keyword">if</span> (color == BLACK)</div><div class="line"><span class="number">598</span>                 removeFixUp(child, parent);</div><div class="line"><span class="number">599</span> </div><div class="line"><span class="number">600</span>             node = <span class="keyword">null</span>;</div><div class="line"><span class="number">601</span>             <span class="keyword">return</span> ;</div><div class="line"><span class="number">602</span>         &#125;</div><div class="line"><span class="number">603</span> </div><div class="line"><span class="number">604</span>         <span class="keyword">if</span> (node.left !=<span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">605</span>             child = node.left;</div><div class="line"><span class="number">606</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">607</span>             child = node.right;</div><div class="line"><span class="number">608</span>         &#125;</div><div class="line"><span class="number">609</span> </div><div class="line"><span class="number">610</span>         parent = node.parent;</div><div class="line"><span class="number">611</span>         <span class="comment">// 保存"取代节点"的颜色</span></div><div class="line"><span class="number">612</span>         color = node.color;</div><div class="line"><span class="number">613</span> </div><div class="line"><span class="number">614</span>         <span class="keyword">if</span> (child!=<span class="keyword">null</span>)</div><div class="line"><span class="number">615</span>             child.parent = parent;</div><div class="line"><span class="number">616</span> </div><div class="line"><span class="number">617</span>         <span class="comment">// "node节点"不是根节点</span></div><div class="line"><span class="number">618</span>         <span class="keyword">if</span> (parent!=<span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">619</span>             <span class="keyword">if</span> (parent.left == node)</div><div class="line"><span class="number">620</span>                 parent.left = child;</div><div class="line"><span class="number">621</span>             <span class="keyword">else</span></div><div class="line"><span class="number">622</span>                 parent.right = child;</div><div class="line"><span class="number">623</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">624</span>             <span class="keyword">this</span>.mRoot = child;</div><div class="line"><span class="number">625</span>         &#125;</div><div class="line"><span class="number">626</span> </div><div class="line"><span class="number">627</span>         <span class="keyword">if</span> (color == BLACK)</div><div class="line"><span class="number">628</span>             removeFixUp(child, parent);</div><div class="line"><span class="number">629</span>         node = <span class="keyword">null</span>;</div><div class="line"><span class="number">630</span>     &#125;</div><div class="line"><span class="number">631</span> </div><div class="line"><span class="number">632</span>     <span class="comment">/* </span></div><div class="line">633      * 删除结点(z)，并返回被删除的结点</div><div class="line">634      *</div><div class="line">635      * 参数说明：</div><div class="line">636      *     tree 红黑树的根结点</div><div class="line">637      *     z 删除的结点</div><div class="line">638      */</div><div class="line"><span class="number">639</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T key)</span> </span>&#123;</div><div class="line"><span class="number">640</span>         RBTNode&lt;T&gt; node; </div><div class="line"><span class="number">641</span> </div><div class="line"><span class="number">642</span>         <span class="keyword">if</span> ((node = search(mRoot, key)) != <span class="keyword">null</span>)</div><div class="line"><span class="number">643</span>             remove(node);</div><div class="line"><span class="number">644</span>     &#125;</div><div class="line"><span class="number">645</span> </div><div class="line"><span class="number">646</span>     <span class="comment">/*</span></div><div class="line">647      * 销毁红黑树</div><div class="line">648      */</div><div class="line"><span class="number">649</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line"><span class="number">650</span>         <span class="keyword">if</span> (tree==<span class="keyword">null</span>)</div><div class="line"><span class="number">651</span>             <span class="keyword">return</span> ;</div><div class="line"><span class="number">652</span> </div><div class="line"><span class="number">653</span>         <span class="keyword">if</span> (tree.left != <span class="keyword">null</span>)</div><div class="line"><span class="number">654</span>             destroy(tree.left);</div><div class="line"><span class="number">655</span>         <span class="keyword">if</span> (tree.right != <span class="keyword">null</span>)</div><div class="line"><span class="number">656</span>             destroy(tree.right);</div><div class="line"><span class="number">657</span> </div><div class="line"><span class="number">658</span>         tree=<span class="keyword">null</span>;</div><div class="line"><span class="number">659</span>     &#125;</div><div class="line"><span class="number">660</span> </div><div class="line"><span class="number">661</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">662</span>         destroy(mRoot);</div><div class="line"><span class="number">663</span>         mRoot = <span class="keyword">null</span>;</div><div class="line"><span class="number">664</span>     &#125;</div><div class="line"><span class="number">665</span> </div><div class="line"><span class="number">666</span>     <span class="comment">/*</span></div><div class="line">667      * 打印"红黑树"</div><div class="line">668      *</div><div class="line">669      * key        -- 节点的键值 </div><div class="line">670      * direction  --  0，表示该节点是根节点;</div><div class="line">671      *               -1，表示该节点是它的父结点的左孩子;</div><div class="line">672      *                1，表示该节点是它的父结点的右孩子。</div><div class="line">673      */</div><div class="line"><span class="number">674</span>     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(RBTNode&lt;T&gt; tree, T key, <span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line"><span class="number">675</span> </div><div class="line"><span class="number">676</span>         <span class="keyword">if</span>(tree != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">677</span> </div><div class="line"><span class="number">678</span>             <span class="keyword">if</span>(direction==<span class="number">0</span>)    <span class="comment">// tree是根节点</span></div><div class="line"><span class="number">679</span>                 System.out.printf(<span class="string">"%2d(B) is root\n"</span>, tree.key);</div><div class="line"><span class="number">680</span>             <span class="keyword">else</span>                <span class="comment">// tree是分支节点</span></div><div class="line"><span class="number">681</span>                 System.out.printf(<span class="string">"%2d(%s) is %2d's %6s child\n"</span>, tree.key, isRed(tree)?<span class="string">"R"</span>:<span class="string">"B"</span>, key, direction==<span class="number">1</span>?<span class="string">"right"</span> : <span class="string">"left"</span>);</div><div class="line"><span class="number">682</span> </div><div class="line"><span class="number">683</span>             print(tree.left, tree.key, -<span class="number">1</span>);</div><div class="line"><span class="number">684</span>             print(tree.right,tree.key,  <span class="number">1</span>);</div><div class="line"><span class="number">685</span>         &#125;</div><div class="line"><span class="number">686</span>     &#125;</div><div class="line"><span class="number">687</span> </div><div class="line"><span class="number">688</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">689</span>         <span class="keyword">if</span> (mRoot != <span class="keyword">null</span>)</div><div class="line"><span class="number">690</span>             print(mRoot, mRoot.key, <span class="number">0</span>);</div><div class="line"><span class="number">691</span>     &#125;</div><div class="line"><span class="number">692</span> &#125;</div></pre></td></tr></table></figure>
<p>红黑树的测试文件(RBTreeTest.java)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"> 2  * Java 语言: 二叉查找树</div><div class="line"> 3  *</div><div class="line"> 4  * <span class="doctag">@author</span> skywang</div><div class="line"> 5  * <span class="doctag">@date</span> 2013/11/07</div><div class="line"> 6  */</div><div class="line"> <span class="number">7</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTreeTest</span> </span>&#123;</div><div class="line"> <span class="number">8</span> </div><div class="line"> <span class="number">9</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a[] = &#123;<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">90</span>, <span class="number">70</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">80</span>&#125;;</div><div class="line"><span class="number">10</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mDebugInsert = <span class="keyword">false</span>;    <span class="comment">// "插入"动作的检测开关(false，关闭；true，打开)</span></div><div class="line"><span class="number">11</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mDebugDelete = <span class="keyword">false</span>;    <span class="comment">// "删除"动作的检测开关(false，关闭；true，打开)</span></div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="number">14</span>         <span class="keyword">int</span> i, ilen = a.length;</div><div class="line"><span class="number">15</span>         RBTree&lt;Integer&gt; tree=<span class="keyword">new</span> RBTree&lt;Integer&gt;();</div><div class="line"><span class="number">16</span> </div><div class="line"><span class="number">17</span>         System.out.printf(<span class="string">"== 原始数据: "</span>);</div><div class="line"><span class="number">18</span>         <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ilen; i++)</div><div class="line"><span class="number">19</span>             System.out.printf(<span class="string">"%d "</span>, a[i]);</div><div class="line"><span class="number">20</span>         System.out.printf(<span class="string">"\n"</span>);</div><div class="line"><span class="number">21</span> </div><div class="line"><span class="number">22</span>         <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ilen; i++) &#123;</div><div class="line"><span class="number">23</span>             tree.insert(a[i]);</div><div class="line"><span class="number">24</span>             <span class="comment">// 设置mDebugInsert=true,测试"添加函数"</span></div><div class="line"><span class="number">25</span>             <span class="keyword">if</span> (mDebugInsert) &#123;</div><div class="line"><span class="number">26</span>                 System.out.printf(<span class="string">"== 添加节点: %d\n"</span>, a[i]);</div><div class="line"><span class="number">27</span>                 System.out.printf(<span class="string">"== 树的详细信息: \n"</span>);</div><div class="line"><span class="number">28</span>                 tree.print();</div><div class="line"><span class="number">29</span>                 System.out.printf(<span class="string">"\n"</span>);</div><div class="line"><span class="number">30</span>             &#125;</div><div class="line"><span class="number">31</span>         &#125;</div><div class="line"><span class="number">32</span> </div><div class="line"><span class="number">33</span>         System.out.printf(<span class="string">"== 前序遍历: "</span>);</div><div class="line"><span class="number">34</span>         tree.preOrder();</div><div class="line"><span class="number">35</span> </div><div class="line"><span class="number">36</span>         System.out.printf(<span class="string">"\n== 中序遍历: "</span>);</div><div class="line"><span class="number">37</span>         tree.inOrder();</div><div class="line"><span class="number">38</span> </div><div class="line"><span class="number">39</span>         System.out.printf(<span class="string">"\n== 后序遍历: "</span>);</div><div class="line"><span class="number">40</span>         tree.postOrder();</div><div class="line"><span class="number">41</span>         System.out.printf(<span class="string">"\n"</span>);</div><div class="line"><span class="number">42</span> </div><div class="line"><span class="number">43</span>         System.out.printf(<span class="string">"== 最小值: %s\n"</span>, tree.minimum());</div><div class="line"><span class="number">44</span>         System.out.printf(<span class="string">"== 最大值: %s\n"</span>, tree.maximum());</div><div class="line"><span class="number">45</span>         System.out.printf(<span class="string">"== 树的详细信息: \n"</span>);</div><div class="line"><span class="number">46</span>         tree.print();</div><div class="line"><span class="number">47</span>         System.out.printf(<span class="string">"\n"</span>);</div><div class="line"><span class="number">48</span> </div><div class="line"><span class="number">49</span>         <span class="comment">// 设置mDebugDelete=true,测试"删除函数"</span></div><div class="line"><span class="number">50</span>         <span class="keyword">if</span> (mDebugDelete) &#123;</div><div class="line"><span class="number">51</span>             <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ilen; i++)</div><div class="line"><span class="number">52</span>             &#123;</div><div class="line"><span class="number">53</span>                 tree.remove(a[i]);</div><div class="line"><span class="number">54</span> </div><div class="line"><span class="number">55</span>                 System.out.printf(<span class="string">"== 删除节点: %d\n"</span>, a[i]);</div><div class="line"><span class="number">56</span>                 System.out.printf(<span class="string">"== 树的详细信息: \n"</span>);</div><div class="line"><span class="number">57</span>                 tree.print();</div><div class="line"><span class="number">58</span>                 System.out.printf(<span class="string">"\n"</span>);</div><div class="line"><span class="number">59</span>             &#125;</div><div class="line"><span class="number">60</span>         &#125;</div><div class="line"><span class="number">61</span> </div><div class="line"><span class="number">62</span>         <span class="comment">// 销毁二叉树</span></div><div class="line"><span class="number">63</span>         tree.clear();</div><div class="line"><span class="number">64</span>     &#125;</div><div class="line"><span class="number">65</span> &#125;</div></pre></td></tr></table></figure>
<h3 id="红黑树的Java测试程序"><a href="#红黑树的Java测试程序" class="headerlink" title="红黑树的Java测试程序"></a><strong>红黑树的Java测试程序</strong></h3><p>前面已经给出了红黑树的测试代码(RBTreeTest.java)，这里就不再重复说明。下面是测试程序的运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">== 原始数据: 10 40 30 60 90 70 20 50 80 </div><div class="line">== 前序遍历: 30 10 20 60 40 50 80 70 90 </div><div class="line">== 中序遍历: 10 20 30 40 50 60 70 80 90 </div><div class="line">== 后序遍历: 20 10 50 40 70 90 80 60 30 </div><div class="line">== 最小值: 10</div><div class="line">== 最大值: 90</div><div class="line">== 树的详细信息: </div><div class="line">30(B) is root</div><div class="line">10(B) is 30&apos;s   left child</div><div class="line">20(R) is 10&apos;s  right child</div><div class="line">60(R) is 30&apos;s  right child</div><div class="line">40(B) is 60&apos;s   left child</div><div class="line">50(R) is 40&apos;s  right child</div><div class="line">80(B) is 60&apos;s  right child</div><div class="line">70(R) is 80&apos;s   left child</div><div class="line">90(R) is 80&apos;s  right child</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 红黑树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Map 用法、遍历、排序和常用 API]]></title>
      <url>/2018/06/03/Java%20Map%20%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Java-map-用法、遍历、排序和常用API"><a href="#Java-map-用法、遍历、排序和常用API" class="headerlink" title="Java map 用法、遍历、排序和常用API"></a>Java map 用法、遍历、排序和常用API</h1><p>java.util 中的集合类包含 Java 中某些最常用的类。最常用的集合类是 List 和 Map。</p>
<p>Map 提供了一个更通用的元素存储方法。Map 集合类用于存储元素对（称作“键”和“值”），其中每个键映射到一个值。</p>
<p>本文主要介绍java map的初始化、用法、map的四种常用的遍历方式、map的排序以及常用api。</p>
<h2 id="Map用法"><a href="#Map用法" class="headerlink" title="Map用法"></a>Map用法</h2><h3 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h3><p>Java 自带了各种 Map 类。这些 Map 类可归为三种类型：</p>
<ol>
<li>通用Map，用于在应用程序中管理映射，通常在 java.util 程序包中实现HashMap、Hashtable、Properties、LinkedHashMap、IdentityHashMap、TreeMap、WeakHashMap、ConcurrentHashMap</li>
<li>专用Map，通常我们不必亲自创建此类Map，而是通过某些其他类对其进行访 <strong>java.util.jar.Attributes、 javax.print.attribute.standard.PrinterStateReasons、 java.security.Provider、 java.awt.RenderingHints、 javax.swing.UIDefaults</strong></li>
<li>一个用于帮助我们实现自己的Map类的抽象类 <strong>AbstractMap</strong></li>
</ol>
<h3 id="类型区别"><a href="#类型区别" class="headerlink" title="类型区别"></a>类型区别</h3><p><strong>HashMap</strong></p>
<p>最常用的 Map ,它根据键的  HashCode  值存储数据,根据键可以直接获取它的值，具有很快的访问速度。HashMap 最多只允许一条记录的键为 Null(多条会覆盖);不允许多条记录的值为 Null。非同步的。</p>
<p><strong>TreeMap</strong></p>
<p>能够把它保存的记录根据键(key)排序,默认是按升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。<br><strong>Hashtable</strong></p>
<p>与 HashMap类似,不同的是:key和value的值均不允许为null;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了Hashtale在写入时会比较慢。<br><strong>LinkedHashMap</strong></p>
<p>保存了记录的插入顺序，在用 Iterator 遍历 LinkedHashMap 时，先得到的记录肯定是先插入的.在遍历的时候会比 HashMap 慢。key 和 value 均允许为空，非同步的。 </p>
<h2 id="四种常用Map插入与读取性能比较"><a href="#四种常用Map插入与读取性能比较" class="headerlink" title="四种常用Map插入与读取性能比较"></a>四种常用Map插入与读取性能比较</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>jdk1.7.0_80</p>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><table>
<thead>
<tr>
<th></th>
<th>插入10次平均(ms)</th>
<th>读取10次平均(ms)</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1W</td>
<td>10W</td>
<td>100W</td>
<td>1W</td>
<td>10W</td>
<td>100W</td>
</tr>
<tr>
<td>HashMap</td>
<td>56</td>
<td>261</td>
<td><strong>3030</strong></td>
<td><strong>2</strong></td>
<td>21</td>
<td>220</td>
</tr>
<tr>
<td>LinkedHashMap</td>
<td>25</td>
<td><strong>229</strong></td>
<td>3069</td>
<td><strong>2</strong></td>
<td><strong>20</strong></td>
<td><strong>216</strong></td>
</tr>
<tr>
<td>TreeMap</td>
<td>29</td>
<td>295</td>
<td>4117</td>
<td>5</td>
<td>103</td>
<td>1446</td>
</tr>
<tr>
<td>Hashtable</td>
<td><strong>24</strong></td>
<td>234</td>
<td>3275</td>
<td><strong>2</strong></td>
<td>22</td>
<td>259</td>
</tr>
</tbody>
</table>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashMapW = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashMapR = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> linkMapW = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> linkMapR = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> treeMapW = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> treeMapR = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashTableW = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashTableR = <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            Test test = <span class="keyword">new</span> Test();</div><div class="line">            test.test(<span class="number">100</span> * <span class="number">10000</span>);</div><div class="line">            System.out.println();</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        System.out.println(<span class="string">"hashMapW = "</span> + hashMapW / <span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"hashMapR = "</span> + hashMapR / <span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"linkMapW = "</span> + linkMapW / <span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"linkMapR = "</span> + linkMapR / <span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"treeMapW = "</span> + treeMapW / <span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"treeMapR = "</span> + treeMapR / <span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"hashTableW = "</span> + hashTableW / <span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"hashTableR = "</span> + hashTableR / <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index;</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        String[] key = <span class="keyword">new</span> String[size];</div><div class="line"> </div><div class="line">        <span class="comment">// HashMap 插入</span></div><div class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            key[i] = UUID.randomUUID().toString();</div><div class="line">            map.put(key[i], UUID.randomUUID().toString());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        hashMapW += (end - start);</div><div class="line">        System.out.println(<span class="string">"HashMap插入耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// HashMap 读取</span></div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            index = random.nextInt(size);</div><div class="line">            map.get(key[index]);</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        hashMapR += (end - start);</div><div class="line">        System.out.println(<span class="string">"HashMap读取耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// LinkedHashMap 插入</span></div><div class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            key[i] = UUID.randomUUID().toString();</div><div class="line">            map.put(key[i], UUID.randomUUID().toString());</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        linkMapW += (end - start);</div><div class="line">        System.out.println(<span class="string">"LinkedHashMap插入耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// LinkedHashMap 读取</span></div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            index = random.nextInt(size);</div><div class="line">            map.get(key[index]);</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        linkMapR += (end - start);</div><div class="line">        System.out.println(<span class="string">"LinkedHashMap读取耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// TreeMap 插入</span></div><div class="line">        key = <span class="keyword">new</span> String[size];</div><div class="line">        map = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            key[i] = UUID.randomUUID().toString();</div><div class="line">            map.put(key[i], UUID.randomUUID().toString());</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        treeMapW += (end - start);</div><div class="line">        System.out.println(<span class="string">"TreeMap插入耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// TreeMap 读取</span></div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            index = random.nextInt(size);</div><div class="line">            map.get(key[index]);</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        treeMapR += (end - start);</div><div class="line">        System.out.println(<span class="string">"TreeMap读取耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// Hashtable 插入</span></div><div class="line">        key = <span class="keyword">new</span> String[size];</div><div class="line">        map = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            key[i] = UUID.randomUUID().toString();</div><div class="line">            map.put(key[i], UUID.randomUUID().toString());</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        hashTableW += (end - start);</div><div class="line">        System.out.println(<span class="string">"Hashtable插入耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// Hashtable 读取</span></div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            index = random.nextInt(size);</div><div class="line">            map.get(key[index]);</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        hashTableR += (end - start);</div><div class="line">        System.out.println(<span class="string">"Hashtable读取耗时 = "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Map-遍历"><a href="#Map-遍历" class="headerlink" title="Map 遍历"></a>Map 遍历</h2><h3 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</div><div class="line">map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</div></pre></td></tr></table></figure>
<h3 id="增强for循环遍历"><a href="#增强for循环遍历" class="headerlink" title="增强for循环遍历"></a>增强for循环遍历</h3><p><strong>使用keySet()遍历</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;String&gt; iterator = map.keySet().iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String key = iterator.next();</div><div class="line">    System.out.println(key + <span class="string">"　："</span> + map.get(key));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用entrySet()遍历</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    Map.Entry&lt;String, String&gt; entry = iterator.next();</div><div class="line">    System.out.println(entry.getKey() + <span class="string">"　："</span> + entry.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p><strong>使用keySet()遍历</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;String&gt; iterator = map.keySet().iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String key = iterator.next();</div><div class="line">    System.out.println(key + <span class="string">"　："</span> + map.get(key));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用entrySet()遍历</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    Map.Entry&lt;String, String&gt; entry = iterator.next();</div><div class="line">    System.out.println(entry.getKey() + <span class="string">"　："</span> + entry.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HashMap四种遍历方式性能比较"><a href="#HashMap四种遍历方式性能比较" class="headerlink" title="HashMap四种遍历方式性能比较"></a>HashMap四种遍历方式性能比较</h3><p><strong>比较方式</strong></p>
<p>分别对四种遍历方式进行10W次迭代，比较用时。</p>
<p><strong>代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> net.xsoftlab.baike;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Map.Entry;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 初始化，10W次赋值</span></div><div class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</div><div class="line">            map.put(i, i);</div><div class="line"> </div><div class="line">        <span class="comment">/** 增强for循环，keySet迭代 */</span></div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</div><div class="line">            map.get(key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"增强for循环，keySet迭代 -&gt; "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">/** 增强for循环，entrySet迭代 */</span></div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</div><div class="line">            entry.getKey();</div><div class="line">            entry.getValue();</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"增强for循环，entrySet迭代 -&gt; "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">/** 迭代器，keySet迭代 */</span></div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</div><div class="line">        Integer key;</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            key = iterator.next();</div><div class="line">            map.get(key);</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"迭代器，keySet迭代 -&gt; "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">/** 迭代器，entrySet迭代 */</span></div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; iterator1 = map.entrySet().iterator();</div><div class="line">        Map.Entry&lt;Integer, Integer&gt; entry;</div><div class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</div><div class="line">            entry = iterator1.next();</div><div class="line">            entry.getKey();</div><div class="line">            entry.getValue();</div><div class="line">        &#125;</div><div class="line">        end = System.currentTimeMillis();</div><div class="line"> </div><div class="line">        System.out.println(<span class="string">"迭代器，entrySet迭代 -&gt; "</span> + (end - start) + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行三次，比较结果</strong></p>
<p>第一次</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">增强 <span class="keyword">for</span> 循环 keySet 迭代 -&gt; <span class="number">18</span>ms</div><div class="line">增强 <span class="keyword">for</span> 循环， entrySet - &gt;<span class="number">4</span>ms</div><div class="line">迭代器，keySet 迭代 - &gt;<span class="number">4</span>ms</div><div class="line">迭代器，entrySet 迭代 - &gt;<span class="number">3</span>ms</div></pre></td></tr></table></figure>
<p>第二次</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">增强 <span class="keyword">for</span> 循环 keySet 迭代 -&gt; <span class="number">8</span>ms</div><div class="line">增强 <span class="keyword">for</span> 循环， entrySet - &gt;<span class="number">5</span>ms</div><div class="line">迭代器，keySet 迭代 - &gt;<span class="number">5</span>ms</div><div class="line">迭代器，entrySet 迭代 - &gt;<span class="number">4</span>ms</div></pre></td></tr></table></figure>
<p>第三次</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">增强 <span class="keyword">for</span> 循环 keySet 迭代 -&gt; <span class="number">30</span>ms</div><div class="line">增强 <span class="keyword">for</span> 循环， entrySet - &gt;<span class="number">38</span>ms</div><div class="line">迭代器，keySet 迭代 - &gt;<span class="number">7</span>ms</div><div class="line">迭代器，entrySet 迭代 - &gt;<span class="number">2</span>ms</div></pre></td></tr></table></figure>
<p>平均值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">增强<span class="keyword">for</span>循环，keySet迭代 -&gt; <span class="number">31</span> ms</div><div class="line">增强<span class="keyword">for</span>循环，entrySet迭代 -&gt; <span class="number">20</span> ms</div><div class="line">迭代器，keySet迭代 -&gt; <span class="number">17</span> ms</div><div class="line">迭代器，entrySet迭代 -&gt; <span class="number">10.33</span> ms</div></pre></td></tr></table></figure>
<p>总结</p>
<ol>
<li>增强for循环使用方便，但性能较差，不适合处理超大量级的数据。</li>
<li>迭代器的遍历速度要比增强for循环快很多，是增强for循环的2倍左右。</li>
<li>使用entrySet遍历的速度要比keySet快很多，是keySet的1.5倍左右。</li>
</ol>
<h2 id="Map-排序"><a href="#Map-排序" class="headerlink" title="Map 排序"></a>Map 排序</h2><h3 id="HashMap、Hashtable、LinkedHashMap-排序"><a href="#HashMap、Hashtable、LinkedHashMap-排序" class="headerlink" title="HashMap、Hashtable、LinkedHashMap 排序"></a>HashMap、Hashtable、LinkedHashMap 排序</h3><p><strong>注：</strong></p>
<p>TreeMap 也可以使用此方法进行排序，但是更推荐下面的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">map.put(<span class="string">"a"</span>, <span class="string">"c"</span>);</div><div class="line">map.put(<span class="string">"b"</span>, <span class="string">"b"</span>);</div><div class="line">map.put(<span class="string">"c"</span>, <span class="string">"a"</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 通过ArrayList构造函数把map.entrySet()转换成list</span></div><div class="line">List&lt;Map.Entry&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(map.entrySet());</div><div class="line"><span class="comment">// 通过比较器实现比较排序</span></div><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;String, String&gt; mapping1, Map.Entry&lt;String, String&gt; mapping2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mapping1.getKey().compareTo(mapping2.getKey());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; mapping : list) &#123;</div><div class="line">    System.out.println(mapping.getKey() + <span class="string">" ："</span> + mapping.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="TreeMap排序"><a href="#TreeMap排序" class="headerlink" title="TreeMap排序"></a>TreeMap排序</h3><p>TreeMap默认按key进行升序排序，如果想改变默认的顺序，可以使用比较器:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> TreeMap&lt;String, String&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String obj1, String obj2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj2.compareTo(obj1);<span class="comment">// 降序排序</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">map.put(<span class="string">"a"</span>, <span class="string">"c"</span>);</div><div class="line">map.put(<span class="string">"b"</span>, <span class="string">"b"</span>);</div><div class="line">map.put(<span class="string">"c"</span>, <span class="string">"a"</span>);</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">    System.out.println(key + <span class="string">" ："</span> + map.get(key));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="按value排序-通用"><a href="#按value排序-通用" class="headerlink" title="按value排序(通用)"></a>按value排序(通用)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</div><div class="line">        map.put(<span class="string">"a"</span>, <span class="string">"c"</span>);</div><div class="line">        map.put(<span class="string">"b"</span>, <span class="string">"b"</span>);</div><div class="line">        map.put(<span class="string">"c"</span>, <span class="string">"a"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// 通过ArrayList构造函数把map.entrySet()转换成list</span></div><div class="line">        List&lt;Map.Entry&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(map.entrySet());</div><div class="line">        <span class="comment">// 通过比较器实现比较排序</span></div><div class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;String, String&gt; mapping1, Map.Entry&lt;String, String&gt; mapping2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> mapping1.getValue().compareTo(mapping2.getValue());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">            System.out.println(key + <span class="string">" ："</span> + map.get(key));</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><table>
<thead>
<tr>
<th>clear()</th>
<th>从 Map 中删除所有映射</th>
</tr>
</thead>
<tbody>
<tr>
<td>remove(Object key)</td>
<td>从 Map 中删除键和关联的值</td>
</tr>
<tr>
<td>put(Object key, Object value)</td>
<td>将指定值与指定键相关联</td>
</tr>
<tr>
<td>putAll(Map t)</td>
<td>将指定 Map 中的所有映射复制到此 map</td>
</tr>
<tr>
<td>entrySet()</td>
<td>返回 Map 中所包含映射的 Set 视图。Set 中的每个元素都是一个 Map.Entry 对象，可以使用 getKey() 和 getValue() 方法（还有一个 setValue() 方法）访问后者的键元素和值元素</td>
</tr>
<tr>
<td>keySet()</td>
<td>返回 Map 中所包含键的 Set 视图。删除 Set 中的元素还将删除 Map 中相应的映射（键和值）</td>
</tr>
<tr>
<td>values()</td>
<td>返回 map 中所包含值的 Collection 视图。删除 Collection 中的元素还将删除 Map 中相应的映射（键和值）</td>
</tr>
<tr>
<td>get(Object key)</td>
<td>返回与指定键关联的值</td>
</tr>
<tr>
<td>containsKey(Object key)</td>
<td>如果 Map 包含指定键的映射，则返回 true</td>
</tr>
<tr>
<td>containsValue(Object value)</td>
<td>如果此 Map 将一个或多个键映射到指定值，则返回 true</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>如果 Map 不包含键-值映射，则返回 true</td>
</tr>
<tr>
<td>size()</td>
<td>返回 Map 中的键-值映射的数目</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Map </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ConcurrentHashMap 源码解读]]></title>
      <url>/2018/06/03/Java%208%20ConcurrentHashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h1 id="Java-8-ConcurrentHashMap-源码解读"><a href="#Java-8-ConcurrentHashMap-源码解读" class="headerlink" title="Java 8 ConcurrentHashMap 源码解读"></a>Java 8 ConcurrentHashMap 源码解读</h1><p> <strong>ConcurrentHashMap</strong> 当之无愧是支持并发最好的键值对（Map）集合。在日常编码中，出场率也相当之高。在jdk8中，集合类 ConcurrentHashMap 经 <em>Doug Lea</em> 大师之手，借助volatile语义以及CAS操作进行优化，使得该集合类更好地发挥出了并发的优势。与jdk7中相比，在原有段锁（Segment）的基础上，引入了数组＋链表＋红黑树的存储模型，在查询效率上花费了不少心思。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/93aB6f3iC1.png" alt="mark"></p>
<h2 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h2><p>ConcurrentHashMap内存存储结构图大致如下：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/g3HD7ABdjH.png" alt="mark"></p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1、设计首要目的：维护并发可读性（get、迭代相关）；次要目的：使空间消耗比HashMap相同或更好，且支持多线程高效率的初始插入（empty table）。</p>
<p>2、HashTable线程安全，但采用synchronized，多线程下效率低下。线程1put时，线程2无法put或get。</p>
<h3 id="阅前了解"><a href="#阅前了解" class="headerlink" title="阅前了解"></a>阅前了解</h3><p>在真正阅读 ConcurrentHashMap 源码之前，我们简单复习下关于volatile和CAS的概念，这样才能更好地帮助我们理解源码中的关键方法。</p>
<h4 id="volatile语义"><a href="#volatile语义" class="headerlink" title="volatile语义"></a>volatile语义</h4><p>java提供的关键字volatile是最轻量级的同步机制。当定义一个变量为volatile时，它就具备了三层语义： - 可见性（Visibility）：在多线程环境下，一个变量的写操作总是对其后的读取线程可见 - 原子性（Atomicity）：volatile的读/写操作具有原子性 - 有序性（Ordering）：禁止指令的重排序优化，JVM会通过插入内存屏障（Memory Barrier）指令来保证</p>
<p>就同步性能而言，大多数场景下volatile的总开销是要比锁低的。在ConcurrentHashMap的源码中，我们能看到频繁的volatile变量读取与写入。</p>
<h4 id="CAS操作"><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h4><p>CAS一般被理解为<strong>原子操作</strong>。在java中，正是利用了处理器的CMPXCHG（intel）指令实现CAS操作。CAS需要接受原有期望值expected以及想要修改的新值x，只有在原有期望值与当前值相等时才会更新为x，否则为失败。在ConcurrentHashMap的方法中，大量使用CAS获取/修改互斥量，以达到多线程并发环境下的正确性。</p>
<h2 id="ConcurrentHashMap-的常量"><a href="#ConcurrentHashMap-的常量" class="headerlink" title="ConcurrentHashMap 的常量"></a>ConcurrentHashMap 的常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// maximum_capacity table的最大容量，必须为2次幂形式</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// default_capacity table的默认初始容量，必须为2次幂形式</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// max_array_size MAX_VALUE=2^31-1=2147483647</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// default_concurrency_leve 未被用到，用来兼容之前版本</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> finalint DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// load_factor table的负载因子，当前节点数量超过 n * LOAD_FACTOR，执行扩容</span></div><div class="line"><span class="comment">// 位操作表达式为 n - (n &gt;&gt;&gt; 2)</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// treeify_threshold 针对每个桶（bin），链表转换为红黑树的节点数阈值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 针对每个桶（bin），红黑树退化为链表的节点数阈值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// min_treeify_capacity 最小的树的容量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 扩容线程每次最少要迁移16个hash桶</span></div><div class="line"><span class="comment">// min_transfer_stride 在扩容中，参与的单个线程允许处理的最少table桶首节点个数</span></div><div class="line"><span class="comment">// 虽然适当添加线程，会使得整个扩容过程变快，但需要考虑多线程内存同时分配的问题</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// resize stamp bits sizeCtl 中记录 size 的 bit 数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// max_resizers 2^15-1 参与扩容的最大线程数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span>&lt;&lt;(<span class="number">32</span>-RESIZE_STAMP_BITS))-<span class="number">1</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 32 - 16 = 16, sizeCtl 中记录 size 大小的偏移量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS = <span class="number">16</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 转为 nodes的hash值、标示位</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED = -<span class="number">1</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 树的根节点的 hash 值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN = -<span class="number">2</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ReservationNode 的 hash 值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED = -<span class="number">3</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一些特定的哈希值代表不同含义</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// hash for roots of trees</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; <span class="comment">// hash for transient reservations</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CPU数</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors()</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 真正存储Node数据（桶首）节点的数组table</div><div class="line"> * 所有Node节点根据hash分桶存储</div><div class="line"> * table数组中存储的是所有桶（bin）的首节点</div><div class="line"> * hash值相同的节点以链表形式分装在桶中</div><div class="line"> * 当一个桶中节点数达到8个时，转换为红黑树，提高查询效率</div><div class="line"> * 装载Node的数组，作为ConcurrentHashMap的数据容器，采用懒加载的方式</div><div class="line"> * 直到第一次插入数据的时候才会进行初始化操作，数组的大小总是为2的幂次方。</div><div class="line"> */</div><div class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</div><div class="line"><span class="comment">// 扩容时候使用,平时为null，只有在扩容的时候才为非null</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</div><div class="line"><span class="comment">// 没有竞争条件时，使用</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</div><div class="line"></div><div class="line"><span class="comment">// 扩容时，将table中的元素迁移至nextTable . 扩容时非空</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  重要控制变量</div><div class="line"> *  根据变量的数值不同，类实例处于不同阶段</div><div class="line"> *  1. = -1 : 正在初始化</div><div class="line"> *  2. &lt; -1 : 正在扩容，数值为 -(1 + 参与扩容的线程数)</div><div class="line"> *  3. = 0  : 创建时初始为0</div><div class="line"> *  4. &gt; 0  : 下一次扩容的大小</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</div></pre></td></tr></table></figure>
<h2 id="ConcurrentHashMap-重要属性"><a href="#ConcurrentHashMap-重要属性" class="headerlink" title="ConcurrentHashMap 重要属性"></a>ConcurrentHashMap 重要属性</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Key-value entry, 继承自Map.Entry&lt;K,V&gt;对象。</p>
<p>Node&lt;K,V&gt;节点是ConcurrentHashMap存储数据的最<strong>基本结构</strong>。一个数据mapping节点中，存储4个变量：当前节点hash值、节点的key值、节点的value值、指向下一个节点的指针next。其中在子类中的hash可以为负数，具有特殊的并发处理意义，后文会解释。除了具有特殊意义的子类，Node中的key和val不允许为null。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;  </div><div class="line">  		<span class="comment">// Node节点的hash值和key的hash值相同</span></div><div class="line">  		<span class="comment">// TreeNode节点的hash值</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;  </div><div class="line">        <span class="keyword">final</span> K key;  </div><div class="line">        <span class="keyword">volatile</span> V val; <span class="comment">//带有同步锁的value(保证可见性)  </span></div><div class="line">        <span class="keyword">volatile</span> Node&lt;K,V&gt; next;<span class="comment">//带有同步锁的next指针</span></div><div class="line">   </div><div class="line">        Node(inthash, K key, V val, Node&lt;K,V&gt; next) &#123;  </div><div class="line">            <span class="keyword">this</span>.hash = hash;  </div><div class="line">            <span class="keyword">this</span>.key = key;  </div><div class="line">            <span class="keyword">this</span>.val = val;  </div><div class="line">            <span class="keyword">this</span>.next = next;  </div><div class="line">        &#125;  </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> key; &#125;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> val; &#125;  </div><div class="line">        <span class="comment">// HashMap调用Objects.hashCode()，最终也是调用Object.hashCode()；效果一样  </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>   </span>&#123; returnkey.hashCode() ^ val.hashCode(); &#125;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; returnkey + <span class="string">"="</span> + val; &#125;  </div><div class="line">  		<span class="comment">//不允许直接改变value的值</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123; <span class="comment">// 不允许修改value值，HashMap允许  </span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">// HashMap使用if (o == this)，且嵌套if；concurrent使用&amp;&amp;  </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;  </div><div class="line">            Object k, v, u; Map.Entry&lt;?,?&gt; e;  </div><div class="line">            <span class="keyword">return</span> ((oinstanceof Map.Entry) &amp;&amp;  </div><div class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;  </div><div class="line">                    (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;  </div><div class="line">                    (k == key || k.equals(key)) &amp;&amp;  </div><div class="line">                    (v == (u = val) || v.equals(u)));  </div><div class="line">        &#125;  </div><div class="line">   </div><div class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(inth, Object k)</span> </span>&#123; <span class="comment">// 增加find方法辅助get方法  </span></div><div class="line">            Node&lt;K,V&gt; e = <span class="keyword">this</span>;  </div><div class="line">            <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="keyword">do</span> &#123;  </div><div class="line">                    K ek;  </div><div class="line">                    <span class="keyword">if</span> (e.hash == h &amp;&amp;  </div><div class="line">                        ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))  </div><div class="line">                        <span class="keyword">return</span> e;  </div><div class="line">                  <span class="comment">/**</span></div><div class="line">                  *  以链表形式查找桶中下一个Node信息</div><div class="line">                  *  当转换为subclass红黑树节点TreeNode</div><div class="line">                  *  则使用TreeNode中的find进行查询操作</div><div class="line">                  */</div><div class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);  </div><div class="line">            &#125;  </div><div class="line">            returnnull;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>另外可以看出很多属性都是用volatile进行修饰的，也就是为了保证内存可见性。</p>
<ol>
<li>这个Node内部类与HashMap中定义的Node类很相似，但是有一些差别  </li>
<li>它对value和next属性设置了volatile同步锁  </li>
<li>它不允许调用setValue方法直接改变Node的value域  </li>
<li>它增加了find方法辅助map.get()方法  </li>
</ol>
<h3 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h3><p>Node的子类，红黑树节点，当Node链表过长时，会转换成红黑树。</p>
<p>位于 ConcurrentHashMap 类的 2653行 或 搜索 /<em> —————- TreeNodes ————– </em>/</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Nodes for use in TreeBins，链表&gt;8，才可能转为TreeNode.  </span></div><div class="line"><span class="comment">// HashMap的TreeNode继承至LinkedHashMap.Entry；而这里继承至自己实现的Node，将带有next指针，便于treebin访问。  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;   </div><div class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links  </span></div><div class="line">        TreeNode&lt;K,V&gt; left;  </div><div class="line">        TreeNode&lt;K,V&gt; right;  </div><div class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion  </span></div><div class="line">        <span class="keyword">boolean</span> red;  </div><div class="line">   </div><div class="line">        TreeNode(inthash, K key, V val, Node&lt;K,V&gt; next,  </div><div class="line">                 TreeNode&lt;K,V&gt; parent) &#123;  </div><div class="line">            <span class="keyword">super</span>(hash, key, val, next);  </div><div class="line">            <span class="keyword">this</span>.parent = parent;  </div><div class="line">        &#125;  </div><div class="line">   </div><div class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(inth, Object k)</span> </span>&#123;  </div><div class="line">            <span class="keyword">return</span> findTreeNode(h, k, <span class="keyword">null</span>);  </div><div class="line">        &#125;  </div><div class="line">   </div><div class="line">        <span class="comment">/** </span></div><div class="line">         * Returns the TreeNode (or null if not found) for the given key </div><div class="line">         * starting at given root. </div><div class="line">         */ <span class="comment">// 查找hash为h，key为k的节点  </span></div><div class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">findTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;  </div><div class="line">            <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123; <span class="comment">// 比HMap增加判空  </span></div><div class="line">                TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;  </div><div class="line">                <span class="keyword">do</span>  &#123;  </div><div class="line">                    intph, dir; K pk; TreeNode&lt;K,V&gt; q;  </div><div class="line">                    TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;  </div><div class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)  </div><div class="line">                        p = pl;  </div><div class="line">                    elseif (ph &lt; h)  </div><div class="line">                        p = pr;  </div><div class="line">                    elseif ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))  </div><div class="line">                        returnp;  </div><div class="line">                    elseif (pl == <span class="keyword">null</span>)  </div><div class="line">                        p = pr;  </div><div class="line">                    elseif (pr == <span class="keyword">null</span>)  </div><div class="line">                        p = pl;  </div><div class="line">                    elseif ((kc != <span class="keyword">null</span> ||  </div><div class="line">                              (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;  </div><div class="line">                             (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)  </div><div class="line">                        p = (dir &lt; <span class="number">0</span>) ? pl : pr;  </div><div class="line">                    elseif ((q = pr.findTreeNode(h, k, kc)) != <span class="keyword">null</span>)  </div><div class="line">                        returnq;  </div><div class="line">                    <span class="keyword">else</span>  </div><div class="line">                        p = pl;  </div><div class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">// 和HashMap相比，这里的TreeNode相当简洁；ConcurrentHashMap链表转树时，并不会直接转，</span></div><div class="line"><span class="comment">// 正如注释（Nodes for use in TreeBins）所说，只是把这些节点包装成TreeNode放到TreeBin中，</span></div><div class="line"><span class="comment">// 再由TreeBin来转化红黑树。</span></div></pre></td></tr></table></figure>
<p>树节点，继承于承载数据的Node类。而红黑树的操作是针对TreeBin类的，从该类的注释也可以看出，也就是TreeBin会将TreeNode进行再一次封装</p>
<h3 id="TreeBin"><a href="#TreeBin" class="headerlink" title="TreeBin"></a>TreeBin</h3><p>位于 ConcurrentHashMap 类的 2709 行 或 搜索 /<em> —————- TreeBins ————– </em>/    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TreeBin用于封装维护TreeNode，包含putTreeVal、lookRoot、UNlookRoot、remove、</span></div><div class="line"><span class="comment">// balanceInsetion、balanceDeletion等方法，这里只分析其构造函数。当链表转树时，</span></div><div class="line"><span class="comment">// 用于封装TreeNode，也就是说，ConcurrentHashMap的红黑树存放的是TreeBin，而不是treeNode。  </span></div><div class="line">TreeBin(TreeNode&lt;K,V&gt; b) &#123;  </div><div class="line">    <span class="keyword">super</span>(TREEBIN, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);<span class="comment">//hash值为常量TREEBIN=-2,表示roots of trees  </span></div><div class="line">    <span class="keyword">this</span>.first = b;  </div><div class="line">    TreeNode&lt;K,V&gt; r = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="keyword">null</span>; x = next) &#123;  </div><div class="line">        next = (TreeNode&lt;K,V&gt;)x.next;  </div><div class="line">        x.left = x.right = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;  </div><div class="line">            x.parent = <span class="keyword">null</span>;  </div><div class="line">            x.red = <span class="keyword">false</span>;  </div><div class="line">            r = x;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span> &#123;  </div><div class="line">            K k = x.key;  </div><div class="line">            inth = x.hash;  </div><div class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;  </div><div class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;  </div><div class="line">                intdir, ph;  </div><div class="line">                K pk = p.key;  </div><div class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)  </div><div class="line">                    dir = -<span class="number">1</span>;  </div><div class="line">                elseif (ph &lt; h)  </div><div class="line">                    dir = <span class="number">1</span>;  </div><div class="line">                elseif ((kc == <span class="keyword">null</span> &amp;&amp;  </div><div class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||  </div><div class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)  </div><div class="line">                    dir = tieBreakOrder(k, pk);  </div><div class="line">                    TreeNode&lt;K,V&gt; xp = p;  </div><div class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;  </div><div class="line">                    x.parent = xp;  </div><div class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)  </div><div class="line">                        xp.left = x;  </div><div class="line">                    <span class="keyword">else</span>  </div><div class="line">                        xp.right = x;  </div><div class="line">                    r = balanceInsertion(r, x);  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">this</span>.root = r;  </div><div class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类并不负责包装用户的key、value信息，而是包装的很多TreeNode节点。实际的ConcurrentHashMap“数组”中，存放的是TreeBin对象，而不是TreeNode对象。</p>
<h3 id="threeifyBin"><a href="#threeifyBin" class="headerlink" title="threeifyBin"></a>threeifyBin</h3><p>位于 ConcurrentHashMap 类的 2611 行 或 搜索 “private final void treeifyBin”    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        Node&lt;K,V&gt; b; intn, sc;  </div><div class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123; </div><div class="line">      	<span class="comment">// 数组的大小还未超过64</span></div><div class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)  </div><div class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>); <span class="comment">// 容量&lt;64，则table两倍扩容，不转树了  </span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;  </div><div class="line">            <span class="keyword">synchronized</span> (b) &#123; <span class="comment">// 读写锁  </span></div><div class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;  </div><div class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;  </div><div class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;  </div><div class="line">                        TreeNode&lt;K,V&gt; p =  </div><div class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,  </div><div class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);  </div><div class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)  </div><div class="line">                            hd = p;  </div><div class="line">                        <span class="keyword">else</span>  </div><div class="line">                            tl.next = p;  </div><div class="line">                        tl = p;  </div><div class="line">                    &#125;  </div><div class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ForwardingNode"><a href="#ForwardingNode" class="headerlink" title="ForwardingNode"></a>ForwardingNode</h3><p>位于 ConcurrentHashMap 类的 2163 行 或 搜索 “static final class ForwardingNode”    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A node inserted at head of bins during transfer operations.连接两个table  </span></div><div class="line"><span class="comment">// 并不是我们传统的包含key-value的节点，只是一个标志节点，并且指向nextTable，提供find方法而已。</span></div><div class="line"><span class="comment">// 生命周期：仅存活于扩容操作且bin不为null时，一定会出现在每个bin的首位。  </span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;  </div><div class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;  </div><div class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;  </div><div class="line">        <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>); <span class="comment">// 此节点hash=-1，key、value、next均为null  </span></div><div class="line">        <span class="keyword">this</span>.nextTable = tab;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;  </div><div class="line">        <span class="comment">// 查nextTable节点，outer避免深度递归  </span></div><div class="line">        outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;  </div><div class="line">            Node&lt;K,V&gt; e; intn;  </div><div class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||  </div><div class="line">                (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)  </div><div class="line">                returnnull;  </div><div class="line">            <span class="keyword">for</span> (;;) &#123; <span class="comment">// CAS算法多和死循环搭配！直到查到或null  </span></div><div class="line">                <span class="keyword">int</span> eh; K ek;  </div><div class="line">                <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;  </div><div class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))  </div><div class="line">                    returne;  </div><div class="line">                <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;  </div><div class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;  </div><div class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;  </div><div class="line">                        <span class="keyword">continue</span> outer;  </div><div class="line">                    &#125;  </div><div class="line">                    <span class="keyword">else</span>  </div><div class="line">                        <span class="keyword">return</span> e.find(h, k);  </div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)  </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在扩容时才会出现的特殊节点，其key,value,hash全部为null。并拥有nextTable指针引用新的table数组。</p>
<h3 id="Traverser"><a href="#Traverser" class="headerlink" title="Traverser"></a>Traverser</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Traverser</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; </div><div class="line">  	<span class="comment">//下一个要访问的entry</span></div><div class="line">    Node&lt;K,V&gt; next;</div><div class="line">  	<span class="comment">//发现forwardingNode时，保存当前tab相关信息</span></div><div class="line">    TableStack&lt;K,V&gt; stack, spare; </div><div class="line">    <span class="comment">//下一个要访问的hash桶索引</span></div><div class="line">    <span class="keyword">int</span> index;             </div><div class="line">  	<span class="comment">//当前正在访问的初始tab的hash桶索引</span></div><div class="line">    <span class="keyword">int</span> baseIndex;          </div><div class="line">    <span class="comment">//初始tab的hash桶索引边界</span></div><div class="line">    <span class="keyword">int</span> baseLimit; </div><div class="line">    <span class="comment">//初始tab的长度</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> baseSize; </div><div class="line"></div><div class="line">    Traverser(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> size, <span class="keyword">int</span> index, <span class="keyword">int</span> limit) &#123;</div><div class="line">        <span class="keyword">this</span>.tab = tab;</div><div class="line">        <span class="keyword">this</span>.baseSize = size;</div><div class="line">        <span class="keyword">this</span>.baseIndex = <span class="keyword">this</span>.index = index;</div><div class="line">        <span class="keyword">this</span>.baseLimit = limit;</div><div class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果有可能，返回下一个有效节点，否则返回null。</span></div><div class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">advance</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">      	<span class="comment">//获取Node链表的下一个元素e</span></div><div class="line">        <span class="keyword">if</span> ((e = next) != <span class="keyword">null</span>)</div><div class="line">            e = e.next;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            Node&lt;K,V&gt;[] t; <span class="keyword">int</span> i, n;  </div><div class="line">          	<span class="comment">// e不为空，返回e</span></div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> next = e;</div><div class="line">          	<span class="comment">//e为空，说明此链表已经遍历完成，准备遍历下一个hash桶</span></div><div class="line">            <span class="keyword">if</span> (baseIndex &gt;= baseLimit || (t = tab) == <span class="keyword">null</span> ||</div><div class="line">                (n = t.length) &lt;= (i = index) || i &lt; <span class="number">0</span>)</div><div class="line">              	<span class="comment">//到达边界，返回null</span></div><div class="line">                <span class="keyword">return</span> next = <span class="keyword">null</span>;</div><div class="line">          	<span class="comment">//获取下一个hash桶对应的node链表的头节点</span></div><div class="line">            <span class="keyword">if</span> ((e = tabAt(t, i)) != <span class="keyword">null</span> &amp;&amp; e.hash &lt; <span class="number">0</span>) &#123;</div><div class="line">              	<span class="comment">//转发节点,说明此hash桶中的节点已经迁移到了nextTable</span></div><div class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</div><div class="line">                    tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</div><div class="line">                    e = <span class="keyword">null</span>;</div><div class="line">                  	<span class="comment">//保存当前tab的遍历状态</span></div><div class="line">                    pushState(t, i, n);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//红黑树</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeBin)</div><div class="line">                    e = ((TreeBin&lt;K,V&gt;)e).first;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    e = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (stack != <span class="keyword">null</span>)</div><div class="line">              	<span class="comment">// 此时遍历的是迁移目标nextTable,尝试回退到源table，</span></div><div class="line">                <span class="comment">// 继续遍历源table中的节点</span></div><div class="line">                recoverState(n);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((index = i + baseSize) &gt;= n)</div><div class="line">              	<span class="comment">//初始tab的hash桶索引+1 ，即遍历下一个hash桶</span></div><div class="line">                index = ++baseIndex; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 在遇到转发节点时保存遍历状态。</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushState</span><span class="params">(Node&lt;K,V&gt;[] t, <span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        TableStack&lt;K,V&gt; s = spare;  <span class="comment">// reuse if possible</span></div><div class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">            spare = s.next;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            s = <span class="keyword">new</span> TableStack&lt;K,V&gt;();</div><div class="line">        s.tab = t;</div><div class="line">        s.length = n;</div><div class="line">        s.index = i;</div><div class="line">        s.next = stack;</div><div class="line">        stack = s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// 可能会弹出遍历状态</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recoverState</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        TableStack&lt;K,V&gt; s; <span class="keyword">int</span> len;</div><div class="line">      <span class="comment">// (s = stack) != null :stack不空，说明此时遍历的是nextTable</span></div><div class="line">      <span class="comment">//  (index += (len = s.length)) &gt;= n: 确保了按照index,</span></div><div class="line">      <span class="comment">//index+tab.length的顺序遍历nextTable,条件成立表示nextTable已经遍历完毕</span></div><div class="line">        </div><div class="line">        <span class="comment">//nextTable中的桶遍历完毕</span></div><div class="line">        <span class="keyword">while</span> ((s = stack) != <span class="keyword">null</span> &amp;&amp; (index += (len = s.length)) &gt;= n) &#123;</div><div class="line">          	<span class="comment">//弹出tab，获取tab的遍历状态，开始遍历tab中的桶</span></div><div class="line">            n = len;</div><div class="line">            index = s.index;</div><div class="line">            tab = s.tab;</div><div class="line">            s.tab = <span class="keyword">null</span>;</div><div class="line">            TableStack&lt;K,V&gt; next = s.next;</div><div class="line">            s.next = spare; <span class="comment">// save for reuse</span></div><div class="line">            stack = next;</div><div class="line">            spare = s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; (index += baseSize) &gt;= n)</div><div class="line">            index = ++baseIndex;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="tryPresize-扩容"><a href="#tryPresize-扩容" class="headerlink" title="tryPresize(扩容)"></a>tryPresize(扩容)</h2><p>协调多个线程如何调用transfer方法进行hash桶的迁移（addCount，helpTransfer 方法中也有类似的逻辑）</p>
<p>tryPresize在putAll以及treeifyBin中调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryPresize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;  </div><div class="line">  	    <span class="comment">//计算扩容的目标size</span></div><div class="line">        <span class="comment">// 给定的容量若&gt;=MAXIMUM_CAPACITY的一半，直接扩容到允许的最大值，否则调用函数扩容  </span></div><div class="line">        <span class="keyword">int</span> c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :  </div><div class="line">            tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);  </div><div class="line">        <span class="keyword">int</span> sc;  </div><div class="line">        <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123; <span class="comment">//没有正在初始化或扩容，或者说表还没有被初始化  </span></div><div class="line">            Node&lt;K,V&gt;[] tab = table; <span class="keyword">int</span> n;  </div><div class="line">           <span class="comment">//tab没有初始化	</span></div><div class="line">           <span class="keyword">if</span>(tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;  </div><div class="line">                n = (sc &gt; c) ? sc : c; <span class="comment">// 扩容阀值取较大者  </span></div><div class="line">         <span class="comment">// 期间没有其他线程对表操作，则CAS将SIZECTL状态置为-1，表示正在进行初始化  </span></div><div class="line">             	<span class="comment">//初始化之前，CAS设置sizeCtl=-1</span></div><div class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;  </div><div class="line">                    <span class="keyword">try</span> &#123;  </div><div class="line">                        <span class="keyword">if</span> (table == tab) &#123;  </div><div class="line">                            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </div><div class="line">                            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];  </div><div class="line">                            table = nt;  </div><div class="line">                          	<span class="comment">//sc=0.75n,相当于扩容阈值</span></div><div class="line">                            sc = n - (n &gt;&gt;&gt; <span class="number">2</span>); <span class="comment">//无符号右移2位，此即0.75*n  </span></div><div class="line">                        &#125;  </div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">                      	<span class="comment">// 此时并没有通过CAS赋值，因为其他想要执行初始化的线程，</span></div><div class="line">                        <span class="comment">// 发现sizeCtl=-1，就直接返回，从而确保任何情况，</span></div><div class="line">                        <span class="comment">// 只会有一个线程执行初始化操作。</span></div><div class="line">                        sizeCtl = sc;</div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">            &#125;<span class="comment">// 若欲扩容值不大于原阀值，或现有容量&gt;=最值，什么都不用做了 </span></div><div class="line">          	<span class="comment">//目标扩容size小于扩容阈值，或者容量超过最大限制时，不需要扩容</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">          	<span class="comment">//扩容</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123; </div><div class="line">                <span class="keyword">int</span> rs = resizeStamp(n);  </div><div class="line">              	<span class="comment">// sc&lt;0表示，已经有其他线程正在扩容</span></div><div class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;  </div><div class="line">                    Node&lt;K,V&gt;[] nt;<span class="comment">//RESIZE_STAMP_SHIFT=16,MAX_RESIZERS=2^15-1 </span></div><div class="line">               <span class="comment">// 1. (sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs ：扩容线程数 &gt; MAX_RESIZERS-1</span></div><div class="line">               <span class="comment">// 2. sc == rs + 1 和 sc == rs + MAX_RESIZERS ：表示什么？？？</span></div><div class="line">               <span class="comment">// 3. (nt = nextTable) == null ：表示nextTable正在初始化</span></div><div class="line">               <span class="comment">// transferIndex &lt;= 0 ：表示所有hash桶均分配出去</span></div><div class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||  </div><div class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||  </div><div class="line">                        transferIndex &lt;= <span class="number">0</span>)  </div><div class="line">                      	<span class="comment">//如果不需要帮其扩容，直接返回</span></div><div class="line">                        <span class="keyword">break</span>;  </div><div class="line">                  	<span class="comment">//CAS设置sizeCtl=sizeCtl+1</span></div><div class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) </div><div class="line">                      	<span class="comment">//帮其扩容</span></div><div class="line">                        transfer(tab, nt);  </div><div class="line">                &#125;  </div><div class="line">              	<span class="comment">// 第一个执行扩容操作的线程，将sizeCtl设置为：</span></div><div class="line">                <span class="comment">// (resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,  </div><div class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))  </div><div class="line">                    transfer(tab, <span class="keyword">null</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="comment">//和HashMap一样,返回&gt;=n的最小2的自然数幂  </span></div><div class="line">  <span class="keyword">int</span> n = c - <span class="number">1</span>;  </div><div class="line">  n |= n &gt;&gt;&gt; <span class="number">1</span>;  </div><div class="line">  n |= n &gt;&gt;&gt; <span class="number">2</span>;  </div><div class="line">  n |= n &gt;&gt;&gt; <span class="number">4</span>;  </div><div class="line">  n |= n &gt;&gt;&gt; <span class="number">8</span>;  </div><div class="line">  n |= n &gt;&gt;&gt; <span class="number">16</span>;  </div><div class="line">  <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="spread-重新哈希"><a href="#spread-重新哈希" class="headerlink" title="spread 重新哈希"></a>spread 重新哈希</h2><p>spread()重哈希，以减小Hash冲突。我们知道对于一个hash表来说，hash值分散的不够均匀的话会大大增加哈希冲突的概率，从而影响到hash表的性能。因此通过spread方法进行了一次重hash从而大大减小哈希冲突的可能性。spread方法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static final int spread(int h) &#123;</div><div class="line">  return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法主要是<strong>将key的hashCode的低16位于高16位进行异或运算</strong>，这样不仅能够使得hash值能够分散能够均匀减小hash冲突的概率，另外另外只用到了异或运算，在性能开销上也能兼顾，做到平衡的trade-off。</p>
<h2 id="get-查找"><a href="#get-查找" class="headerlink" title="get(查找)"></a>get(查找)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</div><div class="line">  		 <span class="comment">// 1. 重hash</span></div><div class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</div><div class="line">  </div><div class="line">  		<span class="comment">// 2. table[i]桶节点的key与查找的key相同，则直接返回</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">            <span class="comment">// 唯一一处volatile读操作</span></div><div class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="comment">// 注意：因为容器大小为2的次方，所以 h mod n = h &amp; (n -1)</span></div><div class="line">          </div><div class="line">            <span class="keyword">if</span> ((eh = e.hash) == h) &#123;<span class="comment">// 如果hash值相等</span></div><div class="line">              	<span class="comment">// 检查第一个Node</span></div><div class="line">                <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</div><div class="line">                    <span class="keyword">return</span> e.val;</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">// hash为负表示是扩容中的ForwardingNode节点</span></div><div class="line">            <span class="comment">// 直接调用ForwardingNode的find方法(可以是代理到扩容中的nextTable)</span></div><div class="line">          	<span class="comment">// 3. 当前节点hash小于0说明为树节点，在红黑树中查找即可</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</div><div class="line">            <span class="comment">// 遍历链表，对比key值</span></div><div class="line">          	<span class="comment">// 通过next指针，逐一查找</span></div><div class="line">            <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</div><div class="line">              	<span class="comment">//4. 从链表中查找，查找到则返回该节点的value，否则就返回null即可</span></div><div class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</div><div class="line">                    ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</div><div class="line">                    <span class="keyword">return</span> e.val;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码的逻辑请看注释，首先先看当前的hash桶数组节点即table[i]是否为查找的节点，若是则直接返回；若不是，则继续再看当前是不是树节点？通过看节点的hash值是否为小于0，如果小于0则为树节点。如果是树节点在红黑树中查找节点；如果不是树节点，那就只剩下为链表的形式的一种可能性了，就向后遍历查找节点，若查找到则返回节点的value即可，若没有找到就返回null。</p>
<p>这个 get 请求，我们需要 cas 来保证变量的原子性。如果 tab[i] 正被锁住，那么 CAS 就会失败，失败之后就会不断的重试。这也保证了在高并发情况下不会出错。</p>
<p>我们来分析一下哪些情况会导致 get 在并发的情况下可能取不到值。</p>
<ol>
<li>一个线程在 get 的时候，另一个线程在对同一个 key 的 node 进行 remove 操作</li>
<li>一个线程在 get 的时候，另一个线程正在重排 table 。可能导致旧 table 取不到值</li>
</ol>
<p>那么本质是，我在get的时候，有其他线程在对同一桶的链表或树进行修改。那么get是怎么保证同步性的呢？我们看到e = tabAt(tab, (n - 1) &amp; h)) != null，在看下tablAt到底是干嘛的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) &#123;</div><div class="line">    return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它是对tab[i]进行原子性的读取，因为我们知道putVal等对table的桶操作是有加锁的，那么一般情况下我们对桶的读也是要加锁的，但是我们这边为什么不需要加锁呢？因为我们用了Unsafe的getObjectVolatile，因为table是volatile类型，所以对tab[i]的原子请求也是可见的。因为如果同步正确的情况下，根据happens-before原则，<strong>对volatile域的写入操作happens-before于每一个后续对同一域的读操作</strong>。所以不管其他线程对table链表或树的修改，都对get读取可见。用一张图说明，协调读-写线程可见示意图：</p>
<p>jdk7是没有用到CAS操作和Unsafe类的，下面是jdk7的get方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">V get(Object key, int hash) &#123; </div><div class="line">            if(count != 0) &#123;       // 首先读 count 变量</div><div class="line">                HashEntry&lt;K,V&gt; e = getFirst(hash); </div><div class="line">                while(e != null) &#123; </div><div class="line">                    if(e.hash == hash &amp;&amp; key.equals(e.key)) &#123; </div><div class="line">                        V v = e.value; </div><div class="line">                        if(v != null)            </div><div class="line">                            return v; </div><div class="line">                        // 如果读到 value 域为 null，说明发生了重排序，加锁后重新读取</div><div class="line">                        return readValueUnderLock(e); </div><div class="line">                    &#125; </div><div class="line">                    e = e.next; </div><div class="line">                &#125; </div><div class="line">            &#125; </div><div class="line">            return null; </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>为什么我们在get的时候需要判断count不等于0呢？如果是在HashMap的源码中是没有这个判断的，不用判断不是也是可以的吗？这个就是用到线程安全发布情况下happens-before原则之volatile变量法则：<strong>对volatile域的写入操作happens-before于每一个后续对同一域的读操作</strong>，看下面的示意图：</p>
<h2 id="tabAt"><a href="#tabAt" class="headerlink" title="tabAt"></a>tabAt</h2><p>以 volatile 读的方式读取 table 数组中的元素</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这边为什么i要等于((long)i &lt;&lt; ASHIFT) + ABASE呢,计算偏移量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">  <span class="comment">// Key对应的数组元素的可见性，由Unsafe的getObjectVolatile方法保证。</span></div><div class="line">  <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>tabAt 方法用来获取table数组中索引为i的Node元素。</p>
<h2 id="put-putVal"><a href="#put-putVal" class="headerlink" title="put/putVal"></a>put/putVal</h2><p>putVal是将一个新key-value mapping插入到当前ConcurrentHashMap的关键方法。</p>
<p>此方法的具体流程如下图：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/CEj7GLmk1G.png" alt="mark"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">    <span class="comment">// 不允许 key 和 value 为空</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">  	<span class="comment">// 1.计算 key 的 hash 值(计算新节点的hash值)</span></div><div class="line">    <span class="keyword">int</span> hash = spread(key.hashCode()); <span class="comment">// 返回 (h^(h&gt;&gt;&gt;16))&amp;HASH_BITS</span></div><div class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</div><div class="line">  	<span class="comment">// 获取当前table，进入死循环,直到插入成功！</span></div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123; </div><div class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</div><div class="line">      	<span class="comment">// 2. 如果当前 table 还没初始化先调用 initTable 方法将 tab 进行初始化</span></div><div class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">            tab = initTable(); <span class="comment">// 如果table为空，执行初始化，也即是延迟初始化</span></div><div class="line">      	<span class="comment">// 3. tab中索引为i的位置的元素为null,则直接使用 CAS 将值插入即可</span></div><div class="line">      	<span class="comment">// 如果bin为空，则采用cas算法赋值，无需加锁</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,<span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</div><div class="line">              	<span class="comment">// 直接设置为桶首节点成功，退出死循环（出口之一）</span></div><div class="line">                <span class="keyword">break</span>;              </div><div class="line">        &#125;</div><div class="line">      	<span class="comment">// 4. 当前正在扩容</span></div><div class="line">      	<span class="comment">// 当前桶首节点正在特殊的扩容状态下，当前线程尝试参与扩容</span></div><div class="line">        <span class="comment">// 然后重新进入死循环</span></div><div class="line">        <span class="comment">//f.hash == MOVED 表示为：ForwardingNode，说明其他线程正在扩容</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED) <span class="comment">// MOVED = -1 </span></div><div class="line">            tab = helpTransfer(tab, f); <span class="comment">// 当发现其他线程扩容时，帮其扩容</span></div><div class="line">       <span class="comment">// 通过桶首节点，将新节点加入table</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            V oldVal = <span class="keyword">null</span>;</div><div class="line">          	<span class="comment">// 获取桶首节点实例对象锁，进入临界区进行添加操作</span></div><div class="line">            <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">              	<span class="comment">// 再判断以此f是否仍是第一个Node，如果不是，退出临界区，重复添加操作</span></div><div class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                    <span class="comment">//5. 当前为链表，在链表中插入新的键值对</span></div><div class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">// 桶首节点hash值&gt;0，表示为链表</span></div><div class="line">                        binCount = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">                            K ek;</div><div class="line">                          	<span class="comment">// 找到hash值相同的key,覆盖旧值即可</span></div><div class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                                ((ek = e.key) == key ||</div><div class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                                oldVal = e.val;</div><div class="line">                              	<span class="comment">// 仅 putIfAbsent() 方法中的 onlyIfAbsend 为 true;</span></div><div class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                  	<span class="comment">// putIfAbsend() 包含 key 则返回 get ,否则 put 并返回</span></div><div class="line">                                    e.val = value; </div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                            Node&lt;K,V&gt; pred = e;</div><div class="line">                            <span class="comment">//如果到链表末尾仍未找到，则直接将新值插入到链表末尾即可</span></div><div class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</div><div class="line">                                                          value, <span class="keyword">null</span>);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                  	<span class="comment">// 桶首节点为Node子类型TreeBin，表示为红黑树</span></div><div class="line">                    <span class="comment">// 6.当前为红黑树，将新的键值对插入到红黑树中</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                        Node&lt;K,V&gt; p;</div><div class="line">                        binCount = <span class="number">2</span>;</div><div class="line">                      	<span class="comment">// 调用putTreeVal方法，插入新值</span></div><div class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</div><div class="line">                          	<span class="comment">// key已经存在，则替换</span></div><div class="line">                            oldVal = p.val;</div><div class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                p.val = value;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">             <span class="comment">// 7.插入完键值对后再根据实际大小看是否需要转换成红黑树</span></div><div class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">                  	<span class="comment">// 插入新节点后，达到链表转换红黑树阈值，则执行转换操作</span></div><div class="line">                  	<span class="comment">// 此函数内部会判断是树化，还是扩容：tryPresize</span></div><div class="line">                    treeifyBin(tab, i);</div><div class="line">              	<span class="comment">// 退出死循环（出口之二）</span></div><div class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> oldVal;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  	<span class="comment">// 更新计算count时的base和counterCells数组</span></div><div class="line">  	<span class="comment">//8.对当前容量大小进行检查，如果超过了临界值（实际大小*加载因子）就需要扩容 </span></div><div class="line">    addCount(<span class="number">1L</span>, binCount);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当table[i]为链表的头结点，在链表中插入新值在table[i]不为null并且不为forwardingNode时，并且当前Node f的hash值大于0（fh &gt;= 0）的话说明当前节点f为当前桶的所有的节点组成的链表的头结点。那么接下来，要想向ConcurrentHashMap插入新值的话就是向这个链表插入新值。通过synchronized (f)的方式进行加锁以实现线程安全性。往链表中插入节点的部分代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">    binCount = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">        K ek;</div><div class="line">        <span class="comment">// 找到hash值相同的key,覆盖旧值即可</span></div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((ek = e.key) == key ||</div><div class="line">             (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">            oldVal = e.val;</div><div class="line">            <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                e.val = value;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        Node&lt;K,V&gt; pred = e;</div><div class="line">        <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//如果到链表末尾仍未找到，则直接将新值插入到链表末尾即可</span></div><div class="line">            pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</div><div class="line">                                      value, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分代码很好理解，就是两种情况：1. 在链表中如果找到了与待插入的键值对的key相同的节点，就直接覆盖即可；2. 如果直到找到了链表的末尾都没有找到的话，就直接将待插入的键值对追加到链表的末尾即可。</p>
<p>当table[i]为红黑树的根节点，在红黑树中插入新值按照之前的数组+链表的设计方案，这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，甚至在极端情况下，查找一个节点会出现时间复杂度为O(n)的情况，则会严重影响ConcurrentHashMap的性能，于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高ConcurrentHashMap的性能，其中会用到红黑树的插入、删除、查找等算法。当table[i]为红黑树的树节点时的操作为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">    Node&lt;K,V&gt; p;</div><div class="line">    binCount = <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                   value)) != <span class="keyword">null</span>) &#123;</div><div class="line">        oldVal = p.val;</div><div class="line">        <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">            p.val = value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先在if中通过<code>f instanceof TreeBin</code>判断当前table[i]是否是树节点，这下也正好验证了我们在最上面介绍时说的TreeBin会对TreeNode做进一步封装，对红黑树进行操作的时候针对的是TreeBin而不是TreeNode。这段代码很简单，调用putTreeVal方法完成向红黑树插入新节点，同样的逻辑，<strong>如果在红黑树中存在于待插入键值对的Key相同（hash值相等并且equals方法判断为true）的节点的话，就覆盖旧值，否则就向红黑树追加新节点</strong>。</p>
<p>当table[i]为红黑树的根节点，在红黑树中插入新值。按照之前的数组+链表的设计方案，这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，甚至在极端情况下，查找一个节点会出现时间复杂度为O(n)的情况，则会严重影响ConcurrentHashMap的性能，于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高ConcurrentHashMap的性能，其中会用到红黑树的插入、删除、查找等算法。当table[i]为红黑树的树节点时的操作为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line"> Node&lt;K,V&gt; p;</div><div class="line"> binCount = <span class="number">2</span>;</div><div class="line"> <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,value)) != <span class="keyword">null</span>) &#123;</div><div class="line"> 			oldVal = p.val;</div><div class="line">            <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">            p.val = value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先在if中通过<code>f instanceof TreeBin</code>判断当前table[i]是否是树节点，这下也正好验证了我们在最上面介绍时说的TreeBin会对TreeNode做进一步封装，对红黑树进行操作的时候针对的是TreeBin而不是TreeNode。这段代码很简单，调用putTreeVal方法完成向红黑树插入新节点，同样的逻辑，<strong>如果在红黑树中存在于待插入键值对的Key相同（hash值相等并且equals方法判断为true）的节点的话，就覆盖旧值，否则就向红黑树追加新节点</strong>。</p>
<p>根据当前节点个数进行调整当完成数据新节点插入之后，会进一步对当前链表大小进行调整，这部分代码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (binCount != 0) &#123;</div><div class="line">    if (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">        treeifyBin(tab, i);</div><div class="line">    if (oldVal != null)</div><div class="line">        return oldVal;</div><div class="line">    break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很容易理解，如果当前链表节点个数大于等于8（TREEIFY_THRESHOLD）的时候，就会调用treeifyBin方法将tabel[i]（第i个散列桶）拉链转换成红黑树。</p>
<p><strong>关于Put方法的逻辑就基本说的差不多了，现在来做一些总结：</strong></p>
<p><strong>整体流程：</strong></p>
<ol>
<li>首先对于每一个放入的值，首先利用spread方法对key的hashcode进行一次hash计算，由此来确定这个值在 table中的位置；</li>
<li>如果当前table数组还未初始化，先将table数组进行初始化操作；</li>
<li>如果这个位置是null的，那么使用CAS操作直接放入；</li>
<li>如果这个位置存在结点，说明发生了hash碰撞，首先判断这个节点的类型。如果该节点fh==MOVED(代表forwardingNode,数组正在进行扩容)的话，说明正在进行扩容；</li>
<li>如果是链表节点（fh&gt;0）,则得到的结点就是hash值相同的节点组成的链表的头节点。需要依次向后遍历确定这个新加入的值所在位置。如果遇到hash值与key值都与新加入节点是一致的情况，则只需要更新value值即可。否则依次向后遍历，直到链表尾插入这个结点；</li>
<li>如果这个节点的类型是TreeBin的话，直接调用红黑树的插入方法进行插入新的节点；</li>
<li>插入完节点之后再次检查链表长度，如果长度大于8，就把这个链表转换成红黑树；</li>
<li>对当前容量大小进行检查，如果超过了临界值（实际大小*加载因子）就需要扩容。</li>
</ol>
<p><strong>该流程中，可以细细品味的环节有： - 初始化方法 initTable - 扩容方法 transfer (在多线程扩容方法 helpTransfer 中被调用)</strong></p>
<h2 id="initTable"><a href="#initTable" class="headerlink" title="initTable"></a>initTable</h2><p>initTable方法允许多线程同时进入，但只有一个线程可以完成table的初始化，其他线程都会通过yield方法让出cpu。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</div><div class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">      	<span class="comment">// 前文提及sizeCtl是重要的控制变量</span></div><div class="line">        <span class="comment">// sizeCtl = -1 表示正在初始化</span></div><div class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</div><div class="line">            <span class="comment">// 已经有其他线程在执行初始化，则主动让出cpu</span></div><div class="line">            <span class="comment">// 1. 保证只有一个线程正在进行初始化操作</span></div><div class="line">            Thread.yield();</div><div class="line">      </div><div class="line">      	<span class="comment">// 利用CAS操作设置sizeCtl为-1</span></div><div class="line">        <span class="comment">// 设置成功表示当前线程为执行初始化的唯一线程</span></div><div class="line">        <span class="comment">// 此处进入临界区</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              	<span class="comment">// 由于让出cpu的线程也会后续进入该临界区</span></div><div class="line">                <span class="comment">// 需要进行再次确认table是否为null</span></div><div class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 2. 得出数组的大小</span></div><div class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                    <span class="comment">// 3. 这里才真正的初始化数组，即分配Node数组</span></div><div class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</div><div class="line">                    table = tab = nt;</div><div class="line">                  	<span class="comment">// 默认负载为0.75</span></div><div class="line">                    <span class="comment">// 4. 计算数组中可用的大小：实际大小n*0.75（加载因子）</span></div><div class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                sizeCtl = sc;</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">// 退出死循环的唯一出口</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码的逻辑请见注释，有可能存在一个情况是多个线程同时走到这个方法中，为了保证能够正确初始化，在第1步中会先通过if进行判断，<strong>若当前已经有一个线程正在初始化即sizeCtl值变为-1</strong>，这个时候其他线程在If判断为true从而调用Thread.yield()让出CPU时间片。正在进行初始化的线程会调用U.compareAndSwapInt方法将sizeCtl改为-1即正在初始化的状态。另外还需要注意的事情是，在第四步中会进一步计算数组中可用的大小即为数组实际大小n乘以加载因子0.75.可以看看这里乘以0.75是怎么算的，0.75为四分之三，这里<code>n - (n &gt;&gt;&gt; 2)</code>是不是刚好是n-(1/4)n=(3/4)n，挺有意思的吧:)。如果选择是无参的构造器的话，这里在new Node数组的时候会使用默认大小为<code>DEFAULT_CAPACITY</code>（16），然后乘以加载因子0.75为12，也就是说数组的可用大小为12。</p>
<h2 id="casTabAt-原子操作方法"><a href="#casTabAt-原子操作方法" class="headerlink" title="casTabAt(原子操作方法)"></a>casTabAt(原子操作方法)</h2><p>以 CAS 的方式，将元素插入到 table 数组</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  *这边为什么i要等于((long)i &lt;&lt; ASHIFT) + ABASE呢,计算偏移量</div><div class="line">  *ASHIFT是指tab[i]中第i个元素在相对于数组第一个元素的偏移量，而ABASE就算第一数组的内存素的偏移地址</div><div class="line">  *所以呢，((long)i &lt;&lt; ASHIFT) + ABASE就算i最后的地址</div><div class="line">  * 那么compareAndSwapObject的作用就算tab[i]和c比较，如果相等就tab[i]=v否则tab[i]=c;</div><div class="line">  */</div><div class="line">  <span class="comment">// 利用CAS算法设置i位置上的Node节点（将c和table[i]比较，相同则插入v）。  </span></div><div class="line">  <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,  </span></span></div><div class="line">                                      Node&lt;K,V&gt; c, Node&lt;K,V&gt; v) &#123;  </div><div class="line">    	<span class="comment">//原子的执行如下逻辑：如果tab[i]==c,则设置tab[i]=v，并返回ture.否则返回false</span></div><div class="line">      <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>利用CAS操作设置table数组中索引为i的元素</p>
<h2 id="setTabAt"><a href="#setTabAt" class="headerlink" title="setTabAt"></a>setTabAt</h2><p>以 valatile 写的方式，将元素插入 table 数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static final &lt;K,V&gt; void setTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; v) &#123;</div><div class="line">    U.putObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, v);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法用来设置table数组中索引为i的元素</p>
<h2 id="实例构造器方法"><a href="#实例构造器方法" class="headerlink" title="实例构造器方法"></a>实例构造器方法</h2><p>在使用ConcurrentHashMap第一件事自然而然就是new 出来一个ConcurrentHashMap对象，一共提供了如下几个构造器方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 构造一个空的map，即table数组还未初始化，初始化放在第一次插入数据时，默认大小为16</span></div><div class="line">ConcurrentHashMap()</div><div class="line"><span class="comment">// 2. 给定map的大小</span></div><div class="line">ConcurrentHashMap(<span class="keyword">int</span> initialCapacity) </div><div class="line"><span class="comment">// 3. 给定一个map</span></div><div class="line">ConcurrentHashMap(Map&lt;? extends K, ? extends V&gt; m)</div><div class="line"><span class="comment">// 4. 给定map的大小以及加载因子</span></div><div class="line">ConcurrentHashMap(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</div><div class="line"><span class="comment">// 5. 给定map大小，加载因子以及并发度（预计同时操作数据的线程）</span></div><div class="line">ConcurrentHashMap(<span class="keyword">int</span> initialCapacity,<span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</div></pre></td></tr></table></figure>
<p>ConcurrentHashMap一共给我们提供了5中构造器方法，具体使用请看注释，我们来看看第2种构造器，传入指定大小时的情况，该构造器源码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">//1. 小于0直接抛异常</span></div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="comment">//2. 判断是否超过了允许的最大值，超过了话则取最大值，否则再对该值进一步处理</span></div><div class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</div><div class="line">               MAXIMUM_CAPACITY :</div><div class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</div><div class="line">    <span class="comment">//3. 赋值给sizeCtl</span></div><div class="line">    <span class="keyword">this</span>.sizeCtl = cap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的逻辑请看注释，很容易理解，如果小于0就直接抛出异常，如果指定值大于了所允许的最大值的话就取最大值，否则，在对指定值做进一步处理。最后将cap赋值给sizeCtl,关于sizeCtl的说明请看上面的说明，<strong>当调用构造器方法之后，sizeCtl的大小应该就代表了ConcurrentHashMap的大小，即table数组长度</strong>。tableSizeFor做了哪些事情了？源码为：</p>
<h2 id="tableSizeFor"><a href="#tableSizeFor" class="headerlink" title="tableSizeFor"></a>tableSizeFor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">private static final int tableSizeFor(int c) &#123;</div><div class="line">    int n = c - 1;</div><div class="line">    n |= n &gt;&gt;&gt; 1;</div><div class="line">    n |= n &gt;&gt;&gt; 2;</div><div class="line">    n |= n &gt;&gt;&gt; 4;</div><div class="line">    n |= n &gt;&gt;&gt; 8;</div><div class="line">    n |= n &gt;&gt;&gt; 16;</div><div class="line">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过注释就很清楚了，该方法会将调用构造器方法时指定的大小转换成一个2的幂次方数，也就是说ConcurrentHashMap的大小一定是2的幂次方，比如，当指定大小为18时，为了满足2的幂次方特性，实际上concurrentHashMapd的大小为2的5次方（32）。另外，需要注意的是，<strong>调用构造器方法的时候并未构造出table数组（可以理解为ConcurrentHashMap的数据容器），只是算出table数组的长度，当第一次向ConcurrentHashMap插入数据的时候才真正的完成初始化创建table数组的工作</strong>。</p>
<h2 id="helpTransfer-协助扩容"><a href="#helpTransfer-协助扩容" class="headerlink" title="helpTransfer(协助扩容)"></a>helpTransfer(协助扩容)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 协助扩容方法。多线程下，当前线程检测到其他线程正进行扩容操作，则协助其一起扩容；（只有这种情况会被调用）从某种程度上说，其“优先级”很高，只要检测到扩容，就会放下其他工作，先扩容。  </span></div><div class="line"><span class="comment">// 调用之前，nextTable一定已存在。  </span></div><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;  </div><div class="line">    Node&lt;K,V&gt;[] nextTab; intsc;  </div><div class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (finstanceof ForwardingNode) &amp;&amp;  </div><div class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123;  </div><div class="line">        intrs = resizeStamp(tab.length); <span class="comment">//标志位  </span></div><div class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;  </div><div class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;  </div><div class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||  </div><div class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;  </div><div class="line">                transfer(tab, nextTab);<span class="comment">//调用扩容方法，直接进入复制阶段  </span></div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> nextTab;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> table;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="addCount"><a href="#addCount" class="headerlink" title="addCount"></a>addCount</h2><p>在put方法结尾处调用了addCount方法，把当前ConcurrentHashMap的元素个数+1这个方法一共做了两件事,更新baseCount的值，检测是否进行扩容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</div><div class="line">     CounterCell[] as; <span class="keyword">long</span> b, s;</div><div class="line">  </div><div class="line">  	<span class="comment">//利用CAS方法更新baseCount的值</span></div><div class="line">     <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</div><div class="line">         !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;<span class="comment">// 1</span></div><div class="line">         CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</div><div class="line">         <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</div><div class="line">         <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</div><div class="line">             (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</div><div class="line">             !(uncontended =</div><div class="line">               U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</div><div class="line">           	<span class="comment">// 多线程 CAS 发生失败的时候执行</span></div><div class="line">             fullAddCount(x, uncontended); <span class="comment">// 2</span></div><div class="line">             <span class="keyword">return</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</div><div class="line">             <span class="keyword">return</span>;</div><div class="line">         s = sumCount();</div><div class="line">     &#125;</div><div class="line">  	<span class="comment">//如果check值大于等于0 则需要检验是否需要进行扩容操作</span></div><div class="line">     <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</div><div class="line">         Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</div><div class="line">       	<span class="comment">// 当条件满足的时候开始扩容</span></div><div class="line">         <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class="line">             <span class="keyword">int</span> rs = resizeStamp(n);</div><div class="line">           	<span class="comment">// 如果小于0 说明已经有线程在进行扩容了</span></div><div class="line">             <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</div><div class="line">     <span class="comment">// 一下的情况说明已经有在扩容或者多线程进行了扩容，其他线程直接 break 不要进入扩容</span></div><div class="line">                 <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</div><div class="line">                     sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</div><div class="line">                     transferIndex &lt;= <span class="number">0</span>)</div><div class="line">                     <span class="keyword">break</span>;</div><div class="line">               	<span class="comment">// 如果已经有其他线程在执行扩容操作</span></div><div class="line">               	<span class="comment">// 如果相等说明已经完成，可以继续扩容</span></div><div class="line">                 <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</div><div class="line">                     transfer(tab, nt);</div><div class="line">             &#125;</div><div class="line">           	<span class="comment">// 当前线程是唯一的或是第一个发起扩容的线程  此时nextTable=null</span></div><div class="line">    			<span class="comment">// 这个时候 sizeCtl 已经等于(rs&lt;&lt;RESIZE_STAMP_SHIFT)+2 等于一个大的负数，这边</span></div><div class="line">           	<span class="comment">// 加上2很巧，因为 transfer 后面对 sizeCtl-- 操作的时候，最多只能减两个就结束</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</div><div class="line">                                          (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</div><div class="line">                 transfer(tab, <span class="keyword">null</span>);</div><div class="line">             s = sumCount();</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>看上面的注释1,每次都会对 baseCount 加1,如果并发竞争太大，那么可能导致 U.compareAndSwapLong(this,BASECOUNT,b=baseCount,s = b + x) 失败,那么为了提高高并发的时候 baseCount 可见性的失败的问题,又避免一直重试，这样性能会有很大的影响,那么在 jdk 8的时候是有引入一个类 Striped64 ,其中 LongAdder 和 DoubleAdder 就是对这个类的实现。这两个方法都是为了解决高并发场景而生的，是 AtomicLong 的加强版,AtomicLong 在高并发场景性能会比 LongAdder 差。但是 LongAdder 的空间复杂度会高点。</p>
<h2 id="fullAddCount"><a href="#fullAddCount" class="headerlink" title="fullAddCount"></a>fullAddCount</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">fullAddCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> h;</div><div class="line">     <span class="comment">// 获取当前线程的 probe 值作为 hash 值,如果0则强制初始化当前线程的 Probe 值，</span></div><div class="line">  	<span class="comment">// 初始化 probe 值不为 0</span></div><div class="line">     <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</div><div class="line">         ThreadLocalRandom.localInit();      <span class="comment">// force initialization</span></div><div class="line">         h = ThreadLocalRandom.getProbe();</div><div class="line">       	<span class="comment">// 设置未竞争标记为true</span></div><div class="line">         wasUncontended = <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                <span class="comment">// True if last slot nonempty</span></div><div class="line">     <span class="keyword">for</span> (;;) &#123;</div><div class="line">         CounterCell[] as; CounterCell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</div><div class="line">         <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</div><div class="line">             <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) &#123;</div><div class="line">               	<span class="comment">// Try to attach new Cell 如果当前没有 CounterCell 就创建一个</span></div><div class="line">                 <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;            </div><div class="line">                     CounterCell r = <span class="keyword">new</span> CounterCell(x); <span class="comment">// Optimistic create</span></div><div class="line">                     <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</div><div class="line">                         <span class="comment">// 这边加上 cellsBusy 锁  </span></div><div class="line">                         U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</div><div class="line">                         <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</div><div class="line">                         <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></div><div class="line">                             CounterCell[] rs; <span class="keyword">int</span> m, j;</div><div class="line">                             <span class="keyword">if</span> ((rs = counterCells) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                                 (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">                                 rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) &#123;</div><div class="line">                                 rs[j] = r;</div><div class="line">                                 created = <span class="keyword">true</span>;</div><div class="line">                             &#125;</div><div class="line">                         &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                             <span class="comment">// 释放 cellsBusy 锁定，让其他线程可以进来</span></div><div class="line">                             cellsBusy = <span class="number">0</span>; </div><div class="line">                         &#125;</div><div class="line">                         <span class="keyword">if</span> (created)</div><div class="line">                             <span class="keyword">break</span>;</div><div class="line">                         <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line">                 collide = <span class="keyword">false</span>;</div><div class="line">             &#125;</div><div class="line">           	<span class="comment">// wasUncontended 为 false 说明已经发生了竞争，重置为true重新执行上面代码</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></div><div class="line">                 wasUncontended = <span class="keyword">true</span>;      <span class="comment">// Continue after rehash</span></div><div class="line">           	<span class="comment">// 对 cell 的值进行累计x(1)</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">           	<span class="comment">// 表明 as 已经过时，说明 cells 已经初始化完成，看下面，</span></div><div class="line">           	<span class="comment">// 重置 collide 为 false 表明已经存在竞争</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (counterCells != as || n &gt;= NCPU)</div><div class="line">                 collide = <span class="keyword">false</span>;            <span class="comment">// At max size or stale</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</div><div class="line">                 collide = <span class="keyword">true</span>;</div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</div><div class="line">                      U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</div><div class="line">                 <span class="keyword">try</span> &#123;</div><div class="line">                   	<span class="comment">// 下面的方法主要是给 counterCells 扩容，尽可能避免冲突</span></div><div class="line">                     <span class="keyword">if</span> (counterCells == as) &#123;<span class="comment">// Expand table unless stale</span></div><div class="line">                         CounterCell[] rs = <span class="keyword">new</span> CounterCell[n &lt;&lt; <span class="number">1</span>];</div><div class="line">                         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">                             rs[i] = as[i];</div><div class="line">                         counterCells = rs;</div><div class="line">                     &#125;</div><div class="line">                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                     cellsBusy = <span class="number">0</span>;</div><div class="line">                 &#125;</div><div class="line">                 collide = <span class="keyword">false</span>;</div><div class="line">                 <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></div><div class="line">             &#125;</div><div class="line">             h = ThreadLocalRandom.advanceProbe(h);</div><div class="line">         &#125;</div><div class="line">       	<span class="comment">// 表明 counterCells 还没初始化，则初始化，这边用 cellsBusy 加锁</span></div><div class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</div><div class="line">                  U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</div><div class="line">             <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</div><div class="line">             <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></div><div class="line">                 <span class="keyword">if</span> (counterCells == as) &#123;</div><div class="line">                     CounterCell[] rs = <span class="keyword">new</span> CounterCell[<span class="number">2</span>];</div><div class="line">                     rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> CounterCell(x);</div><div class="line">                     counterCells = rs;</div><div class="line">                     init = <span class="keyword">true</span>;</div><div class="line">                 &#125;</div><div class="line">             &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                 cellsBusy = <span class="number">0</span>;</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">if</span> (init)</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">       	<span class="comment">// 最终如果上面的都失败就把 x 累计到 baseCount</span></div><div class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, v = baseCount, v + x))</div><div class="line">             <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>回到 addCount 来,我们每次竞争都对 baseCount 进行加 1 当达到一定的容量时，就需要对 table 进行扩容。 使用 transfer 方法。</p>
<h2 id="transfer"><a href="#transfer" class="headerlink" title="transfer"></a>transfer</h2><p>负责迁移node节点</p>
<p>扩容transfer方法是一个设计极为精巧的方法。通过互斥读写ForwardingNode，多线程可以协同完成扩容任务。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/k7LKAjJm0m.png" alt="mark"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = tab.length, stride;</div><div class="line">  		<span class="comment">//计算每次迁移的node个数（MIN_TRANSFER_STRIDE该值作为下限，以避免扩容线程过多）</span></div><div class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class="line">          	<span class="comment">// 确保每次迁移的node个数不少于16个</span></div><div class="line">            stride = MIN_TRANSFER_STRIDE; </div><div class="line">  		<span class="comment">// nextTab为扩容中的临时table</span></div><div class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              	<span class="comment">//扩容一倍	</span></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">              	<span class="comment">// 1. 新建一个 node 数组，容量为之前的两倍</span></div><div class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</div><div class="line">                nextTab = nt;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></div><div class="line">                sizeCtl = Integer.MAX_VALUE;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            nextTable = nextTab;</div><div class="line">          	<span class="comment">// transferIndex为扩容复制过程中的桶首节点遍历索引</span></div><div class="line">            <span class="comment">// 所以从n开始，表示从后向前遍历</span></div><div class="line">            transferIndex = n;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> nextn = nextTab.length;</div><div class="line">  		<span class="comment">// ForwardingNode是Node节点的直接子类，是扩容过程中的特殊桶首节点</span></div><div class="line">      	<span class="comment">// 该类中没有key,value,next</span></div><div class="line">      	<span class="comment">// hash值为特定的-1</span></div><div class="line">        <span class="comment">// 附加Node&lt;K,V&gt;[] nextTable变量指向扩容中的nextTab</span></div><div class="line">        <span class="comment">// 在find方法中，将扩容中的查询操作导入到nextTab上</span></div><div class="line">  		<span class="comment">//2. 新建forwardingNode引用，在之后会用到</span></div><div class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</div><div class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</div><div class="line">  		<span class="comment">// 循环的关键变量，判断是否已经扩容完成，完成就 return , 退出循环</span></div><div class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; </div><div class="line">  		 <span class="comment">//【1】逆序迁移已经获取到的hash桶集合，如果迁移完毕，则更新transferIndex，</span></div><div class="line">         <span class="comment">// 获取下一批待迁移的hash桶</span></div><div class="line">         <span class="comment">//【2】如果transferIndex=0，表示所以hash桶均被分配，将i置为-1，</span></div><div class="line">  		<span class="comment">// 准备退出transfer方法</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</div><div class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</div><div class="line">          	<span class="comment">// 3. 确定遍历中的索引i（更新待迁移的hash桶索引）</span></div><div class="line">          	<span class="comment">// 循环的关键 i , i-- 操作保证了倒叙遍历数组</span></div><div class="line">            <span class="keyword">while</span> (advance) &#123;</div><div class="line">                <span class="keyword">int</span> nextIndex, nextBound;</div><div class="line">              	<span class="comment">// 更新迁移索引i</span></div><div class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">              	<span class="comment">// transferIndex = 0表示table中所有数组元素都已经有其他线程负责扩容</span></div><div class="line">              	<span class="comment">// nextIndex=transferIndex=n=tab.length(默认16)</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</div><div class="line">                  	<span class="comment">// transferIndex&lt;=0表示已经没有需要迁移的hash桶，</span></div><div class="line">                  	<span class="comment">// 将i置为-1，线程准备退出</span></div><div class="line">                    i = -<span class="number">1</span>;</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">             <span class="comment">//cas无锁算法设置 transferIndex = transferIndex - stride		</span></div><div class="line">             <span class="comment">// 尝试更新transferIndex，获取当前线程执行扩容复制的索引区间</span></div><div class="line">             <span class="comment">// 更新成功，则当前线程负责完成索引为(nextBound，nextIndex)之间的桶首节点扩容</span></div><div class="line">             <span class="comment">//当迁移完bound这个桶后，尝试更新transferIndex，获取下一批待迁移的hash桶</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</div><div class="line">                         (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</div><div class="line">                          nextBound = (nextIndex &gt; stride ?</div><div class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</div><div class="line">                    bound = nextBound;</div><div class="line">                    i = nextIndex - <span class="number">1</span>;</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="comment">//退出transfer</span></div><div class="line">          	<span class="comment">//4.将原数组中的元素复制到新数组中去</span></div><div class="line">            <span class="comment">//4.5 for循环退出，扩容结束修改sizeCtl属性</span></div><div class="line"><span class="comment">// i&lt;0 说明已经遍历完旧的数组tab;i&gt;=n什么时候有可能呢？在下面看到i=n,所以目前i最大应该是n吧</span></div><div class="line"><span class="comment">// i+n&gt;=nextn,nextn=nextTab.length,所以如果满足i+n&gt;=nextn说明已经扩容完成</span></div><div class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class="line">                <span class="keyword">int</span> sc;</div><div class="line">                <span class="keyword">if</span> (finishing) &#123;   <span class="comment">// a</span></div><div class="line">                  	<span class="comment">//最后一个迁移的线程，recheck后，做收尾工作，然后退出</span></div><div class="line">                    nextTable = <span class="keyword">null</span>;</div><div class="line">                    table = nextTab;</div><div class="line">                  	<span class="comment">// 扩容成功，设置新sizeCtl，仍然为总大小的0.75</span></div><div class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">			</div><div class="line">                <span class="comment">// 第一个扩容的线程，执行transfer方法之前，会设置 sizeCtl = </span></div><div class="line">                <span class="comment">// (resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) + 2) 	</span></div><div class="line">                <span class="comment">// 后续帮其扩容的线程，执行transfer方法之前，会设置 sizeCtl = sizeCtl+1</span></div><div class="line">                <span class="comment">// 每一个退出transfer的方法的线程，退出之前，会设置 sizeCtl = sizeCtl-1</span></div><div class="line">                <span class="comment">// 那么最后一个线程退出时：</span></div><div class="line">                <span class="comment">// 必然有sc == (resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) + 2)，</span></div><div class="line">                <span class="comment">// 即 (sc - 2) == resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT</span></div><div class="line">              </div><div class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;                  </div><div class="line">                  	<span class="comment">// 如果有多个线程进行扩容，那么这个值在第二个线程以后就不会相等，因为 </span></div><div class="line">                  	<span class="comment">// sizeCtl 已经被减1了，所以后面的线程只能直接返回，</span></div><div class="line">                  	<span class="comment">// 始终保证只有一个线程执行了a(上面的注释a)</span></div><div class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                  	<span class="comment">// finishing 和 advance 保证线程已经扩容完成了可以退出循环</span></div><div class="line">                    finishing = advance = <span class="keyword">true</span>;</div><div class="line">                  	<span class="comment">//最后退出的线程要重新check下是否全部迁移完毕</span></div><div class="line">                    i = n;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">// 当前table节点为空，不需要复制，直接放入ForwardingNode</span></div><div class="line">          	<span class="comment">//4.1 当前数组中第i个元素为null，用CAS设置成特殊节点forwardingNode(可以理解成占位符)</span></div><div class="line">          	<span class="comment">// 如果 tab[i] 为 null,那么就把 fwd 插入到 tab[i],表明这个节点已经处理过了</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</div><div class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</div><div class="line">          	<span class="comment">// 当前table节点已经是ForwardingNode</span></div><div class="line">            <span class="comment">// 表示已经被其他线程处理了，则直接往前遍历</span></div><div class="line">            <span class="comment">// 通过CAS读写ForwardingNode节点状态，达到多线程互斥处理</span></div><div class="line">          	<span class="comment">// 4.2 如果遍历到ForwardingNode节点说明这个点已经被处理过了直接跳过</span></div><div class="line">            <span class="comment">// 这里是控制并发扩容的核心</span></div><div class="line">          	<span class="comment">// 如果 f.hash=-1 的话说明该节点为 ForwardingNode,说明该节点已经处理过了</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">                advance = <span class="keyword">true</span>; </div><div class="line">          	<span class="comment">//迁移node节点</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">              	<span class="comment">// 锁住当前桶首节点</span></div><div class="line">                <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                        Node&lt;K,V&gt; ln, hn;</div><div class="line">                      	<span class="comment">// 链表节点复制(链表迁移)</span></div><div class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        <span class="comment">// 4.3 处理当前节点为链表的头结点的情况，构造两个链表，一个是原链表  </span></div><div class="line">                        <span class="comment">// 另一个是原链表的反序排列</span></div><div class="line">                            <span class="keyword">int</span> runBit = fh &amp; n;</div><div class="line">                            Node&lt;K,V&gt; lastRun = f;</div><div class="line">                <span class="comment">//将node链表，分成2个新的node链表</span></div><div class="line">                <span class="comment">// 这边还对链表进行遍历，这边的算法和hashMap的算法又不一样了，对半拆分</span></div><div class="line">                <span class="comment">// 把链表拆分为，hash&amp;n 等于0和不等于0的，然后分别放在新表的i和i+n位置           	</span></div><div class="line">                <span class="comment">// 此方法同 HashMap 的 resize</span></div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</div><div class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;</div><div class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</div><div class="line">                                    runBit = b;</div><div class="line">                                    lastRun = p;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</div><div class="line">                                ln = lastRun;</div><div class="line">                                hn = <span class="keyword">null</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                hn = lastRun;</div><div class="line">                                ln = <span class="keyword">null</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</div><div class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</div><div class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class="line">                            &#125;</div><div class="line">                          	<span class="comment">//将新node链表赋给nextTab</span></div><div class="line">                          	<span class="comment">//在nextTable的i位置上插入一个链表</span></div><div class="line">                            setTabAt(nextTab, i, ln);</div><div class="line">                            <span class="comment">//在nextTable的i+n的位置上插入另一个链表</span></div><div class="line">                            setTabAt(nextTab, i + n, hn);</div><div class="line">                          	<span class="comment">// 扩容成功后，设置ForwardingNode节点</span></div><div class="line">                          	<span class="comment">//在table的i位置上插入forwardNode节点表示已经处理过该节点</span></div><div class="line">                          	<span class="comment">// 把已经替换的节点的旧tab的i的位置用fwd替换，fwd包含nextTab</span></div><div class="line">                            setTabAt(tab, i, fwd);</div><div class="line">                            <span class="comment">//设置advance为true 返回到上面的while循环中 就可以执行i--操作</span></div><div class="line">                            advance = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                      	<span class="comment">// 红黑树节点复制(红黑树迁移)</span></div><div class="line">                      	<span class="comment">//4.4 处理当前节点是TreeBin时的情况，操作和上面的类似</span></div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                                <span class="keyword">int</span> h = e.hash;</div><div class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</div><div class="line">                                    (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</div><div class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">                                        lo = p;</div><div class="line">                                    <span class="keyword">else</span></div><div class="line">                                        loTail.next = p;</div><div class="line">                                    loTail = p;</div><div class="line">                                    ++lc;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span> &#123;</div><div class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">                                        hi = p;</div><div class="line">                                    <span class="keyword">else</span></div><div class="line">                                        hiTail.next = p;</div><div class="line">                                    hiTail = p;</div><div class="line">                                    ++hc;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                          	<span class="comment">// 判断扩容后是否还需要红黑树</span></div><div class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</div><div class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</div><div class="line">                            setTabAt(nextTab, i, ln);</div><div class="line">                            setTabAt(nextTab, i + n, hn);</div><div class="line">                          	<span class="comment">// 扩容成功后，设置ForwardingNode节点</span></div><div class="line">                            setTabAt(tab, i, fwd);</div><div class="line">                            advance = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码逻辑请看注释,整个扩容操作分为<strong>两个部分</strong>：</p>
<p><strong>第一部分</strong>是构建一个nextTable,它的容量是原来的两倍，这个操作是单线程完成的。新建table数组的代码为:<code>Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n &lt;&lt; 1]</code>,在原容量大小的基础上右移一位。</p>
<p><strong>第二个部分</strong>就是将原来table中的元素复制到nextTable中，主要是遍历复制的过程。<br>根据运算得到当前遍历的数组的位置i，然后利用tabAt方法获得i位置的元素再进行判断：</p>
<ol>
<li>如果这个位置为空，就在原table中的i位置放入forwardNode节点，这个也是触发并发扩容的关键点；</li>
<li>如果这个位置是Node节点（fh&gt;=0），如果它是一个链表的头节点，就构造一个反序链表，把他们分别放在nextTable的i和i+n的位置上</li>
<li>如果这个位置是TreeBin节点（fh&lt;0），也做一个反序处理，并且判断是否需要untreefi，把处理的结果分别放在nextTable的i和i+n的位置上</li>
<li>遍历过所有的节点以后就完成了复制工作，这时让nextTable作为新的table，并且更新sizeCtl为新容量的0.75倍 ，完成扩容。设置为新容量的0.75倍代码为 <code>sizeCtl = (n &lt;&lt; 1) - (n &gt;&gt;&gt; 1)</code>，仔细体会下是不是很巧妙，n&lt;&lt;1相当于n右移一位表示n的两倍即2n,n&gt;&gt;&gt;1左右一位相当于n除以2即0.5n,然后两者相减为2n-0.5n=1.5n,是不是刚好等于新容量的0.75倍即2n*0.75=1.5n。最后用一个示意图来进行总结（图片摘自网络）：</li>
</ol>
<h2 id="mappingCount-与-size"><a href="#mappingCount-与-size" class="headerlink" title="mappingCount 与 size"></a>mappingCount 与 size</h2><p><strong>mappingCount</strong>与<strong>size</strong>方法的类似 从给出的注释来看，应该使用mappingCount代替size方法 两个方法都没有直接返回basecount 而是统计一次这个值，而这个值其实也是一个大概的数值，因此可能在统计的时候有其他线程正在执行插入或删除操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> n = sumCount();</div><div class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</div><div class="line">            (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</div><div class="line">            (<span class="keyword">int</span>)n);</div><div class="line">&#125;</div><div class="line"> <span class="comment">/**</span></div><div class="line"> * Returns the number of mappings. This method should be used</div><div class="line"> * instead of &#123;<span class="doctag">@link</span> #size&#125; because a ConcurrentHashMap may</div><div class="line"> * contain more mappings than can be represented as an int. The</div><div class="line"> * value returned is an estimate; the actual count may differ if</div><div class="line"> * there are concurrent insertions or removals.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the number of mappings</div><div class="line"> * <span class="doctag">@since</span> 1.8</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">mappingCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> n = sumCount();</div><div class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0L</span>) ? <span class="number">0L</span> : n; <span class="comment">// ignore transient negative values</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    CounterCell[] as = counterCells; CounterCell a;</div><div class="line">    <span class="keyword">long</span> sum = baseCount;</div><div class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</div><div class="line">                sum += a.value;<span class="comment">//所有counter的值求和</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p><strong>和put方法一样，多个remove线程请求不同的hash桶时，可以并发执行</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6283837-95df888f4f738601.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p>
<p>如图所示：删除的node节点的next依然指着下一个元素。此时若有一个遍历线程正在遍历这个已经删除的节点，这个遍历线程依然可以通过next属性访问下一个元素。从遍历线程的角度看，他并没有感知到此节点已经删除了，这说明了ConcurrentHashMap提供了弱一致性的迭代器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> replaceNode(key, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">    <span class="comment">// 当参数 value == null 时，删除节点。否则更新节点的值为value</span></div><div class="line">    <span class="comment">// cv 是个期望值，当 map[key].value 等于期望值 cv 或 cv == null 时，</span></div><div class="line">    <span class="comment">// 删除节点，或者更新节点的值</span></div><div class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">replaceNode</span><span class="params">(Object key, V value, Object cv)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> hash = spread(key.hashCode());</div><div class="line">      <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class="line">          Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</div><div class="line">        	<span class="comment">// table 还没初始化或key对应的 hash 桶为空</span></div><div class="line">          <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</div><div class="line">              (f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>)</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">        	<span class="comment">// 正在扩容</span></div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">              tab = helpTransfer(tab, f);</div><div class="line">          <span class="keyword">else</span> &#123;</div><div class="line">              V oldVal = <span class="keyword">null</span>;</div><div class="line">              <span class="keyword">boolean</span> validated = <span class="keyword">false</span>;</div><div class="line">              <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                	<span class="comment">// CAS 获取 tab[i] ,如果此时 tab[i] != f,说明其他线程修改了 tab[i]</span></div><div class="line">                  <span class="comment">// 回到 for 循环开始处，重新执行</span></div><div class="line">                  <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                    	<span class="comment">// node 链表</span></div><div class="line">                      <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">                          validated = <span class="keyword">true</span>;</div><div class="line">                          <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="keyword">null</span>;;) &#123;</div><div class="line">                              K ek;</div><div class="line">                              <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                                  ((ek = e.key) == key ||</div><div class="line">                                   (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                                  V ev = e.val;</div><div class="line">                                	<span class="comment">// ev 代表参数期望值</span></div><div class="line">                                	<span class="comment">// cv == null:直接更新value/删除节点</span></div><div class="line">                                	<span class="comment">// cv 不为空，则只有在 key 的 oldVal 等于</span></div><div class="line">                                	<span class="comment">// 期望值的时候，才更新 value/删除节点</span></div><div class="line">                                  <span class="keyword">if</span> (cv == <span class="keyword">null</span> || cv == ev ||</div><div class="line">                                      (ev != <span class="keyword">null</span> &amp;&amp; cv.equals(ev))) &#123;</div><div class="line">                                      oldVal = ev;</div><div class="line">                                    	<span class="comment">//更新value</span></div><div class="line">                                      <span class="keyword">if</span> (value != <span class="keyword">null</span>)</div><div class="line">                                          e.val = value;</div><div class="line">                                    	<span class="comment">//删除非头节点</span></div><div class="line">                                      <span class="keyword">else</span> <span class="keyword">if</span> (pred != <span class="keyword">null</span>)</div><div class="line">                                          pred.next = e.next;</div><div class="line">                                    	<span class="comment">//删除头节点</span></div><div class="line">                                      <span class="keyword">else</span></div><div class="line">                                        	<span class="comment">// 因为已经获取了头结点锁，所以此时</span></div><div class="line">                                        	<span class="comment">// 不需要使用casTabAt</span></div><div class="line">                                          setTabAt(tab, i, e.next);</div><div class="line">                                  &#125;</div><div class="line">                                  <span class="keyword">break</span>;</div><div class="line">                              &#125;</div><div class="line">                            	<span class="comment">//当前节点不是目标节点，继续遍历下一个节点</span></div><div class="line">                              pred = e;</div><div class="line">                              <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</div><div class="line">                                	<span class="comment">//到达链表尾部，依旧没有找到，跳出循环</span></div><div class="line">                                  <span class="keyword">break</span>;</div><div class="line">                          &#125;</div><div class="line">                      &#125;</div><div class="line">                    	<span class="comment">//红黑树</span></div><div class="line">                      <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                          validated = <span class="keyword">true</span>;</div><div class="line">                          TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class="line">                          TreeNode&lt;K,V&gt; r, p;</div><div class="line">                          <span class="keyword">if</span> ((r = t.root) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                              (p = r.findTreeNode(hash, key, <span class="keyword">null</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">                              V pv = p.val;</div><div class="line">                              <span class="keyword">if</span> (cv == <span class="keyword">null</span> || cv == pv ||</div><div class="line">                                  (pv != <span class="keyword">null</span> &amp;&amp; cv.equals(pv))) &#123;</div><div class="line">                                  oldVal = pv;</div><div class="line">                                  <span class="keyword">if</span> (value != <span class="keyword">null</span>)</div><div class="line">                                      p.val = value;</div><div class="line">                                  <span class="keyword">else</span> <span class="keyword">if</span> (t.removeTreeNode(p))</div><div class="line">                                      setTabAt(tab, i, untreeify(t.first));</div><div class="line">                              &#125;</div><div class="line">                          &#125;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (validated) &#123;</div><div class="line">                  <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>) &#123;</div><div class="line">                    	<span class="comment">//如果删除了节点，更新size</span></div><div class="line">                      <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">                          addCount(-<span class="number">1L</span>, -<span class="number">1</span>);</div><div class="line">                      <span class="keyword">return</span> oldVal;</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="ForwardingNode-1"><a href="#ForwardingNode-1" class="headerlink" title="ForwardingNode"></a>ForwardingNode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</div><div class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</div><div class="line">      	<span class="comment">//hash值为MOVED（-1）的节点就是ForwardingNode</span></div><div class="line">        <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">this</span>.nextTable = tab;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  	<span class="comment">//通过此方法，访问被迁移到nextTable中的数据</span></div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></div><div class="line">        outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</div><div class="line">            Node&lt;K,V&gt; e; <span class="keyword">int</span> n;</div><div class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</div><div class="line">                (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> eh; K ek;</div><div class="line">                <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</div><div class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">                <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</div><div class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</div><div class="line">                        <span class="keyword">continue</span> outer;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        <span class="keyword">return</span> e.find(h, k);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JDK6,7中的ConcurrentHashmap主要使用Segment来实现减小锁粒度，分割成若干个Segment，在put的时候需要锁住Segment，get时候不加锁，使用volatile来保证可见性，当要统计全局时（比如size），首先会尝试多次计算modcount来确定，这几次尝试中，是否有其他线程进行了修改操作，如果没有，则直接返回size。如果有，则需要依次锁住所有的Segment来计算。</p>
<p>而在1.8的时候摒弃了segment臃肿的设计，这种设计在定位到具体的桶时，要先定位到具体的segment，然后再<br>在segment中定位到具体的桶。而到了1.8的时候是针对的是Node[] tale数组中的每一个桶，进一步减小了锁粒度。并且防止拉链过长导致性能下降，当链表长度大于8的时候采用红黑树的设计。</p>
<p>主要设计上的变化有以下几点:</p>
<ol>
<li>不采用segment而采用node，锁住node来实现减小锁粒度。</li>
<li>设计了MOVED状态 当resize的中过程中 线程2还在put数据，线程2会帮助resize。</li>
<li>使用3个CAS操作来确保node的一些操作的原子性，这种方式代替了锁。</li>
<li>sizeCtl的不同值来代表不同含义，起到了控制的作用。</li>
<li>采用synchronized而不是ReentrantLock</li>
<li>volatile语义提供更细颗粒度的轻量级锁，使得多线程可以(几乎)同时读写实例中的关键量，正确理解当前类所处的状态，进入对应if语句中执行相关逻辑。</li>
<li>采用更加细粒度的hash桶级别锁，扩容期间，依然可以保证写操作的并发度。</li>
<li>多线程无锁扩容的关键就是通过CAS设置sizeCtl与transferIndex变量，协调多个线程对table数组中的node进行迁移。</li>
</ol>
<p>参考文章：<a href="http://www.cnblogs.com/huaizuo/p/5413069.html" target="_blank" rel="external">http://www.cnblogs.com/huaizuo/p/5413069.html</a></p>
<p>参考文章：<a href="http://www.bijishequ.com/detail/560964?p=" target="_blank" rel="external">http://www.bijishequ.com/detail/560964?p=</a></p>
<p>参考文章：<a href="https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/" target="_blank" rel="external">https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/</a></p>
<p>参考文章:   <a href="http://www.jianshu.com/p/5bc70d9e5410" target="_blank" rel="external">http://www.jianshu.com/p/5bc70d9e5410</a></p>
<p>扩容原理:   <a href="http://www.jianshu.com/p/487d00afe6ca" target="_blank" rel="external">http://www.jianshu.com/p/487d00afe6ca</a></p>
<p>遍历操作：<a href="http://www.jianshu.com/p/3e85ac8f8662" target="_blank" rel="external">http://www.jianshu.com/p/3e85ac8f8662</a></p>
<p>改进说明带例子:<a href="http://www.voidcn.com/article/p-gdbewnlb-qh.html" target="_blank" rel="external">http://www.voidcn.com/article/p-gdbewnlb-qh.html</a></p>
<p><a href="http://nannan408.iteye.com/blog/2217042" target="_blank" rel="external">http://nannan408.iteye.com/blog/2217042</a></p>
]]></content>
      
        <categories>
            
            <category> ConcurrentHashMap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA  调试教程]]></title>
      <url>/2018/06/03/IntelliJ%20IDEA%20%20%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="IntelliJ-IDEA-调试教程"><a href="#IntelliJ-IDEA-调试教程" class="headerlink" title="IntelliJ IDEA  调试教程"></a>IntelliJ IDEA  调试教程</h2><p>在调试代码的时候，你的项目得debug模式启动，也就是点那个绿色的甲虫启动服务器，然后，就可以在代码里面断点调试啦。<br>下面不要在意，这个快捷键具体是啥，因为，这个keymap是可以自己配置的，有的人keymap是mac版的，有的是Windows版的。<br>我的就是Windows，而且修改keymap为eclipse的keymap，因为我算是eclipse转过来的吧。</p>
<h2 id="看图，每一个按钮（按钮对应图中的数字）都是什么功能"><a href="#看图，每一个按钮（按钮对应图中的数字）都是什么功能" class="headerlink" title="看图，每一个按钮（按钮对应图中的数字）都是什么功能"></a>看图，每一个按钮（按钮对应图中的数字）都是什么功能</h2><p><img src="http://img.blog.csdn.net/20170320131146112" alt="img"></p>
<ol>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/cjGl0fd8lf.png" alt="mark">rerun XXX，这个就是直接重新跑某个程序。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/h2c1BBH1Ih.png" alt="mark">这个相当于eclipse里面的f8，直接跑完，到下一个断点停下，没有就直接跑完程序。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/Kj8F9A7JGD.png" alt="mark">停止项目或者程序。要是自己的main呢，点一下就停下了，要是Java web项目，则点2下，就把服务器给停了。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/LjEK3ak1Je.png" alt="mark">查看所有的断点设置情况。具体详情，下面有示意图，再细细解释。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/c8G34gE85F.png" alt="mark">直接取消所有断点，让所有断点无效。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/AlDIlcf1BI.png" alt="mark">要是你一不小心把这个下面的布局给弄乱了，你点这个，就把下面的布局给还原咯。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/AFC366akbD.png" alt="mark">跳转到当前代码所执行的地方，也就是说你在看代码的时候，点到其他地方，一点这个按钮，就到了程序执行到当前哪行的代码的地方。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/b3Id5Ee3BD.png" alt="mark">下一步，如果是方法，他是不会跳进去的。就是一行行的往下走。（eclipse里面的快捷键就是f6）</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/clm4ILmmLH.png" alt="mark"><strong>跳转到详情，如果下一行调试代码是可执行方法，就可以f7进去，查看这个方法的运行详细情况。重点就是点进去执行</strong></li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/1k6D64ICmd.png" alt="mark"><strong>从详情跳出去，和上面的9相反。</strong></li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/A5l67jKdJ8.png" alt="mark">看字面意思就是跳转到下一个断点</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/BI0Jkh044K.png" alt="mark">这个点开之后，可以计算你想要看的代码段的值，后面详细上图。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/ckELijK98K.png" alt="mark">看意思，同eclipse里面的watch，查看某个对象的值，自定义的对象。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/Dhc387i7hD.png" alt="mark"><strong>把自定义的查看对象的值，分开到另一个tab页</strong>。</li>
<li><img src="https://blogimg.nos-eastchina1.126.net/171212/d1f2L4FmK1.png" alt="mark">有时候当我们步入方法体之后，还想回退到方法体外，点这个按钮后，断点重新回到方法体之外。在继续还是可以再次进到方法内</li>
</ol>
<h2 id="查看断点处的某个对象的值，可以-如下几个方法："><a href="#查看断点处的某个对象的值，可以-如下几个方法：" class="headerlink" title="查看断点处的某个对象的值，可以 如下几个方法："></a>查看断点处的某个对象的值，可以 如下几个方法：</h2><p>1，选中对象后，鼠标悬停在对象上 2 秒左右<br>2，在watch里面添加这个对象，<br>3，下面也许会自动列出来你代码里面有的<br>4，使用上面图上标注的12的那个按钮</p>
<p>下面就再详细说下 4，12，13，14<br>4，查看所有的断点的详情，点开如下所示。<br>在图中condition中可以设置断点的条件，当i==4的时候，才停下。查看具体断点内容。</p>
<p><img src="http://img.blog.csdn.net/20170320131232675" alt="img"></p>
<p>关于设置断点条件，还可以，直接在代码断点处，右键设置，完啦之后，done，设置完成。</p>
<p><img src="http://img.blog.csdn.net/20170320131255269" alt="img"><br>12，这个用的也比较多，这个就比较随意。可以根据你的输入，计算你要的结果，不局限代码里面的变量啥的。<br>这个在debug的时候，使用起来是很方便的。</p>
<p><img src="http://img.blog.csdn.net/20170320131343972" alt="img"></p>
<p><img src="http://img.blog.csdn.net/20170320131405019" alt="img"><br>13，14，这2个点完之后，效果如下图，只是把自定义的变量和代码里面自带的变量分在两个tab页面展示。<br>你可以点13号按钮，自行添加，你想查看的变量的值。</p>
<p><img src="http://img.blog.csdn.net/20170320131416144" alt="img"></p>
<p>还有个需求，就是<strong>在调试代码的时候，实时的修改，运行状态的代码变量的值。</strong></p>
<p><img src="http://img.blog.csdn.net/20170929165528587" alt="img"></p>
<p>仔细看下图，就知道，怎么在实时调试代码的时候，怎么设置某些变量的值，可以看到，我上面在输入a之后，下面就有类似你写代码时候的提示，你就可以在这地方修改变量的值啦</p>
<p>关于调试的时候，<strong>设置运行时的参数</strong>，如下：</p>
<p><img src="http://img.blog.csdn.net/20170331150125192" alt="img"></p>
<p><img src="http://img.blog.csdn.net/20170331145517965" alt="img"><img src="http://img.blog.csdn.net/20170331145536084" alt="img"></p>
<p>入口如下，2个地方都可以。</p>
<p><img src="http://img.blog.csdn.net/20170331145906070" alt="img"></p>
<p>一般都是跑简单的main方法，跑main方法的时候，还带参数文件的，还是第一次，顺带做个记录吧。</p>
<hr>
<hr>
<p><strong>更新：</strong>这个编辑器为了方便从eclipse编辑器转过来的同学们，他可以设置keymap的。具体看图。</p>
<p><img src="http://img.blog.csdn.net/20170605154813115" alt="img"></p>
<p>因为我就是刚刚开始的时候，使用的就是eclipse，后来转过来的，所以，在使用的时候，就先设置了一下，这个键盘映射。使用的还是以前在eclipse上使用的快捷键。不需要再次去记一遍新的快捷键映射。这个也是极其方便的。</p>
<p>所以，在这个debug的快捷键上和使用eclipse时候，是一样的f5进去，f6是下一步。</p>
]]></content>
      
        <categories>
            
            <category> IntelliJ IDEA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA  版本控制的使用]]></title>
      <url>/2018/06/03/IDEA%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="版本控制的使用"><a href="#版本控制的使用" class="headerlink" title="版本控制的使用"></a>版本控制的使用</h1><h2 id="IntelliJ-IDEA-下的版本控制介绍"><a href="#IntelliJ-IDEA-下的版本控制介绍" class="headerlink" title="IntelliJ IDEA 下的版本控制介绍"></a>IntelliJ IDEA 下的版本控制介绍</h2><p>这一章节放在这么靠前位置来讲是因为版本控制在我心目中的地位比后面的实战知识点都来得重要。不管是个人开发或是团队开发，版本控制都是可以很好地被使用的，目前我找不到任何开发者不使用版本控制的理由。而且对于 IDE 来讲，集成版本控制的本身就是它最大的亮点之一，很多开发者也是为此而使用它。</p>
<p>在本章节中也会对 IntelliJ IDEA 的相关版本控制进行了介绍，会开始涉及到一些 IntelliJ IDEA 人性化设置，也希望你能从这一讲开始认识到 IntelliJ IDEA 的优雅。</p>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-a-version-control-system-introduce-1.jpg" alt="IntelliJ IDEA 下的版本控制介绍"></p>
<blockquote>
<ul>
<li>很多人认为 IntelliJ IDEA 自带了 SVN 或是 Git 等版本控制工具，认为只要安装了 IntelliJ IDEA 就可以完全使用版本控制应有的功能。这完全是一种错误的解读，IntelliJ IDEA 是自带对这些版本控制工具的支持插件，但是该装什么版本控制客户端还是要照样装的。</li>
<li>如上图标注 1 所示，IntelliJ IDEA 对版本控制的支持是以插件化的方式来实现的。旗舰版默认支持目前主流的版本控制软件：CVS、Subversion（SVN）、Git、ClearCase、Mercurial、Perforce、TFS。又因为目前太多人使用 Github 进行协同或是项目版本管理，所以 IntelliJ IDEA 同时自带了 Github 插件，方便 Checkout 和管理你的 Github 项目。</li>
</ul>
</blockquote>
<h2 id="SVN-的配置"><a href="#SVN-的配置" class="headerlink" title="SVN 的配置"></a>SVN 的配置</h2><p>要在 IntelliJ IDEA 中使用 SVN，需要先安装 SVN 客户端或是 TortoiseSVN 这类图形化工具，Windows 系统这里推荐安装 TortoiseSVN，即使在不使用 IntelliJ IDEA 也可以方便管理我们的项目。</p>
<p>SVN 主要使用的版本有 1.6、1.7、1.8，最新的是 1.9。推荐大家使用 1.8 的。如果你的项目使用的是 1.6 的版本，在安装 1.8 之后是可以直接对项目文件进行升级的，所以无需担心，也因此更加推荐大家使用 1.8。</p>
<blockquote>
<ul>
<li>Subversion 官网下载：<a href="https://subversion.apache.org/download/#recommended-release" target="_blank" rel="external">https://subversion.apache.org/download/#recommended-release</a></li>
<li>TortoiseSVN 官网下载：<a href="http://tortoisesvn.net/downloads.zh.html" target="_blank" rel="external">http://tortoisesvn.net/downloads.zh.html</a></li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-b-version-control-system-svn-introduce-1.jpg" alt="SVN 的使用"></p>
<blockquote>
<ul>
<li>如上图箭头所示，在安装 TortoiseSVN 的时候，默认 <code>command line client tools</code>，是不安装的，这里建议勾选上。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-b-version-control-system-svn-introduce-2.jpg" alt="SVN 的使用"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，勾选 <code>Use command line client</code></li>
<li>如上图标注 2 所示，建议 svn 的路径自己根据安装后的路径进行选择，不然有时候 IntelliJ IDEA 无法识别到会报：<code>Cannot run program &quot;svn&quot;</code> 这类错误。</li>
<li>如上图标注 3 所示，当使用一段时间 SVN 以后，发现各种 SVN 相关问题无法解决，可以考虑点击此按钮进行清除一下缓存。</li>
</ul>
</blockquote>
<p>根据目前的使用经验来看，IntelliJ IDEA 下 SVN 的使用经历并不算愉快，至少比 Git 不好用很多，经常遇到很多问题，所以这里也算是先给大家提个醒。如果紧急情况下 IntelliJ IDEA 无法更新、提交的时候，要记得使用 TortoiseSVN 来操作。</p>
<h2 id="Git-的配置"><a href="#Git-的配置" class="headerlink" title="Git 的配置"></a>Git 的配置</h2><p>要在 IntelliJ IDEA 中使用 Git，需要先安装 Git 客户端，这里推荐安装官网版本。</p>
<p>Git 主要的版本有 1.X、2.X，最新的是 2.X，使用版本随意，但是不要太新了，不然可能 IntelliJ IDEA 小旧版本会无法支持可能。</p>
<blockquote>
<ul>
<li>Git 官网下载：<a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a></li>
<li>TortoiseGit 官网下载：<a href="http://download.tortoisegit.org/tgit/" target="_blank" rel="external">http://download.tortoisegit.org/tgit/</a></li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-c-version-control-system-git-introduce-1.jpg" alt="Git 的使用"></p>
<p>如上图标注 1 所示，确定好该路径下是否有对应的可执行文件。</p>
<h2 id="Github-的配置和使用"><a href="#Github-的配置和使用" class="headerlink" title="Github 的配置和使用"></a>Github 的配置和使用</h2><p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-d-version-control-system-github-introduce-1.jpg" alt="Github 的使用"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，填写你的 Github 登录账号和密码，点击 <code>Test</code> 可以进行测试是否可以正确连上。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-d-version-control-system-github-introduce-2.jpg" alt="Github 的使用"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，支持直接从你当前登录的 Github 账号上 Checkout 项目。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-d-version-control-system-github-introduce-3.jpg" alt="Github 的使用"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，支持把当前本地项目分享到你的 Github 账号上。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-d-version-control-system-github-introduce-4.jpg" alt="Github 的使用"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，支持创建 <code>Gist</code>。Github 的 Gist 官网地址：<a href="https://gist.github.com/" target="_blank" rel="external">https://gist.github.com/</a></li>
</ul>
</blockquote>
<h2 id="版本控制主要操作按钮"><a href="#版本控制主要操作按钮" class="headerlink" title="版本控制主要操作按钮"></a>版本控制主要操作按钮</h2><p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-e-version-control-system-operation-introduce-1.jpg" alt="版本控制主要操作按钮"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，对目录进行右键弹出的菜单选项。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-e-version-control-system-operation-introduce-2.jpg" alt="版本控制主要操作按钮"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，对文件进行右键弹出的菜单选项。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-e-version-control-system-operation-introduce-3.jpg" alt="版本控制主要操作按钮"></p>
<blockquote>
<ul>
<li>如上图标注红圈所示，为工具栏上版本控制操作按钮，基本上大家也都是使用这里进行操作。</li>
</ul>
<blockquote>
<ul>
<li>第一个按钮：<code>Update Project</code> 更新项目。</li>
<li>第二个按钮：<code>Commit changes</code> 提交项目上所有变化文件。点击这个按钮不会立马提交所有文件，而是先弹出一个被修改文件的一个汇总框，具体操作下面会有图片进行专门介绍。</li>
<li>第三个按钮：<code>Compare with the Same Repository Version</code> 当前文件与服务器上该文件通版本的内容进行比较。如果当前编辑的文件没有修改，则是灰色不可点击。</li>
<li>第四个按钮：<code>Show history</code> 显示当前文件的历史记录。</li>
<li>第五个按钮：<code>Revert</code> 还原当前被修改的文件到未被修改的版本状态下。如果当前编辑的文件没有修改，则是灰色不可点击。</li>
</ul>
</blockquote>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-e-version-control-system-operation-introduce-4.jpg" alt="版本控制主要操作按钮"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，菜单栏上的版本控制操作区。</li>
</ul>
</blockquote>
<h2 id="版本控制相关的常用设置说明"><a href="#版本控制相关的常用设置说明" class="headerlink" title="版本控制相关的常用设置说明"></a>版本控制相关的常用设置说明</h2><p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-f-version-control-system-settings-introduce-1.jpg" alt="版本控制相关的常用设置说明"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，当前项目使用的版本控制是 <code>Git</code>。如果你不愿意这个项目继续使用版本控制可以点击旁边的减号按钮，如果你要切换版本控制，可以点击 <code>Git</code>，会出现 IntelliJ IDEA 支持的各种版本控制选择列表，但是我们一般情况下一个项目不会有多个版本控制的。</li>
<li>如上图标注 2 所示，<code>Show directories with changed descendants</code> 表示子目录有文件被修改了，则该文件的所有上层目录都显示版本控制被概念的颜色。默认是不勾选的，我一般建议勾选此功能。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-f-version-control-system-settings-introduce-2.jpg" alt="版本控制相关的常用设置说明"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，<code>When files are created</code> 表示当有新文件放进项目中的时候 IntelliJ IDEA 做如何处理，默认是 <code>Show options before adding to version control</code> 表示弹出提示选项，让开发者决定这些新文件是加入到版本控制中还是不加入。如果不想弹出提示，则选择下面两个选项进行默认操作。</li>
<li>如上图标注 2 所示，<code>When files are deleted</code> 表示当有新文件在项目中被删除的时候 IntelliJ IDEA 做如何处理，默认是 <code>Show options before removing from version control</code> 表示弹出提示选项，让开发者决定这些被删除的是否从版本控制中删除。如果不想弹出提示，则选择下面两个选项进行默认操作。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-f-version-control-system-settings-introduce-3.jpg" alt="版本控制相关的常用设置说明"></p>
<blockquote>
<ul>
<li>如上图标注 1 所示，对于不想加入到版本控制的文件，可以添加要此忽略的列表中。但是如果已经加入到版本控制的文件使用此功能，则表示该文件 或 目录无法再使用版本控制相关的操作，比如提交、更新等。我个人使用过程中发现在 SVN 上此功能不太好用，Git 上是可以用的。</li>
</ul>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-f-version-control-system-settings-introduce-4.jpg" alt="版本控制相关的常用设置说明"></p>
<blockquote>
<ul>
<li>上图所示的弹出层就是本文上面说的 <code>Commit Changes</code> 点击后弹出的变动文件汇总弹出层。</li>
<li>如上图标注 1 所示，可以在文件上右键进行操作。</li>
</ul>
<blockquote>
<ul>
<li><code>Show Diff</code> 当前文件与服务器上该文件通版本的内容进行比较。</li>
<li><code>Move to Another Changelist</code> 将选中的文件转移到其他的 <code>Change list</code> 中。<code>Change list</code> 是一个重要的概念，这里需要进行重点说明。很多时候，我们开发一个项目同时并发的任务可能有很多，每个任务涉及到的文件可能都是基于业务来讲的。所以就会存在一个这样的情况：我改了 30 个文件，其中 15 个文件是属于订单问题，剩下 15 个是会员问题，那我希望提交代码的时候是根据业务区分这些文件的，这样我填写 <code>Commit Message</code> 是好描述的，同时在文件多的情况下，我也好区分这些要提交的文件业务模块。所以我一般会把属于订单的 15 个文件转移到其他的 <code>Change list</code>中，先把专注点集中在 15 个会员问题的文件，先提交会员问题的 <code>Change list</code>，然后在提交订单会员的 <code>Change list</code>。我个人还有一种用法是把一些文件暂时不提交的文件转移到一个我指定的 <code>Change list</code>，等后面我觉得有必要提交了，再做提交操作，这样这些文件就不会干扰我当前修改的文件提交。总结下 <code>Change list</code> 的功能就是为了让你更好地管理你的版本控制文件，让你的专注点得到更好的集中，从而提供效率。</li>
<li><code>Jump to Source</code> 打开并跳转到被选中。</li>
<li>如上图标注 2 所示，可以根据工具栏按钮进行操作，操作的对象会鼠标选中的文件，多选可以按 <code>Ctrl</code>后不放，需要注意的是这个更前面的复选框是没有多大关系的。</li>
<li>如上图标注 3 所示，可以在提交前自动对被提交的文件进行一些操作事件（该项目使用的 Git，使用其他版本控制可能有些按钮有差异。）：</li>
<li><code>Reformat code</code> 格式化代码，如果是 Web 开发建议不要勾选，因为格式化 JSP 类文件，格式化效果不好。如果都是 Java 类则可以安心格式化。</li>
<li><code>Rearrange code</code> 重新编排代码，IntelliJ IDEA 支持各种复杂的编排设置选项，这个会在后面说。设置好了编码功能之后，这里就可以尝试勾选这个进行自动编排。</li>
<li><code>Optimize imports</code> 优化导入包，会在自动去掉没有使用的包。这个建议都勾选，这个只对 Java 类有作用，所以不用担心有副作用。</li>
<li><code>Perform code analysis</code> 进行代码分析，这个建议不用在提交的时候处理，而是在开发完之后，要专门养成对代码进行分析的习惯。IntelliJ IDEA 集成了代码分析功能。</li>
<li><code>Check TODO</code> 检查代码中的 <code>TODO</code>。<code>TODO</code> 功能后面也会有章节进行讲解，这里简单介绍：这是一个记录待办事项的功能。</li>
<li><code>Cleanup</code> 清除下版本控制系统，去掉一些版本控制系统的错误信息，建议勾选（主要针对 SVN，Git 不适用）。</li>
<li>如上图标注 4 所示，填写提交的信息。</li>
<li>如上图标注 5 所示，<code>Change list</code> 改变列表，这是一个下拉选项，说明我们可以切换不同的 <code>Change list</code>，提交不同的 <code>Change list</code> 文件。</li>
<li>如上图标注箭头所示，我们可以查看我们提交历史中使用的 <code>Commit Message</code>，有些时候，我们做得是同一个任务，但是需要提交多次，为了更好管理项目，建议是提交的 <code>Message</code> 是保持一致的。</li>
</ul>
</blockquote>
</blockquote>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-f-version-control-system-settings-introduce-5.jpg" alt="版本控制相关的常用设置说明"></p>
<blockquote>
<ul>
<li>如上图标注箭头所示，如果你使用的 Git，点击此位置可以切换分支和创建分支，以及合并、删除分支等操作。</li>
</ul>
</blockquote>
<h2 id="SVN-的使用"><a href="#SVN-的使用" class="headerlink" title="SVN 的使用"></a>SVN 的使用</h2><p>SVN 的这个窗口有的 IntelliJ IDEA 上叫 <code>Changes</code>，有的叫 <code>Version Control</code>，具体是什么原因引起这样的差异，我暂时还不清楚。但是不管叫法如何里面的结构是一样的，所以对使用者来讲没多大影响，但是你需要知道他们其实是一样的功能即可。</p>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-g-svn-feature-1.jpg" alt="SVN 的使用"></p>
<p>上图 <code>Local Changes</code> 这个 Tab 表示当前项目的 SVN 中各个文件的总的情况预览。这里的 <code>Default</code> 是 IntelliJ IDEA 的默认 change list 名称，<code>no commit</code> 是我自己创建的一个change list，我个人有一个习惯是把一些暂时不需要提交的先放这个 list 里面。change list 很常用而且重要，本文前面也有强调过了，所以一定好认真对待。<code>unversioned Files</code>表示项目中未加到版本控制系统中的文件，你可以点击 <code>Click to browse</code>，会弹出一个弹出框列表显示这些未被加入的文件。</p>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-g-svn-feature-2.jpg" alt="SVN 的使用"></p>
<p>上图 <code>Repository</code> 这个 Tab 表示项目的 SVN 信息汇总，内容非常的详细，也是我平时用最多的地方。如果你点击这个 Tab 没看到数据，是因为你需要点击上图红圈这个刷新按钮。初次使用下默认的过滤条件不是我上图这样的，我习惯根据 User 进行过滤筛选，所以上图箭头中的 Filter 我是选择 User。选择之后，如上图标注 1 所示，显示了这个项目中参与提交的各个用户名，选择一个用户之后，上图标注 2 所以会显示出该用户提交了哪些记录。选择标注 2 区域中的某个提交记录后，标注 3 显示对应的具体提交细节，我们可以对这些文件进行右键操作，具体操作内容跟本文上面提到的那些提交时的操作按钮差不多，这里不多讲。</p>
<p>总的来说，SVN 这个功能用来管理和审查开发团队中人员的代码是非常好用的，所以非常非常建议你一定要学会该功能。</p>
<h2 id="Git-常见问题"><a href="#Git-常见问题" class="headerlink" title="Git 常见问题"></a>Git 常见问题</h2><ul>
<li><p>更新的时候报：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Can&apos;t update: no tracked branch</div></pre></td></tr></table></figure>
<ul>
<li>解决办法：打开 git-bash（路径：C:\Program Files\Git\git-bash.exe），切换到这个更新不下来的项目的根目录，然后输入：<code>git branch --set-upstream-to origin/master master</code>，回车之后重新回到 IntelliJ IDEA 进行更新，正常就可以了。</li>
</ul>
</li>
<li><p>输错密码后，弹出验证的登录框没有再出现：</p>
<ul>
<li>解决办法如下图：选择 <code>Do not save, forget passwords after restart</code> 等你确定你的密码没错后再选择保存密码方案。</li>
</ul>
</li>
</ul>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-g-git-problem-1.jpg" alt="Git 常见问题"></p>
<h2 id="Git-Flow-的介绍"><a href="#Git-Flow-的介绍" class="headerlink" title="Git Flow 的介绍"></a>Git Flow 的介绍</h2><h3 id="Git-Flow-概念"><a href="#Git-Flow-概念" class="headerlink" title="Git Flow 概念"></a>Git Flow 概念</h3><ul>
<li>Git Flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。这里的重点是 Vincent Driessen 的分支模型思想，下面讲解的内容也是基于 Vincent Driessen 思想。<ul>
<li>Vincent Driessen 的观点：<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">http://nvie.com/posts/a-successful-git-branching-model/</a></li>
<li><code>Git Flow 是一个 git 扩展集</code> 你可以理解 Git Flow 是一个基于 Git 的插件，这个插件简化了 Git 一些复杂的命令，比如 Git Flow 用一条命令，就可以代替 Git 原生 10 条命令。</li>
<li>Git Flow 对原生的 Git 不会有任何影响，你可以照旧用 Git 原生命令，也可以使用 Git Flow 命令。</li>
</ul>
</li>
<li>还有其他的一些分支管理模型思想，具体可以看：<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-workflow.html</a></li>
</ul>
<h3 id="Git-Flow-核心概念"><a href="#Git-Flow-核心概念" class="headerlink" title="Git Flow 核心概念"></a>Git Flow 核心概念</h3><ul>
<li>必须有的两个核心分支（长期分支）：<ul>
<li>master，Git 代码仓库中默认的一条主分支。这条分支上的代码一般都建议为是正式版本的代码，并且这条分支不能进行代码修改，只能用来合并其他分支。</li>
<li>develop，一般用于存储开发过程的代码分支，并且这条分支也不能进行代码修改，只能用来合并其他辅助分支。</li>
</ul>
</li>
<li>根据情况创建的辅助分支（临时分支）<ul>
<li>feature branches（功能分支）<ul>
<li><strong>基于 develop 分支上创建</strong></li>
<li><strong>开发完成后合并到 develop 分支上</strong></li>
<li>当要开始一个新功能的开发时，我门可以创建一个 Feature branches 。等待这个新功能开发完成并确定应用到新版本中就合并回 develop</li>
<li>对于单人开发的 feature branches，start 之后，开发完成后可以直接 finish。</li>
<li>对于多人开发的 feature branches，start 之后，开发完成后先 publish 给其他开发人员进行合并，最后大家都开发完成后再 finish。这个思路也同样适用下面几个辅助分支场景。</li>
<li>feature branches 开发过程有 bug，直接在 feature branches 上修改、提交。</li>
</ul>
</li>
<li>release branches（预发布分支）<ul>
<li><strong>基于 develop 分支上创建</strong></li>
<li><strong>测试确定新功能没有问题，合并到 develop 分支和 master 分支上</strong></li>
<li>用来做新版本发布前的准备工作，在上面可以做一些小的 bug 修复、准备发布版本号等等和发布有关的小改动，其实已经是一个比较成熟的版本了。另外这样我们既可以在预发布分支上做一些发布前准备，也不会影响 “develop” 分支上下一版本的新功能开发。</li>
</ul>
</li>
<li>hotfix branches（基于 master 基础上的生产环境 bug 的修复分支）<ul>
<li><strong>基于 master 分支上创建</strong></li>
<li><strong>修复测试无误后合并到 master 分支和 develop 分支上</strong></li>
<li>主要用于处理线上版本出现的一些需要立刻修复的 bug 情况</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Git-Flow-安装"><a href="#Git-Flow-安装" class="headerlink" title="Git Flow 安装"></a>Git Flow 安装</h3><ul>
<li>Windows：如果你安装 Git 用的是 <a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for Windows</a>，那它已经内置了。</li>
<li>Mac：<code>brew install git-flow-avh</code></li>
<li>Linux：<code>wget --no-check-certificate -q https://raw.githubusercontent.com/petervanderdoes/gitflow-avh/develop/contrib/gitflow-installer.sh &amp;&amp; sudo bash gitflow-installer.sh install stable; rm gitflow-installer.sh</code></li>
<li>更多版本：<a href="https://github.com/petervanderdoes/gitflow-avh/wiki/Installation" target="_blank" rel="external">https://github.com/petervanderdoes/gitflow-avh/wiki/Installation</a></li>
<li>在系统环境上支持之后，再安装 IntelliJ IDEA 对 Git Flow 支持的插件：<a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration" target="_blank" rel="external">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a></li>
</ul>
<h3 id="Git-Flow-基础命令资料"><a href="#Git-Flow-基础命令资料" class="headerlink" title="Git Flow 基础命令资料"></a>Git Flow 基础命令资料</h3><ul>
<li><a href="https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html</a></li>
<li><a href="http://www.jianshu.com/p/9e4291078853" target="_blank" rel="external">http://www.jianshu.com/p/9e4291078853</a></li>
<li><a href="http://stormzhang.com/git/2014/01/29/git-flow/" target="_blank" rel="external">http://stormzhang.com/git/2014/01/29/git-flow/</a></li>
</ul>
<p>Hotfix/Release/Develop/Feature/</p>
<h3 id="Git-Flow-Integration-插件的使用·"><a href="#Git-Flow-Integration-插件的使用·" class="headerlink" title="Git Flow Integration 插件的使用·"></a>Git Flow Integration 插件的使用·</h3><ul>
<li>如果你已经理解了上面的理论，再看下面这些截图你能理解对应的是什么意思。</li>
</ul>
<p><img src="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/images/xvi-h-git-flow-feature-1.png" alt="Git Flow Integration 插件的使用"></p>
]]></content>
      
        <categories>
            
            <category> IntelliJ IDEA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HashMap 的源码分析]]></title>
      <url>/2018/06/03/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="JDK1-8-HashMap源码分析"><a href="#JDK1-8-HashMap源码分析" class="headerlink" title="JDK1.8 HashMap源码分析"></a>JDK1.8 HashMap源码分析</h1><p>HahsMap实现了Map接口。其继承关系如下图：<br><img src="http://img.blog.csdn.net/20170312124705054?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTk0MzEzMzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="HashMap继承关系图"> </p>
<p>HashMap有两个影响性能的重要参数：初始容量和加载因子。容量是Hash表中桶的个数，当HashMap初始化时，容量就是初始容量。加载因子是衡量hash表多满的一个指标，用来判断是否需要增加容量。当HashMap需要增加容量时，将会导致rehash操作。<br>默认情况下，0.75的加载因子在时间和空间方面提供了很好的平衡。加载因子越大，增加了空间利用率但是也增加了查询的时间。</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h3 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a>底层结构</h3><h4 id="JDK1-8之前的结构"><a href="#JDK1-8之前的结构" class="headerlink" title="JDK1.8之前的结构"></a>JDK1.8之前的结构</h4><p>在JDK1.7之前，HashMap采用的是数组+链表的结构，其结构图如下：<br><img src="http://img.blog.csdn.net/20160127173141337" alt="JDK1.7之前HashMap结构"><br>左边部分代表Hash表，数组的每一个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。</p>
<h4 id="JDK1-8的结构"><a href="#JDK1-8的结构" class="headerlink" title="JDK1.8的结构"></a>JDK1.8的结构</h4><p>JDK1.8 之前的 HashMap 都采用上图的结构，都是基于一个数组和多个单链表，hash 值冲突的时候，就将对应节点以链表形式存储。如果在一个链表中查找一个节点时，将会花费 O(n) 的查找时间，会有很大的性能损失。到了JDK1.8，当同一个Hash值的节点数不小于8时，不再采用单链表形式存储，而是采用红黑树，如下图所示：<br><img src="http://img.blog.csdn.net/20160127173307041" alt="JDK1.8HashMap结构"></p>
<h3 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h3><p>Node是map的接口中的内部接口Map.Entry的实现类,用于存储HashMap中键值对的对象,是HashMap中非常重要的一个内部类,随便提一下,HashMap中有非常多的内部类,本文没做过多的介绍,读者可以自己翻看一下源码,因为篇幅实在太长了…在这里就简单的讲一下,大部分的内部类都是用于集合操作的,如<code>keySet</code>,<code>values</code>,<code>entrySet</code>等方法.</p>
<p>内部组成</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line"><span class="comment">//key是不可变的</span></div><div class="line"><span class="keyword">final</span> K key;</div><div class="line"><span class="comment">//value</span></div><div class="line">V value;</div><div class="line"><span class="comment">//指向下一个entry对象,具体作用后面介绍</span></div><div class="line">Node&lt;K,V&gt; next;</div><div class="line"><span class="comment">//hash值</span></div><div class="line"><span class="keyword">int</span> hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="重要的字段"><a href="#重要的字段" class="headerlink" title="重要的字段"></a>重要的字段</h3><p>HashMap中有几个重要的字段，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//Hash表结构</span></div><div class="line"> <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line"> <span class="comment">//元素个数</span></div><div class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"> <span class="comment">//确保fail-fast机制</span></div><div class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line"> <span class="comment">//下一次增容前的阈值</span></div><div class="line"> <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line"> <span class="comment">//加载因子</span></div><div class="line"> <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line"></div><div class="line">  <span class="comment">//默认初始容量</span></div><div class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line"></div><div class="line"><span class="comment">//最大容量</span></div><div class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line"> <span class="comment">//加载因子</span></div><div class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line"> <span class="comment">//链表转红黑树的阈值</span></div><div class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div></pre></td></tr></table></figure>
<h3 id="红黑树的关键参数"><a href="#红黑树的关键参数" class="headerlink" title="红黑树的关键参数"></a>红黑树的关键参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个桶的树化阈值</span></div><div class="line"><span class="comment">//当桶中元素个数超过这个值时，需要使用红黑树节点替换链表节点</span></div><div class="line"><span class="comment">//这个值必须为 8，要不然频繁转换效率也不高</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="comment">//一个树的链表还原阈值</span></div><div class="line"><span class="comment">//当扩容时，桶中元素个数小于这个值，就会把树形的桶元素 还原（切分）为链表结构</span></div><div class="line"><span class="comment">//这个值应该比上面那个小，至少为 6，避免频繁转换</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</div><div class="line"></div><div class="line"><span class="comment">//哈希表的最小树形化容量</span></div><div class="line"><span class="comment">//当哈希表中的容量大于这个值时，表中的桶才能进行树形化</span></div><div class="line"><span class="comment">//否则桶内元素太多时会扩容，而不是树形化</span></div><div class="line"><span class="comment">//为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</div></pre></td></tr></table></figure>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>HashMap一共有4个构造方法，主要的工作就是完成容量和加载因子的赋值。Hash表都是采用的懒加载方式，当第一次插入数据时才会创建。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造方法 初始化负载因子和阈值</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="comment">//容量判断 </span></div><div class="line">    	<span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    	<span class="comment">//负载银子判断</span></div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//为空时候使用默认分配的大小16,负载因子0.75f,默认的容量为12,当size&gt;threshold默认容量时候就会去扩容</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">        putMapEntries(m, <span class="keyword">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="确定哈希桶数组索引位置"><a href="#确定哈希桶数组索引位置" class="headerlink" title="确定哈希桶数组索引位置"></a>确定哈希桶数组索引位置</h3><p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过 HashMap 的数据结构是数组和链表的结合，所以我们当然希望这个 HashMap 里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用 hash 算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap 定位数组索引位置，直接决定了 hash 方法的离散性能。先看看源码的实现(方法一+方法二):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;   <span class="comment">//jdk1.8 &amp; jdk1.7</span></div><div class="line">     <span class="keyword">int</span> h;</div><div class="line">     <span class="comment">// h = key.hashCode() 为第一步 取hashCode值</span></div><div class="line">     <span class="comment">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></div><div class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div><div class="line">方法二：</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  <span class="comment">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></div><div class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  <span class="comment">//第三步 取模运算</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的 Hash 算法本质上就是三步：<strong>取 key 的 hashCode 值、高位运算、取模运算</strong>。</p>
<p>对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用方法一所计算得到的 Hash 码值总是相同的。我们首先想到的就是把 hash 值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在 HashMap 中是这样做的：调用方法二来计算该对象应该保存在  table  数组的哪个索引处。</p>
<p>这个方法非常巧妙，它通过 h &amp; (table.length -1) 来得到该对象的保存位，而 HashMap 底层数组的长度总是 2 的n 次方，这是 HashMap 在速度上的优化。当 length 总是 2 的 n 次方时，h&amp; (length-1) 运算等价于对 length 取模，也就是 h%length ，但是&amp;比%具有更高的效率。</p>
<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>
<p>下面举例说明下，n为table的长度。</p>
<p><img src="https://tech.meituan.com/img/java-hashmap/hashMap%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE.png" alt="hashMap哈希算法例图"></p>
<h3 id="添加一个元素put-K-k-V-v"><a href="#添加一个元素put-K-k-V-v" class="headerlink" title="添加一个元素put(K k,V v)"></a>添加一个元素put(K k,V v)</h3><p>HashMap 允许K和V为 null，添加一个键值对时使用 put 方法，如果之前已经存在K的键值，那么旧值将会被新值替换。实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * onlyIfAbsent 是否替换,为true时,如果存在值则替换</div><div class="line"> * evict 主要用于LinkedHashMap移除最近未使用的节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">                   <span class="keyword">boolean</span> evict) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">        <span class="comment">//如果哈希表为空或长度为0，调用resize()方法创建哈希表</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">            n = (tab = resize()).length;</div><div class="line">        <span class="comment">//如果哈希表中K对应的桶为空，那么该K，V对将成为该桶的头节点</span></div><div class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">        <span class="comment">//该桶处已有节点，即发生了哈希冲突</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            Node&lt;K,V&gt; e; K k;</div><div class="line">            <span class="comment">//如果添加的值与头节点相同，将e指向p</span></div><div class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                e = p;</div><div class="line">            <span class="comment">//如果与头节点不同，并且该桶目前已经是红黑树状态，调用putTreeVal()方法</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">            <span class="comment">//桶中仍是链表阶段</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//遍历，要比较是否与已有节点相同</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">                    <span class="comment">//将e指向下一个节点，如果是null，说明链表中没有相同节点，添加到链表尾部即可</span></div><div class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">                        <span class="comment">//如果此时链表个数达到了8，那么需要将该桶处链表转换成红黑树，treeifyBin()方法将hash处的桶转成红黑树</span></div><div class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">                            treeifyBin(tab, hash);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//如果与已有节点相同，跳出循环</span></div><div class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    p = e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果有重复节点，那么需要返回旧值</span></div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                V oldValue = e.value;</div><div class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">                    e.value = value;</div><div class="line">                <span class="comment">//子类实现(用于linkedHashMap)</span></div><div class="line">                afterNodeAccess(e);</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//是一个全新节点，那么size需要+1</span></div><div class="line">        ++modCount;</div><div class="line">        <span class="comment">//如果超过了阈值，那么需要resize()扩大容量</span></div><div class="line">        <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">            resize();</div><div class="line">        <span class="comment">//子类实现(用于linkedHashMap)</span></div><div class="line">        afterNodeInsertion(evict);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面代码可以看到 putVal() 方法的流程： </p>
<p><img src="https://blogimg.nos-eastchina1.126.net/180306/LLFLH0iJb5.png" alt="mark"></p>
<ol>
<li>判断哈希表是否为空，如果为空，调用 resize() 方法进行创建哈希表 </li>
<li>根据 hash 值得到哈希表中桶的头节点，如果为 null ，说明是第一个节点，直接调用 newNode() 方法添加节点即可 </li>
<li>如果发生了哈希冲突，那么首先会得到头节点，比较是否相同，如果相同，则进行节点值的替换返回 </li>
<li>如果头节点不相同，但是头节点已经是 TreeNode 了，说明该桶处已经是红黑树了，那么调用 putTreeVal() 方法将该结点加入到红黑树中 </li>
<li>如果头节点不是 TreeNode，说明仍然是链表阶段，那么就需要从头开始遍历，一旦找到了相同的节点就跳出循环或者直到了链表尾部，那么将该节点插入到链表尾部 </li>
<li>如果插入到链表尾部后，链表个数达到了阈值8，那么将会将该链表转换成红黑树，调用 treeifyBin() 方法 </li>
<li>如果是新加一个数据，那么将 size+1，此时如果 size 超过了阈值，那么需要调用 resize() 方法进行扩容</li>
</ol>
<h4 id="resize-方法"><a href="#resize-方法" class="headerlink" title="resize()方法"></a>resize()方法</h4><p>下面我们一个一个分析上面提到的方法。首先是 resize() 方法，resize() 在哈希表为 null 时将会初始化，但是在已经初始化后就会进行容量扩展。下面是resize()的具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 有几种情况</div><div class="line"> * 1.当为空的时候,也就是没有初始化的时候</div><div class="line"> * 2.当到达最大值时候</div><div class="line"> * 3.普通扩容时候</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">        Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;<span class="comment">//旧表容量</span></div><div class="line">        <span class="keyword">int</span> oldThr = threshold;<span class="comment">//旧表与之</span></div><div class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</div><div class="line">        <span class="comment">//旧表存在</span></div><div class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</div><div class="line">             <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></div><div class="line">            <span class="comment">//旧表已经达到了最大容量，不能再大，直接返回旧表</span></div><div class="line">            <span class="comment">//大于2&lt;&lt;30 最大容量设置为2&lt;&lt;32 - 1</span></div><div class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">                <span class="comment">//但是不移动.,没有空间移动</span></div><div class="line">                threshold = Integer.MAX_VALUE;</div><div class="line">                <span class="keyword">return</span> oldTab;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 没超过最大值，就扩充为原来的2倍</span></div><div class="line">            <span class="comment">//否则，新容量为旧容量2倍，新阈值为旧阈值2倍</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果就阈值&gt;0，说明构造方法中指定了容量</span></div><div class="line">        <span class="comment">//用户自己设定了初始化大小</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</div><div class="line">            newCap = oldThr;</div><div class="line">        <span class="comment">//初始化时没有指定阈值和容量，使用默认的容量16和阈值16*0.75=12</span></div><div class="line">        <span class="comment">//如果没使用,使用默认值初始化</span></div><div class="line">        <span class="keyword">else</span> &#123;              </div><div class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 计算新的resize上限</span></div><div class="line">    	<span class="comment">//用户自定义了map的初始化操作</span></div><div class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//更新阈值</span></div><div class="line">    	<span class="comment">//新的容量</span></div><div class="line">        threshold = newThr;</div><div class="line">        <span class="comment">//创建表,初始化或更新表</span></div><div class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line">        table = newTab;</div><div class="line">        <span class="comment">//如果属于容量扩展，rehash操作</span></div><div class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 把每个bucket都移动到新的buckets中</span></div><div class="line">            <span class="comment">//遍历旧表</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line">                Node&lt;K,V&gt; e;</div><div class="line">                <span class="comment">//如果该桶处存在数据</span></div><div class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//将旧表数据置为null，帮助gc</span></div><div class="line">                    oldTab[j] = <span class="keyword">null</span>;</div><div class="line">                    <span class="comment">//如果只有一个节点，直接在新表中赋值</span></div><div class="line">                    <span class="comment">//如果当前位置只有一个元素,直接移动到新的位置</span></div><div class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</div><div class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">                    <span class="comment">//如果该节点已经为红黑树</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">                    <span class="comment">//如果没超过8个 是链表</span></div><div class="line">                    <span class="comment">//如果该桶处仍为链表</span></div><div class="line">                    <span class="comment">// 链表优化重hash的代码块</span></div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        </div><div class="line">                        </div><div class="line"><span class="comment">//下面这段暂时没有太明白，通过e.hash &amp; oldCap将链表分为两队，参考知乎上的一段解释 </span></div><div class="line"><span class="comment">/** </span></div><div class="line">* 把链表上的键值对按hash值分成lo和hi两串，lo串的新索引位置与原先相同[原先位 </div><div class="line">* j]，hi串的新索引位置为[原先位置j+oldCap]； </div><div class="line">* 链表的键值对加入lo还是hi串取决于 判断条件if ((e.hash &amp; oldCap) == 0)，因为* capacity是2的幂，所以oldCap为10...0的二进制形式，若判断条件为真，意味着 </div><div class="line">* oldCap为1的那位对应的hash位为0，对新索引的计算没有影响（新索引 </div><div class="line">* =hash&amp;(newCap-*1)，newCap=oldCap&lt;&lt;2）；若判断条件为假，则 oldCap为1的那位* 对应的hash位为1， </div><div class="line">* 即新索引=hash&amp;( newCap-1 )= hash&amp;( (oldCap&lt;&lt;2) - 1)，相当于多了10...0， </div><div class="line">* 即 oldCap </div><div class="line"></div><div class="line">* 例子： </div><div class="line">* 旧容量=16，二进制10000；新容量=32，二进制100000 </div><div class="line">* 旧索引的计算： </div><div class="line">* hash = xxxx xxxx xxxy xxxx </div><div class="line">* 旧容量-1 1111 </div><div class="line">* &amp;运算 xxxx </div><div class="line">* 新索引的计算： </div><div class="line">* hash = xxxx xxxx xxxy xxxx </div><div class="line">* 新容量-1 1 1111 </div><div class="line">* &amp;运算 y xxxx </div><div class="line">* 新索引 = 旧索引 + y0000，若判断条件为真，则y=0(lo串索引不变)，否则y=1(hi串 </div><div class="line">* 索引=旧索引+旧容量10000) </div><div class="line">*/  </div><div class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                        Node&lt;K,V&gt; next;</div><div class="line"><span class="comment">//此处的操作是这样子的 因为是扩容一倍的操作,所以与旧的容量进行与操作后只有两个值0 和 1</span></div><div class="line"><span class="comment">//如果是0就位置不变,如果是1就移动n+old的位置,</span></div><div class="line"><span class="comment">//个人认为这么做的好处是:</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 1.不会像之前1.7发生循环依赖的问题</div><div class="line">* 2.从概率的角度上来看可以均匀分配,(一般来说高位和低位比例差不多)</div><div class="line">* 3.提高效率</div><div class="line">*/</div><div class="line">                        <span class="keyword">do</span> &#123;</div><div class="line">                            next = e.next;</div><div class="line">                            <span class="comment">// 原索引</span></div><div class="line">                            <span class="comment">//如果和旧容量位运算后的值是0,记得当前节点和存放在链表的尾部</span></div><div class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line">                                    loHead = e;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    loTail.next = e;</div><div class="line">                                loTail = e;</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">//同上</span></div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                                    hiHead = e;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hiTail.next = e;</div><div class="line">                                hiTail = e;</div><div class="line">                            &#125;</div><div class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line">                        <span class="comment">// 原索引放到bucket里</span></div><div class="line">                        <span class="comment">//为0的还是存放在当前位置</span></div><div class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">                            loTail.next = <span class="keyword">null</span>;</div><div class="line">                            newTab[j] = loHead;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 原索引+oldCap放到bucket里</span></div><div class="line">                        <span class="comment">//为1的就放在扩容的j + oldCap那边去</span></div><div class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">                            hiTail.next = <span class="keyword">null</span>;</div><div class="line">                            newTab[j + oldCap] = hiHead;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> newTab;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>因为不像Java8之前的HashMap有初始化操作,此处选择将初始化和扩容放在了一起,并且又增加了红黑树的概念,所以导致整个方法的判断次数非常多,也是这个方法比较庞大的主要原因.</p>
<p>值得一体的是,在扩容后重新计算位置的时候,对链表进行优化,有兴趣可以搜索一下<a href="https://link.juejin.im/?target=http%3A%2F%2Fifeve.com%2Fhashmap-infinite-loop%2F" target="_blank" rel="external">HashMap导致cpu百分之百的问题</a> 而在Java中通过巧妙的进行&amp;操作,然后获得高位是为0还是1.最终移动的位置就是低位的链表留在原地,高位的放在index+oldsize的地方就可以了,不用为每一个元素计算hash值,然后移动到对应的位置,再判断是否是链表,是否需要转换成树的操作.如下所示.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hashcode: <span class="number">1111111111111101212</span></div><div class="line">oldcap:   <span class="number">0000000000000010000</span></div></pre></td></tr></table></figure>
<p>很容易知道这个&amp;操作之后就是为0,因为oldcap都是2的倍数,只有高位为1,所以通过&amp;确认高位要比%取余高效. 此时在看一下上面的扩容操作也许就更清晰了.</p>
<p>resize()首先获取新容量以及新阈值，然后根据新容量创建新表。如果是扩容操作，则需要进行rehash操作，通过e.hash&amp;oldCap将链表分为两列，更好地均匀分布在新表中。 </p>
<h4 id="newNode-方法"><a href="#newNode-方法" class="headerlink" title="newNode()方法"></a>newNode()方法</h4><p>下面介绍一些newNode方法.就是新建一个节点.可以思考一下为什么要把newNode抽离出来?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(hash, key, value, next);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="putTreeVal-方法"><a href="#putTreeVal-方法" class="headerlink" title="putTreeVal() 方法"></a>putTreeVal() 方法</h4><p>添加节点到红黑树的方法是Java8中新添加的,需要满足链表的长度到8,才会转换成红黑树,其主要目的是防止某个下标处的链表太长,导致在找到的时候速度很慢,下面看一下实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//尝试着往树节点添加值</span></div><div class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,<span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</div><div class="line">    Class&lt;?&gt; kc = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//找到根节点</span></div><div class="line">    TreeNode&lt;K,V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</div><div class="line">        <span class="keyword">int</span> dir, ph; K pk;</div><div class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">            dir = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">            dir = <span class="number">1</span>;</div><div class="line">        <span class="comment">//存在的话直接返回,用于替换</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        <span class="comment">//判断节点类型是否相同,不相同</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</div><div class="line">                  (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</div><div class="line">                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//没有搜索过,搜索子节点,搜过了说明没有就跳过.</span></div><div class="line">            <span class="keyword">if</span> (!searched) &#123;</div><div class="line">                TreeNode&lt;K,V&gt; q, ch;</div><div class="line">                searched = <span class="keyword">true</span>;</div><div class="line">                <span class="comment">//去子节点去找</span></div><div class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;(q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                     (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</div><div class="line">                    <span class="keyword">return</span> q;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//对比hash值,决定查找的方向</span></div><div class="line">            dir = tieBreakOrder(k, pk);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TreeNode&lt;K,V&gt; xp = p;</div><div class="line">        <span class="comment">//找到子节点为空,就可以加进去,设置层级关系</span></div><div class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</div><div class="line">            Node&lt;K,V&gt; xpn = xp.next;</div><div class="line">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</div><div class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</div><div class="line">                xp.left = x;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                xp.right = x;</div><div class="line">            xp.next = x;</div><div class="line">            x.parent = x.prev = xp;</div><div class="line">            <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</div><div class="line">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</div><div class="line">            moveRootToFront(tab, balanceInsertion(root, x));</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里简单的梳理一下流程. 1.从根节点查找,找到了返回,如果没找到,找字节点 2.判断往哪个方向去查找 3.如果不存在,在子节点末端添加新节点</p>
<h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split() 方法"></a>split() 方法</h4><p>树的 split() 方法,主要是扩容操作,重新结算位置需要分裂树,之前讲过,扩容会根据和旧 map 容量进行&amp;操作,移动高位为1的节点.并且验证新的节点列表是否需要重新转换成链表的形式.</p>
<p>当头节点是TreeNode时，将调用TreeNode的split方法将红黑树复制到新表中，代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</div><div class="line">            TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;<span class="comment">//就是上面的头结点e</span></div><div class="line">           <span class="comment">// 设置记录高低位的node,和链表一样都是计算高位是0还是1</span></div><div class="line">            <span class="comment">//与链表rehash时类似，将红黑树分为两部分</span></div><div class="line">            TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">            TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">            <span class="comment">//遍历</span></div><div class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</div><div class="line">                next = (TreeNode&lt;K,V&gt;)e.next;</div><div class="line">                e.next = <span class="keyword">null</span>;</div><div class="line">                <span class="comment">//还是和旧的容量做位运算,为0的放在lo中</span></div><div class="line">                <span class="comment">//分散规则与rehash中相同</span></div><div class="line">                <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">//判断是否为头部</span></div><div class="line">                    <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">                        loHead = e;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        loTail.next = e;</div><div class="line">                    loTail = e;</div><div class="line">                    ++lc;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//获取为1的放在hi中</span></div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">                        hiHead = e;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        hiTail.next = e;</div><div class="line">                    hiTail = e;</div><div class="line">                    ++hc;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    		<span class="comment">//lo链表的处理</span></div><div class="line">            <span class="comment">//如果存在低端</span></div><div class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//如果小于7,那么当做链表处理</span></div><div class="line">                <span class="comment">//如果分散后的红黑树节点小于等于6，将红黑树节点转换成链表节点</span></div><div class="line">                <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</div><div class="line">                    tab[index] = loHead.untreeify(map);</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//转换成树</span></div><div class="line">                    tab[index] = loHead;</div><div class="line">                    <span class="comment">//将链表转换成红黑树</span></div><div class="line">                    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></div><div class="line">                        loHead.treeify(tab);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    		<span class="comment">//同上</span></div><div class="line">            <span class="comment">//如果存在高端</span></div><div class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//如果分散后的红黑树节点小于等于6，将红黑树节点转换成链表节点</span></div><div class="line">                <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</div><div class="line">                    tab[index + bit] = hiHead.untreeify(map);</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    tab[index + bit] = hiHead;</div><div class="line">                    <span class="comment">//将链表转换成红黑树节点</span></div><div class="line">                    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</div><div class="line">                        hiHead.treeify(tab);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//把树转换成链表</span></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</div><div class="line">      Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</div><div class="line">      <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</div><div class="line">        hd = p;</div><div class="line">      <span class="keyword">else</span></div><div class="line">        tl.next = p;</div><div class="line">      tl = p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hd;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TreeNode的split方法首先将头节点从头开始遍历，区分出两条单链表，再根据如果节点数小于等于6，那么将单链表的每个TreeNode转换成Node节点；否则将单链表转换成红黑树结构。<br>至此，resize()方法结束。需要注意的是rehash时，由于容量扩大一倍，本来一条链表有可能会分成两条链表，而如果将红黑树结构复制到新表时，有可能需要完成红黑树到单链表的转换。</p>
<h4 id="treeifyBin-方法"><a href="#treeifyBin-方法" class="headerlink" title="treeifyBin()方法"></a>treeifyBin()方法</h4><p>treeifyBin()方法将表中某一个桶处的单链表结果转换成红黑树结构，其实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</div><div class="line">       <span class="comment">//如果哈希表不存在，或者哈希表尺寸小于64，进行resize()扩容</span></div><div class="line">       <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</div><div class="line">           resize();</div><div class="line">       <span class="comment">//如果桶处头节点不为null</span></div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">           TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</div><div class="line">           <span class="comment">//将单链表节点转换成TreeNode结构的单链表</span></div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               <span class="comment">//将Node转换成TreeNode</span></div><div class="line">               TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</div><div class="line">               <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</div><div class="line">                   hd = p;</div><div class="line">               <span class="keyword">else</span> &#123;</div><div class="line">                   p.prev = tl;</div><div class="line">                   tl.next = p;</div><div class="line">               &#125;</div><div class="line">               tl = p;</div><div class="line">           &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">           <span class="comment">//调用treeify将该TreeNode结构的单链表转换成红黑树</span></div><div class="line">           <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</div><div class="line">               hd.treeify(tab);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述操作做了这些事:</p>
<ul>
<li>根据哈希表中元素个数确定是扩容还是树形化</li>
<li>如果是树形化<ul>
<li>遍历桶中的元素，创建相同个数的树形节点，复制内容，建立起联系</li>
<li>然后让桶第一个元素指向新建的树头结点，替换桶的链表内容为树形内容</li>
</ul>
</li>
</ul>
<h4 id="treeify-方法"><a href="#treeify-方法" class="headerlink" title="treeify() 方法"></a>treeify() 方法</h4><p>但是我们发现，之前的操作并没有设置红黑树的颜色值，现在得到的只能算是个二叉树。在 最后调用树形节点 hd.treeify(tab) 方法进行塑造红黑树，来看看代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node[] tab)</span> </span>&#123;</div><div class="line">    TreeNode root = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span> (TreeNode x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</div><div class="line">        next = (TreeNode)x.next;</div><div class="line">        x.left = x.right = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123; <span class="comment">//头回进入循环，确定头结点，为黑色</span></div><div class="line">            x.parent = <span class="keyword">null</span>;</div><div class="line">            x.red = <span class="keyword">false</span>;</div><div class="line">            root = x;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;  <span class="comment">//后面进入循环走的逻辑，x 指向树中的某个节点</span></div><div class="line">            K k = x.key;</div><div class="line">            <span class="keyword">int</span> h = x.hash;</div><div class="line">            Class kc = <span class="keyword">null</span>;</div><div class="line">            <span class="comment">//又一个循环，从根节点开始，遍历所有节点跟当前节点 x 比较，调整位置，有点像冒泡排序</span></div><div class="line">            <span class="keyword">for</span> (TreeNode p = root;;) &#123;</div><div class="line">                <span class="keyword">int</span> dir, ph;        <span class="comment">//这个 dir </span></div><div class="line">                K pk = p.key;</div><div class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)  <span class="comment">//当比较节点的哈希值比 x 大时， dir 为 -1</span></div><div class="line">                    dir = -<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)  <span class="comment">//哈希值比 x 小时 dir 为 1</span></div><div class="line">                    dir = <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</div><div class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</div><div class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</div><div class="line">                    <span class="comment">// 如果比较节点的哈希值、 x </span></div><div class="line">                    dir = tieBreakOrder(k, pk);</div><div class="line"></div><div class="line">                    <span class="comment">//把 当前节点变成 x 的父亲</span></div><div class="line">                    <span class="comment">//如果当前比较节点的哈希值比 x 大，x 就是左孩子，否则 x 是右孩子 </span></div><div class="line">                TreeNode xp = p;</div><div class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</div><div class="line">                    x.parent = xp;</div><div class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</div><div class="line">                        xp.left = x;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        xp.right = x;</div><div class="line">                    root = balanceInsertion(root, x);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    moveRootToFront(tab, root);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="put操作总结"><a href="#put操作总结" class="headerlink" title="put操作总结"></a>put操作总结</h3><p>当调用put插入一个键值对时，在表为空时，会创建表。如果桶为空时，直接插入节点，如果桶不为空时，则需要对当前桶中包含的结构做判断，如果已是红黑树结构，那么需要使用红黑树的插入方法；如果不是红黑树结构，则需要遍历链表，如果添加到链表后端，如果该条链表达到了8，那么需要将该链表转换成红黑树，从treeifyBin方法可以看到，当容量小于64时，不会进行红黑树转换，只会扩容。当成功新加一个桶，那么需要将尺寸和阈值进行判断，是否需要进行resize()操作。</p>
<h3 id="get-K-k-操作"><a href="#get-K-k-操作" class="headerlink" title="get(K k)操作"></a>get(K k)操作</h3><p>get(K k)根据键得到值，如果值不存在，那么返回null。其实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//根据键的hash值和键得到对应节点</span></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</div><div class="line">        <span class="comment">//可以从桶中得到对应hash值的第一个节点</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//检查首节点，如果首节点匹配，那么直接返回首节点</span></div><div class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                <span class="keyword">return</span> first;</div><div class="line">            <span class="comment">//如果首节点还有后续节点</span></div><div class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//如果首节点是红黑树节点，调用getTreeNode()方法</span></div><div class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">                <span class="comment">//首节点是链表结构，从前往后遍历</span></div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    <span class="comment">//一旦匹配，返回节点</span></div><div class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                        <span class="keyword">return</span> e;</div><div class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面代码可以看到getNode()方法中有多种情况：<br>\1. 表为空或表的长度为0或表中不存在key对应的hash值桶，那么返回null<br>\2. 如果表中有key对应hash值的桶，得到首节点，如果首节点匹配，那么直接返回；<br>\3. 如果首节点不匹配，并且没有后续节点，那么返回null<br>\4. 如果首节点有后续节点并且首节点是TreeNode,调用getTreeNode方法寻找节点<br>\5. 如果首节点有后续节点并且是链表结构，那么从前往后遍历，一旦找到则返回节点，否则返回null</p>
<h3 id="remove-操作"><a href="#remove-操作" class="headerlink" title="remove()操作"></a>remove()操作</h3><p>remove(K k)用于根据键值删除键值对，如果哈希表中存在该键，那么返回键对应的值，否则返回null。其实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</div><div class="line">            <span class="keyword">null</span> : e.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//按照hash和key删除节点，如果不存在节点，则返回null</span></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></div><div class="line">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</div><div class="line">        <span class="comment">//如果哈希表不为空并且存在桶与hash值匹配,p为桶中的头节点</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</div><div class="line">            <span class="comment">//case 1：如果头节点匹配</span></div><div class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                node = p;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">//case2：如果头节点不匹配，且头节点是TreeNode，即桶中的结构为红黑树结构</span></div><div class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//case 3:如果头节点不匹配，且头节点是Node，即桶中的结构为链表结构，遍历链表</span></div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        <span class="comment">//一旦匹配，跳出循环</span></div><div class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                            ((k = e.key) == key ||</div><div class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">                            node = e;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        p = e;</div><div class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//如果存在待删除节点节点</span></div><div class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</div><div class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</div><div class="line">                <span class="comment">//如果节点是TreeNode，使用红黑树的方法</span></div><div class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</div><div class="line">                <span class="comment">//如果待删除节点是头节点，更改桶中的头节点即可</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</div><div class="line">                    tab[index] = node.next;</div><div class="line">                <span class="comment">//在链表遍历过程中，p代表node节点的前驱节点</span></div><div class="line">                <span class="keyword">else</span></div><div class="line">                    p.next = node.next;</div><div class="line">                ++modCount;</div><div class="line">                --size;</div><div class="line">                <span class="comment">//子类实现</span></div><div class="line">                afterNodeRemoval(node);</div><div class="line">                <span class="keyword">return</span> node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，removeNode()方法首先是找到待删除的节点，如果存在待删除节点，接下来再执行删除操作。查询时流程与getNode()方法的流程类似，只不过多了在遍历链表时还需要保存前驱节点，因为后面删除时要用到（单链表结构）。删除节点时就比较简单了，三种情况三种处理方式,分别是：<br>\1. 如果待删除节点是TreeNode，那么调用removeTreeNode()方法<br>\2. 如果待删除节点是Node，并且待删除节点就是头节点，那么将头节点更改为原有节点的下一个节点就可以了<br>\3. 如果待删除节点是Node且待删除节点不是头节点，那么将遍历过程中保存的前驱节点p的后继节点设为node的后继节点就可以了</p>
<h3 id="红黑树中查找元素-getTreeNode"><a href="#红黑树中查找元素-getTreeNode" class="headerlink" title="红黑树中查找元素 getTreeNode()"></a>红黑树中查找元素 getTreeNode()</h3><p>HashMap 的查找方法是 get():</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node e;</div><div class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它通过计算指定 key 的哈希值后，调用内部方法 getNode()；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">    Node[] tab; Node first, e; <span class="keyword">int</span> n; K k;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> first;</div><div class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                <span class="keyword">return</span> ((TreeNode)first).getTreeNode(hash, key);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 getNode() 方法就是根据哈希表元素个数与哈希值求模（<code>使用的公式是 (n - 1) &amp;hash</code>）得到 key 所在的桶的头结点，如果头节点恰好是红黑树节点，就调用红黑树节点的 getTreeNode() 方法，否则就遍历链表节点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> TreeNode <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getTreeNode 方法使通过调用树形节点的 find() 方法进行查找：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从根节点根据 哈希值和 key 进行查找</span></div><div class="line"><span class="function"><span class="keyword">final</span> TreeNode <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class kc)</span> </span>&#123;</div><div class="line">    TreeNode p = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">int</span> ph, dir; K pk;</div><div class="line">        TreeNode pl = p.left, pr = p.right, q;</div><div class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">            p = pl;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">            p = pr;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</div><div class="line">            p = pr;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</div><div class="line">            p = pl;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</div><div class="line">                  (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                 (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</div><div class="line">            p = (dir &lt; <span class="number">0</span>) ? pl : pr;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> q;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            p = pl;</div><div class="line">    &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于之前添加时已经保证这个树是有序的，因此查找时基本就是折半查找，效率很高。</p>
<p>这里和插入时一样，如果对比节点的哈希值和要查找的哈希值相等，就会判断 key 是否相等，相等就直接返回（也没有判断值哎）；不相等就从子树中递归查找。</p>
<h2 id="HashMap总结"><a href="#HashMap总结" class="headerlink" title="HashMap总结"></a>HashMap总结</h2><p>至此，我们分析完了HashMap的主要方法：构造器、put、get和remove。只需要明白JDK1.8的HashMap底层结构，那么就很好理解了。需要注意的是什么时候应该将链表结构转换成红黑树结构，什么时候又应该将红黑树结构重新转换成链表结构，本文没有具体解释有关红黑树的结构，但是这并不影响理解HashMap的基本原理。<br><strong>另外需要注意的是，本文的源码是基于JDK1.8的。</strong></p>
]]></content>
      
        <categories>
            
            <category> HashMap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HashMap 的扩容机制]]></title>
      <url>/2018/06/03/HashMap1.7%20%E5%92%8C%201.8%20%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h1 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h1><p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。</p>
<p>我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;   <span class="comment">//传入新的容量</span></div><div class="line"> <span class="number">2</span>     Entry[] oldTable = table;    <span class="comment">//引用扩容前的Entry数组</span></div><div class="line"> <span class="number">3</span>     <span class="keyword">int</span> oldCapacity = oldTable.length;         </div><div class="line"> <span class="number">4</span>     <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class="comment">//扩容前的数组大小如果已经达到最大(2^30)了</span></div><div class="line"> <span class="number">5</span>         threshold = Integer.MAX_VALUE; <span class="comment">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></div><div class="line"> <span class="number">6</span>         <span class="keyword">return</span>;</div><div class="line"> <span class="number">7</span>     &#125;</div><div class="line"> <span class="number">8</span>  </div><div class="line"> <span class="number">9</span>     Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];  <span class="comment">//初始化一个新的Entry数组</span></div><div class="line"><span class="number">10</span>     transfer(newTable);                         <span class="comment">//！！将数据转移到新的Entry数组里</span></div><div class="line"><span class="number">11</span>     table = newTable;                           <span class="comment">//HashMap的table属性引用新的Entry数组</span></div><div class="line"><span class="number">12</span>     threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);<span class="comment">//修改阈值</span></div><div class="line"><span class="number">13</span> &#125;</div></pre></td></tr></table></figure>
<p>这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>     Entry[] src = table;                   <span class="comment">//src引用了旧的Entry数组</span></div><div class="line"> <span class="number">3</span>     <span class="keyword">int</span> newCapacity = newTable.length;</div><div class="line"> <span class="number">4</span>     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123; <span class="comment">//遍历旧的Entry数组</span></div><div class="line"> <span class="number">5</span>         Entry&lt;K,V&gt; e = src[j];             <span class="comment">//取得旧Entry数组的每个元素</span></div><div class="line"> <span class="number">6</span>         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">7</span>             src[j] = <span class="keyword">null</span>;<span class="comment">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span></div><div class="line"> <span class="number">8</span>             <span class="keyword">do</span> &#123;</div><div class="line"> <span class="number">9</span>                 Entry&lt;K,V&gt; next = e.next;</div><div class="line"><span class="number">10</span>                 <span class="keyword">int</span> i = indexFor(e.hash, newCapacity); <span class="comment">//！！重新计算每个元素在数组中的位置</span></div><div class="line"><span class="number">11</span>                 e.next = newTable[i]; <span class="comment">//标记[1]</span></div><div class="line"><span class="number">12</span>                 newTable[i] = e;      <span class="comment">//将元素放在数组上</span></div><div class="line"><span class="number">13</span>                 e = next;             <span class="comment">//访问下一个Entry链上的元素</span></div><div class="line"><span class="number">14</span>             &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</div><div class="line"><span class="number">15</span>         &#125;</div><div class="line"><span class="number">16</span>     &#125;</div><div class="line"><span class="number">17</span> &#125;</div></pre></td></tr></table></figure>
<p>newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。</p>
<p>下面举个例子说明下扩容过程。假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。</p>
<p><img src="https://tech.meituan.com/img/java-hashmap/jdk1.7%E6%89%A9%E5%AE%B9%E4%BE%8B%E5%9B%BE.png" alt="jdk1.7扩容例图"></p>
<p>下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。</p>
<p><img src="https://tech.meituan.com/img/java-hashmap/hashMap%201.8%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE1.png" alt="hashMap 1.8 哈希算法例图1"></p>
<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>
<p><img src="https://tech.meituan.com/img/java-hashmap/hashMap%201.8%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE2.png" alt="hashMap 1.8 哈希算法例图2"></p>
<p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：</p>
<p><img src="https://tech.meituan.com/img/java-hashmap/jdk1.8%20hashMap%E6%89%A9%E5%AE%B9%E4%BE%8B%E5%9B%BE.png" alt="jdk1.8 hashMap扩容例图"></p>
<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。有兴趣的同学可以研究下JDK1.8的resize源码，写的很赞，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line"> <span class="number">2</span>     Node&lt;K,V&gt;[] oldTab = table;</div><div class="line"> <span class="number">3</span>     <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</div><div class="line"> <span class="number">4</span>     <span class="keyword">int</span> oldThr = threshold;</div><div class="line"> <span class="number">5</span>     <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</div><div class="line"> <span class="number">6</span>     <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">7</span>         <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></div><div class="line"> <span class="number">8</span>         <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line"> <span class="number">9</span>             threshold = Integer.MAX_VALUE;</div><div class="line"><span class="number">10</span>             <span class="keyword">return</span> oldTab;</div><div class="line"><span class="number">11</span>         &#125;</div><div class="line"><span class="number">12</span>         <span class="comment">// 没超过最大值，就扩充为原来的2倍</span></div><div class="line"><span class="number">13</span>         <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line"><span class="number">14</span>                  oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line"><span class="number">15</span>             newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line"><span class="number">16</span>     &#125;</div><div class="line"><span class="number">17</span>     <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line"><span class="number">18</span>         newCap = oldThr;</div><div class="line"><span class="number">19</span>     <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line"><span class="number">20</span>         newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line"><span class="number">21</span>         newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line"><span class="number">22</span>     &#125;</div><div class="line"><span class="number">23</span>     <span class="comment">// 计算新的resize上限</span></div><div class="line"><span class="number">24</span>     <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">25</span> </div><div class="line"><span class="number">26</span>         <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line"><span class="number">27</span>         newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line"><span class="number">28</span>                   (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line"><span class="number">29</span>     &#125;</div><div class="line"><span class="number">30</span>     threshold = newThr;</div><div class="line"><span class="number">31</span>     <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>，<span class="string">"unchecked"</span>&#125;)</div><div class="line"><span class="number">32</span>         Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line"><span class="number">33</span>     table = newTab;</div><div class="line"><span class="number">34</span>     <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">35</span>         <span class="comment">// 把每个bucket都移动到新的buckets中</span></div><div class="line"><span class="number">36</span>         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line"><span class="number">37</span>             Node&lt;K,V&gt; e;</div><div class="line"><span class="number">38</span>             <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">39</span>                 oldTab[j] = <span class="keyword">null</span>;</div><div class="line"><span class="number">40</span>                 <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</div><div class="line"><span class="number">41</span>                     newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line"><span class="number">42</span>                 <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line"><span class="number">43</span>                     ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line"><span class="number">44</span>                 <span class="keyword">else</span> &#123; <span class="comment">// 链表优化重hash的代码块</span></div><div class="line"><span class="number">45</span>                     Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line"><span class="number">46</span>                     Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line"><span class="number">47</span>                     Node&lt;K,V&gt; next;</div><div class="line"><span class="number">48</span>                     <span class="keyword">do</span> &#123;</div><div class="line"><span class="number">49</span>                         next = e.next;</div><div class="line"><span class="number">50</span>                         <span class="comment">// 原索引</span></div><div class="line"><span class="number">51</span>                         <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">52</span>                             <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line"><span class="number">53</span>                                 loHead = e;</div><div class="line"><span class="number">54</span>                             <span class="keyword">else</span></div><div class="line"><span class="number">55</span>                                 loTail.next = e;</div><div class="line"><span class="number">56</span>                             loTail = e;</div><div class="line"><span class="number">57</span>                         &#125;</div><div class="line"><span class="number">58</span>                         <span class="comment">// 原索引+oldCap</span></div><div class="line"><span class="number">59</span>                         <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">60</span>                             <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line"><span class="number">61</span>                                 hiHead = e;</div><div class="line"><span class="number">62</span>                             <span class="keyword">else</span></div><div class="line"><span class="number">63</span>                                 hiTail.next = e;</div><div class="line"><span class="number">64</span>                             hiTail = e;</div><div class="line"><span class="number">65</span>                         &#125;</div><div class="line"><span class="number">66</span>                     &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line"><span class="number">67</span>                     <span class="comment">// 原索引放到bucket里</span></div><div class="line"><span class="number">68</span>                     <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">69</span>                         loTail.next = <span class="keyword">null</span>;</div><div class="line"><span class="number">70</span>                         newTab[j] = loHead;</div><div class="line"><span class="number">71</span>                     &#125;</div><div class="line"><span class="number">72</span>                     <span class="comment">// 原索引+oldCap放到bucket里</span></div><div class="line"><span class="number">73</span>                     <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">74</span>                         hiTail.next = <span class="keyword">null</span>;</div><div class="line"><span class="number">75</span>                         newTab[j + oldCap] = hiHead;</div><div class="line"><span class="number">76</span>                     &#125;</div><div class="line"><span class="number">77</span>                 &#125;</div><div class="line"><span class="number">78</span>             &#125;</div><div class="line"><span class="number">79</span>         &#125;</div><div class="line"><span class="number">80</span>     &#125;</div><div class="line"><span class="number">81</span>     <span class="keyword">return</span> newTab;</div><div class="line"><span class="number">82</span> &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HashMap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HashMap 的详细分析]]></title>
      <url>/2018/06/03/HashMap%20%E7%9A%84%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="HashMap-的详细分析"><a href="#HashMap-的详细分析" class="headerlink" title="HashMap 的详细分析"></a>HashMap 的详细分析</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次我和大家一起学习<code>HashMap</code>，<code>HashMap</code>我们在工作中经常会使用，而且面试中也很频繁会问到，因为它里面蕴含着很多知识点，可以很好的考察个人基础。但一个这么重要的东西，我为什么没有在一开始就去学习它呢，因为它是由多种基础的数据结构和一些代码设计思想组成的。我们要学习了这些基础，再学习<code>HashMap</code>，这样我们才能更好的去理解它。古人云：无欲速，无见小利。欲速则不达，见小利则大事不成。</p>
<a id="more"></a>
<p><code>HashMap</code>其实就是<code>ArrayList</code>和<code>LinkedList</code>的数据结构加上<code>hashCode</code>和<code>equals</code>方法的思想设计出来的。没有理解上述说的知识点的同学可以翻开我过往的文章记录。</p>
<p>下面我就以面试问答的形式学习我们的——<code>HashMap</code>（源码分析基于JDK8，辅以JDK7），问答内容只是对<code>HashMap</code>的一个总结归纳，因为现时已经有大牛把<code>HashMap</code>通俗易懂的剖析了一遍，我学习<code>HashMap</code>也是主要通过这篇文章学习的，强烈推荐：美团点评技术团队的<a href="https://link.juejin.im/?target=https%3A%2F%2Ftech.meituan.com%2Fjava-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></p>
<h1 id="问答内容"><a href="#问答内容" class="headerlink" title="问答内容"></a>问答内容</h1><h2 id="HashMap-的主要用途"><a href="#HashMap-的主要用途" class="headerlink" title="HashMap 的主要用途"></a>HashMap 的主要用途</h2><p>问：<code>HashMap</code>有用过吗？您能给我说说他的主要用途吗？</p>
<p>答：</p>
<ul>
<li>有用过，我在平常工作中经常会用到<code>HashMap</code>这种数据结构，<code>HashMap</code>是基于<code>Map</code>接口实现的一种键-值对<code>&lt;key,value&gt;</code>的存储结构，允许<code>null</code>值，同时非有序，非同步(即线程不安全)。<code>HashMap</code>的底层实现是数组 + 链表 + 红黑树（JDK1.8增加了红黑树部分）。它存储和查找数据时，是根据键<code>key</code>的<code>hashCode</code>的值计算出具体的存储位置。<code>HashMap</code>最多只允许一条记录的键<code>key</code>为<code>null</code>，<code>HashMap</code>增删改查等常规操作都有不错的执行效率，是<code>ArrayList</code>和<code>LinkedList</code>等数据结构的一种折中实现。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个HashMap，如果没有指定初始大小，默认底层hash表数组的大小为16</span></div><div class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line"><span class="comment">// 往容器里面添加元素</span></div><div class="line">hashMap.put(<span class="string">"小明"</span>, <span class="string">"好帅"</span>);</div><div class="line">hashMap.put(<span class="string">"老王"</span>, <span class="string">"坑爹货"</span>);</div><div class="line">hashMap.put(<span class="string">"老铁"</span>, <span class="string">"没毛病"</span>);</div><div class="line">hashMap.put(<span class="string">"掘金"</span>, <span class="string">"好地方"</span>);</div><div class="line">hashMap.put(<span class="string">"王五"</span>, <span class="string">"别搞事"</span>);</div><div class="line"><span class="comment">// 获取key为小明的元素 好帅</span></div><div class="line">String element = hashMap.get(<span class="string">"小明"</span>);</div><div class="line"><span class="comment">// value : 好帅</span></div><div class="line">System.out.println(element);</div><div class="line"><span class="comment">// 移除key为王五的元素</span></div><div class="line">String removeElement = hashMap.remove(<span class="string">"王五"</span>);</div><div class="line"><span class="comment">// value : 别搞事</span></div><div class="line">System.out.println(removeElement);</div><div class="line"><span class="comment">// 修改key为小明的元素的值value 为 其实有点丑</span></div><div class="line">hashMap.replace(<span class="string">"小明"</span>, <span class="string">"其实有点丑"</span>);</div><div class="line"><span class="comment">// &#123;老铁=没毛病, 小明=其实有点丑, 老王=坑爹货, 掘金=好地方&#125;</span></div><div class="line">System.out.println(hashMap);</div><div class="line"><span class="comment">// 通过put方法也可以达到修改对应元素的值的效果</span></div><div class="line">hashMap.put(<span class="string">"小明"</span>, <span class="string">"其实还可以啦,开玩笑的"</span>);</div><div class="line"><span class="comment">// &#123;老铁=没毛病, 小明=其实还可以啦,开玩笑的, 老王=坑爹货, 掘金=好地方&#125;</span></div><div class="line">System.out.println(hashMap);</div><div class="line"><span class="comment">// 判断key为老王的元素是否存在(捉奸老王)</span></div><div class="line"><span class="keyword">boolean</span> isExist = hashMap.containsKey(<span class="string">"老王"</span>);</div><div class="line"><span class="comment">// true , 老王竟然来搞事</span></div><div class="line">System.out.println(isExist);</div><div class="line"><span class="comment">// 判断是否有 value = "坑爹货" 的人</span></div><div class="line"><span class="keyword">boolean</span> isHasSomeOne = hashMap.containsValue(<span class="string">"坑爹货"</span>);</div><div class="line"><span class="comment">// true 老王是坑爹货</span></div><div class="line">System.out.println(isHasSomeOne);</div><div class="line"><span class="comment">// 查看这个容器里面还有几个家伙 value : 4</span></div><div class="line">System.out.println(hashMap.size());</div></pre></td></tr></table></figure>
<ul>
<li><code>HashMap</code>的底层实现是数组 + 链表 + 红黑树（JDK1.8增加了红黑树部分），核心组成元素有：</li>
</ul>
<ol>
<li><code>int size;</code>用于记录<code>HashMap</code>实际存储元素的个数；</li>
<li><code>float loadFactor;</code>负载因子（默认是0.75，此属性后面详细解释）。</li>
<li><code>int threshold;</code>下一次扩容时的阈值，达到阈值便会触发扩容机制<code>resize</code>（阈值 threshold = 容器容量 capacity * 负载因子 load factor）。也就是说，在容器定义好容量之后，负载因子越大，所能容纳的键值对元素个数就越多。</li>
<li><code>Node&lt;K,V&gt;[] table;</code> 底层数组，充当哈希表的作用，用于存储对应hash位置的元素<code>Node&lt;K,V&gt;</code>，此数组长度总是2的N次幂。（具体原因后面详细解释）</li>
</ol>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> &#123;</div><div class="line">·····</div><div class="line"></div><div class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 哈希表，在第一次使用到时进行初始化，重置大小是必要的操作，</div><div class="line">     * 当分配容量时，长度总是2的N次幂。</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实际存储的key - value 键值对 个数</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下一次扩容时的阈值 </div><div class="line">     * (阈值 threshold = 容器容量 capacity * 负载因子 load factor).</div><div class="line">     * <span class="doctag">@serial</span></div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 哈希表的负载因子</div><div class="line">     *</div><div class="line">     * <span class="doctag">@serial</span></div><div class="line">     */</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line"></div><div class="line">·····</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其中<code>Node&lt;K,V&gt;[] table;</code>哈希表存储的核心元素是<code>Node&lt;K,V&gt;</code>,<code>Node&lt;K,V&gt;</code>包含：</li>
</ul>
<ol>
<li><code>final int hash;</code>元素的哈希值，决定元素存储在<code>Node&lt;K,V&gt;[] table;</code>哈希表中的位置。由<code>final</code>修饰可知，当<code>hash</code>的值确定后，就不能再修改。</li>
<li><code>final K key;</code> 键，由<code>final</code>修饰可知，当<code>key</code>的值确定后，就不能再修改。</li>
<li><code>V value;</code> 值</li>
<li><code>Node&lt;K,V&gt; next;</code> 记录下一个元素结点(单链表结构，用于解决hash冲突)</li>
</ol>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义HashMap存储元素结点的底层实现</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">//元素的哈希值 由final修饰可知，当hash的值确定后，就不能再修改</span></div><div class="line">    <span class="keyword">final</span> K key;<span class="comment">// 键，由final修饰可知，当key的值确定后，就不能再修改</span></div><div class="line">    V value; <span class="comment">// 值</span></div><div class="line">    Node&lt;K,V&gt; next; <span class="comment">// 记录下一个元素结点(单链表结构，用于解决hash冲突)</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Node结点构造方法</div><div class="line">     */</div><div class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.hash = hash;<span class="comment">//元素的哈希值</span></div><div class="line">        <span class="keyword">this</span>.key = key;<span class="comment">// 键</span></div><div class="line">        <span class="keyword">this</span>.value = value; <span class="comment">// 值</span></div><div class="line">        <span class="keyword">this</span>.next = next;<span class="comment">// 记录下一个元素结点</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为Node重写hashCode方法，值为：key的hashCode 异或 value的hashCode </div><div class="line">     * 运算作用就是将2个hashCode的二进制中，同一位置相同的值为0，不同的为1。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 修改某一元素的值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">        V oldValue = value;</div><div class="line">        value = newValue;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为Node重写equals方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class="line">                Objects.equals(value, e.getValue()))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/19/db63a0bc793f06e3d80ba8885e91c798?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="hashMap内存结构图 - 图片来自于《美团点评技术团队文章》">hashMap内存结构图 - 图片来自于《美团点评技术团队文章》</p>
<h2 id="HashMap-常用操作的底层实现原理"><a href="#HashMap-常用操作的底层实现原理" class="headerlink" title="HashMap 常用操作的底层实现原理"></a>HashMap 常用操作的底层实现原理</h2><p>问：您能说说<code>HashMap</code>常用操作的底层实现原理吗？如存储<code>put(K key, V value)</code>，查找<code>get(Object key)</code>，删除<code>remove(Object key)</code>，修改<code>replace(K key, V value)</code>等操作。</p>
<p>答：</p>
<ul>
<li>调用<code>put(K key, V value)</code>操作添加<code>key-value</code>键值对时，进行了如下操作：</li>
</ul>
<ol>
<li>判断哈希表<code>Node&lt;K,V&gt;[] table</code>是否为空或者<code>null</code>，是则执行<code>resize()</code>方法进行扩容。</li>
<li>根据插入的键值<code>key</code>的<code>hash</code>值，通过<code>(n - 1) &amp; hash</code>当前元素的<code>hash</code>值 &amp; <code>hash</code>表长度 - 1（实际就是 <code>hash</code>值 % <code>hash</code>表长度） 计算出存储位置<code>table[i]</code>。如果存储位置没有元素存放，则将新增结点存储在此位置<code>table[i]</code>。</li>
<li>如果存储位置已经有键值对元素存在，则判断该位置元素的<code>hash</code>值和<code>key</code>值是否和当前操作元素一致，一致则证明是修改<code>value</code>操作，覆盖<code>value</code>即可。</li>
<li>当前存储位置即有元素，又不和当前操作元素一致，则证明此位置<code>table[i]</code>已经发生了hash冲突，则通过判断头结点是否是<code>treeNode</code>，如果是<code>treeNode</code>则证明此位置的结构是红黑树，已红黑树的方式新增结点。</li>
<li>如果不是红黑树，则证明是单链表，将新增结点插入至链表的最后位置，随后判断当前链表长度是否 大于等于 8，是则将当前存储位置的链表转化为红黑树。遍历过程中如果发现<code>key</code>已经存在，则直接覆盖<code>value</code>。</li>
<li>插入成功后，判断当前存储键值对的数量 大于 阈值<code>threshold</code> 是则扩容。</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/19/eb270f06461f7a70314b33b7a9cfe6ba?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="hashMap put方法执行流程图- 图片来自于《美团点评技术团队文章》">hashMap put方法执行流程图- 图片来自于《美团点评技术团队文章》</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加key-value键值对</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> key 键</div><div class="line"> * <span class="doctag">@param</span> value 值</div><div class="line"> * <span class="doctag">@return</span> 如果原本存在此key，则返回旧的value值，如果是新增的key-     </div><div class="line"> *         value，则返回nulll</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="comment">//实际调用putVal方法进行添加 key-value 键值对操作</span></div><div class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据key 键 的 hashCode 通过 “扰动函数” 生成对应的 hash值</div><div class="line"> * 经过此操作后，使每一个key对应的hash值生成的更均匀，</div><div class="line"> * 减少元素之间的碰撞几率（后面详细说明）</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加key-value键值对的实际调用方法（重点）</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> hash key 键的hash值</div><div class="line"> * <span class="doctag">@param</span> key 键</div><div class="line"> * <span class="doctag">@param</span> value 值</div><div class="line"> * <span class="doctag">@param</span> onlyIfAbsent 此值如果是true, 则如果此key已存在value，则不执</div><div class="line"> * 行修改操作 </div><div class="line"> * <span class="doctag">@param</span> evict 此值如果是false，哈希表是在初始化模式</div><div class="line"> * <span class="doctag">@return</span> 返回原本的旧值, 如果是新增，则返回null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">               <span class="keyword">boolean</span> evict) &#123;</div><div class="line">    <span class="comment">// 用于记录当前的hash表</span></div><div class="line">    Node&lt;K,V&gt;[] tab; </div><div class="line">    <span class="comment">// 用于记录当前的链表结点</span></div><div class="line">    Node&lt;K,V&gt; p; </div><div class="line">    <span class="comment">// n用于记录hash表的长度，i用于记录当前操作索引index</span></div><div class="line">    <span class="keyword">int</span> n, i;</div><div class="line">    <span class="comment">// 当前hash表为空</span></div><div class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">        <span class="comment">// 初始化hash表，并把初始化后的hash表长度值赋值给n</span></div><div class="line">        n = (tab = resize()).length;</div><div class="line">    <span class="comment">// 1）通过 (n - 1) &amp; hash 当前元素的hash值 &amp; hash表长度 - 1</span></div><div class="line">    <span class="comment">// 2）确定当前元素的存储位置，此运算等价于 当前元素的hash值 % hash表的长度</span></div><div class="line">    <span class="comment">// 3）计算出的存储位置没有元素存在</span></div><div class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">        <span class="comment">// 4) 则新建一个Node结点，在该位置存储此元素</span></div><div class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">else</span> &#123; <span class="comment">// 当前存储位置已经有元素存在了(不考虑是修改的情况的话，就代表发生hash冲突了)</span></div><div class="line">        <span class="comment">// 用于存放新增结点</span></div><div class="line">        Node&lt;K,V&gt; e; </div><div class="line">        <span class="comment">// 用于临时存在某个key值</span></div><div class="line">        K k;</div><div class="line">        <span class="comment">// 1)如果当前位置已存在元素的hash值和新增元素的hash值相等</span></div><div class="line">        <span class="comment">// 2)并且key也相等，则证明是同一个key元素，想执行修改value操作</span></div><div class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            e = p;<span class="comment">// 将当前结点引用赋值给e</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果当前结点是树结点</span></div><div class="line">            <span class="comment">// 则证明当前位置的链表已变成红黑树结构，则已红黑树结点结构新增元素</span></div><div class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">        <span class="keyword">else</span> &#123;<span class="comment">// 排除上述情况，则证明已发生hash冲突，并hash冲突位置现时的结构是单链表结构</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">                <span class="comment">//遍历单链表，将新元素结点放置此链表的最后一位</span></div><div class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 将新元素结点放在此链表的最后一位</span></div><div class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">                    <span class="comment">// 新增结点后，当前结点数量是否大于等于 阈值 8 </span></div><div class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">                        <span class="comment">// 大于等于8则将链表转换成红黑树</span></div><div class="line">                        treeifyBin(tab, hash);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 如果链表中已经存在对应的key，则覆盖value</span></div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                p = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// 已存在对应key</span></div><div class="line">            V oldValue = e.value;</div><div class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>) <span class="comment">//如果允许修改，则修改value为新值</span></div><div class="line">                e.value = value;</div><div class="line">            afterNodeAccess(e);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ++modCount;</div><div class="line">    <span class="comment">// 当前存储键值对的数量 大于 阈值 是则扩容</span></div><div class="line">    <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">       <span class="comment">// 重置hash大小，将旧hash表的数据逐一复制到新的hash表中（后面详细讲解）</span></div><div class="line">        resize();</div><div class="line">    afterNodeInsertion(evict);</div><div class="line">    <span class="comment">// 返回null，则证明是新增操作，而不是修改操作</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用<code>get(Object key)</code>操作根据键<code>key</code>查找对应的<code>key-value</code>键值对时，进行了如下操作：</li>
</ul>
<p>1.先调用 <code>hash(key)</code>方法计算出 <code>key</code> 的 <code>hash</code>值</p>
<p>2.根据查找的键值<code>key</code>的<code>hash</code>值，通过<code>(n - 1) &amp; hash</code>当前元素的<code>hash</code>值 &amp; <code>hash</code>表长度 - 1（实际就是 <code>hash</code>值 % <code>hash</code>表长度） 计算出存储位置<code>table[i]</code>，判断存储位置是否有元素存在 。</p>
<ul>
<li>如果存储位置有元素存放，则首先比较头结点元素，如果头结点的<code>key</code>的<code>hash</code>值 和 要获取的<code>key</code>的<code>hash</code>值相等，并且 头结点的<code>key</code>本身 和要获取的 <code>key</code> 相等，则返回该位置的头结点。</li>
<li>如果存储位置没有元素存放，则返回<code>null</code>。</li>
</ul>
<p>3.如果存储位置有元素存放，但是头结点元素不是要查找的元素，则需要遍历该位置进行查找。</p>
<p>4.先判断头结点是否是<code>treeNode</code>，如果是<code>treeNode</code>则证明此位置的结构是红黑树，以红色树的方式遍历查找该结点，没有则返回<code>null</code>。</p>
<p>5.如果不是红黑树，则证明是单链表。遍历单链表，逐一比较链表结点，链表结点的<code>key</code>的<code>hash</code>值 和 要获取的<code>key</code>的<code>hash</code>值相等，并且 链表结点的<code>key</code>本身 和要获取的 <code>key</code> 相等，则返回该结点，遍历结束仍未找到对应<code>key</code>的结点，则返回<code>null</code>。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回指定 key 所映射的 value 值</div><div class="line"> * 或者 返回 null 如果容器里不存在对应的key</div><div class="line"> *</div><div class="line"> * 更确切地讲，如果此映射包含一个满足 (key==null ? k==null :key.equals(k))</div><div class="line"> * 的从 k 键到 v 值的映射关系，</div><div class="line"> * 则此方法返回 v；否则返回 null。（最多只能有一个这样的映射关系。）</div><div class="line"> *</div><div class="line"> * 返回 null 值并不一定 表明该映射不包含该键的映射关系；</div><div class="line"> * 也可能该映射将该键显示地映射为 null。可使用containsKey操作来区分这两种情况。 </div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> #put(Object, Object)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="comment">// 1.先调用 hash(key)方法计算出 key 的 hash值</span></div><div class="line">    <span class="comment">// 2.随后调用getNode方法获取对应key所映射的value值</span></div><div class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取哈希表结点的方法实现</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> hash key 键的hash值</div><div class="line"> * <span class="doctag">@param</span> key 键</div><div class="line"> * <span class="doctag">@return</span> 返回对应的结点，如果结点不存在，则返回null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">    <span class="comment">// 用于记录当前的hash表 </span></div><div class="line">    Node&lt;K,V&gt;[] tab; </div><div class="line">    <span class="comment">// first用于记录对应hash位置的第一个结点，e充当工作结点的作用</span></div><div class="line">    Node&lt;K,V&gt; first, e; </div><div class="line">    <span class="comment">// n用于记录hash表的长度</span></div><div class="line">    <span class="keyword">int</span> n; </div><div class="line">    <span class="comment">// 用于临时存放Key</span></div><div class="line">    K k;</div><div class="line">    <span class="comment">// 通过 (n - 1) &amp; hash 当前元素的hash值 &amp; hash表长度 - 1</span></div><div class="line">    <span class="comment">// 判断当前元素的存储位置是否有元素存在 </span></div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;<span class="comment">//元素存在的情况</span></div><div class="line">       <span class="comment">// 如果头结点的key的hash值 和 要获取的key的hash值相等</span></div><div class="line">       <span class="comment">// 并且 头结点的key本身 和要获取的 key 相等</span></div><div class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node 总是检查头结点</span></div><div class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="comment">// 返回该位置的头结点</span></div><div class="line">            <span class="keyword">return</span> first;</div><div class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;<span class="comment">// 头结点不相等</span></div><div class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果当前结点是树结点</span></div><div class="line">                <span class="comment">// 则证明当前位置的链表已变成红黑树结构</span></div><div class="line">                <span class="comment">// 通过红黑树结点的方式获取对应key结点</span></div><div class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">            <span class="keyword">do</span> &#123;<span class="comment">// 当前位置不是红黑树，则证明是单链表</span></div><div class="line">                <span class="comment">// 遍历单链表，逐一比较链表结点</span></div><div class="line">                <span class="comment">// 链表结点的key的hash值 和 要获取的key的hash值相等</span></div><div class="line">                <span class="comment">// 并且 链表结点的key本身 和要获取的 key 相等</span></div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="comment">// 找到对应的结点则返回</span></div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 通过上述查找均无找到，则返回null</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用<code>remove(Object key)</code>操作根据键<code>key</code>删除对应的<code>key-value</code>键值对时，进行了如下操作：</li>
</ul>
<p>1.先调用 <code>hash(key)</code>方法计算出 <code>key</code> 的 <code>hash</code>值</p>
<p>2.根据查找的键值<code>key</code>的<code>hash</code>值，通过<code>(n - 1) &amp; hash</code>当前元素的<code>hash</code>值 &amp; <code>hash</code>表长度 - 1（实际就是 <code>hash</code>值 % <code>hash</code>表长度） 计算出存储位置<code>table[i]</code>，判断存储位置是否有元素存在 。</p>
<ul>
<li>如果存储位置有元素存放，则首先比较头结点元素，如果头结点的<code>key</code>的<code>hash</code>值 和 要获取的<code>key</code>的<code>hash</code>值相等，并且 头结点的<code>key</code>本身 和要获取的 <code>key</code> 相等，则该位置的头结点即为要删除的结点，记录此结点至变量<code>node</code>中。</li>
<li>如果存储位置没有元素存放，则没有找到对应要删除的结点，则返回<code>null</code>。</li>
</ul>
<p>3.如果存储位置有元素存放，但是头结点元素不是要删除的元素，则需要遍历该位置进行查找。</p>
<p>4.先判断头结点是否是<code>treeNode</code>，如果是<code>treeNode</code>则证明此位置的结构是红黑树，以红色树的方式遍历查找并删除该结点，没有则返回<code>null</code>。</p>
<p>5.如果不是红黑树，则证明是单链表。遍历单链表，逐一比较链表结点，链表结点的<code>key</code>的<code>hash</code>值 和 要获取的<code>key</code>的<code>hash</code>值相等，并且 链表结点的<code>key</code>本身 和要获取的 <code>key</code> 相等，则此为要删除的结点，记录此结点至变量<code>node</code>中，遍历结束仍未找到对应<code>key</code>的结点，则返回<code>null</code>。</p>
<p>6.如果找到要删除的结点<code>node</code>，则判断是否需要比较<code>value</code>也是否一致，如果<code>value</code>值一致或者不需要比较<code>value</code>值，则执行删除结点操作，删除操作根据不同的情况与结构进行不同的处理。</p>
<ul>
<li>如果当前结点是树结点，则证明当前位置的链表已变成红黑树结构，通过红黑树结点的方式删除对应结点。</li>
<li>如果不是红黑树，则证明是单链表。如果要删除的是头结点，则当前存储位置<code>table[i]</code>的头结点指向删除结点的下一个结点。</li>
<li>如果要删除的结点不是头结点，则将要删除的结点的后继结点<code>node.next</code>赋值给要删除结点的前驱结点的<code>next</code>域，即<code>p.next = node.next;</code>。</li>
</ul>
<p>7.<code>HashMap</code>当前存储键值对的数量 - 1，并返回删除结点。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 从此映射中移除指定键的映射关系（如果存在）。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span>  key 其映射关系要从映射中移除的键</div><div class="line"> * <span class="doctag">@return</span> 与 key 关联的旧值；如果 key 没有任何映射关系，则返回 null。</div><div class="line"> *        （返回 null 还可能表示该映射之前将 null 与 key 关联。）</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="comment">// 1.先调用 hash(key)方法计算出 key 的 hash值</span></div><div class="line">    <span class="comment">// 2.随后调用removeNode方法删除对应key所映射的结点</span></div><div class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</div><div class="line">        <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除哈希表结点的方法实现</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> hash 键的hash值</div><div class="line"> * <span class="doctag">@param</span> key 键</div><div class="line"> * <span class="doctag">@param</span> value 用于比较的value值，当matchValue 是 true时才有效, 否则忽略</div><div class="line"> * <span class="doctag">@param</span> matchValue 如果是 true 只有当value相等时才会移除</div><div class="line"> * <span class="doctag">@param</span> movable 如果是 false当执行移除操作时，不删除其他结点</div><div class="line"> * <span class="doctag">@return</span> 返回删除结点node，不存在则返回null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></div><div class="line">                           <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable) &#123;</div><div class="line">    <span class="comment">// 用于记录当前的hash表</span></div><div class="line">    Node&lt;K,V&gt;[] tab; </div><div class="line">    <span class="comment">// 用于记录当前的链表结点</span></div><div class="line">    Node&lt;K,V&gt; p; </div><div class="line">    <span class="comment">// n用于记录hash表的长度，index用于记录当前操作索引index</span></div><div class="line">    <span class="keyword">int</span> n, index;</div><div class="line">    <span class="comment">// 通过 (n - 1) &amp; hash 当前元素的hash值 &amp; hash表长度 - 1</span></div><div class="line">    <span class="comment">// 判断当前元素的存储位置是否有元素存在 </span></div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;<span class="comment">// 元素存在的情况</span></div><div class="line">        <span class="comment">// node 用于记录找到的结点，e为工作结点</span></div><div class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; </div><div class="line">        K k; V v;</div><div class="line">       <span class="comment">// 如果头结点的key的hash值 和 要获取的key的hash值相等</span></div><div class="line">       <span class="comment">// 并且 头结点的key本身 和要获取的 key 相等</span></div><div class="line">       <span class="comment">// 则证明此头结点就是要删除的结点</span></div><div class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="comment">// 记录要删除的结点的引用地址至node中</span></div><div class="line">            node = p;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;<span class="comment">// 头结点不相等</span></div><div class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">// 如果当前结点是树结点</span></div><div class="line">                <span class="comment">// 则证明当前位置的链表已变成红黑树结构</span></div><div class="line">                <span class="comment">// 通过红黑树结点的方式获取对应key结点</span></div><div class="line">                <span class="comment">// 记录要删除的结点的引用地址至node中</span></div><div class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</div><div class="line">            <span class="keyword">else</span> &#123;<span class="comment">// 当前位置不是红黑树，则证明是单链表</span></div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    <span class="comment">// 遍历单链表，逐一比较链表结点</span></div><div class="line">                    <span class="comment">// 链表结点的key的hash值 和 要获取的key的hash值相等</span></div><div class="line">                    <span class="comment">// 并且 链表结点的key本身 和要获取的 key 相等</span></div><div class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key ||</div><div class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">                        <span class="comment">// 找到则记录要删除的结点的引用地址至node中，中断遍历</span></div><div class="line">                        node = e;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    p = e;</div><div class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果找到要删除的结点，则判断是否需要比较value也是否一致</span></div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</div><div class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</div><div class="line">            <span class="comment">// value值一致或者不需要比较value值，则执行删除结点操作</span></div><div class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果当前结点是树结点</span></div><div class="line">                <span class="comment">// 则证明当前位置的链表已变成红黑树结构</span></div><div class="line">                <span class="comment">// 通过红黑树结点的方式删除对应结点</span></div><div class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p) <span class="comment">// node 和 p相等，则证明删除的是头结点</span></div><div class="line">                <span class="comment">// 当前存储位置的头结点指向删除结点的下一个结点</span></div><div class="line">                tab[index] = node.next;</div><div class="line">            <span class="keyword">else</span> <span class="comment">// 删除的不是头结点</span></div><div class="line">                <span class="comment">// p是删除结点node的前驱结点，p的next改为记录要删除结点node的后继结点</span></div><div class="line">                p.next = node.next;</div><div class="line">            ++modCount;</div><div class="line">           <span class="comment">// 当前存储键值对的数量 - 1</span></div><div class="line">            --size;</div><div class="line">            afterNodeRemoval(node);</div><div class="line">            <span class="comment">// 返回删除结点</span></div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 不存在要删除的结点，则返回null</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用<code>replace(K key, V value)</code>操作根据键<code>key</code>查找对应的<code>key-value</code>键值对，随后替换对应的值<code>value</code>，进行了如下操作：</li>
</ul>
<ol>
<li>先调用 <code>hash(key)</code>方法计算出 <code>key</code> 的 <code>hash</code>值</li>
<li>随后调用<code>getNode</code>方法获取对应<code>key</code>所映射的<code>value</code>值 。</li>
<li>记录元素旧值，将新值赋值给元素，返回元素旧值，如果没有找到元素，则返回<code>null</code>。</li>
</ol>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 替换指定 key 所映射的 value 值</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> key 对应要替换value值元素的key键</div><div class="line"> * <span class="doctag">@param</span> value 要替换对应元素的新value值</div><div class="line"> * <span class="doctag">@return</span> 返回原本的旧值，如果没有找到key对应的元素，则返回null</div><div class="line"> * <span class="doctag">@since</span> 1.8 JDK1.8新增方法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">replace</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="comment">// 1.先调用 hash(key)方法计算出 key 的 hash值</span></div><div class="line">    <span class="comment">// 2.随后调用getNode方法获取对应key所映射的value值</span></div><div class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span>) &#123;<span class="comment">// 如果找到对应的元素</span></div><div class="line">        <span class="comment">// 元素旧值</span></div><div class="line">        V oldValue = e.value;</div><div class="line">        <span class="comment">// 将新值赋值给元素</span></div><div class="line">        e.value = value;</div><div class="line">        afterNodeAccess(e);</div><div class="line">        <span class="comment">// 返回元素旧值</span></div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 没有找到元素，则返回null</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HashMap-若要新增的这个元素存在了或hash冲突了怎么办"><a href="#HashMap-若要新增的这个元素存在了或hash冲突了怎么办" class="headerlink" title="HashMap 若要新增的这个元素存在了或hash冲突了怎么办"></a>HashMap 若要新增的这个元素存在了或hash冲突了怎么办</h2><p>问 1：您上面说，存放一个元素时，先计算它的hash值确定它的存储位置，然后再把这个元素放到对应的位置上，那万一这个位置上面已经有元素存在呢，新增的这个元素怎么办？</p>
<p>问 2：<code>hash</code>冲突（或者叫<code>hash</code>碰撞）是什么？为什么会出现这种现象，如何解决<code>hash</code>冲突？</p>
<p>答：</p>
<ul>
<li><code>hash</code>冲突： 当我们调用<code>put(K key, V value)</code>操作添加<code>key-value</code>键值对，这个<code>key-value</code>键值对存放在的位置是通过扰动函数<code>(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>计算键<code>key</code>的<code>hash</code>值。随后将 这个<code>hash</code>值 % 模上 哈希表<code>Node&lt;K,V&gt;[] table</code>的长度 得到具体的存放位置。所以<code>put(K key, V value)</code>多个元素，是有可能计算出相同的存放位置。此现象就是<code>hash</code>冲突或者叫<code>hash</code>碰撞。</li>
<li>例子如下：<br>元素 A 的<code>hash</code>值 为 9，元素 B 的<code>hash</code>值 为 17。哈希表<code>Node&lt;K,V&gt;[] table</code>的长度为8。则元素 A 的存放位置为<code>9 % 8 = 1</code>，元素 B 的存放位置为<code>17 % 8 = 1</code>。两个元素的存放位置均为<code>table[1]</code>，发生了<code>hash</code>冲突。</li>
<li><code>hash</code>冲突的避免：既然会发生<code>hash</code>冲突，我们就应该想办法避免此现象的发生，解决这个问题最关键就是如果生成元素的<code>hash</code>值。Java是使用“扰动函数”生成元素的<code>hash</code>值。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * JDK 7 的 hash方法</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</div><div class="line"></div><div class="line">     h ^= k.hashCode();</div><div class="line"></div><div class="line">     h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">     <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * JDK 8 的 hash方法</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> h;</div><div class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Java7做了4次16位右位移异或混合，Java 8中这步已经简化了，只做一次16位右位移异或混合，而不是四次，但原理是不变的。例子如下：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/19/acf1abecfd91bdd0d465c6707dc57bfc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="扰动函数执行例子 - 图片来自于《知乎》">扰动函数执行例子 - 图片来自于《知乎》</p>
<p>右位移16位，正好是32bit的一半，自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p>
<p>上述扰动函数的解释参考自：<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F20733617" target="_blank" rel="external">JDK 源码中 HashMap 的 hash 方法原理是什么？</a></p>
<ul>
<li><code>hash</code>冲突解决：解决<code>hash</code>冲突的方法有很多，常见的有：开发定址法，<br>再散列法，链地址法，公共溢出区法（详细说明请查看我的文章<a href="https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F59b25f825188257e7e11500c" target="_blank" rel="external">JAVA基础-自问自答学hashCode和equals</a>）。<code>HashMap</code>是使用链地址法解决<code>hash</code>冲突的，当有冲突元素放进来时，会将此元素插入至此位置链表的最后一位，形成单链表。但是由于是单链表的缘故，每当通过<code>hash % length</code>找到该位置的元素时，均需要从头遍历链表，通过逐一比较<code>hash</code>值，找到对应元素。如果此位置元素过多，造成链表过长，遍历时间会大大增加，最坏情况下的时间复杂度为<code>O(N)</code>，造成查找效率过低。所以当存在位置的链表长度 大于等于 8 时，<code>HashMap</code>会将链表 转变为 红黑树，红黑树最坏情况下的时间复杂度为<code>O(logn)</code>。以此提高查找效率。</li>
</ul>
<h2 id="HashMap-的容量为什么一定要是2的n次方"><a href="#HashMap-的容量为什么一定要是2的n次方" class="headerlink" title="HashMap 的容量为什么一定要是2的n次方"></a>HashMap 的容量为什么一定要是2的n次方</h2><p>问：<code>HashMap</code>的容量为什么一定要是2的n次方？</p>
<p>答：</p>
<ul>
<li>因为调用<code>put(K key, V value)</code>操作添加<code>key-value</code>键值对时，具体确定此元素的位置是通过 <code>hash</code>值 % 模上 哈希表<code>Node&lt;K,V&gt;[] table</code>的长度 <code>hash % length</code> 计算的。但是”模”运算的消耗相对较大，通过位运算<code>h &amp; (length-1)</code>也可以得到取模后的存放位置，而位运算的运行效率高，但只有<code>length</code>的长度是2的n次方时，<code>h &amp; (length-1)</code> 才等价于 <code>h % length</code>。</li>
<li>而且当数组长度为2的n次幂的时候，不同的key算出的index相同的几率较小，那么数据在数组上分布就比较均匀，也就是说碰撞的几率小，相对的，查询的时候就不用遍历某个位置上的链表，这样查询效率也就较高了。</li>
</ul>
<p>例子：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/19/c61e51c7084d9506e8a3fd4d402022d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="hash &amp;  (length-1)运算过程.jpg">hash &amp; (length-1)运算过程.jpg</p>
<ul>
<li>上图中，左边两组的数组长度是16（2的4次方），右边两组的数组长度是15。两组的<code>hash</code>值均为8和9。</li>
<li>当数组长度是15时，当它们和<code>1110</code>进行<code>&amp;</code>与运算（相同为1，不同为0）时，计算的结果都是<code>1000</code>，所以他们都会存放在相同的位置<code>table[8]</code>中，这样就发生了<code>hash</code>冲突，那么查询时就要遍历链表，逐一比较<code>hash</code>值，降低了查询的效率。</li>
<li>同时，我们可以发现，当数组长度为15的时候，<code>hash</code>值均会与<code>14（1110）</code>进行<code>&amp;</code>与运算，那么最后一位永远是0，而<code>0001</code>，<code>0011</code>，<code>0101</code>，<code>1001</code>，<code>1011</code>，<code>0111</code>，<code>1101</code>这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率，减慢了查询的效率。</li>
</ul>
<ul>
<li>所以，<code>HashMap</code>的容量是2的n次方，有利于提高计算元素存放位置时的效率，也降低了<code>hash</code>冲突的几率。因此，我们使用<code>HashMap</code>存储大量数据的时候，最好先预先指定容器的大小为2的n次方，即使我们不指定为2的n次方，<code>HashMap</code>也会把容器的大小设置成最接近设置数的2的n次方，如，设置<code>HashMap</code>的大小为 7 ，则<code>HashMap</code>会将容器大小设置成最接近7的一个2的n次方数，此值为 8 。</li>
</ul>
<p>上述回答参考自：<a href="https://link.juejin.im/?target=http%3A%2F%2Fannegu.iteye.com%2Fblog%2F539465" target="_blank" rel="external">深入理解HashMap</a></p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回一个比指定数cap大的，并且大小是2的n次方的数</div><div class="line"> * Returns a power of two size for the given target capacity.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</div><div class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HashMap-的负载因子是什么，有什么作用"><a href="#HashMap-的负载因子是什么，有什么作用" class="headerlink" title="HashMap 的负载因子是什么，有什么作用"></a>HashMap 的负载因子是什么，有什么作用</h2><p>问：<code>HashMap</code>的负载因子是什么，有什么作用？</p>
<p>答：负载因子表示哈希表空间的使用程度（或者说是哈希表空间的利用率）。</p>
<ul>
<li>例子如下：<br>底层哈希表<code>Node&lt;K,V&gt;[] table</code>的容量大小<code>capacity</code>为 16，负载因子<code>load factor</code>为 0.75，则当存储的元素个数<code>size = capacity 16 * load factor 0.75</code>等于 12 时，则会触发<code>HashMap</code>的扩容机制，调用<code>resize()</code>方法进行扩容。</li>
<li>当负载因子越大，则<code>HashMap</code>的装载程度就越高。也就是能容纳更多的元素，元素多了，发生<code>hash</code>碰撞的几率就会加大，从而链表就会拉长，此时的查询效率就会降低。</li>
<li>当负载因子越小，则链表中的数据量就越稀疏，此时会对空间造成浪费，但是此时查询效率高。</li>
<li>我们可以在创建<code>HashMap</code> 时根据实际需要适当地调整<code>load factor</code> 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，默认负载因子 (0.75) 在时间和空间成本上寻求一种折衷，程序员无需改变负载因子的值。</li>
<li>因此，如果我们在初始化<code>HashMap</code>时，就预估知道需要装载<code>key-value</code>键值对的容量<code>size</code>，我们可以通过<code>size / load factor</code> 计算出我们需要初始化的容量大小<code>initialCapacity</code>，这样就可以避免<code>HashMap</code>因为存放的元素达到阈值<code>threshold</code>而频繁调用<code>resize()</code>方法进行扩容。从而保证了较好的性能。</li>
</ul>
<h2 id="HashMap-和-HashTable-的区别"><a href="#HashMap-和-HashTable-的区别" class="headerlink" title="HashMap 和 HashTable 的区别"></a>HashMap 和 HashTable 的区别</h2><p>问：您能说说<code>HashMap</code>和<code>HashTable</code>的区别吗？</p>
<p>答：<code>HashMap</code>和<code>HashTable</code>有如下区别：</p>
<p>1）容器整体结构：</p>
<ul>
<li><code>HashMap</code>的<code>key</code>和<code>value</code>都允许为<code>null</code>，<code>HashMap</code>遇到<code>key</code>为<code>null</code>的时候，调用<code>putForNullKey</code>方法进行处理，而对<code>value</code>没有处理。</li>
<li><code>Hashtable</code>的<code>key</code>和<code>value</code>都不允许为<code>null</code>。<code>Hashtable</code>遇到<code>null</code>，直接返回<code>NullPointerException</code>。</li>
</ul>
<p>2） 容量设定与扩容机制：</p>
<ul>
<li><code>HashMap</code>默认初始化容量为 16，并且容器容量一定是2的n次方，扩容时，是以原容量 2倍 的方式 进行扩容。</li>
<li><code>Hashtable</code>默认初始化容量为 11，扩容时，是以原容量 2倍 再加 1的方式进行扩容。即<code>int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</code>。</li>
</ul>
<p>3） 散列分布方式（计算存储位置）：</p>
<ul>
<li><code>HashMap</code>是先将<code>key</code>键的<code>hashCode</code>经过扰动函数扰动后得到<code>hash</code>值，然后再利用 <code>hash &amp; (length - 1)</code>的方式代替取模，得到元素的存储位置。</li>
<li><code>Hashtable</code>则是除留余数法进行计算存储位置的（因为其默认容量也不是2的n次方。所以也无法用位运算替代模运算），<code>int index = (hash &amp; 0x7FFFFFFF) % tab.length;</code>。</li>
<li>由于<code>HashMap</code>的容器容量一定是2的n次方，所以能使用<code>hash &amp; (length - 1)</code>的方式代替取模的方式计算元素的位置提高运算效率，但<code>Hashtable</code>的容器容量不一定是2的n次方，所以不能使用此运算方式代替。</li>
</ul>
<p>4）线程安全（最重要）：</p>
<ul>
<li><code>HashMap</code> 不是线程安全，如果想线程安全，可以通过调用<code>synchronizedMap(Map&lt;K,V&gt; m)</code>使其线程安全。但是使用时的运行效率会下降，所以建议使用<code>ConcurrentHashMap</code>容器以此达到线程安全。</li>
<li><code>Hashtable</code>则是线程安全的，每个操作方法前都有<code>synchronized</code>修饰使其同步，但运行效率也不高，所以还是建议使用<code>ConcurrentHashMap</code>容器以此达到线程安全。</li>
</ul>
<p>因此，<code>Hashtable</code>是一个遗留容器，如果我们不需要线程同步，则建议使用<code>HashMap</code>，如果需要线程同步，则建议使用<code>ConcurrentHashMap</code>。</p>
<p>此处不再对Hashtable的源码进行逐一分析了，如果想深入了解的同学，可以参考此文章<br><a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fchdjj%2Farticle%2Fdetails%2F38581035" target="_blank" rel="external">Hashtable源码剖析</a></p>
<h2 id="HashMap-在多线程下如何处理，啥时会发生线程不安全"><a href="#HashMap-在多线程下如何处理，啥时会发生线程不安全" class="headerlink" title="HashMap 在多线程下如何处理，啥时会发生线程不安全"></a>HashMap 在多线程下如何处理，啥时会发生线程不安全</h2><p>问：您说<code>HashMap</code>不是线程安全的，那如果多线程下，它是如何处理的？并且什么情况下会发生线程不安全的情况？</p>
<p>答：</p>
<ul>
<li><code>HashMap</code>不是线程安全的，如果多个线程同时对同一个<code>HashMap</code>更改数据的话，会导致数据不一致或者数据污染。如果出现线程不安全的操作时，<code>HashMap</code>会尽可能的抛出<code>ConcurrentModificationException</code>防止数据异常，当我们在对一个<code>HashMap</code>进行遍历时，在遍历期间，我们是不能对<code>HashMap</code>进行添加，删除等更改数据的操作的，否则也会抛出<code>ConcurrentModificationException</code>异常，此为fail-fast（快速失败）机制。从源码上分析，我们在<code>put,remove</code>等更改<code>HashMap</code>数据时，都会导致modCount的改变，当<code>expectedModCount != modCount</code>时，则抛出<code>ConcurrentModificationException</code>。如果想要线程安全，可以考虑使用<code>ConcurrentHashMap</code>。</li>
<li>而且，在多线程下操作<code>HashMap</code>，由于存在扩容机制，当<code>HashMap</code>调用<code>resize()</code>进行自动扩容时，可能会导致死循环的发生。</li>
</ul>
<p>由于时间关系，我暂不带着大家一起去分析<code>resize()</code>方法导致死循环发生的现象造成原因了，迟点有空我会再补充上去，请见谅，大家可以参考如下文章：</p>
<p><a href="https://link.juejin.im/?target=https%3A%2F%2Ftech.meituan.com%2Fjava-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></p>
<p><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.importnew.com%2F22011.html" target="_blank" rel="external">谈谈HashMap线程不安全的体现</a></p>
<h2 id="使用-HashMap-，选取什么对象作为-key-键比较好"><a href="#使用-HashMap-，选取什么对象作为-key-键比较好" class="headerlink" title="使用 HashMap ，选取什么对象作为 key 键比较好"></a>使用 HashMap ，选取什么对象作为 key 键比较好</h2><p>问：我们在使用<code>HashMap</code>时，选取什么对象作为<code>key</code>键比较好，为什么？</p>
<p>答：</p>
<ul>
<li>可变对象：指创建后自身状态能改变的对象。换句话说，可变对象是该对象在创建后它的哈希值可能被改变。</li>
<li>我们在使用<code>HashMap</code>时，最好选择不可变对象作为<code>key</code>。例如<code>String</code>，<code>Integer</code>等不可变类型作为<code>key</code>是非常明智的。</li>
<li>如果<code>key</code>对象是可变的，那么<code>key</code>的哈希值就可能改变。在<code>HashMap</code>中可变对象作为Key会造成数据丢失。因为我们再进行<code>hash &amp; (length - 1)</code>取模运算计算位置查找对应元素时，位置可能已经发生改变，导致数据丢失。</li>
</ul>
<p>详细例子说明请参考：<a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.importnew.com%2F13384.html" target="_blank" rel="external">危险！在HashMap中将可变对象用作Key</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><code>HashMap</code>是基于<code>Map</code>接口实现的一种键-值对<code>&lt;key,value&gt;</code>的存储结构，允许<code>null</code>值，同时非有序，非同步(即线程不安全)。<code>HashMap</code>的底层实现是数组 + 链表 + 红黑树（JDK1.8增加了红黑树部分）。</li>
<li><code>HashMap</code>定位元素位置是通过键<code>key</code>经过扰动函数扰动后得到<code>hash</code>值，然后再通过<code>hash &amp; (length - 1)</code>代替取模的方式进行元素定位的。</li>
<li><code>HashMap</code>是使用链地址法解决<code>hash</code>冲突的，当有冲突元素放进来时，会将此元素插入至此位置链表的最后一位，形成单链表。当存在位置的链表长度 大于等于 8 时，<code>HashMap</code>会将链表 转变为 红黑树，以此提高查找效率。</li>
<li><code>HashMap</code>的容量是2的n次方，有利于提高计算元素存放位置时的效率，也降低了<code>hash</code>冲突的几率。因此，我们使用<code>HashMap</code>存储大量数据的时候，最好先预先指定容器的大小为2的n次方，即使我们不指定为2的n次方，<code>HashMap</code>也会把容器的大小设置成最接近设置数的2的n次方，如，设置<code>HashMap</code>的大小为 7 ，则<code>HashMap</code>会将容器大小设置成最接近7的一个2的n次方数，此值为 8 。</li>
<li><code>HashMap</code>的负载因子表示哈希表空间的使用程度（或者说是哈希表空间的利用率）。当负载因子越大，则<code>HashMap</code>的装载程度就越高。也就是能容纳更多的元素，元素多了，发生<code>hash</code>碰撞的几率就会加大，从而链表就会拉长，此时的查询效率就会降低。当负载因子越小，则链表中的数据量就越稀疏，此时会对空间造成浪费，但是此时查询效率高。</li>
<li><code>HashMap</code>不是线程安全的，<code>Hashtable</code>则是线程安全的。但<code>Hashtable</code>是一个遗留容器，如果我们不需要线程同步，则建议使用<code>HashMap</code>，如果需要线程同步，则建议使用<code>ConcurrentHashMap</code>。</li>
<li>在多线程下操作<code>HashMap</code>，由于存在扩容机制，当<code>HashMap</code>调用<code>resize()</code>进行自动扩容时，可能会导致死循环的发生。</li>
<li>我们在使用<code>HashMap</code>时，最好选择不可变对象作为<code>key</code>。例如<code>String</code>，<code>Integer</code>等不可变类型作为<code>key</code>是非常明智的。</li>
</ol>
<ul>
<li>由于最近工作较忙，也有拖延症发作的问题，所以文章迟迟未能完成发布，现时完成的文章其实对我而言，也不算太好，但还是打算先发出来让大家看看，一起学习学习，看有什么不好的地方，我再慢慢改进，如果此文对你有帮助，请给个赞，谢谢大家。</li>
</ul>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://link.juejin.im/?target=https%3A%2F%2Ftech.meituan.com%2Fjava-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a><br><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F20733617" target="_blank" rel="external">JDK 源码中 HashMap 的 hash 方法原理是什么？</a><br><a href="https://link.juejin.im/?target=http%3A%2F%2Fannegu.iteye.com%2Fblog%2F539465" target="_blank" rel="external">深入理解HashMap</a><br><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fyesiamhere%2Fp%2F6653135.html" target="_blank" rel="external">HashMap负载因子</a><br><a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fchdjj%2Farticle%2Fdetails%2F38581035" target="_blank" rel="external">Hashtable源码剖析</a><br><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.importnew.com%2F13384.html" target="_blank" rel="external">危险！在HashMap中将可变对象用作Key</a><br><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.importnew.com%2F22011.html" target="_blank" rel="external">谈谈HashMap线程不安全的体现</a></p>
]]></content>
      
        <categories>
            
            <category> HashMap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ConcurrentHashMap 的锁定分离技术]]></title>
      <url>/2018/06/03/ConcurrentHashMap%E7%9A%84%E9%94%81%E5%88%86%E7%A6%BB%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h1 id="ConcurrentHashMap的锁分离技术"><a href="#ConcurrentHashMap的锁分离技术" class="headerlink" title="ConcurrentHashMap的锁分离技术"></a>ConcurrentHashMap的锁分离技术</h1><p><img src="https://images2015.cnblogs.com/blog/756320/201603/756320-20160321173412058-376309614.png" alt="img"></p>
<p>​    对比上图，HashTable实现锁的方式是锁整个hash表，而ConcurrentHashMap的实现方式是<strong>锁桶（</strong>简单理解就是将整个hash表想象成一大缸水，现在将这大缸里的水分到了几个水桶里，hashTable每次都锁定这个大缸，而ConcurrentHashMap则每次只锁定其中一个 桶<strong>）。</strong></p>
<p>​    ConcurrentHashMap将hash表分为16个桶（默认值），诸如get,put,remove等常用操作只锁当前需要用到的桶。试想，原来 只能一个线程进入，现在却能同时16个写线程进入，并发性的提升是显而易见的。</p>
<p><img src="https://images2015.cnblogs.com/blog/756320/201603/756320-20160321174511354-2060663727.png" alt="img"></p>
<p>​    值得一提的是当对ConcurrentHashMap进行remove操作时，并不是进行简单的节点删除操作，对比上图，当对ConcurrentHashMap的一个segment也就是一个桶中的节点进行remove后，例如删除节点C，C节点实际并没有被销毁，而是将C节点前面的反转并拷贝到新的链表中，C节点后面的不需要被克隆。这样来保持并发的读线程不受并发的写线程的干扰。例如现在有一个读线程读到了A节点，写线程把C删掉了，但是看上图，读线程仍然可以继续读下去；当然，如果在删除C之前读线程读到的是D，那么更不会有影响。</p>
<p>​    根据上面所提到的ConcurrentHashMap中删除一个节点并不会立刻被读线程感受到的效果，就是传说中的<strong>弱一致性</strong>，所以ConcurrentHashMap的迭代器是弱一致性迭代器</p>
]]></content>
      
        <categories>
            
            <category> ConcurrentHashMap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ConcurrentHashMap的使用]]></title>
      <url>/2018/06/03/ConcurrentHashMap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="ConcurrentHashMap的使用"><a href="#ConcurrentHashMap的使用" class="headerlink" title="ConcurrentHashMap的使用"></a>ConcurrentHashMap的使用</h1><p>缓存的使用</p>
<ul>
<li>高性能本地缓存：对系统中常用到的业务数据放到缓存中以提高系统性能，限制是单服务器模式</li>
<li>分布式缓存：常用分布式缓存技术memcached、redis等</li>
</ul>
<p>ConcurrentHashMap就是常用的高并发下的缓存对象。<br><a id="more"></a><br>接下来直接上例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentMapTest</span> </span>&#123;</div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ConcurrentMap&lt;String, Future&lt;String&gt;&gt; cMap </div><div class="line">      = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, String&gt; cMap2 </div><div class="line">      = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					concurrentMap2(<span class="string">"3"</span>);</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						concurrentMap(<span class="string">"123"</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException | </div><div class="line">                             ExecutionException | TimeoutException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;).start();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 解决并发写的线程安全问题。但是高并发可读取会造成重复写的问题...</div><div class="line">	 * 如果put的业务计算复杂将耗费不必要的资源</div><div class="line">	 * 解决缓存读取问题，但可能会出现缓存重复写</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">concurrentMap2</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" start ...."</span>);</div><div class="line">		String f = cMap2.get(key);</div><div class="line">		<span class="comment">// ConcurrentMap读不加锁，写加锁。</span></div><div class="line">        <span class="comment">// 当并发量高时会出现重复compute的操作，然后才put到map中</span></div><div class="line">		<span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">500</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			cMap2.put(key, <span class="string">"dataTest"</span> + index);</div><div class="line">			System.out.println(Thread.currentThread().getName() </div><div class="line">                               + <span class="string">" compute , index================== "</span> + index++);</div><div class="line">		&#125;</div><div class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" end .... "</span> </div><div class="line">                           + cMap2.get(key));</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 解决并发写问题，同时避免了重复put计算的问题 解决缓存读写的问题</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException</div><div class="line">	 * <span class="doctag">@throws</span> ExecutionException</div><div class="line">	 * <span class="doctag">@throws</span> TimeoutException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">concurrentMap</span><span class="params">(String key)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</div><div class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" start ...."</span>);</div><div class="line">		Future&lt;String&gt; f = <span class="keyword">null</span>;</div><div class="line">		f = cMap.get(key);</div><div class="line">		<span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">500</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			FutureTask&lt;String&gt; fTask = <span class="keyword">new</span> FutureTask&lt;String&gt;</div><div class="line">              (<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">				<span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">2000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">					System.out.println(Thread.currentThread().getName() </div><div class="line">                                       + <span class="string">" compute , index=============== "</span></div><div class="line">                                       + index++);</div><div class="line">					<span class="keyword">return</span> <span class="string">"456789123"</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			f = cMap.putIfAbsent(key, fTask); <span class="comment">// 相当于get-if-absent-compute，</span></div><div class="line">             <span class="comment">//而且是原子执行，解决了并发读的问题。（FutureTask解决compute步骤）		</span></div><div class="line">			<span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</div><div class="line">				f = fTask;</div><div class="line">				<span class="comment">// f的值是FutureTask对象引用，解决了call的重复调用问题,</span></div><div class="line">                 <span class="comment">// 只用一个线程会执行run()方法</span></div><div class="line">				fTask.run();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"end ==========="</span>);</div><div class="line">		<span class="comment">// get会等待FutureTask的计算结果，可以设置等待超时事件,超时会抛出超时异常</span></div><div class="line">		System.out.println(Thread.currentThread().getName() </div><div class="line">                           + <span class="string">" end ....====== "</span> </div><div class="line">                           + f.get(<span class="number">3000</span>, TimeUnit.MILLISECONDS));</div><div class="line">		<span class="comment">// get会等待FutureTask的计算结果，永久等待</span></div><div class="line">		System.out.println(Thread.currentThread().getName() </div><div class="line">                           + <span class="string">" end .... "</span> + f.get());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>concurrentMap2的执行结果</p>
<p>Thread-0 start ….<br>Thread-2 start ….<br>Thread-4 start ….<br>Thread-1 start ….<br>Thread-3 start ….<br>Thread-4 compute , index================== 0<br>Thread-0 compute , index================== 2<br>Thread-0 end …. dataTest0<br>Thread-2 compute , index================== 1<br>Thread-2 end …. dataTest0<br>Thread-4 end …. dataTest0<br>Thread-3 compute , index================== 3<br>Thread-1 compute , index================== 4<br>Thread-1 end …. dataTest3<br>Thread-3 end …. dataTest3</p>
<p> 可以看到put方法被重复执行….</p>
<p>concurrentMap的执行结果</p>
<p>Thread-1 start ….<br>Thread-3 start ….<br>Thread-0 start ….<br>Thread-2 start ….<br>Thread-4 start ….<br>end ===========<br>end ===========<br>end ===========<br>end ===========<br>Thread-1 compute , index=============== 0<br>Thread-3 end ….====== 456789123<br>Thread-3 end …. 456789123<br>end ===========<br>Thread-1 end ….====== 456789123<br>Thread-1 end …. 456789123<br>Thread-0 end ….====== 456789123<br>Thread-0 end …. 456789123<br>Thread-2 end ….====== 456789123<br>Thread-2 end …. 456789123<br>Thread-4 end ….====== 456789123<br>Thread-4 end …. 456789123</p>
<p>可以看到put运算只执行一次….</p>
<p>总结：</p>
<ol>
<li>如果缓存对象可以在系统启动时进行初始化加载，可以不使用ConcurrentHashMap</li>
<li>如果缓存在put时计算比较复杂，那么推荐直接使用concurrentMap写法</li>
<li>ConcurrentHashMap缺陷就是缓存无法回收，导致内存溢出问题。此问题在google发布Guava的Cache很好的进行了处理，可查看另一篇文章<a href="http://itfish.net/article/64821.html#" target="_blank" rel="external">Guava Cache的使用</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> ConcurrentHashMap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2018/06/03/ConcurrentHashMap%E6%89%A9%E5%AE%B9%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="ConcurrentHashMap扩容实现机制"><a href="#ConcurrentHashMap扩容实现机制" class="headerlink" title="ConcurrentHashMap扩容实现机制"></a>ConcurrentHashMap扩容实现机制</h1><p>jdk8中，采用多线程扩容。整个扩容过程，通过CAS设置sizeCtl，transferIndex等变量协调多个线程进行<strong>并发扩容</strong>。</p>
<h1 id="扩容相关的属性"><a href="#扩容相关的属性" class="headerlink" title="扩容相关的属性"></a>扩容相关的属性</h1><h2 id="nextTable"><a href="#nextTable" class="headerlink" title="nextTable"></a>nextTable</h2><p>扩容期间，将table数组中的元素 迁移到 nextTable。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * The next table to use; non-null only while resizing.</div><div class="line">   扩容时，将table中的元素迁移至nextTable . 扩容时非空</div><div class="line"> */</div><div class="line">private transient volatile Node&lt;K,V&gt;[] nextTable;</div></pre></td></tr></table></figure>
<h2 id="sizeCtl属性"><a href="#sizeCtl属性" class="headerlink" title="sizeCtl属性"></a>sizeCtl属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private transient volatile int sizeCtl;</div></pre></td></tr></table></figure>
<p><strong>多线程之间，以volatile的方式读取sizeCtl属性，来判断ConcurrentHashMap当前所处的状态。通过cas设置sizeCtl属性，告知其他线程ConcurrentHashMap的状态变更</strong>。</p>
<p>不同状态，sizeCtl所代表的含义也有所不同。</p>
<ul>
<li>未初始化：<ul>
<li>sizeCtl=0：表示没有指定初始容量。</li>
<li>sizeCtl&gt;0：表示初始容量。</li>
</ul>
</li>
</ul>
<ul>
<li>初始化中：<ul>
<li>sizeCtl=-1,标记作用，告知其他线程，正在初始化</li>
</ul>
</li>
<li>正常状态：<ul>
<li>sizeCtl=0.75n ,扩容阈值</li>
</ul>
</li>
<li>扩容中:<ul>
<li>sizeCtl &lt; 0 : 表示有其他线程正在执行扩容</li>
<li>sizeCtl = (resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) + 2 :表示此时只有一个线程在执行扩容</li>
</ul>
</li>
</ul>
<p>ConcurrentHashMap的状态图如下：</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/2ifidi9IcG.png" alt="mark"></p>
<h2 id="transferIndex属性"><a href="#transferIndex属性" class="headerlink" title="transferIndex属性"></a>transferIndex属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private transient volatile int transferIndex;</div><div class="line"></div><div class="line"></div><div class="line"> /**</div><div class="line">  扩容线程每次最少要迁移16个hash桶</div><div class="line"> */</div><div class="line">private static final int MIN_TRANSFER_STRIDE = 16;</div></pre></td></tr></table></figure>
<p><strong>扩容索引，表示已经分配给扩容线程的table数组索引位置。主要用来协调多个线程，并发安全地获取迁移任务（hash桶）。</strong></p>
<p>1 在扩容之前，transferIndex 在数组的最右边 。此时有一个线程发现已经到达扩容阈值，准备开始扩容。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/8bdb3048Bk.png" alt="mark"></p>
<p>2 扩容线程，在迁移数据之前，首先要将transferIndex右移（以cas的方式修改 <strong>transferIndex=transferIndex-stride(要迁移hash桶的个数)</strong>），获取迁移任务。每个扩容线程都会通过for循环+CAS的方式设置transferIndex，因此可以确保多线程扩容的并发安全。</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/kjgeEBH1Cj.png" alt="mark"></p>
<p>换个角度，我们可以将待迁移的table数组，看成一个任务队列，transferIndex看成任务队列的头指针。而扩容线程，就是这个队列的消费者。扩容线程通过CAS设置transferIndex索引的过程，就是消费者从任务队列中获取任务的过程。为了性能考虑，我们当然不会每次只获取一个任务（hash桶），因此ConcurrentHashMap规定，每次至少要获取16个迁移任务（迁移16个hash桶，MIN_TRANSFER_STRIDE = 16）</p>
<p>cas设置transferIndex的源码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private final void transfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab) &#123;</div><div class="line">      //计算每次迁移的node个数</div><div class="line">      if ((stride = (NCPU &gt; 1) ? (n &gt;&gt;&gt; 3) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class="line">          stride = MIN_TRANSFER_STRIDE; // 确保每次迁移的node个数不少于16个</div><div class="line">      ...</div><div class="line">      for (int i = 0, bound = 0;;) &#123;</div><div class="line">          ...</div><div class="line">          //cas无锁算法设置 transferIndex = transferIndex - stride</div><div class="line">          if (U.compareAndSwapInt</div><div class="line">                       (this, TRANSFERINDEX, nextIndex,</div><div class="line">                        nextBound = (nextIndex &gt; stride ?</div><div class="line">                                     nextIndex - stride : 0))) &#123;</div><div class="line">                ...</div><div class="line">                ...</div><div class="line">          &#125;</div><div class="line">          ...//省略迁移逻辑</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="ForwardingNode节点"><a href="#ForwardingNode节点" class="headerlink" title="ForwardingNode节点"></a>ForwardingNode节点</h2><ol>
<li>标记作用，表示其他线程正在扩容，并且此节点已经扩容完毕</li>
<li>关联了nextTable,扩容期间可以通过find方法，访问已经迁移到了nextTable中的数据</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> static final class ForwardingNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;</div><div class="line">    final Node&lt;K,V&gt;[] nextTable;</div><div class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</div><div class="line">        //hash值为MOVED（-1）的节点就是ForwardingNode</div><div class="line">        super(MOVED, null, null, null);</div><div class="line">        this.nextTable = tab;</div><div class="line">    &#125;</div><div class="line">    //通过此方法，访问被迁移到nextTable中的数据</div><div class="line">    Node&lt;K,V&gt; find(int h, Object k) &#123;</div><div class="line">       ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="何时扩容"><a href="#何时扩容" class="headerlink" title="何时扩容"></a>何时扩容</h1><h2 id="1-当前容量超过阈值"><a href="#1-当前容量超过阈值" class="headerlink" title="1 当前容量超过阈值"></a>1 当前容量超过阈值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class="line">      ...</div><div class="line">      addCount(1L, binCount);</div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private final void addCount(long x, int check) &#123;</div><div class="line">      ...</div><div class="line">      if (check &gt;= 0) &#123;</div><div class="line">          Node&lt;K,V&gt;[] tab, nt; int n, sc;</div><div class="line">          //s&gt;=sizeCtl 即容量达到扩容阈值，需要扩容</div><div class="line">          while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp;</div><div class="line">                 (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class="line">             //调用transfer()扩容</div><div class="line">             ...</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="2-当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树"><a href="#2-当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树" class="headerlink" title="2 当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树"></a>2 当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class="line">       ...</div><div class="line">       if (binCount != 0) &#123;</div><div class="line">                   //链表中元素个数超过默认设定（8个）</div><div class="line">                   if (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">                       treeifyBin(tab, i);</div><div class="line">                   if (oldVal != null)</div><div class="line">                       return oldVal;</div><div class="line">                   break;</div><div class="line">       &#125;</div><div class="line">       ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private final void treeifyBin(Node&lt;K,V&gt;[] tab, int index) &#123;</div><div class="line">    Node&lt;K,V&gt; b; int n, sc;</div><div class="line">    if (tab != null) &#123;</div><div class="line">        //数组的大小还未超过64</div><div class="line">        if ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</div><div class="line">            //扩容</div><div class="line">            tryPresize(n &lt;&lt; 1);</div><div class="line">        else if ((b = tabAt(tab, index)) != null &amp;&amp; b.hash &gt;= 0) &#123;</div><div class="line">            //转换成红黑树</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-当发现其他线程扩容时，帮其扩容"><a href="#3-当发现其他线程扩容时，帮其扩容" class="headerlink" title="3 当发现其他线程扩容时，帮其扩容"></a>3 当发现其他线程扩容时，帮其扩容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class="line">   ...</div><div class="line">    //f.hash == MOVED 表示为：ForwardingNode，说明其他线程正在扩容</div><div class="line">    else if ((fh = f.hash) == MOVED)</div><div class="line">        tab = helpTransfer(tab, f);</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="扩容过程分析"><a href="#扩容过程分析" class="headerlink" title="扩容过程分析"></a>扩容过程分析</h1><ol>
<li>线程执行put操作，发现容量已经达到扩容阈值，需要进行扩容操作，此时transferindex=tab.length=32</li>
</ol>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/1j5jEjjfGC.png" alt="mark"></p>
<ol start="2">
<li>扩容线程A 以cas的方式修改transferindex=32-16=16 ,然后按照降序迁移table[32]–table[16]这个区间的hash桶</li>
</ol>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/bECFGcgkKg.png" alt="mark"></p>
<ol start="3">
<li>迁移hash桶时，会将桶内的链表或者红黑树，按照一定算法，拆分成2份，将其插入nextTable[i]和nextTable[i+n]（n是table数组的长度）。 迁移完毕的hash桶,会被设置成ForwardingNode节点，以此告知访问此桶的其他线程，此节点已经迁移完毕。</li>
</ol>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/8I0gCE52kl.png" alt="mark"></p>
<p>相关代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private final void transfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab) &#123;</div><div class="line">            ...//省略无关代码</div><div class="line">            synchronized (f) &#123;</div><div class="line">                    //将node链表，分成2个新的node链表</div><div class="line">                    for (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class="line">                        int ph = p.hash; K pk = p.key; V pv = p.val;</div><div class="line">                        if ((ph &amp; n) == 0)</div><div class="line">                            ln = new Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class="line">                        else</div><div class="line">                            hn = new Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class="line">                    &#125;</div><div class="line">                    //将新node链表赋给nextTab</div><div class="line">                    setTabAt(nextTab, i, ln);</div><div class="line">                    setTabAt(nextTab, i + n, hn);</div><div class="line">                    setTabAt(tab, i, fwd);</div><div class="line">            &#125;</div><div class="line">            ...//省略无关代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol start="4">
<li>此时线程2访问到了ForwardingNode节点，如果线程2执行的put或remove等写操作，那么就会先帮其扩容。如果线程2执行的是get等读方法，则会调用ForwardingNode的find方法，去nextTable里面查找相关元素。</li>
</ol>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/k7aDHb1JCc.png" alt="mark"></p>
<ol start="5">
<li>线程2加入扩容操作</li>
</ol>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/29j61FCbIA.png" alt="mark"></p>
<ol start="6">
<li>如果准备加入扩容的线程，发现以下情况，放弃扩容，直接返回。</li>
</ol>
<ul>
<li>发现transferIndex=0,即<strong>所有node均已分配</strong></li>
<li>发现扩容线程已经达到<strong>最大扩容线程数</strong></li>
</ul>
<p><img src="https://blogimg.nos-eastchina1.126.net/171214/B6ch1929bL.png" alt="mark"></p>
<h1 id="部分源码分析"><a href="#部分源码分析" class="headerlink" title="部分源码分析"></a>部分源码分析</h1><h2 id="tryPresize方法"><a href="#tryPresize方法" class="headerlink" title="tryPresize方法"></a>tryPresize方法</h2><p>协调多个线程如何调用transfer方法进行hash桶的迁移（addCount，helpTransfer 方法中也有类似的逻辑）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryPresize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">    <span class="comment">//计算扩容的目标size</span></div><div class="line">    <span class="keyword">int</span> c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</div><div class="line">        tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> sc;</div><div class="line">    <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab = table; <span class="keyword">int</span> n;</div><div class="line">        <span class="comment">//tab没有初始化</span></div><div class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</div><div class="line">            n = (sc &gt; c) ? sc : c;</div><div class="line">            <span class="comment">//初始化之前，CAS设置sizeCtl=-1 </span></div><div class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (table == tab) &#123;</div><div class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</div><div class="line">                        table = nt;</div><div class="line">                        <span class="comment">//sc=0.75n,相当于扩容阈值</span></div><div class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    <span class="comment">// 此时并没有通过CAS赋值，因为其他想要执行初始化的线程，</span></div><div class="line">                    <span class="comment">// 发现sizeCtl=-1，就直接返回，从而确保任何情况，</span></div><div class="line">                    <span class="comment">// 只会有一个线程执行初始化操作。</span></div><div class="line">                    sizeCtl = sc;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//目标扩容size小于扩容阈值，或者容量超过最大限制时，不需要扩容</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">//扩容</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</div><div class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</div><div class="line">            <span class="comment">//sc&lt;0表示，已经有其他线程正在扩容</span></div><div class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</div><div class="line">                Node&lt;K,V&gt;[] nt;</div><div class="line">            <span class="comment">//1 (sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs ：扩容线程数 &gt; MAX_RESIZERS-1</span></div><div class="line">            <span class="comment">//2 sc == rs + 1 和 sc == rs + MAX_RESIZERS ：表示什么？？？       </span></div><div class="line">            <span class="comment">//3 (nt = nextTable) == null ：表示nextTable正在初始化</span></div><div class="line">            <span class="comment">//4 transferIndex &lt;= 0 ：表示所有hash桶均分配出去</span></div><div class="line">                 </div><div class="line">                <span class="comment">//如果不需要帮其扩容，直接返回</span></div><div class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</div><div class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</div><div class="line">                    transferIndex &lt;= <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//CAS设置sizeCtl=sizeCtl+1</span></div><div class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</div><div class="line">                    <span class="comment">//帮其扩容</span></div><div class="line">                    transfer(tab, nt);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 第一个执行扩容操作的线程，将sizeCtl设置为：</span></div><div class="line">            <span class="comment">// (resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</div><div class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</div><div class="line">                transfer(tab, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="transfer方法"><a href="#transfer方法" class="headerlink" title="transfer方法"></a>transfer方法</h2><p>负责迁移node节点</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = tab.length, stride;</div><div class="line">    <span class="comment">//计算需要迁移多少个hash桶（MIN_TRANSFER_STRIDE该值作为下限，以避免扩容线程过多）</span></div><div class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class="line">        stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></div><div class="line">   </div><div class="line">    <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//扩容一倍</span></div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</div><div class="line">            nextTab = nt;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></div><div class="line">            sizeCtl = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        nextTable = nextTab;</div><div class="line">        transferIndex = n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> nextn = nextTab.length;</div><div class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</div><div class="line">    <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; </div><div class="line">  </div><div class="line">    <span class="comment">// 1.逆序迁移已经获取到的hash桶集合，如果迁移完毕，</span></div><div class="line">    <span class="comment">// 则更新transferIndex，获取下一批待迁移的hash桶</span></div><div class="line">    <span class="comment">// 2.如果transferIndex=0，表示所以hash桶均被分配，</span></div><div class="line">  	<span class="comment">// 将i置为-1，准备退出transfer方法</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</div><div class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</div><div class="line">        </div><div class="line">        <span class="comment">//更新待迁移的hash桶索引</span></div><div class="line">        <span class="keyword">while</span> (advance) &#123;</div><div class="line">            <span class="keyword">int</span> nextIndex, nextBound;</div><div class="line">            <span class="comment">//更新迁移索引i。</span></div><div class="line">            <span class="keyword">if</span> (--i &gt;= bound || finishing)</div><div class="line">                advance = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// transferIndex&lt;=0表示已经没有需要迁移的hash桶，</span></div><div class="line">              	<span class="comment">// 将i置为-1，线程准备退出</span></div><div class="line">                i = -<span class="number">1</span>;</div><div class="line">                advance = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 当迁移完bound这个桶后，尝试更新transferIndex，</span></div><div class="line">            <span class="comment">// 获取下一批待迁移的hash桶</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</div><div class="line">                     (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</div><div class="line">                      nextBound = (nextIndex &gt; stride ?</div><div class="line">                                   nextIndex - stride : <span class="number">0</span>))) &#123;</div><div class="line">                bound = nextBound;</div><div class="line">                i = nextIndex - <span class="number">1</span>;</div><div class="line">                advance = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//退出transfer</span></div><div class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class="line">            <span class="keyword">int</span> sc;</div><div class="line">            <span class="keyword">if</span> (finishing) &#123;</div><div class="line">                <span class="comment">//最后一个迁移的线程，recheck后，做收尾工作，然后退出</span></div><div class="line">                nextTable = <span class="keyword">null</span>;</div><div class="line">                table = nextTab;</div><div class="line">                sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</div><div class="line">  <span class="comment">// 第一个扩容的线程，执行transfer方法之前，会设置 sizeCtl = </span></div><div class="line">            <span class="comment">// (resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) + 2) 	</span></div><div class="line">            <span class="comment">// 后续帮其扩容的线程，执行transfer方法之前，会设置 sizeCtl = sizeCtl+1</span></div><div class="line">            <span class="comment">// 每一个退出transfer的方法的线程，退出之前，会设置 sizeCtl = sizeCtl-1</span></div><div class="line">            <span class="comment">// 那么最后一个线程退出时：</span></div><div class="line">            <span class="comment">// 必然有sc == (resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) + 2)，</span></div><div class="line">            <span class="comment">// 即 (sc - 2) == resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT</span></div><div class="line">                </div><div class="line">                <span class="comment">//不相等，说明不到最后一个线程，直接退出transfer方法</span></div><div class="line">                <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                finishing = advance = <span class="keyword">true</span>;</div><div class="line">                <span class="comment">//最后退出的线程要重新check下是否全部迁移完毕</span></div><div class="line">                i = n; <span class="comment">// recheck before commit</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</div><div class="line">            advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">            advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></div><div class="line">        <span class="comment">//迁移node节点</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                    Node&lt;K,V&gt; ln, hn;</div><div class="line">                    <span class="comment">//链表迁移</span></div><div class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">int</span> runBit = fh &amp; n;</div><div class="line">                        Node&lt;K,V&gt; lastRun = f;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</div><div class="line">                            <span class="keyword">int</span> b = p.hash &amp; n;</div><div class="line">                            <span class="keyword">if</span> (b != runBit) &#123;</div><div class="line">                                runBit = b;</div><div class="line">                                lastRun = p;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</div><div class="line">                            ln = lastRun;</div><div class="line">                            hn = <span class="keyword">null</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> &#123;</div><div class="line">                            hn = lastRun;</div><div class="line">                            ln = <span class="keyword">null</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//将node链表，分成2个新的node链表</span></div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class="line">                            <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</div><div class="line">                            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</div><div class="line">                                ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//将新node链表赋给nextTab</span></div><div class="line">                        setTabAt(nextTab, i, ln);</div><div class="line">                        setTabAt(nextTab, i + n, hn);</div><div class="line">                        setTabAt(tab, i, fwd);</div><div class="line">                        advance = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//红黑树迁移</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class="line">                        TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                        TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                        <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                            <span class="keyword">int</span> h = e.hash;</div><div class="line">                            TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</div><div class="line">                                (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                            <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</div><div class="line">                                <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">                                    lo = p;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    loTail.next = p;</div><div class="line">                                loTail = p;</div><div class="line">                                ++lc;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">                                    hi = p;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hiTail.next = p;</div><div class="line">                                hiTail = p;</div><div class="line">                                ++hc;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class="line">                            (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</div><div class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class="line">                            (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</div><div class="line">                        setTabAt(nextTab, i, ln);</div><div class="line">                        setTabAt(nextTab, i + n, hn);</div><div class="line">                        setTabAt(tab, i, fwd);</div><div class="line">                        advance = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>多线程无锁扩容的关键就是通过CAS设置sizeCtl与transferIndex变量，协调多个线程对table数组中的node进行迁移。</p>
<p><strong>勘误：tab.length为32，扩容阈值是32*0.75=24</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList 源码分析]]></title>
      <url>/2018/06/03/ArrayList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="ArrayList-源码分析"><a href="#ArrayList-源码分析" class="headerlink" title="ArrayList 源码分析"></a>ArrayList 源码分析</h1><p><img src="https://blogimg.nos-eastchina1.126.net/171208/C88BKj3C76.png" alt="mark"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以面试问答的形式学习我们的最常用的装载容器——<code>ArrayList</code>（源码分析基于JDK8）</p>
<a id="more"></a>
<h1 id="问答内容"><a href="#问答内容" class="headerlink" title="问答内容"></a>问答内容</h1><h2 id="ArrayList是什么，可以用来干嘛？"><a href="#ArrayList是什么，可以用来干嘛？" class="headerlink" title="ArrayList是什么，可以用来干嘛？"></a>ArrayList是什么，可以用来干嘛？</h2><p>问：ArrayList有用过吗？它是一个什么东西？可以用来干嘛？</p>
<p>答：有用过，ArrayList就是数组列表，主要用来装载数据，当我们装载的是基本类型的数据<code>int,long,boolean,short,byte...</code>的时候我们只能存储他们对应的包装类，它的主要底层实现是数组<code>Object[] elementData</code>。与它类似的是LinkedList，和LinkedList相比，它的查找和访问元素的速度较快，但新增，删除的速度较慢。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个ArrayList，如果没有指定初始大小，默认容器大小为10</span></div><div class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"><span class="comment">// 往容器里面添加元素</span></div><div class="line">arrayList.add(<span class="string">"张三"</span>);</div><div class="line">arrayList.add(<span class="string">"李四"</span>);</div><div class="line">arrayList.add(<span class="string">"王五"</span>);</div><div class="line"><span class="comment">// 获取index下标为0的元素      张三</span></div><div class="line">String element = arrayList.get(<span class="number">0</span>);</div><div class="line"><span class="comment">// 删除index下标为1的元素      李四</span></div><div class="line">String removeElement = arrayList.remove(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>ArrayList底层实现示意图</p>
<h2 id="ArrayList中不断添加数据会有什么问题吗？"><a href="#ArrayList中不断添加数据会有什么问题吗？" class="headerlink" title="ArrayList中不断添加数据会有什么问题吗？"></a>ArrayList中不断添加数据会有什么问题吗？</h2><p>问：您说它的底层实现是数组，但是数组的大小是定长的，如果我们不断的往里面添加数据的话，不会有问题吗？</p>
<p>答：ArrayList可以通过构造方法在初始化的时候指定底层数组的大小。</p>
<ul>
<li>通过无参构造方法的方式<code>ArrayList()</code>初始化，则赋值底层数组<code>Object[] elementData</code>为一个默认空数组<code>Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}</code>所以数组容量为0，只有真正对数据进行添加<code>add</code>时，才分配默认<code>DEFAULT_CAPACITY = 10</code>的初始容量。<br>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义ArrayList默认容量为10</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">// 空数组，当调用无参构造方法时默认复制这个空数组</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 真正保存数据的底层数组</span></div><div class="line"><span class="keyword">transient</span> Object[] elementData; </div><div class="line"></div><div class="line"><span class="comment">// ArrayList的实际元素数量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 无参构造方法默认为空数组</span></div><div class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过指定容量初始大小的构造方法方式<code>ArrayList(int initialCapacity)</code>初始化，则赋值底层数组<code>Object[] elementData</code>为指定大小的数组<code>this.elementData = new Object[initialCapacity];</code><br>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 通过构造方法出入指定的容量来设置默认底层数组大小 </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                           initialCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当我们添加的元素数量已经达到底层数组<code>Object[] elementData</code>的上限时，我们再往ArrayList元素，则会触发ArrayList的自动扩容机制，ArrayList会通过位运算<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>以1.5倍的方式初始化一个新的数组（如初始化数组大小为10，则扩容后的数组大小为15），然后使用<code>Arrays.copyOf(elementData, newCapacity);</code>方法将原数据的数据逐一复制到新数组上面去，以此达到ArrayList扩容的效果。虽然，<code>Arrays.copyOf(elementData, newCapacity);</code>方法最终调用的是<code>native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>是一个底层方法，效率还算可以，但如果我们在知道ArrayList想装多少个元素的情况下，却没有指定容器大小，则就会导致ArrayList频繁触发扩容机制，频繁进行底层数组之间的数据复制，大大降低使用效率。<br>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">//确保底层数组容量，如果容量不足，则扩容</span></div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>); </div><div class="line">    elementData[size++] = e;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    <span class="comment">// 容量不足，则调用grow方法进行扩容</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 扩容方法(重点)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// 获得原容量大小</span></div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="comment">// 新容量为原容量的1.5倍</span></div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">    <span class="comment">// 再判断新容量是否已足够，如果扩容后仍然不足够，则复制为最小容量长度</span></div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="comment">// 判断是否超过最大长度限制</span></div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    <span class="comment">// 将原数组的数据复制至新数组， ArrayList的底层数组引用指向新数组</span></div><div class="line">    <span class="comment">// 如果数据量很大，重复扩容，则会影响效率</span></div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>因此，在我们使用ArrayList的时候，如果知道最终的存储容量capacity，则应该在初始化的时候就指定ArrayList的容量<code>ArrayList(int initialCapacity)</code>，如果初始化时无法预知装载容量，但在使用过程中，得知最终容量，我们可以通过调用<code>ensureCapacity(int minCapacity)</code>方法来指定ArrayList的容量，并且，如果我们在使用途中，如果确定容量大小，但是由于之前每次扩容都扩充50%，所以会造成一定的存储空间浪费，我们可以调用<code>trimToSize()</code>方法将容器最小化到存储元素容量，进而消除这些存储空间浪费。例如：我们当前存储了11个元素，我们不会再添加但是当前的ArrayList的大小为15，有4个存储空间没有被使用，则调用<code>trimToSize()</code>方法后，则会重新创建一个容量为11的数组<code>Object[] elementData</code>，将原有的11个元素复制至新数组，达到节省内存空间的效果。<br>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将底层数组一次性指定到指定容量的大小</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</div><div class="line">        <span class="comment">// any size if not default element table </span></div><div class="line">         ? <span class="number">0</span></div><div class="line">        <span class="comment">// larger than default for default empty table. It's already</span></div><div class="line">        <span class="comment">// supposed to be at default size.</span></div><div class="line">        : DEFAULT_CAPACITY;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</div><div class="line">        ensureExplicitCapacity(minCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将容器最小化到存储元素容量</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">        elementData = (size == <span class="number">0</span>)</div><div class="line">          ? EMPTY_ELEMENTDATA</div><div class="line">          : Arrays.copyOf(elementData, size);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayList怎么-删除数据，为什么访问速度快，删除新增速度慢-？"><a href="#ArrayList怎么-删除数据，为什么访问速度快，删除新增速度慢-？" class="headerlink" title="ArrayList怎么 删除数据，为什么访问速度快，删除新增速度慢 ？"></a>ArrayList怎么 删除数据，为什么访问速度快，删除新增速度慢 ？</h2><p>问：那它是怎么样删除元素的？您上面说到ArrayList访问元素速度较快，但是新增和删除的速度较慢，为什么呢？</p>
<p>答：</p>
<ul>
<li>通过源码我们可以得知，ArrayList删除元素时，先获取对应的删除元素，然后把要删除元素对应索引index后的元素逐一往前移动1位，最后将最后一个存储元素清空并返回删除元素，以此达到删除元素的效果。</li>
<li>当我们通过下标的方式去访问元素时，我们假设访问一个元素所花费的时间为K，则通过下标一步到位的方式访问元素，时间则为1K，用“大O”表示法表示，则时间复杂度为O(1)。所以ArrayList的访问数据的数据是比较快的。</li>
<li>当我们去添加元素<code>add(E e)</code>时，我们是把元素添加至末尾，不需要移动元素，此时的时间复杂度为O(1)，但我们把元素添加到指定位置，最坏情况下，我们将元素添加至第一个位置<code>add(int index, E element)</code>，则整个ArrayList的n-1个元素都要往前移动位置，导致底层数组发生n-1次复制。通常情况下，我们说的时间复杂度都是按最坏情况度量的，此时的时间复杂度为O(n)。删除元素同理，删除最后一个元素不需要移动元素，时间复杂度为O(1)，但删除第一个元素，则需要移动n-1个元素，最坏情况下的时间复杂度也是O(n)。</li>
<li>所以ArrayList访问元素速度较快，但是新增和删除的速度较慢。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将元素添加至末尾</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">// 确保底层数组容量，如果容量不足，则扩容</span></div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">    elementData[size++] = e;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将元素添加至指定下标位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">     <span class="comment">// 检查下标是否在合法范围内</span></div><div class="line">    rangeCheckForAdd(index);</div><div class="line">    <span class="comment">// 确保底层数组容量，如果容量不足，则扩容</span></div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">    <span class="comment">// 将要添加的元素下标后的元素通过复制的方式逐一往后移动，腾出对应index下标的存储位置</span></div><div class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                     size - index);</div><div class="line">    <span class="comment">// 将新增元素存储至指定下标索引index</span></div><div class="line">    elementData[index] = element;</div><div class="line">    <span class="comment">// ArrayList的大小 + 1</span></div><div class="line">    size++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过下标索引的方式删除元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查下标是否在合法范围内</span></div><div class="line">    rangeCheck(index);</div><div class="line"></div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 直接通过下标去访问底层数组的元素</span></div><div class="line">    E oldValue = elementData(index);</div><div class="line"></div><div class="line">    <span class="comment">// 计算数组需要移动的元素个数</span></div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        <span class="comment">// 将要删除的元素下标后的元素通过复制的方式逐一往前移动</span></div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</div><div class="line">    <span class="comment">//将底层数组长度减1，并清空最后一个存储元素。</span></div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line">    <span class="comment">// 返回移除元素</span></div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayList是线程安全的吗？"><a href="#ArrayList是线程安全的吗？" class="headerlink" title="ArrayList是线程安全的吗？"></a>ArrayList是线程安全的吗？</h2><p>问：ArrayList是线程安全的吗？</p>
<p>答：ArrayList不是线程安全的，如果多个线程同时对同一个ArrayList更改数据的话，会导致数据不一致或者数据污染。如果出现线程不安全的操作时，ArrayList会尽可能的抛出<code>ConcurrentModificationException</code>防止数据异常，当我们在对一个ArrayList进行遍历时，在遍历期间，我们是不能对ArrayList进行添加，修改，删除等更改数据的操作的，否则也会抛出<code>ConcurrentModificationException</code>异常，此为fail-fast（快速失败）机制。从源码上分析，我们在<code>add,remove,clear</code>等更改ArrayList数据时，都会导致modCount的改变，当<code>expectedModCount != modCount</code>时，则抛出<code>ConcurrentModificationException</code>。如果想要线程安全，可以考虑使用Vector、CopyOnWriteArrayList。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * AbstractList.Itr 的迭代器实现</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">    <span class="comment">//期望的modCount</span></div><div class="line">    <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cursor != size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkForComodification();</div><div class="line">        <span class="keyword">int</span> i = cursor;</div><div class="line">        <span class="keyword">if</span> (i &gt;= size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        cursor = i + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        checkForComodification();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">            cursor = lastRet;</div><div class="line">            lastRet = -<span class="number">1</span>;</div><div class="line">            expectedModCount = modCount;</div><div class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(consumer);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</div><div class="line">        <span class="keyword">int</span> i = cursor;</div><div class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</div><div class="line">            consumer.accept((E) elementData[i++]);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></div><div class="line">        cursor = i;</div><div class="line">        lastRet = i - <span class="number">1</span>;</div><div class="line">        checkForComodification();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>如果在初始化的时候知道ArrayList的初始容量，请一开始就指定容量<code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(20);</code>,如果一开始不知道容量，中途才得知，请调用<code>list.ensureCapacity(20);</code>来扩充容量，如果数据已经添加完毕，但仍需要保存在内存中一段时间，请调用<code>list.trimToSize()</code>将容器最小化到存储元素容量，进而消除这些存储空间浪费。</li>
<li>ArrayList是以1.5倍的容量去扩容的，如初始容量是10，则容量依次递增扩充为：15，22，33，49。扩容后把原始数据从旧数组复制至新数组中。</li>
<li>ArrayList访问元素速度较快，下标方式访问元素，时间复杂度为O(1)，添加与删除速度较慢，时间复杂度均为O(n)。</li>
<li>ArrayList不是线程安全的，但是在发生并发行为时，它会尽可能的抛出<code>ConcurrentModificationException</code>，此为fail-fast机制。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> ArrayList </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ajax 请求]]></title>
      <url>/2018/06/03/ajax%20%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h1 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h1><p>语法：在jq框架中使用jQuery.ajax(url,JSONSettings)方法来实现请求的发送和接收。</p>
<a id="more"></a>
<pre><code>jQuery.ajax(url,json);
$.ajax(url,json);
</code></pre><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><pre><code>(1)请求类型：type
      参数重要性：必要参数
      参数值类型：字符串
      参数可选值：get、post

(2)请求地址：url
      参数重要性：必要参数
      参数值类型：字符串
      参数说明：如果在json参数中写明本属性，则ajax函数的第一个参数就可以不写

(3)响应类型：dataType
      参数重要性：必要参数
      参数值类型：字符串
      参数可选值：json、xml、html、jsonp等等..我们只用json

(4)post数据包：data
      参数重要性：可选参数，但post请求下一般为必要参数
      参数值类型：json
      参数说明：本参数是专门提供给post请求服务的，
                因为post请求不会将数据直接拼接在url地址中，
                因此通过本属性将数据添加到请求内部。

(5)回调函数：success、error、beforeSend
      参数重要性：可选参数
      参数值类型：函数
      参数说明：success属性对应的函数会在请求完成后自动发生回调
                error属性对应的函数会在请求发生错误后（发生错误指的是网络错误、链接失败或者url地址违
                法）自动发生回调
                beforeSend属性对应的函数会在请求发送出之前自动发生回调
</code></pre><h2 id="get-无参请求"><a href="#get-无参请求" class="headerlink" title="get 无参请求"></a>get 无参请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson7<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>get无参请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    var ul = document.querySelector('ul');</div><div class="line">    $('button').click(function () &#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            "type":"get",</div><div class="line">            "url":"http://wwtliu.com/sxtstu/blueberrypai/getIndexBanner.php",</div><div class="line">            "dataType":"json",</div><div class="line">            "success":function (response) &#123;</div><div class="line">                //console.log(response.banner);</div><div class="line">                for(var i=0;i<span class="tag">&lt;<span class="name">response.banner.length;i++)&#123;</span></span></div><div class="line">                    //<span class="attr">console.log</span>(<span class="attr">response.banner</span>[<span class="attr">i</span>]);</div><div class="line">                    <span class="attr">var</span> <span class="attr">li</span> = <span class="string">document.createElement(</span>'<span class="attr">li</span>');</div><div class="line">                    <span class="attr">ul.appendChild</span>(<span class="attr">li</span>);</div><div class="line">                    <span class="attr">var</span> <span class="attr">pTitle</span> = <span class="string">document.createElement(</span>'<span class="attr">p</span>');</div><div class="line">                    <span class="attr">pTitle.innerHTML</span> = <span class="string">response.banner[i].title;</span></div><div class="line">                    <span class="attr">li.appendChild</span>(<span class="attr">pTitle</span>);</div><div class="line"></div><div class="line">                    <span class="attr">var</span> <span class="attr">pcont</span> = <span class="string">document.createElement(</span>'<span class="attr">p</span>');</div><div class="line">                    <span class="attr">pcont.innerHTML</span> = <span class="string">response.banner[i].content;</span></div><div class="line">                    <span class="attr">li.appendChild</span>(<span class="attr">pcont</span>);</div><div class="line"></div><div class="line">                    <span class="attr">var</span> <span class="attr">img</span> = <span class="string">document.createElement(</span>'<span class="attr">img</span>');</div><div class="line">                    <span class="attr">img.src</span> = <span class="string">response.banner[i].img;</span></div><div class="line">                    <span class="attr">li.appendChild</span>(<span class="attr">img</span>);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="get-有参请求"><a href="#get-有参请求" class="headerlink" title="get 有参请求"></a>get 有参请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson7<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>get无参请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    $('button').click(function () &#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            "type":"get",</div><div class="line">            "url":"http://wwtliu.com/sxtstu/news/juhenews.php?type=yule&amp;count=10",</div><div class="line">            "dataType":"json",</div><div class="line">            "success":function (response) &#123;</div><div class="line">                console.log(response);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lesson7<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>get无参请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    $('button').click(function () &#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            "type":"post",</div><div class="line">            "url":"http://wwtliu.com/sxtstu/blueberrypai/login.php",</div><div class="line">            "dataType":"json",</div><div class="line">            "data":&#123;</div><div class="line">                user_id:"iwen@qq.com",</div><div class="line">                password:"iwen1232",</div><div class="line">                verification_code:"crfvw"</div><div class="line">            &#125;,</div><div class="line">            "success":function (data) &#123;</div><div class="line">                console.log(data);</div><div class="line">            &#125;,</div><div class="line">            "error":function (error) &#123;</div><div class="line">                console.log(error);</div><div class="line">            &#125;,</div><div class="line">            // 在请求发送前调用</div><div class="line">            "beforeSend":function () &#123;</div><div class="line">                console.log('这里是请求发送出去前的最后一步！');</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更多详细的参数参考：<a href="https://www.jquery123.com/jQuery.ajax/" target="_blank" rel="external">https://www.jquery123.com/jQuery.ajax/</a>                     </p>
<p>​<br>​<br>​<br>​<br>​<br>​<br>​</p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[10 款最好的 Python IDE]]></title>
      <url>/2018/06/03/10%E6%AC%BE%E6%9C%80%E5%A5%BD%E7%9A%84Python%20IDE/</url>
      <content type="html"><![CDATA[<h1 id="10-款最好的-Python-IDE"><a href="#10-款最好的-Python-IDE" class="headerlink" title="10 款最好的 Python IDE"></a>10 款最好的 Python IDE</h1><p><img src="https://blogimg.nos-eastchina1.126.net/171221/20G8aHLhha.png" alt="mark"></p>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/09AB4IL3l8.png" alt="mark"></p>
<h2 id="Eclipse-PyDev"><a href="#Eclipse-PyDev" class="headerlink" title="Eclipse PyDev"></a>Eclipse PyDev</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/ijG2834aE6.png" alt="mark"></p>
<h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/Dlj5E1HeDL.png" alt="mark"></p>
<h2 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/5KL3IBgA86.png" alt="mark"></p>
<h2 id="Komodo"><a href="#Komodo" class="headerlink" title="Komodo"></a>Komodo</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/gFJi6mffGG.png" alt="mark"></p>
<p>PyCharm</p>
<p><img src="https://blogimg.nos-eastchina1.126.net/171221/68B3ELEi09.png" alt="mark"></p>
<h2 id="Wing"><a href="#Wing" class="headerlink" title="Wing"></a>Wing</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/492EIljf6I.png" alt="mark"></p>
<h2 id="PyScripter"><a href="#PyScripter" class="headerlink" title="PyScripter"></a>PyScripter</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/BA3h86BbjF.png" alt="mark"></p>
<h2 id="The-Eric-Python-IDE"><a href="#The-Eric-Python-IDE" class="headerlink" title="The Eric Python IDE"></a>The Eric Python IDE</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/e0GC5C00DC.png" alt="mark"></p>
<h2 id="Interactive-Editor-for-Python"><a href="#Interactive-Editor-for-Python" class="headerlink" title="Interactive Editor for Python"></a>Interactive Editor for Python</h2><p><img src="https://blogimg.nos-eastchina1.126.net/171221/iG8BGKk6h7.png" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> Python IDE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(两到三年)Java 面试精髓]]></title>
      <url>/2018/06/03/(%E4%B8%A4%E5%88%B0%E4%B8%89%E5%B9%B4)Java%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E9%AB%93/</url>
      <content type="html"><![CDATA[<h1 id="两到三年-Java-面试精髓"><a href="#两到三年-Java-面试精髓" class="headerlink" title="(两到三年)Java 面试精髓"></a>(两到三年)Java 面试精髓</h1><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>工作两到三年。在面试的时候，其实会对我们平时所有用框架的源码和一些功能底层代码实现给出提问。<br><a id="more"></a></p>
<h2 id="Struts2框架的执行流程"><a href="#Struts2框架的执行流程" class="headerlink" title="Struts2框架的执行流程 ?"></a>Struts2框架的执行流程 ?</h2><p>从客户端发送请求过来,先经过前端控制器（核心过滤器）过滤器中,执行一组拦截器（一组拦截器 就会完成部分功能代码）执行目标Action,</p>
<p>在Action中返回一个结果视图,根据Result的配置进行页面的跳转.</p>
<p>Struts2和Struts1没有任何联系.Struts2内核是webwork的内核.</p>
<h2 id="hibernate框架的理解"><a href="#hibernate框架的理解" class="headerlink" title="hibernate框架的理解?"></a>hibernate框架的理解?</h2><p>定义:</p>
<p>Hibernate是一个开放源代码的对象关系映射（ORM）框架，它对JDBC进行了非常轻量级的对象封装，</p>
<p>使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库.可以通过对象保存到关系型数据库中,仅提供sava/get方法即可</p>
<p>Hibernate是一个持久层的ORM框架.</p>
<h2 id="Spring框架的理解"><a href="#Spring框架的理解" class="headerlink" title="Spring框架的理解?"></a>Spring框架的理解?</h2><p>Spring是一个开源框架,核心是控制反转（IOC编程思想）和面向切面（AOP）。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架</p>
<p>Spring的AOP的理解:通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术,利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率.可以在不修改源代码的前提下，对程序进行增强.</p>
<p>例如:在以前配置事务的时候,进行事务的回滚,提交等操作,配置AOP 以后可以将事务的权限交给Spring框架去管理,自动管理</p>
<h2 id="SpringMVC的理解"><a href="#SpringMVC的理解" class="headerlink" title="SpringMVC的理解?"></a>SpringMVC的理解?</h2><p>springMvc:是一个表现层框架,就是从请求中接收传入的参数,</p>
<p>将处理后的结果数据返回给页面展示</p>
<p>基本类型:string,double,float,integer,long.boolean</p>
<h2 id="Mybatis的理解"><a href="#Mybatis的理解" class="headerlink" title="Mybatis的理解?"></a>Mybatis的理解?</h2><p>MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</p>
<p>Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatement、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</p>
<p>#{}可以有效防止sql注入</p>
<h2 id="Servlet的理解"><a href="#Servlet的理解" class="headerlink" title="Servlet的理解?"></a>Servlet的理解?</h2><p>* GET和POST区别?</p>
<p>* GET：请求参数会显示到地址栏.GET方式有大小的限制.GET方式没有请求体</p>
<p>* POST：请求参数不会显示到地址栏.在请求体中.POST没有大小限制.POST方式有请求体.</p>
<p>* 只有表单设置为method=”post”才是post请求.其他的都是get请求</p>
<p>生命周期:客户端第一次访问该Servlet的时候才会创建一个Servlet的对象,那么Servlet中的init方法就会执行.任何一次从客户端发送的请求,那么服务器创建一个新的线程执行Servlet中service方法为这次请求服务.</p>
<p>service方法的内部根据请求的方式的不同调用不同doXXX的方法.当Servlet从服务器中移除或者关闭服务器的时候Servlet对象就会被销毁.destroy的方法就会执行.</p>
<h2 id="Struts2与SpringMVC的区别"><a href="#Struts2与SpringMVC的区别" class="headerlink" title="Struts2与SpringMVC的区别?"></a>Struts2与SpringMVC的区别?</h2><p>1)springmvc的入口是一个servlet即前端控制器，而struts2入口是一个filter过虑器。</p>
<p>2)springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p>
<p>3)Struts采用值栈存储请求和响应的数据，通过OGNL存取数据， springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</p>
<h2 id="Jsp的核心及核心标签"><a href="#Jsp的核心及核心标签" class="headerlink" title="Jsp的核心及核心标签?"></a>Jsp的核心及核心标签?</h2><p>a) Servlet</p>
<p>b) Core XML Database Funcations</p>
<h2 id="Redis什么情况下使用，redis持久化方案"><a href="#Redis什么情况下使用，redis持久化方案" class="headerlink" title="Redis什么情况下使用，redis持久化方案?"></a>Redis什么情况下使用，redis持久化方案?</h2><p>a) 处理大数据量的时候</p>
<p>b) Redis的所有数据都是保存在内存中，</p>
<p>Rdb：快照形式，定期把内存中当前时刻的数据保存到磁盘，redis默认支持的持久化方案</p>
<p>aof形式：append only file。把所有对redis数据库操作的命令，增删改操作命令，保存到文件中，数据库恢复是把所有命令执行一遍即可。</p>
<h2 id="Hibernate和Mybatis的区别和优劣"><a href="#Hibernate和Mybatis的区别和优劣" class="headerlink" title="Hibernate和Mybatis的区别和优劣?"></a>Hibernate和Mybatis的区别和优劣?</h2><p>a) Sql优化方面：hibernate的查询会将表中所有的字段查询出来，这一点会有性能的消耗</p>
<p>Mybatis的sql是手动编写的，所以可以按需求指定查询的字段，sql会更灵活，可控性更好</p>
<p>b) Hibernate是在JDBC上进行了一次封装</p>
<p>Mybatis是基于原生的JDBC，运行速度有优势</p>
<p>c) Mybatis mapper xml支持动态sql；Hibernate不支持</p>
<p>d) Hibernate与具体数据库的关联只需在xml文件中配置即可，所有hql语句与具体的数据库无关，移植性好</p>
<p>Mybatis项目所有的sql语句都是依赖所用的数据库的，所以不同数据库类型的支持不好</p>
<h2 id="StringBuffer、StringBuilder的区别"><a href="#StringBuffer、StringBuilder的区别" class="headerlink" title="StringBuffer、StringBuilder的区别?"></a>StringBuffer、StringBuilder的区别?</h2><p>StringBuffer、StringBuilder是容器，是可变的字符串序列，存放于堆内存。</p>
<p>StringBuffer是JDK1.0版本的，线程是安全的，效率比较低。StringBuilder是JDK1.5出现的，线程不安全，效率高。</p>
<h2 id="说一下SOLR"><a href="#说一下SOLR" class="headerlink" title="说一下SOLR?"></a>说一下SOLR?</h2><p>solr就是一个中文搜索引擎,做完分词之后会做热度排名,核心是中文分词器,全文搜索支持,索引值指向对应的文档,相当于是一个字典,默认为collection的一个域对象,查询快,效率高.</p>
<p>可以在Redis里做分词之后的缓存,每次搜索一次就次数加一,里面还有一个投票容错机制,主机挂掉还有备份机,一般配置都为奇数态配置.</p>
<h2 id="Solr与Lucene的区别"><a href="#Solr与Lucene的区别" class="headerlink" title="Solr与Lucene的区别?"></a>Solr与Lucene的区别?</h2><p>Lucene是一个开放源代码的全文检索引擎工具包，它不是一个完整的全文检索引擎，Lucene提供了完整的查询引擎和索引引擎，目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者以Lucene为基础构建全文检索引擎。</p>
<p>Solr的目标是打造一款企业级的搜索引擎系统，它是一个搜索引擎服务，可以独立运行，通过Solr可以非常快速的构建企业的搜索引擎，通过Solr也可以高效的完成站内搜索功能。</p>
<h2 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis?"></a>什么是Redis?</h2><p>1) Redis的高性能是由于其将所有数据都存储在了内存中，为了使Redis在重启之后仍能保证数据不丢失，需要将数据从内存中同步到硬盘中，这一过程就是持久化。</p>
<p>Redis支持两种方式的持久化，一种是RDB方式，一种是AOF方式。可以单独使用其中一种或将二者结合使用。</p>
<p>1.1RDB持久化</p>
<p>RDB方式的持久化是通过快照（snapshotting）完成的，当符合一定条件时Redis会自动将内存中的数据进行快照并持久化到硬盘。</p>
<p>每次进行访问进行存储,如果服务器一旦崩溃,会导致数据丢失</p>
<p>RDB是Redis默认采用的持久化方式，在redis.conf配置文件中默认有此下配置：</p>
<p>save 900 1 , save 300 10, save 60 10000</p>
<p>save 开头的一行就是持久化配置，可以配置多个条件（每行配置一个条件），每个条件之间是“或”的关系，“save 900 1”表示15分钟（900秒钟）内</p>
<p>至少</p>
<p>1个键被更改则进行快照，“save 300 10”表示5分钟（300秒）内至少10个键被更改则进行快照。</p>
<p>在redis.conf中：</p>
<p>配置dir指定</p>
<p>rdb快照文件的位置;配置dbfilenam指定rdb快照文件的名称</p>
<p>Redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。</p>
<p>通常将记录一千万个字符串类型键、大小为1GB的快照文件载入到内存中需要花费20～30秒钟。</p>
<p>问题总结：</p>
<p>通过RDB方式实现持久化，一旦Redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化。</p>
<p>1.2AOF持久化</p>
<p>默认情况下Redis没有开启AOF（append only file）方式的持久化，访问一段存储一段,效率高.</p>
<p>可以通过appendonly参数开启：appendonly yes开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件</p>
<p>AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof，可以通过appendfilename参数修改：appendfilename appendonly.aof</p>
<p>2)主从复制（了解）</p>
<p>2.1什么是主从复制</p>
<p>持久化保证了即使redis服务重启也会丢失数据，因为redis服务重启后会将硬盘上持久化的数据恢复到内存中，但是当redis服务器的硬盘损坏了可能会导致数据丢失，如果通过redis的主从复制机制就可以避免这种单点故障，如下图：</p>
<p>说明：</p>
<p>n主redis中的数据有两个副本（replication）即从redis1和从redis2，即使一台redis服务器宕机其它两台redis服务也可以继续提供服务。</p>
<p>n主redis中的数据和从redis上的数据保持实时同步，当主redis写入数据时通过主从复制机制会复制到两个从redis服务上。</p>
<p>n只有一个主redis，可以有多个从redis。</p>
<p>n主从复制不会阻塞master，在同步数据时，master 可以继续处理client 请求</p>
<p>n一个redis可以即是主又是从，如下图：</p>
<p>2.2主从配置</p>
<p>2.2.1主redis配置</p>
<p>无需特殊配置。</p>
<p>2.2.2从redis配置</p>
<p>修改从redis服务器上的redis.conf文件，添加slaveof主redisip主redis端口</p>
<p>上边的配置说明当前该从redis服务器所对应的主redis是192.168.101.3，端口是6379</p>
<p>2.3主从复制过程</p>
<p>2.3.1完整复制</p>
<p>在redis2.8版本之前主从复制过程如下图：</p>
<p>复制过程说明：</p>
<p>1、slave 服务启动，slave 会建立和master 的连接，发送sync 命令。</p>
<p>2、master启动一个后台进程将数据库快照保存到RDB文件中</p>
<p>注意：此时如果生成RDB文件过程中存在写数据操作会导致RDB文件和当前主redis数据不一致，所以此时master 主进程会开始收集写命令并缓存起来。</p>
<p>3、master 就发送RDB文件给slave</p>
<p>4、slave 将文件保存到磁盘上，然后加载到内存恢复</p>
<p>5、master把缓存的命令转发给slave</p>
<p>注意：后续master 收到的写命令都会通过开始建立的连接发送给slave。</p>
<p>当master 和slave 的连接断开时slave 可以自动重新建立连接。如果master 同时收到多个slave 发来的同步连接命令，只会启动一个进程来写数据库镜像，然后发送给所有slave。</p>
<p>完整复制的问题：</p>
<p>在redis2.8之前从redis每次同步都会从主redis中复制全部的数据，如果从redis是新创建的从主redis中复制全部的数据这是没有问题的，但是，如果当从redis停止运行，再启动时可能只有少部分数据和主redis不同步，此时启动redis仍然会从主redis复制全部数据，这样的性能肯定没有只复制那一小部分不同步的数据高。</p>
<p>2.3.2部分复制</p>
<p>部分复制说明：</p>
<p>从机连接主机后，会主动发起 PSYNC 命令，从机会提供 master的runid(机器标识，随机生成的一个串) 和 offset（数据偏移量，如果offset主从不一致则说明数据不同步），主机验证 runid 和 offset 是否有效， runid 相当于主机身份验证码，用来验证从机上一次连接的主机，如果runid验证未通过则，则进行全同步，如果验证通过则说明曾经同步过，根据offset同步部分数据。</p>
<p>2)redis是一个nosql(not only sql不仅仅只有sql)数据库.翻译成中文叫做非关系型型数据库.</p>
<p>关系型数据库:以二维表形式存储数据</p>
<p>非关系型数据库: 以键值对形式存储数据(key, value形式)</p>
<p>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库。它通过提供多种键值数据类型来适应不同场景下的存储需求，</p>
<p>目前为止Redis支持的键值数据类型如下：</p>
<p>字符串类型</p>
<p>散列类型</p>
<p>列表类型</p>
<p>集合类型</p>
<p>有序集合类型。</p>
<p>3)redis的应用场景</p>
<p>缓存（数据查询、短连接、新闻内容、商品内容等等）。（最多使用）</p>
<p>分布式集群架构中的session分离。</p>
<p>聊天室的在线好友列表。</p>
<p>任务队列。（秒杀、抢购、12306等等）</p>
<p>应用排行榜。</p>
<p>网站访问统计。</p>
<p>数据过期处理（可以精确到毫秒）</p>
<p>redis是将数据存放到内存中,由于内容存取速度快所以redis被广泛应用在互联网项目中,</p>
<p>redis有点:存取速度快,官方称读取速度会达到30万次每秒,写速度在10万次每秒最有,具体限制于硬件.</p>
<p>缺点:对持久化支持不够良好,</p>
<p>所以redis一般不作为数据的主数据库存储,一般配合传统的关系型数据库使用.</p>
<p>4) redis应用领域</p>
<p>分布式缓存</p>
<p>分布式session</p>
<p>保存博客或者论坛的留言回复等.</p>
<p>总之是用在数据量大,并发量高的情况下</p>
<h2 id="谈下DUBBO"><a href="#谈下DUBBO" class="headerlink" title="谈下DUBBO?"></a>谈下DUBBO?</h2><p>Dubbo就是资源调度和治理中心的管理工具。</p>
<p>调用关系说明：</p>
<p>\0. 服务容器负责启动，加载，运行服务提供者。</p>
<p>\1. 服务提供者在启动时，向注册中心注册自己提供的服务。</p>
<p>\2. 服务消费者在启动时，向注册中心订阅自己所需的服务。</p>
<p>\3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p>
<p>\4. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>
<p>\5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>
<h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题?"></a>解决跨域问题?</h2><p>JSONP–&gt;Script Tags</p>
<h2 id="秒杀方案："><a href="#秒杀方案：" class="headerlink" title="秒杀方案："></a>秒杀方案：</h2><p>1、把商品的数量放到redis中。</p>
<p>2、秒杀时使用decr命令对商品数量减一。如果不是负数说明抢到。</p>
<p>3、一旦返回数值变为0说明商品已售完。</p>
<h2 id="ZOOKeeper"><a href="#ZOOKeeper" class="headerlink" title="ZOOKeeper?"></a>ZOOKeeper?</h2><p>Zookeeper 作为一个分布式的服务框架，主要用来解决分布式集群中应用系统的一致性问题，它能提供基于类似于文件系统的目录节点树方式的数据存储，但是 Zookeeper 并不是用来专门存储数据的，它的作用主要是用来维护和监控你存储的数据的状态变化。</p>
<p>通过监控这些数据状态的变化，从而可以达到基于数据的集群管理</p>
<p>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力小。使用dubbo-2.3.3以上版本，建议使用zookeeper注册中心。</p>
<p>Zookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbo服务的注册中心，工业强度较高，可用于生产环境，并推荐使用</p>
<h2 id="ActiveMQ的消息形式"><a href="#ActiveMQ的消息形式" class="headerlink" title="ActiveMQ的消息形式"></a>ActiveMQ的消息形式</h2><p>一种是点对点的，即一个生产者和一个消费者一一对应；可进行缓存,只允许单人登录查看</p>
<p>另一种是发布/订阅模式，即一个生产者产生消息并进行发送后，可以由多个消费者进行接收。无法进行缓存,支持多人访问.</p>
<p>JMS定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一些不同形式的数据，提供现有消息格式的一些级别的兼容性。</p>
<p>StreamMessage – Java原始值的数据流</p>
<p>MapMessage–一套名称-值对</p>
<p>TextMessage–一个字符串对象</p>
<p>ObjectMessage–一个序列化的 Java对象</p>
<p>BytesMessage–一个字节的数据流</p>
<p>1.订单系统</p>
<p>1.1.功能分析</p>
<p>1、在购物车页面点击“去结算”按钮跳转到订单确认页面。</p>
<p>a)展示商品列表</p>
<p>b)配送地址列表</p>
<p>c)选择支付方式</p>
<p>2、展示订单确认页面之前，应该确认用户身份。</p>
<p>a)使用拦截器实现。</p>
<p>b)Cookie中取token</p>
<p>c)取不到token跳转到登录页面</p>
<p>d)取到token，根据token查询用户信息。</p>
<p>e)如果没有用户信息，登录过期跳转到登录页面</p>
<p>f)取到用户信息，放行。</p>
<p>3、提交订单</p>
<p>a)生成订单</p>
<p>b)展示订单提交成功页面。</p>
<p>订单系统系统：订单确认页面、订单提交成功页面。</p>
<p>订单服务系统</p>
<p>1.1.展示订单确认页面</p>
<p>1.1.1.功能分析</p>
<p>1、在购物车页面点击“去结算”按钮跳转到订单确认页面。</p>
<p>2、请求的url：</p>
<p>/order/order-cart</p>
<p>3、参数：没有参数。</p>
<p>4、购物车商品数据从cookie中取出来的。可以在订单系统中取到cookie中的购物车数据。</p>
<p>5、配送地址列表，需要用户登录。需要根据用户id查询收货地址列表。静态数据。</p>
<p>6、支付方式。静态数据。</p>
<p>7、返回值：逻辑视图String，展示订单确认页面。</p>
<p>1.1.2.Dao层、Service层（没有）</p>
<p>需要根据用户id查询收货地址列表。没有此功能。</p>
<p>1.1.3.表现层</p>
<p>请求的url：/order/order-cart</p>
<p>参数：无</p>
<p>业务逻辑：</p>
<p>从cookie中取商品列表展示到页面。</p>
<p>返回值：逻辑视图。</p>
<p>1.1.用户身份认证</p>
<p>在展示订单确认页面之前，需要对用户身份进行认证，要求用户必须登录。</p>
<p>1.1.1.功能分析</p>
<p>1、使用springmvc的拦截器实现。需要实现一个接口HandlerInterceptor接口。</p>
<p>2、业务逻辑</p>
<p>a)从cookie中取token。</p>
<p>b)没有token，需要跳转到登录页面。</p>
<p>c)有token。调用sso系统的服务，根据token查询用户信息。</p>
<p>d)如果查不到用户信息。用户登录已经过期。需要跳转到登录页面。</p>
<p>e)查询到用户信息。放行。</p>
<p>3、在springmvc.xml中配置拦截器。</p>
<p>1.1.2.拦截器实现</p>
<p>1.1.1.功能分析</p>
<p>1、在订单确认页面点击“提交订单”按钮生成订单。</p>
<p>2、请求的url：/order/create</p>
<p>3、参数：提交的是表单的数据。保存的数据：订单、订单明细、配送地址。</p>
<p>a)向tb_order中插入记录。</p>
<p>i.订单号需要手动生成。</p>
<p>要求订单号不能重复。</p>
<p>订单号可读性号。</p>
<p>可以使用redis的incr命令生成订单号。订单号需要一个初始值。</p>
<p>ii.Payment：表单数据</p>
<p>iii.payment_type：表单数据</p>
<p>iv.user_id：用户信息</p>
<p>v.buyer_nick：用户名</p>
<p>vi.其他字段null</p>
<p>b)向tb_order_item订单明细表插入数据。</p>
<p>i.Id：使用incr生成</p>
<p>ii.order_id：生成的订单号</p>
<p>iii.其他的都是表单中的数据。</p>
<p>c)tb_order_shipping，订单配送信息</p>
<p>i.order_id：生成的订单号</p>
<p>ii.其他字段都是表单中的数据。</p>
<p>d)使用pojo接收表单的数据。</p>
<p>可以扩展TbOrder，在子类中添加两个属性一个是商品明细列表，一个是配送信息。</p>
<p>把pojo放到taotao-order-interface工程中。</p>
<p>业务逻辑：</p>
<p>1、接收表单的数据</p>
<p>2、生成订单id</p>
<p>3、向订单表插入数据。</p>
<p>4、向订单明细表插入数据</p>
<p>5、向订单物流表插入数据。</p>
<p>6、返回TaotaoResult。</p>
<p>返回值：TaotaoResult</p>
<p>1.1.1.Dao层</p>
<p>可以使用逆向工程。</p>
<p>1.1.2.Service层</p>
<p>参数：OrderInfo</p>
<h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>单点登录就是我们是做了分布式，tomcat集群之后会有session复制的问题，影响利群数量。所以把注册登录拿出来单独做了一个单点登录系统。做的时候是用的redis，key是用uuid生成的一个token,类似于session id,是用户的唯一标识，value是用户的信息。设置了有效期是7天。然后把redis放到了cookie中，实现了cookie的二级跨域。当我们进行操作时，首先要从cookie里面取出token如果取不到，就跳到单点登录系统进行登录操作如果取到了，再看看token有没有过期，如果过期了，也是跳到单点登录系统登录一下，没过期就继续用户的操作。密码进行了加密，用Md5</p>
<h2 id="HashMap-和-HashTable-的区别"><a href="#HashMap-和-HashTable-的区别" class="headerlink" title="HashMap 和 HashTable 的区别"></a>HashMap 和 HashTable 的区别</h2><p>1）容器整体结构：</p>
<ul>
<li><code>HashMap</code>的<code>key</code>和<code>value</code>都允许为<code>null</code>，<code>HashMap</code>遇到<code>key</code>为<code>null</code>的时候，调用<code>putForNullKey</code>方法进行处理，而对<code>value</code>没有处理。</li>
<li><code>Hashtable</code>的<code>key</code>和<code>value</code>都不允许为<code>null</code>。<code>Hashtable</code>遇到<code>null</code>，直接返回<code>NullPointerException</code>。</li>
</ul>
<p>2） 容量设定与扩容机制：</p>
<ul>
<li><code>HashMap</code>默认初始化容量为 16，并且容器容量一定是2的n次方，扩容时，是以原容量 2倍 的方式 进行扩容。</li>
<li><code>Hashtable</code>默认初始化容量为 11，扩容时，是以原容量 2倍 再加 1的方式进行扩容。即<code>int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</code>。</li>
</ul>
<p>3） 散列分布方式（计算存储位置）：</p>
<ul>
<li><code>HashMap</code>是先将<code>key</code>键的<code>hashCode</code>经过扰动函数扰动后得到<code>hash</code>值，然后再利用 <code>hash &amp; (length - 1)</code>的方式代替取模，得到元素的存储位置。</li>
<li><code>Hashtable</code>则是除留余数法进行计算存储位置的（因为其默认容量也不是2的n次方。所以也无法用位运算替代模运算），<code>int index = (hash &amp; 0x7FFFFFFF) % tab.length;</code>。</li>
<li>由于<code>HashMap</code>的容器容量一定是2的n次方，所以能使用<code>hash &amp; (length - 1)</code>的方式代替取模的方式计算元素的位置提高运算效率，但<code>Hashtable</code>的容器容量不一定是2的n次方，所以不能使用此运算方式代替。</li>
</ul>
<p>4）线程安全（最重要）：</p>
<ul>
<li><code>HashMap</code> 不是线程安全，如果想线程安全，可以通过调用<code>synchronizedMap(Map&lt;K,V&gt; m)</code>使其线程安全。但是使用时的运行效率会下降，所以建议使用<code>ConcurrentHashMap</code>容器以此达到线程安全。</li>
<li><code>Hashtable</code>则是线程安全的，每个操作方法前都有<code>synchronized</code>修饰使其同步，但运行效率也不高，所以还是建议使用<code>ConcurrentHashMap</code>容器以此达到线程安全。</li>
</ul>
<p>因此，<code>Hashtable</code>是一个遗留容器，如果我们不需要线程同步，则建议使用<code>HashMap</code>，如果需要线程同步，则建议使用<code>ConcurrentHashMap</code>。</p>
<h2 id="ArrayList和LinkedList-的区别"><a href="#ArrayList和LinkedList-的区别" class="headerlink" title="ArrayList和LinkedList 的区别"></a>ArrayList和LinkedList 的区别</h2><ol>
<li>LinkedList内部存储的是<code>Node&lt;E&gt;</code>，不仅要维护数据域，还要维护<code>prev</code>和<code>next</code>，如果LinkedList中的结点特别多，则LinkedList比ArrayList更占内存。</li>
<li>插入删除操作效率：<br>LinkedList在做插入和删除操作时，插入或删除头部或尾部时是高效的，操作越靠近中间位置的元素时，需要遍历查找，速度相对慢一些，如果在数据量较大时，每次插入或删除时遍历查找比较费时。所以LinkedList插入与删除，慢在遍历查找，快在只需要更改相关结点的引用地址。<br>ArrayList在做插入和删除操作时，插入或删除尾部时也一样是高效的，操作其他位置，则需要批量移动元素，所以ArrayList插入与删除，快在遍历查找，慢在需要批量移动元素。</li>
<li>循环遍历效率：</li>
</ol>
<ul>
<li>由于ArrayList实现了<code>RandomAccess</code>随机访问接口，所以使用for(int i = 0; i &lt; size; i++)遍历会比使用Iterator迭代器来遍历快</li>
</ul>
<ul>
<li>而由于LinkedList未实现<code>RandomAccess</code>接口，所以推荐使用Iterator迭代器来遍历数据。</li>
<li>因此，如果我们需要频繁在列表的中部改变插入或删除元素时，建议使用LinkedList，否则，建议使用ArrayList，因为ArrayList遍历查找元素较快，并且只需存储元素的数据域，不需要额外记录其他数据的位置信息，可以节省内存空间。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 基础面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础面试题 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
